{
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\__init__.py:8a80a2bc6748a692b84f22915c1f05aab0d76107b87bb99ed546ad29a5c6436f:8a80a2bc6748a692b84f22915c1f05aab0d76107b87bb99ed546ad29a5c6436f": "This module defines the top-level package for a DataMiner desktop application. It exposes two main components: a configuration management system through ConfigManager and get_user_config_dir, and a logging setup function named setup_logging. The module serves as an entry point for accessing core application configuration and logging functionality.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\__main__.py:9bfa82e010716e6872821cbf1e134beb20008404d4e9507801b753961a8818d8:9bfa82e010716e6872821cbf1e134beb20008404d4e9507801b753961a8818d8": "Module initializes and runs a PyQt6 desktop application for DataMiner. Creates application instance with specified services and displays main window. Handles application lifecycle including startup, execution, and shutdown procedures. Sets up logging and manages service dependencies for project management, data ingestion, document hierarchy, export, backup, and settings functionality. Executes the main application loop and ensures proper cleanup of resources upon termination.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\__main__.py:main:2f6c32c5d7475fad743af7b0224ca5abe952627b75e0760dc2c81d05dd8328f2:2f6c32c5d7475fad743af7b0224ca5abe952627b75e0760dc2c81d05dd8328f2": "The `main` function initializes and starts the PyQt6 desktop application for offline document processing and question-answering. It sets up logging, creates a QApplication instance, and initializes various service objects including settings, progress tracking, LMStudio client, project management, document ingestion, hierarchy handling, export functionality, and backup operations. A main window is instantiated with these services and displayed. The function enters the application event loop, and upon termination, ensures that background services are shut down gracefully before exiting.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\config.py:00760e4343f8021c694e3ba6d3a398a489891f8808cb34e31b20c4da3e0f2259:00760e4343f8021c694e3ba6d3a398a489891f8808cb34e31b20c4da3e0f2259": "The module provides functionality for managing application configuration settings stored in either JSON or INI format. It defines a `ConfigManager` class to load, save, and update configuration data, along with a helper function `get_user_config_dir` that determines the appropriate directory for storing configuration files based on the operating system. The configuration directory is created if it does not exist. The `ConfigManager` supports specifying the format and filename for the configuration file, defaulting to JSON with a standard filename if none is provided. It handles reading and writing configuration data in the specified format, ensuring proper structure for INI files with sections and key-value pairs. The module also includes validation for format specification and update operations.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\config.py:ConfigManager:5b81a0bc12d6c71f4a94b8125771bc0a6bdbd22bd9bec757f757fa4943baa880:5b81a0bc12d6c71f4a94b8125771bc0a6bdbd22bd9bec757f757fa4943baa880": "The `ConfigManager` class handles loading, saving, and updating configuration data in either JSON or INI format, ensuring proper file handling and structure validation for each format. It initializes with an application name, format, and filename, setting up the configuration directory and path accordingly. The class supports merging updates into existing configurations and provides a string representation for debugging purposes.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\config.py:ConfigManager:__init__:4a88c3f8df7b4737879f82a7469bb43433f2e43c2a0445f414fbc305859cb32e:4a88c3f8df7b4737879f82a7469bb43433f2e43c2a0445f414fbc305859cb32e": "Initializes a configuration object with specified application name, format, and filename parameters. Sets the configuration directory and file path based on the provided parameters, validating that the format is either 'json' or 'ini'. Uses default filenames when none are specified, and raises a ValueError for invalid format specifications.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\config.py:ConfigManager:__repr__:2fae92969a19e63ec73970c36ab697232eafac9ec84a2d05f657b6876eb26297:2fae92969a19e63ec73970c36ab697232eafac9ec84a2d05f657b6876eb26297": "Defines a representation method for a ConfigManager class that returns a string displaying the application name, configuration format, and configuration path.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\config.py:ConfigManager:load:4b1f074028f5ef9d143c25947c14c70777456685acb0a54185688f08fd3a9963:4b1f074028f5ef9d143c25947c14c70777456685acb0a54185688f08fd3a9963": "Function that loads configuration data from a file path, returning a dictionary. Returns an empty dictionary when the file does not exist. Supports both JSON and INI-style configuration formats. For JSON files, uses the json module to parse the file contents. For other formats, uses ConfigParser to read sections and their key-value pairs. The configuration file is opened with UTF-8 encoding for both formats.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\config.py:ConfigManager:save:bf49d0e2bb85463741c3d908d50e6af084dc52ac231b19fdd9a524b0e67f4564:bf49d0e2bb85463741c3d908d50e6af084dc52ac231b19fdd9a524b0e67f4564": "Function saves configuration data to disk in either JSON or INI format based on the instance's format attribute. For JSON format, it writes the data as a formatted JSON file with indentation and sorted keys. For INI format, it converts the data into an INI-compatible structure using ConfigParser, validating that each section contains mapping values before writing to the configuration file path.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\config.py:ConfigManager:update:61a36f9efc99e9f151c4f0155c2627ec12e51a4343ab5174dc12f1193b97ac6a:61a36f9efc99e9f151c4f0155c2627ec12e51a4343ab5174dc12f1193b97ac6a": "Function updates stored configuration with provided data and returns the updated configuration. It loads existing configuration, applies updates based on configuration format (JSON or INI), validates INI section structures, saves the modified configuration, and returns the complete updated configuration. For JSON format, it directly updates the configuration dictionary. For INI format, it processes sections and validates that each section contains a mapping before updating values. The function raises value errors for invalid INI structure during updates.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\config.py:__init__:372622c3577e5be1a3658d7ef3da506581d6610136aa428ff8fded814f4b932f:372622c3577e5be1a3658d7ef3da506581d6610136aa428ff8fded814f4b932f": "Initializes a `ConfigManager` instance with specified application name, configuration format, and filename. Sets the configuration directory and path based on the provided parameters, ensuring the format is either 'json' or 'ini'. Raises a `ValueError` if an invalid format is specified. Uses default filenames for JSON and INI formats if no filename is provided.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\config.py:__init__:be2f75effe14f18ff4eb56b9b5c2cfb045e3eeeea0e52d2b1bd93d37c22b7019:be2f75effe14f18ff4eb56b9b5c2cfb045e3eeeea0e52d2b1bd93d37c22b7019": "Initializes a ConfigManager instance with specified application name, configuration format, and filename. Sets the configuration directory using the user's config directory and constructs the full path to the configuration file. Validates that the format is either 'json' or 'ini', raising a ValueError if not. If no filename is provided, defaults to a JSON filename for JSON format or an INI filename for INI format.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\config.py:__repr__:ba95ea208dbd9a94b852e5cac1e28d1dc7e51985f929237add44cf7543a408fa:ba95ea208dbd9a94b852e5cac1e28d1dc7e51985f929237add44cf7543a408fa": "The `__repr__` method of the `ConfigManager` class provides a string representation of the object for debugging purposes. It returns a formatted string that includes the application name, configuration format, and the path to the configuration file. The method is marked as a debugging helper and is excluded from coverage analysis.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\config.py:__repr__:bf5f4ae69adcd88649cbf734b3472f530b0a74c6c349e0605268a36ef75493ef:bf5f4ae69adcd88649cbf734b3472f530b0a74c6c349e0605268a36ef75493ef": "The `__repr__` method of the `ConfigManager` class returns a string representation of the object for debugging purposes. It displays the application name, configuration format, and configuration file path in a formatted string output.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\config.py:get_user_config_dir:c74d33e8b05c2eb329e288026cfab7e2c3c55b9f5da413576300e85d85ae2ff4:c74d33e8b05c2eb329e288026cfab7e2c3c55b9f5da413576300e85d85ae2ff4": "The function `get_user_config_dir` returns the path to a configuration directory for the current user, creating it if it does not exist. On Windows, the directory is located under the `%APPDATA%` environment variable, while on other platforms it uses the XDG base directory specification or defaults to `~/.config`. The function accepts an optional `app_name` parameter to specify the name of the configuration directory, defaulting to `CONFIG_DIR_NAME`. The directory is created with all necessary parent directories using `mkdir(parents=True, exist_ok=True)`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\config.py:load:17041653b181c8f111f1a1f9035d0f6cc18df2019f8c3b983d3d5690e485df87:17041653b181c8f111f1a1f9035d0f6cc18df2019f8c3b983d3d5690e485df87": "Loads configuration data from a file path, returning a dictionary representation. For JSON format, it parses the file directly. For other formats, it uses ConfigParser to read and convert sections into nested dictionaries. Returns an empty dictionary if the configuration file does not exist.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\config.py:load:85e00e33ab3d6a288f5fb877aa90481312d7037c3b05ba6932383958a2675f77:85e00e33ab3d6a288f5fb877aa90481312d7037c3b05ba6932383958a2675f77": "The `load` method reads configuration data from a specified file path and returns it as a dictionary. If the configuration file does not exist, it returns an empty dictionary. The method supports loading configuration in either JSON or INI format, depending on the value of `self.format`. For JSON files, it uses `json.load()` to parse the file. For INI files, it uses `configparser.ConfigParser` to read sections and their key-value pairs, returning a nested dictionary where each top-level key corresponds to a section in the INI file.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\config.py:save:73d2ec180c473bca92769e7629658c40d43e3218841cd3e2b85923e5e62584e0:73d2ec180c473bca92769e7629658c40d43e3218841cd3e2b85923e5e62584e0": "The `save` method persists configuration data to disk in either JSON or INI format, depending on the `format` attribute of the `ConfigManager` instance. For JSON format, it writes the data to a file with indentation and sorted keys. For INI format, it uses `configparser.ConfigParser` to structure the data into sections and writes it to the file. The method raises a `ValueError` if INI format is used with non-mapping values per section.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\config.py:save:7b2a85506777f55286b63049e70e18e06d60cb9bd645318a780b8d6154014be0:7b2a85506777f55286b63049e70e18e06d60cb9bd645318a780b8d6154014be0": "The `save` method persists configuration data to disk in either JSON or INI format based on the instance's format attribute. For JSON format, it writes the data as a formatted JSON file with indentation and sorted keys. For INI format, it converts the data into an INI-compatible structure using ConfigParser, validating that each section contains a mapping of key-value pairs, then writes the parsed configuration to the file. The method raises a ValueError if INI format is used with non-mapping values per section.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\config.py:update:6bf9ee7671a8b10ade8a33d5d31cb0a6813879c9e850e667e3c3823d175573d8:6bf9ee7671a8b10ade8a33d5d31cb0a6813879c9e850e667e3c3823d175573d8": "Updates the stored configuration with the provided data and returns the updated configuration. For JSON format, it directly updates the configuration with the data. For INI format, it processes data by section, ensuring each section's values are mappings and updating the existing section data accordingly. Raises ValueError if INI updates contain non-mapping values or if existing sections are not mappings. Saves the updated configuration after processing.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\config.py:update:e3f7a3e270b24db30338c13557c00ec6eeb9dda516eba9203128093373c73453:e3f7a3e270b24db30338c13557c00ec6eeb9dda516eba9203128093373c73453": "The `update` method in the `ConfigManager` class updates the stored configuration with provided data and returns the updated configuration. It first loads the current configuration, then applies the updates based on the configuration format (JSON or INI). For JSON, it directly updates the loaded dictionary with the provided data. For INI format, it ensures that each section in the provided data is a mapping and that the existing section in the configuration is also a mapping before updating. After applying the updates, it saves the modified configuration and returns the updated version.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\__init__.py:bab47b0a377cc00105d52fe4b2e6acde6b995a4baef588d3da78179cad9777ef:bab47b0a377cc00105d52fe4b2e6acde6b995a4baef588d3da78179cad9777ef": "This module defines document ingestion utilities for a DataMiner application. It establishes a namespace for document processing functionality while currently containing no implemented functions or classes. The module uses a dunder all list to explicitly control its public API, though it is currently empty. The docstring indicates the module's purpose in handling document ingestion tasks within the DataMiner context.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\parsers\\__init__.py:4ff840b267db082e24c3b450873d5468d8235d21763b0f0c45d2529cc3df7fe1:4ff840b267db082e24c3b450873d5468d8235d21763b0f0c45d2529cc3df7fe1": "Defines data structures for representing parsed document content, including page-level text and hierarchical sections. Provides a framework for parsing various file formats through registered parsers, with support for PDF, DOCX, TXT, Markdown, and HTML files. Includes functionality to register custom parsers and parse files based on their extensions. Exports classes for structured document representation and utility functions for file parsing and extension handling.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\parsers\\__init__.py:DocumentSection:1a9d4507d33766e92b351eabb24469f650e7a6d88cdc8a3a37dcac45f5cc40a0:1a9d4507d33766e92b351eabb24469f650e7a6d88cdc8a3a37dcac45f5cc40a0": "The `DocumentSection` class represents a structured section of a document within the offline document processing system, designed for organizing and managing hierarchical content. It provides a method to serialize its instance into a dictionary format using the `asdict` function from the `dataclasses` module, enabling easy conversion of object data for storage or transmission. This class supports the broader functionality of parsing, indexing, and retrieving document content without requiring network connectivity.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\parsers\\__init__.py:DocumentSection:to_dict:e018cf7f752a69708362af11b5ed390ca1c76d91f56f2c253f4a38e40b78a2b5:e018cf7f752a69708362af11b5ed390ca1c76d91f56f2c253f4a38e40b78a2b5": "Function that converts an object instance into a dictionary representation using the `asdict` function from the `dataclasses` module. The function takes no parameters beyond `self` and returns a dictionary containing all fields of the dataclass instance along with their values.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\parsers\\__init__.py:PageContent:93654b0a18d453f695e1ae60cf9221acbb00dfab70e82691b84293e139a874ae:93654b0a18d453f695e1ae60cf9221acbb00dfab70e82691b84293e139a874ae": "The `PageContent` class provides a structured representation of page-level content within the document processing system. It offers serialization capabilities through the `to_dict` method, which converts the object's fields into a dictionary format for easy data handling and exchange. The class serves as a data container for organizing and representing individual pages of documents within the corpus management framework.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\parsers\\__init__.py:PageContent:to_dict:e018cf7f752a69708362af11b5ed390ca1c76d91f56f2c253f4a38e40b78a2b5:e018cf7f752a69708362af11b5ed390ca1c76d91f56f2c253f4a38e40b78a2b5": "Function that converts an object instance into a dictionary representation using the `asdict` function from the `dataclasses` module. The function takes no parameters beyond `self` and returns a dictionary containing all fields of the dataclass instance along with their values.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\parsers\\__init__.py:ParsedDocument:919ea80430477ba9791e11d95a7e947ac401966308800d88421dbebd9f471115:919ea80430477ba9791e11d95a7e947ac401966308800d88421dbebd9f471115": "The `ParsedDocument` class represents a structured document object that encapsulates parsed content, metadata, sections, pages, and OCR-related flags. It provides a method to serialize this data into a JSON-formatted string for storage or transmission. The class serves as a data container for processed documents within the offline document processing and question-answering system.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\parsers\\__init__.py:ParsedDocument:to_json:5304195b8f0cc0f978720557a254830154a735e3db88d50ab162437885b04ff3:5304195b8f0cc0f978720557a254830154a735e3db88d50ab162437885b04ff3": "Function converts structured data into a JSON string representation containing metadata, sections, pages, and OCR-related attributes.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\parsers\\__init__.py:ParserError:7918c18f41c5047a5db0afd321ada344a3c11f291050b974fe9a5e48826dd74d:7918c18f41c5047a5db0afd321ada344a3c11f291050b974fe9a5e48826dd74d": "The `ParserError` class is defined within a document processing and question-answering application that handles offline AI model interactions. It is designed to represent errors that may occur during the parsing of various document types such as DOCX, PDF, Markdown, and text files. The class serves as an exception type for signaling issues encountered while ingesting and processing documents within the application's corpus management system.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\parsers\\__init__.py:parse_file:8410b0fc108b4427dd6a1eee27085bd55ebed6cdaea47106e129b0d312eaae50:8410b0fc108b4427dd6a1eee27085bd55ebed6cdaea47106e129b0d312eaae50": "The function `parse_file` takes a file path as input and returns a `ParsedDocument` instance. It resolves the path to an absolute path, checks if the file exists, determines the file's suffix, and retrieves the appropriate parser from a global dictionary `_PARSERS` based on the suffix. If the file does not exist or the file type is unsupported, it raises a `ParserError`. Otherwise, it uses the corresponding parser to parse the file and returns the resulting `ParsedDocument`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\parsers\\__init__.py:register_parser:6d3ce169cdbdc2f59166ff0b9e263404e5197f873e14439e19dd1cbcf816aa2c:6d3ce169cdbdc2f59166ff0b9e263404e5197f873e14439e19dd1cbcf816aa2c": "Registers a parser for the specified file suffixes. The function takes an iterable of file suffixes and a parser object, then maps each lowercase suffix to the provided parser in a global dictionary `_PARSERS`. This allows the system to associate specific parsing logic with file extensions for document ingestion.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\parsers\\__init__.py:to_dict:46ba956493ac756302045c5bffc6139e26cfb35273af5ebc9ab720bb6a805a4b:46ba956493ac756302045c5bffc6139e26cfb35273af5ebc9ab720bb6a805a4b": "The function `to_dict` converts the instance of the `PageContent` class into a dictionary representation. It utilizes the `asdict` function from the `dataclasses` module to serialize the object's fields into a dictionary, where keys are field names and values are the corresponding field values. The return type is specified as `dict[str, Any]`, indicating a dictionary with string keys and values of any type.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\parsers\\__init__.py:to_dict:57aa6982c43795a0949bf3e756b4314c3bb1805794539907fd10fac10e2afa0c:57aa6982c43795a0949bf3e756b4314c3bb1805794539907fd10fac10e2afa0c": "The function `to_dict` converts the `DocumentSection` instance into a dictionary representation using the `asdict` function from the `dataclasses` module. It returns a dictionary containing all the fields and their values from the class instance.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\parsers\\__init__.py:to_dict:a57d97838fe8b3c68d2b38c7ffb5898ea49084b3e66f427a297dc87bd12e107f:a57d97838fe8b3c68d2b38c7ffb5898ea49084b3e66f427a297dc87bd12e107f": "The function `to_dict` converts the instance of the `DocumentSection` class into a dictionary representation. It utilizes the `asdict` function from the `dataclasses` module to serialize the object's fields into a dictionary, where keys are field names and values are the corresponding field values. The return type is specified as `dict[str, Any]`, indicating a dictionary with string keys and values of any type.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\parsers\\__init__.py:to_dict:fdb428ca450673f1ba8978bf2d67a0b633975fbbbcf3ac6862266728c503425b:fdb428ca450673f1ba8978bf2d67a0b633975fbbbcf3ac6862266728c503425b": "The function `to_dict` converts the `PageContent` instance into a dictionary representation using the `asdict` function from the `dataclasses` module. It returns a dictionary containing all the fields and their values from the instance.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\parsers\\__init__.py:to_json:09aac6a878b0c2eb12e3402d1051aff0223f8ef470e2ad14e404d0f9520fcbd9:09aac6a878b0c2eb12e3402d1051aff0223f8ef470e2ad14e404d0f9520fcbd9": "The function `to_json` returns a JSON string representation of the parsed document's structured data. It constructs a dictionary containing the document's metadata, sections (converted to dictionaries), pages (converted to dictionaries), OCR status, and OCR hint, then serializes this dictionary into a JSON-formatted string using `json.dumps`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\parsers\\__init__.py:to_json:cab5873ad71ae719781dad3898ea539db836bae5f439bed86d565314b1f650cb:cab5873ad71ae719781dad3898ea539db836bae5f439bed86d565314b1f650cb": "The function `to_json` returns a JSON string representation of the document's structured data, including metadata, sections, pages, and OCR-related flags. It serializes these components into a dictionary and then converts the dictionary to a JSON-formatted string using `json.dumps`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\parsers\\docx_parser.py:9c076dd122e4bc36109e36956bd1e5591d8a5ee584740af4df8cbc2330ea98b9:9c076dd122e4bc36109e36956bd1e5591d8a5ee584740af4df8cbc2330ea98b9": "Module implements a DOCX document parser that extracts text content, headings, and metadata from Microsoft Word files. It processes paragraphs to identify heading styles and organizes content into sections with hierarchical levels. The parser retrieves core document properties including title, author, creation date, and modification timestamps. Extracted metadata is formatted with UTC timezone information for dates. Content is structured into document sections based on heading styles, with body text grouped under appropriate section titles. The parser returns a parsed document object containing combined text, metadata, structured sections, and page content. It handles missing python-docx dependency with a specific error message. Paragraphs are processed to build both flat body text and hierarchical section structure while filtering out empty sections.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\parsers\\docx_parser.py:_extract_core_properties:b7713349adda249a6b0bc431f7c6276c0aadd72e5799e87a0cc824c37c30fb5d:b7713349adda249a6b0bc431f7c6276c0aadd72e5799e87a0cc824c37c30fb5d": "The function `_extract_core_properties` extracts core metadata properties from a document object. It retrieves standard metadata attributes such as title, subject, author, category, comments, keywords, and last modified by. Additionally, it processes datetime fields including created, modified, and last printed, ensuring they are timezone-aware and formatted in ISO format before adding them to the metadata dictionary. The function returns a dictionary containing all successfully extracted metadata properties.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\parsers\\docx_parser.py:parse_docx:8b89158efa8b3e62dd37482198db3d0dc35b6bd5ebdd5e34a84192e401ca938e:8b89158efa8b3e62dd37482198db3d0dc35b6bd5ebdd5e34a84192e401ca938e": "The function `parse_docx` extracts content from a Microsoft Word (.docx) document, returning a `ParsedDocument` object that includes the document's text, metadata, sections (with titles and levels derived from heading styles), and page content. It uses the `python-docx` library to read the document, processes paragraphs to identify headings and body text, organizes content into sections based on heading levels, and collects all text into a combined string. Empty sections are removed, and paragraph count is added to metadata. The function raises a `ParserError` if `python-docx` is not installed.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\parsers\\markdown_parser.py:a74b57094a72515505537836c10809cf71859a0e20644f53c82cb91592db68d1:a74b57094a72515505537836c10809cf71859a0e20644f53c82cb91592db68d1": "Module defines a Markdown parser that processes files into structured sections based on heading hierarchy. It reads text content from a file path, identifies heading lines using a regular expression, and organizes content into document sections. Each section contains a title, level, and content. The parser preserves the hierarchical structure of headings and returns a parsed document object with metadata including format, heading count, and page content.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\parsers\\markdown_parser.py:parse_markdown:3f228b428c04b41690ad202417475bb786ab0646a53708184b58e53117781d41:3f228b428c04b41690ad202417475bb786ab0646a53708184b58e53117781d41": "The function `parse_markdown` reads a Markdown file from a given path and parses its content into structured sections based on heading levels. It processes each line of the file, identifying headings using a regular expression and organizing subsequent lines into sections accordingly. Sections without content or title are filtered out. The function returns a `ParsedDocument` object containing the combined text, metadata including the format and number of headings, a list of document sections, and page content derived from the file's body.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\parsers\\pdf_parser.py:79fad8421412bd9e8fefc23a2ef1e1d22563d13cbc1187d8371be9eba1cf7872:79fad8421412bd9e8fefc23a2ef1e1d22563d13cbc1187d8371be9eba1cf7872": "Module provides utilities for extracting text and metadata from PDF files using PyMuPDF. Defines a function to parse PDF documents and return structured content including textual data, document sections, page information, and normalized metadata. Includes helper logic to convert date formats into ISO standard and detect when OCR might be needed due to lack of extractable text. Handles import errors and file reading exceptions during parsing.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\parsers\\pdf_parser.py:_to_datetime:f618268b9d97eec4bc759f526d886540a57cc86f4d61c4f37cdf6fe29565b525:f618268b9d97eec4bc759f526d886540a57cc86f4d61c4f37cdf6fe29565b525": "The function `_to_datetime` converts a PyMuPDF metadata value into ISO format. It handles datetime objects by ensuring they have timezone information and converting them to UTC, and it processes string representations of dates formatted as `D:YYYYMMDDHHmmSS` into ISO format datetime strings. If the input is not a recognized date format, it returns the original value or None.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\parsers\\pdf_parser.py:parse_pdf:ec897d5eefde8cc048e4b21f4dab67eeb9a1d3b143a7db869c59883e881fe8a4:ec897d5eefde8cc048e4b21f4dab67eeb9a1d3b143a7db869c59883e881fe8a4": "The function `parse_pdf` extracts textual content from a PDF file located at the specified path using PyMuPDF. It returns a `ParsedDocument` object containing the combined text, metadata, document sections, page content, and indicators of whether OCR is needed. The function handles potential import and file reading errors by raising a `ParserError`. Each page's text is collected, and metadata from the PDF is processed, with datetime fields normalized for consistency. If no text is found on any page, an OCR hint is included in the result. The PDF document is closed after processing, regardless of success or failure.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\parsers\\text_parser.py:9c77c9d7c3427b031add12a1f4247f93bc5e176c933c27512cd1e834b77136f2:9c77c9d7c3427b031add12a1f4247f93bc5e176c933c27512cd1e834b77136f2": "Module implements a plain text parser that reads files in binary mode and attempts to decode them using UTF-8 encoding. If UTF-8 decoding fails, it uses the chardet library to detect the encoding. If chardet is not available, it falls back to replacing invalid characters with a replacement character. The parser returns a ParsedDocument object containing the decoded text, detected encoding in metadata, a single document section, and a single page with the full text content.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\parsers\\text_parser.py:parse_text:e6104e2151db4dd02c9973fbf495a9281a396c8025f08490292b807c4c3facca:e6104e2151db4dd02c9973fbf495a9281a396c8025f08490292b807c4c3facca": "The function `parse_text` reads a plain-text file from a given path and attempts to detect its encoding. It first tries to decode the file using UTF-8. If that fails with a `UnicodeDecodeError`, it uses the `chardet` library to detect the encoding, falling back to UTF-8 with replacement characters if detection fails or is unavailable. The function returns a `ParsedDocument` object containing the decoded text, detected encoding in metadata, a single section, and a single page.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\preview.py:PreviewService:32d10c09ba7cde1c9fb5d8323c47fd51e1c38f1460ce398c0e6d8539d31c4aed:32d10c09ba7cde1c9fb5d8323c47fd51e1c38f1460ce398c0e6d8539d31c4aed": "The `PreviewService` class provides functionality for retrieving and previewing document content, including highlighted text snippets based on search terms. It supports extracting specific pages from documents and assembling structured preview data with metadata. The class handles operations such as finding relevant pages, applying highlights to text, and building contextual previews for display or further processing.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\preview.py:PreviewService:__init__:af202238675443ae09c987f0d1cc61fed7d7d36ed688bc5c2091545d5acd5d9b:af202238675443ae09c987f0d1cc61fed7d7d36ed688bc5c2091545d5acd5d9b": "Initializes an object with a database manager and creates an ingest document repository using the provided database manager.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\preview.py:PreviewService:_apply_highlight:1914c7e6b3f55f32d363849d89896f2499c7e755174831fb395fb728cb070794:1914c7e6b3f55f32d363849d89896f2499c7e755174831fb395fb728cb070794": "Function that applies HTML mark tags to highlight specified terms within text, processing terms by length in descending order to avoid partial matches, using case-insensitive regular expression replacement.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\preview.py:PreviewService:_assemble_preview:0ec829965ee92227c1f86cf7e1905bdd8021be40ede7e9e57627dcd33f7eded4:0ec829965ee92227c1f86cf7e1905bdd8021be40ede7e9e57627dcd33f7eded4": "Function that constructs a preview dictionary from a record and snippet, including document identifiers, content fields, pagination information, and metadata. Takes a record dictionary, snippet string, and optional page number and offset parameters, returning a new dictionary with standardized preview structure containing document ID, path, version, snippet content, positioning data, preview content, OCR status and message, page information, section data, and metadata.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\preview.py:PreviewService:_build_highlight:e70c39c2232776466dd42418d8cabe5b30ffbe00334a19436fd61cda2c82d708:e70c39c2232776466dd42418d8cabe5b30ffbe00334a19436fd61cda2c82d708": "Function identifies the best matching term from a list within input text, determines a contextual snippet around the match, and applies highlighting to that snippet. It returns the highlighted snippet and the starting position of the snippet within the original text. If no matches are found, it returns the beginning of the text up to the specified character limit with highlighting applied, and a start position of zero.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\preview.py:PreviewService:_find_page:574d013f55b5ca085242200d49b75c6fbbb28c5aa74f7c457ad5720890efcb2f:574d013f55b5ca085242200d49b75c6fbbb28c5aa74f7c457ad5720890efcb2f": "Function that searches through a list of pages for content matching given terms and returns the page number of the first match found. Takes a list of page dictionaries containing text and number fields, and a sequence of search terms. Returns the integer page number if a match is found, or None if no match is found or if the page number cannot be converted to an integer. The search is case-insensitive and matches any of the provided terms within the page content.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\preview.py:PreviewService:get_highlighted_passages:8cf3f42c397c71f2333137466c71bd1af207d14c34d092c69981c9b0c5c592b4:8cf3f42c397c71f2333137466c71bd1af207d14c34d092c69981c9b0c5c592b4": "Function retrieves highlighted text snippets from a document based on specified terms, with optional context length parameter. Returns a dictionary containing the formatted preview with highlights applied. Uses document text or stored preview as source, builds highlighted snippets using internal helper methods, and includes page number information when available. Raises LookupError for invalid document IDs.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\preview.py:PreviewService:get_page:e5cc27976d0b850ac68fb17b22c09476c727161a90106cefc9032f3e9141a298:e5cc27976d0b850ac68fb17b22c09476c727161a90106cefc9032f3e9141a298": "Function retrieves full text of a specified page from a document by looking up the document ID and page number, returning a dictionary containing the document ID, page number, and page text. Raises LookupError if the document ID is invalid or if the specified page number is not found within the document.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\preview.py:__init__:6cc4f7739a179344d1954a237ba8cf70d6e2442f552e5e05cc143b7a28795216:6cc4f7739a179344d1954a237ba8cf70d6e2442f552e5e05cc143b7a28795216": "Initializes the `PreviewService` instance with a database manager and sets up the `IngestDocumentRepository` for document management.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\preview.py:__init__:abda8fa356c334c533c133069d27ef057f257e2364d39de72ea7c324e279db72:abda8fa356c334c533c133069d27ef057f257e2364d39de72ea7c324e279db72": "Initializes the PreviewService with a database manager and sets up the document repository for ingesting documents.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\preview.py:_apply_highlight:3b020b804fef4cc42a8255c412ee106137123375ce6d3570f3f528e5ae6d1de5:3b020b804fef4cc42a8255c412ee106137123375ce6d3570f3f528e5ae6d1de5": "The function `_apply_highlight` takes a text string and an iterable of terms, then wraps each occurrence of each term in the text with `<mark>` HTML tags. It processes terms by length (longest first) to avoid partial matches interfering with longer matches, and uses case-insensitive regular expression matching. Empty terms are filtered out before processing.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\preview.py:_apply_highlight:4f376cbbc789c7c4e574899645d4d4a75b33e06d996fd95055d0cb8c32070047:4f376cbbc789c7c4e574899645d4d4a75b33e06d996fd95055d0cb8c32070047": "The function `_apply_highlight` takes a string `text` and an iterable of search terms `terms`, and returns the text with each term wrapped in `<mark>` HTML tags for highlighting. It processes the terms by sorting them in descending order of length to avoid partial matches, compiles a regular expression pattern for each term (case-insensitive), and substitutes occurrences of the term in the text with the marked version. Empty or invalid terms are filtered out before processing.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\preview.py:_assemble_preview:30209f433c9b7d8ac41ea00f110151461ab174b8a02f1d39234f73a6f2552052:30209f433c9b7d8ac41ea00f110151461ab174b8a02f1d39234f73a6f2552052": "The function `_assemble_preview` constructs and returns a dictionary containing preview-related information for a document record. It extracts specific fields from the input `record` dictionary, such as document ID, path, version, preview content, OCR status, page information, and metadata. The returned dictionary also includes the provided `snippet` and `offset`, as well as the optional `page` parameter, forming a structured preview object for use in the application's UI or processing pipeline.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\preview.py:_assemble_preview:851cce3ca3c3ac867ea92aa214f710ed88d5c50ffc01f044fcf4827e5cc88858:851cce3ca3c3ac867ea92aa214f710ed88d5c50ffc01f044fcf4827e5cc88858": "Assembles a preview dictionary from a record and snippet, including document metadata and preview-specific fields. Returns a dictionary containing document_id, path, version, snippet, offset, preview content, OCR status and message, page information, total pages, sections, and metadata from the input record.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\preview.py:_build_highlight:812c61432fe07b1a5b19c85aebd320051bc51e22a1bd05d3ffd37db3acf0a240:812c61432fe07b1a5b19c85aebd320051bc51e22a1bd05d3ffd37db3acf0a240": "The function `_build_highlight` takes a text string, a sequence of search terms, and a context character count to generate a highlighted text snippet. It searches for the first occurrence of any term in the text and creates a snippet centered around that occurrence, with a length determined by the context characters. If no terms are found, it returns the beginning of the text up to the context length. The function returns a tuple containing the highlighted snippet and the starting index of the snippet within the original text.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\preview.py:_build_highlight:b7c0cb004d50a8b18c6215f077802d6ba7f2855fc96f3a789667e8c633941c9b:b7c0cb004d50a8b18c6215f077802d6ba7f2855fc96f3a789667e8c633941c9b": "The function `_build_highlight` generates a highlighted text snippet from a given string based on provided search terms. It identifies the first occurrence of any term in the text and extracts a contextually centered snippet around it. If no terms are found, it returns the beginning of the text up to the specified character limit, also highlighted. The function returns a tuple containing the highlighted snippet and the starting index of the snippet within the original text.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\preview.py:_find_page:085441242844b9c644f0c23362f32879b0a593eaf56389a1e82d7c2f040508ad:085441242844b9c644f0c23362f32879b0a593eaf56389a1e82d7c2f040508ad": "The function `_find_page` searches through a list of pages to find the first page containing any of the specified terms. It takes a list of page dictionaries and a sequence of search terms, converts the terms to lowercase, and checks if any term exists within the lowercase content of each page's \"text\" field. If a match is found, it attempts to return the page number as an integer. If the page number cannot be converted to an integer or is invalid, it returns `None`. If no matching page is found, it returns `None`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\preview.py:_find_page:c4c043e08badb25889cab1d57d7f7aa622d06c33514031c912556aa45394b7e0:c4c043e08badb25889cab1d57d7f7aa622d06c33514031c912556aa45394b7e0": "The function `_find_page` searches through a list of page dictionaries to locate the first page containing any of the specified terms. It converts the search terms and page content to lowercase for case-insensitive matching. If a match is found, it attempts to extract and return the page number as an integer. If the page number cannot be converted to an integer or is invalid, it returns `None`. If no matching page is found, the function returns `None`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\preview.py:eb153e8390f5a818b3252477a54ed0577a6ffff8928a4b5ee767f6423d2675d3:eb153e8390f5a818b3252477a54ed0577a6ffff8928a4b5ee767f6423d2675d3": "The module defines a `PreviewService` class for generating highlighted text previews of ingested documents. It retrieves document data from a database, constructs snippets with emphasized terms using HTML `<mark>` tags, and provides functionality to fetch specific pages from documents. The service supports case-insensitive term matching, context-based snippet generation around search terms, and page number detection based on term presence in page content. Helper methods handle text highlighting, snippet building, page identification, and preview assembly. The class is initialized with a database manager and uses an `IngestDocumentRepository` for document access.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\preview.py:get_highlighted_passages:004ca8cc13d99b73c5d339aec22b534a7232d7efe17f71ec41a57cd8287111d1:004ca8cc13d99b73c5d339aec22b534a7232d7efe17f71ec41a57cd8287111d1": "Returns a snippet with highlighted terms for a given document ID. If no terms are provided, returns the stored preview. Uses normalized text or fallbacks to raw text or preview for snippet generation. Highlights specified terms within the snippet context and determines page number for the highlight. Assembles and returns the final preview with metadata including page number and offset.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\preview.py:get_highlighted_passages:0d045c9c2adda510775f245b04e31f3d4b62c371a0213b2bc1506f35c4833e0f:0d045c9c2adda510775f245b04e31f3d4b62c371a0213b2bc1506f35c4833e0f": "The function `get_highlighted_passages` retrieves a text snippet from a document identified by `document_id`, optionally highlighting specified terms within the snippet. It accepts an optional list of terms to emphasize and a context length parameter. If no terms are provided, it returns a preview of the document or a truncated version of its normalized text. If terms are provided, it builds a highlighted snippet around those terms and determines the page number where the terms occur. The result is assembled into a structured preview including metadata about the document and the highlighted context. It raises a `LookupError` if the document ID is invalid.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\preview.py:get_page:571b1e79344918012f7e3bb5fd1adeda3eaa4148280dabe798acaed9235965cd:571b1e79344918012f7e3bb5fd1adeda3eaa4148280dabe798acaed9235965cd": "Returns the full text of a specified page for a given document ID. Raises LookupError if the document ID or page number is invalid.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\preview.py:get_page:79e7a9a4bc01e5054586273283303e2c4f4a736dc23b0870a59f1662916807f2:79e7a9a4bc01e5054586273283303e2c4f4a736dc23b0870a59f1662916807f2": "Returns the full text of a specified page from a document identified by `document_id` and `page_number`. Raises `LookupError` if the document or page is not found. The returned dictionary includes the document ID, page number, and page text.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:859a512a01a1d81a2938dd0f159118688c43c8fd70c116177cbf705a37fa72d3:merge0:a8aae452cfb6920ac22924568b93d5ffee18a8fc3e4ef6013a98b3e69d90bd4d": "This background service manages ingest jobs with resumable processing capabilities, supporting queuing, pausing, cancellation, and status tracking for multiple job types including folder crawling, file ingestion, rescanning, and removal operations. Jobs are persisted in a database and can be restored after system restarts, utilizing threading for concurrent execution while providing progress monitoring and completion tracking. The module implements comprehensive file ingestion handling through methods for processing individual files, discovering files based on job type and filters, managing job states including cancellation and pausing, and synchronizing project documents. It supports operations such as file removal, rescanning, and batch ingestion of single files or entire directories with integrated error handling, metadata tracking, checksum calculation, and progress/result persistence. The implementation includes file filtering using include/exclude patterns, job data serialization for storage, subscriber update emission, rollback logic for cancelled jobs, and integration with a document repository for managing file metadata and versions.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:859a512a01a1d81a2938dd0f159118688c43c8fd70c116177cbf705a37fa72d3:part0:29fb900547e86aeb98c81a385fc289726271a3f0ac17574322e5df396ac4fbf0": "A background service for managing ingest jobs with resumable processing, including job queuing, pausing, cancellation, and status tracking. It supports multiple job types such as folder crawling, file ingestion, rescanning, and removal operations. Jobs are persisted in a database and can be restored after restarts. The system uses threading for concurrent job execution and provides mechanisms for monitoring job progress and completion.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:859a512a01a1d81a2938dd0f159118688c43c8fd70c116177cbf705a37fa72d3:part1:7c45a535341fd2edc9d21251b627921981c6676a7b9a7b0408da16f8ad8dba7f": "The module defines methods for handling file ingestion jobs, including processing individual files, discovering files based on job type and filters, managing job states such as cancellation or pausing, and synchronizing project documents. It supports operations like removing files, rescanning, and ingesting single files or entire directories. The implementation includes error handling, metadata tracking, checksum calculation, and persistence of job progress and results. Functions manage file filtering using include/exclude patterns, serialize job data for storage, and emit updates to subscribers. The module also handles rollback logic for cancelled jobs and integrates with a document repository for managing file metadata and versions.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:IngestJob:60c0bb4db6387d592366a82ab67490b4d92f50b22ad8dfe650315be3f28cad11:60c0bb4db6387d592366a82ab67490b4d92f50b22ad8dfe650315be3f28cad11": "The `IngestJob` class manages the ingestion of documents into a project, handling progress tracking, state management, and initialization of default values for processing tasks. It ensures that required keys exist in its internal dictionaries and maintains copies of known files to prevent unintended modifications. The class supports initializing and snapshotting file states during the document ingestion process.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:IngestJob:ensure_defaults:271cfa894a891a50524063aa7db7ede481da4274c5e0df72e3059d6ef84792b9:271cfa894a891a50524063aa7db7ede481da4274c5e0df72e3059d6ef84792b9": "Function ensures default values for progress tracking and state management keys. Sets default values for total, processed, succeeded, failed, and skipped counters in progress dictionary. Initializes pending_files to None, position to 0, and processed_files to empty list in state dictionary. Handles known_files by copying from params if missing, or from state if present, ensuring no mutation leaks back to params. Creates a snapshot of known_files if not already present.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:IngestService:50be23878bfc6ae194dd40943d7842c70118deb3857fc51d54b04b8fd192afc9:50be23878bfc6ae194dd40943d7842c70118deb3857fc51d54b04b8fd192afc9": "The `IngestService` class manages background tasks for ingesting, processing, and synchronizing documents within a project, supporting operations like folder crawling, file addition, rescan, and removal while maintaining job state and progress tracking. It handles job lifecycle management including queuing, pausing, resuming, canceling, and completing tasks, with thread-safe operations and persistence of job states. The service integrates with a database to track document hierarchies, manage project files, and ensure consistent synchronization between the file system and the application's data store.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:IngestService:__init__:c889c49a1101b46044b110ff490005367f2f0ec9d503edd80593659ec6a8d3e0:c889c49a1101b46044b110ff490005367f2f0ec9d503edd80593659ec6a8d3e0": "Initializes a background task worker with database connections and threading components. Sets up repositories for task logging, document management, and project documents. Creates a thread-safe queue for job management, initializes job tracking structures, and starts a daemon worker thread that processes tasks in the background. Restores previously incomplete jobs before beginning normal operation.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:IngestService:_check_pause_cancel:cfcc0c9617f2ad657e56a33b896180340a6853467bb2b3f490d32d64d30688f7:cfcc0c9617f2ad657e56a33b896180340a6853467bb2b3f490d32d64d30688f7": "Function checks for job cancellation or pausing conditions. If cancellation is detected, it persists the job state and raises a cancellation exception. If pausing is detected, it updates the job status to paused, persists the state, and raises a pause exception.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:IngestService:_complete_job:db64dcd387298d4f1e78e928ea644911bc23e7209bb1f72cafcc508279b429b5:db64dcd387298d4f1e78e928ea644911bc23e7209bb1f72cafcc508279b429b5": "Function completes an ingest job by updating its status to completed and populating summary information with progress counts, file data, and error details. It removes temporary state data and synchronizes project documents before persisting the completed job.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:IngestService:_create_job:723ff7417697629cb1f2f2d3a27dd512d0b67fbc836126ad05d3320412aa6b8e:723ff7417697629cb1f2f2d3a27dd512d0b67fbc836126ad05d3320412aa6b8e": "Creates a new job record with specified type, parameters, and message. Configures job payload with progress tracking, error handling, and state management. Stores the job in an in-memory collection, adds it to a processing queue, and emits a notification for the new job. Returns the unique identifier of the created job.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:IngestService:_discover_files:d2da5754c874184d87a25bc65eea9be36dd5c9ae1a539aa5ecbcb051fc28e7f2:d2da5754c874184d87a25bc65eea9be36dd5c9ae1a539aa5ecbcb051fc28e7f2": "Function discovers files for an ingest job based on job type and parameters. For \"single_file\" jobs, it processes specified file paths with inclusion and exclusion filters. For \"remove\" jobs, it normalizes and deduplicates provided file paths. For other job types, it recursively discovers files under a root directory, applying filters to include or exclude specific files. Returns a sorted list of unique file paths after normalization and filtering.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:IngestService:_emit:27e99bc1ab8d3ce5ddc1aded0c62594ed3fe8ba2da6b9dfc4d1d45dec19131cd:27e99bc1ab8d3ce5ddc1aded0c62594ed3fe8ba2da6b9dfc4d1d45dec19131cd": "Function emits a job update to all subscribers by retrieving the job by ID, serializing it, adding its status to the payload, and invoking each callback with the job ID and serialized payload. If the job does not exist, the function returns early. If a callback raises an exception, it is caught and ignored, allowing other callbacks to execute.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:IngestService:_fail_job:9edbf45193c9d77c7345d00367f51d5d350d9b936e348af6f2b2a8b4f75f964e:9edbf45193c9d77c7345d00367f51d5d350d9b936e348af6f2b2a8b4f75f964e": "Function that updates an ingest job's status to failed, appends the exception as an error message, and persists the job with failed status, error message, and completion flag.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:IngestService:_handle_cancel:515343248adebdaac2668649a9f0ac3ecfe645335186ecf33ae4a359779c5675:515343248adebdaac2668649a9f0ac3ecfe645335186ecf33ae4a359779c5675": "Function that handles job cancellation by rolling back the job, setting its status to cancelled, and persisting the updated job state.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:IngestService:_handle_path:d2e2690dfd0610a8fa5899887739b39565570cf27dc6002d417960a9a462ffce:d2e2690dfd0610a8fa5899887739b39565570cf27dc6002d417960a9a462ffce": "Function processes a file path based on the job type, handling removal, skipping, parsing, and storing of document versions. For removal jobs, it deletes documents by path and returns removal details. For other jobs, it checks file existence, computes file metadata including checksum, and compares with previous state during rescan. It parses files, handles parsing errors, and stores document versions with associated metadata, returning status and metadata for each operation.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:IngestService:_hash_file:8d7ed1944d6d516e570b2a559c51e004b0032c7bb48f0565f139789948c6752b:8d7ed1944d6d516e570b2a559c51e004b0032c7bb48f0565f139789948c6752b": "Function that computes the SHA-256 hash of a file specified by a path. It reads the file in 64KB chunks and updates the hash digest incrementally. Returns the hexadecimal representation of the final hash value.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:IngestService:_load_known_files:0ff85e29f3ec299f50c4b7bc816b4647ca42642d6fc353db9691861e53d8b509:0ff85e29f3ec299f50c4b7bc816b4647ca42642d6fc353db9691861e53d8b509": "Function retrieves known files from repository records for a specified root path by filtering completed tasks matching \"ingest.rescan\" or \"ingest.folder_crawl\", extracting file information from job parameters and summary data, and returning a dictionary of known files when found.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:IngestService:_matches_filters:4f626e745a73a9279bf6954c4d2a069e7241a395948d01dff1f764b8e6645a65:4f626e745a73a9279bf6954c4d2a069e7241a395948d01dff1f764b8e6645a65": "Function that determines whether a file path matches given inclusion and exclusion filters. Takes a path, include patterns, exclude patterns, and a base path. Returns True if the path matches all include filters and no exclude filters. Uses fnmatch for pattern matching with case-insensitive and normalized path handling. Processes multiple candidate representations of the path for matching against each pattern.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:IngestService:_normalize_path:bfcc5cf045b0ff8a66201451a24f7eca21271e8148ec58d6b59b92134cc6b471:bfcc5cf045b0ff8a66201451a24f7eca21271e8148ec58d6b59b92134cc6b471": "Function that takes a Path object and returns its absolute string representation.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:IngestService:_persist:e74f08bc696c7bfb4062220b13d19c3d2b0d4b8eb562e22952c347ca1682716a:e74f08bc696c7bfb4062220b13d19c3d2b0d4b8eb562e22952c347ca1682716a": "Function that persists job data by serializing the job object, updating repository records with optional status, message, serialized data, and completion timestamp, then emitting a job event.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:IngestService:_process_job:e3bc4b7bf3d8f2b633b8889109af369d3121747c77fc1f1281d8249ac0945d9b:e3bc4b7bf3d8f2b633b8889109af369d3121747c77fc1f1281d8249ac0945d9b": "Function processes an ingest job by iterating through pending files, handling each file, updating job state and progress, managing file metadata, tracking errors, and performing cleanup for rescan jobs.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:IngestService:_record_to_job:83d1dec8a712859f03a4968f0136b69b10316f79276edab100e23f6df3fc90a9:83d1dec8a712859f03a4968f0136b69b10316f79276edab100e23f6df3fc90a9": "Function processes a dictionary record into an IngestJob object with extracted job data, progress information, errors, summary, and state. It constructs the job using values from the record and extra_data fields, applies default values through ensure_defaults method, and sets a pause event if the job status is paused. Returns the constructed IngestJob instance.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:IngestService:_restore_incomplete_jobs:f48efbae7a35e285c468ec9567fc98d0e2fd391e769923fbc8b64dda8d1c2608:f48efbae7a35e285c468ec9567fc98d0e2fd391e769923fbc8b64dda8d1c2608": "Function restores incomplete jobs from repository storage into memory queue. It processes each incomplete job record by converting it to a job object, storing it in an in-memory dictionary, and handling its status appropriately. Jobs marked as paused are activated with their pause events set, while other jobs are transitioned to queued status and added to processing queue. All job state changes are persisted to repository storage.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:IngestService:_rollback_job:952739b0e9521cc67af396b83a778a208f65200dbda015d409a50ff5e938e7cb:952739b0e9521cc67af396b83a778a208f65200dbda015d409a50ff5e938e7cb": "Function resets job state during rollback operation by restoring known files from snapshot, updating progress counters to reflect rolled back successful operations, and clearing processed files list.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:IngestService:_serialize:e66ad652a06c5f6b050b3ede7154ca610ab3b9fd2190a9b9207f5b03fbba51fa:e66ad652a06c5f6b050b3ede7154ca610ab3b9fd2190a9b9207f5b03fbba51fa": "Function that converts an IngestJob object into a dictionary representation containing job type, parameters, progress metrics, error list, summary data, and serialized state information.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:IngestService:_serialize_state:d07a5c6763c70bfe8f60a123fedf3d3d2a08c6c9dafc9c93a9e96d82cde81b63:d07a5c6763c70bfe8f60a123fedf3d3d2a08c6c9dafc9c93a9e96d82cde81b63": "Function that converts a dictionary state into a serialized format by converting Path objects to their string representations while leaving other values unchanged.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:IngestService:_start_job:5e44e72aac43a6f2f4b79d69a67e894cb452f00d93ad896735ee8bfc7bbbb84c:5e44e72aac43a6f2f4b79d69a67e894cb452f00d93ad896735ee8bfc7bbbb84c": "Function initializes an ingest job by setting default values, marking it as running, creating a snapshot of known files if one doesn't exist, and persisting the updated job state with running status.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:IngestService:_sync_project_documents:feecb0df316102d7ad3017e3613a6e1af8e3377252a9d825f10aea7c4ed87a35:feecb0df316102d7ad3017e3613a6e1af8e3377252a9d825f10aea7c4ed87a35": "Function synchronizes project document records with file system changes. It processes a job to update document metadata and track file additions, modifications, and deletions within a project. The function retrieves existing documents for a project, compares them against known files from the job summary, and creates or updates document records accordingly. It also removes document records for files that are no longer present, based on a list of removed paths from the job summary. The synchronization operates within a database transaction and handles exceptions during database operations or file path resolution.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:IngestService:_utcnow:0cf6c2737851a4a71572e1e4cf3f1f092d6fb14757a9a4230d8153dd51244730:0cf6c2737851a4a71572e1e4cf3f1f092d6fb14757a9a4230d8153dd51244730": "Function that returns the current UTC timestamp as an ISO format string.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:IngestService:_worker_loop:102b10ff0b9b6b7a0592cfde9d02f468b6ae481de1c289ae30a8f05ec25339af:102b10ff0b9b6b7a0592cfde9d02f468b6ae481de1c289ae30a8f05ec25339af": "Function implements a worker loop that processes jobs from a queue until a stop event is triggered. It retrieves jobs with a timeout, skips invalid or paused jobs, and executes job processing logic including start, process, and completion steps. Exception handling manages job cancellation and failures, while ensuring proper queue cleanup during shutdown by draining remaining items.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:IngestService:cancel_job:8c2eed84b83ff43f02494953a0d69f66b3009f8a3964db10769974bd8e557cb6:8c2eed84b83ff43f02494953a0d69f66b3009f8a3964db10769974bd8e557cb6": "The function cancels a job by setting a cancellation event on the job object. It retrieves the job using the provided job ID from an internal jobs collection, and if the job exists, it triggers the job's cancellation event to signal that the job should be stopped.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:IngestService:pause_job:dac8119308fb81c0b2da067653369ef0aec89a90508fa80d47c0c215483193b9:dac8119308fb81c0b2da067653369ef0aec89a90508fa80d47c0c215483193b9": "The function pauses a job by setting its pause event. It retrieves the job using the provided job ID and triggers the pause event if the job exists.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:IngestService:queue_file_add:db43bda27fc45504976b7e6dcf5ee68108f351327545b721ecb38bd3d26bf8d4:db43bda27fc45504976b7e6dcf5ee68108f351327545b721ecb38bd3d26bf8d4": "Function that adds files to a processing queue for ingestion. Takes a project identifier, one or multiple file paths, and optional inclusion/exclusion patterns. Returns a job identifier for the queued operation. Processes input files through path resolution and normalization, constructs parameters for job creation, and delegates to an internal job creation method. Supports single file or batch file operations through flexible input handling.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:IngestService:queue_folder_crawl:fbdb53847703dc01bfb499ec1a813307eb456135b67319293cf78ca966cea7c9:fbdb53847703dc01bfb499ec1a813307eb456135b67319293cf78ca966cea7c9": "Function that schedules a folder crawling job to discover and ingest all files under a specified root path, with optional inclusion and exclusion patterns. Takes a project identifier, root directory path, and optional filtering patterns, then creates and returns a job identifier for the crawling operation.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:IngestService:queue_remove:47f2a632288e18972ec193888901ad71265977e4ab7689a9251bc96f01a460f4:47f2a632288e18972ec193888901ad71265977e4ab7689a9251bc96f01a460f4": "Function that removes specified files from an ingest index by creating a job with provided parameters. Takes a project identifier, root directory path, and iterable of file paths as inputs. Resolves all paths to their absolute forms and loads known files from the root directory. Constructs a parameter dictionary containing the project ID, resolved root path, normalized file paths, and loaded known files. Creates and returns a job execution result with the operation type \"remove\" and descriptive label \"Remove files from ingest index\".",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:IngestService:queue_rescan:650bdb7834ec4f232c4e5804a70f230d25c0213f7f80c448148c83b4e908cecd:650bdb7834ec4f232c4e5804a70f230d25c0213f7f80c448148c83b4e908cecd": "Function queues a rescan job for specified project and root path, using provided inclusion/exclusion patterns and known files data. Returns job identifier.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:IngestService:resume_job:8e34b8ec31861961674778b1c2eef0f87e074366dda95a577669dd8eaefc23e7:8e34b8ec31861961674778b1c2eef0f87e074366dda95a577669dd8eaefc23e7": "Function resumes a paused job by clearing its pause event, updating its status from PAUSED to QUEUED, persisting the status change, and adding the job ID to an execution queue.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:IngestService:shutdown:3053d85c508adc43fd460785a1e2f0f8ddf2f6cfc5151bbda654eb32a186d8e2:3053d85c508adc43fd460785a1e2f0f8ddf2f6cfc5151bbda654eb32a186d8e2": "Function that requests a worker to stop execution and optionally waits for its completion. It sets a stop event, adds a termination signal to a queue, and joins the worker thread if waiting is requested.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:IngestService:subscribe:619247fc01965b60976d29d777db2aa744b76ce9f860ad82a52053c1bedec3cd:619247fc01965b60976d29d777db2aa744b76ce9f860ad82a52053c1bedec3cd": "Function that registers a callback for task updates and returns a callable to remove the subscription. The callback is added to an internal list of subscribers, and the returned function removes the callback from that list when called. The operation is thread-safe using a lock.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:IngestService:wait_for_completion:fd1e9c37604021e0660ac096d5822b1a05f8ace8fe3aa480123a02673d47876e:fd1e9c37604021e0660ac096d5822b1a05f8ace8fe3aa480123a02673d47876e": "Function waits for a job to reach a terminal state or timeout expires. It checks job status in a loop with 50ms intervals, returning True when job completes successfully, False if job is not found or timeout occurs. Uses monotonic time for deadline calculation.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:TaskStatus:bd1e5067039998b1b1dbcf8546f70a5b5e562e30cfae8aa1e50c96f951f883fe:bd1e5067039998b1b1dbcf8546f70a5b5e562e30cfae8aa1e50c96f951f883fe": "The `TaskStatus` class represents the status of background tasks within the document processing and retrieval system, providing a structured way to track task progress and completion. It supports operations for managing task states such as pending, running, completed, or failed, which are essential for handling asynchronous processes like corpus ingestion, file rescanning, and AI model interactions. The class integrates with the application's task management framework to ensure smooth operation of offline document processing workflows.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_JobCancelled:53e8089b7cc9960119427c2dd6d651466157d854e13eb31903d0f42205ecbf6e:53e8089b7cc9960119427c2dd6d651466157d854e13eb31903d0f42205ecbf6e": "The `_JobCancelled` class serves as an exception type within the document processing system, likely raised when background tasks such as file ingestion or corpus scanning are interrupted or stopped before completion. It is part of the application's error handling mechanism for managing asynchronous operations in offline AI processing workflows. The class supports the structured flow of document management and retrieval by ensuring proper cleanup and notification when jobs are cancelled during processing.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_JobPaused:aef61bda0f94c9f6d8cd5a10f64f560c2fc30ed1598f831d3969e335d960782e:aef61bda0f94c9f6d8cd5a10f64f560c2fc30ed1598f831d3969e335d960782e": "The `_JobPaused` class represents a paused job state within the document processing system, likely used to manage background tasks such as folder crawling or file rescanning that have been temporarily suspended. It is part of the application's task management framework, supporting offline document ingestion and retrieval operations without network dependencies. The class contributes to the overall functionality of handling asynchronous operations within the PyQt6-based desktop interface.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:__init__:245d25f1f7c2694c960d910c84ae5194dd01462b71ffb6dd62ad70f98556d038:245d25f1f7c2694c960d910c84ae5194dd01462b71ffb6dd62ad70f98556d038": "Initializes the IngestService with a database manager and optional worker idle sleep time. Sets up repositories for background task logs, ingest documents, and project documents. Creates a queue for job IDs, a dictionary to track jobs with thread safety, a list of subscribers, a stop event, and configures a daemon thread for processing jobs. Restores any incomplete jobs and starts the worker thread.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:__init__:5caa087de094df029e677b119ee2a8332dc79b36178130bedbc2c89b6ffbd48b:5caa087de094df029e677b119ee2a8332dc79b36178130bedbc2c89b6ffbd48b": "Initializes the `IngestService` with a database manager and optional worker idle sleep time. Sets up repositories for background task logs, documents, and project documents. Creates a thread-safe queue for job management, initializes an empty dictionary for tracking jobs, and sets up a reentrant lock for thread safety. Registers a stop event for controlling the worker thread, configures the worker thread with a specified sleep interval, restores any incomplete ingestion jobs, and starts the worker thread.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_check_pause_cancel:8bf329c234faf96f5b3ca2b1780ca695a4776b4a0901cf68066095f74555bd22:8bf329c234faf96f5b3ca2b1780ca695a4776b4a0901cf68066095f74555bd22": "Checks if an ingest job has been cancelled or paused. If cancellation is detected, persists the job state and raises a `_JobCancelled` exception. If pausing is detected, updates the job status to PAUSED, persists the state, and raises a `_JobPaused` exception.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_check_pause_cancel:b6d9bd0e47a9b260ae63dcbe0addf017051aec1b808cf56118eb6f7cea9939df:b6d9bd0e47a9b260ae63dcbe0addf017051aec1b808cf56118eb6f7cea9939df": "The function `_check_pause_cancel` checks whether an ingestion job has been cancelled or paused. If the job is cancelled, it persists the job state and raises a `_JobCancelled` exception. If the job is paused, it updates the job's status to `PAUSED`, persists the status, and raises a `_JobPaused` exception.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_complete_job:b9912f267f3081e3bf8d461cb07e4431a8dd820545d5e6f98158b6f3bff2f236:b9912f267f3081e3bf8d461cb07e4431a8dd820545d5e6f98158b6f3bff2f236": "Completes an ingest job by updating its status to COMPLETED and populating its summary with progress metrics, file counts, errors, and processed state information. It also synchronizes project documents and persists the job with the updated status.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_complete_job:eb421fe49f9edc4172029c5fd7ff28ae0ea3f2a34c01fc9d4312a5721e6c4bfc:eb421fe49f9edc4172029c5fd7ff28ae0ea3f2a34c01fc9d4312a5721e6c4bfc": "The function `_complete_job` updates the status of an `IngestJob` to `COMPLETED` and populates its summary with progress and error information. It ensures that counts for successful, failed, skipped, and removed files are set in the job's summary, and it cleans up the job's state by removing temporary data and syncing project documents. Finally, it persists the completed job's state and status.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_create_job:35dfc028afdd31718349eb99d1620b74a1aad88af975844cf6cd78de8cd367e5:35dfc028afdd31718349eb99d1620b74a1aad88af975844cf6cd78de8cd367e5": "The function `_create_job` creates and initializes a new ingestion job with the specified type, parameters, and message. It constructs a job payload containing job details, progress tracking, error logs, summary data, and state information. The job is persisted in the repository with a \"QUEUED\" status, converted into a job object, and added to an internal jobs dictionary and processing queue. Finally, it emits an event to signal the job's creation and returns the job identifier.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_create_job:55f43a982ad8f245e0d9210788354543a870178162603dcb87b1b29e90638a85:55f43a982ad8f245e0d9210788354543a870178162603dcb87b1b29e90638a85": "Creates a new job record in the repository with specified type, parameters, and message. Initializes progress tracking, error handling, and state information including known files. Stores the job in an in-memory collection, adds it to a processing queue, and emits an event indicating the job is ready for processing. Returns the unique identifier of the created job.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_discover_files:42c8f15ce82b5a002cb670a2823ed8d7a4a1e7f73a0a5506b55cd10d4791ac73:42c8f15ce82b5a002cb670a2823ed8d7a4a1e7f73a0a5506b55cd10d4791ac73": "The function `_discover_files` identifies and returns a list of file paths based on the type of ingestion job specified in the `IngestJob` object. For a \"single_file\" job, it processes individual files listed in the job parameters, applying include and exclude filters relative to a base directory. For a \"remove\" job, it normalizes and returns the paths of files specified for removal. For other job types, it recursively discovers all files under a specified root directory, applying include and exclude filters to determine which files to include in the result. The returned list is deduplicated and sorted.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_discover_files:7a942fb957f1c27a28725e42f6aa74ed973a628f355bf112ead9929b11786b7e:7a942fb957f1c27a28725e42f6aa74ed973a628f355bf112ead9929b11786b7e": "The function `_discover_files` identifies and returns a list of file paths based on the type of ingestion job specified in `job`. For a \"single_file\" job, it processes individual file paths from the job parameters, applying include/exclude filters and normalizing paths. For a \"remove\" job, it normalizes provided file paths. For other job types, it recursively discovers all files under a specified root directory, applying include/exclude filters and normalizing paths. The returned list contains unique, sorted file paths.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_emit:3366f312a20d92171e7800ca371e8236350bbef89c576805a7a68b9c44418f04:3366f312a20d92171e7800ca371e8236350bbef89c576805a7a68b9c44418f04": "Emits a job update to all subscribed callbacks. Retrieves the job by ID, serializes its data, adds the current status, and invokes each registered callback with the job ID and serialized payload. Handles exceptions during callback execution by continuing to the next callback without propagating errors.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_emit:c7d124447630ba601a310708038b009bf2113f0344d291ff2f6ea4ff7493cce1:c7d124447630ba601a310708038b009bf2113f0344d291ff2f6ea4ff7493cce1": "The function `_emit` processes a job identified by `job_id` by retrieving it from `self._jobs`, serializing its data, and appending the job's status to the serialized payload. It then iterates through all registered subscribers in `self._subscribers`, invoking each callback with the `job_id` and the constructed payload. Any exceptions raised during callback execution are caught and ignored, ensuring that one failing subscriber does not prevent others from being notified.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_fail_job:46b58737dd29e42d83a61a84107b45e88f85122ea15b48f859ce9efb4f3c5827:46b58737dd29e42d83a61a84107b45e88f85122ea15b48f859ce9efb4f3c5827": "The function `_fail_job` updates an `IngestJob` object to mark it as failed. It sets the job's status to `TaskStatus.FAILED`, appends the string representation of the provided exception to the job's errors list, and then persists the job with the failed status, error message, and completion flag set to True.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_fail_job:d749b86f72c00fef3298e92e0d435a6d4bc0d76e89d31c1d4a1198e00d314e90:d749b86f72c00fef3298e92e0d435a6d4bc0d76e89d31c1d4a1198e00d314e90": "The function `_fail_job` updates an `IngestJob` object to reflect a failed status when an exception occurs during ingestion. It sets the job's status to `FAILED`, appends the string representation of the exception to the job's errors list, and persists the updated job state with a failure message and completed flag.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_handle_cancel:6fd1027d5ec3584abd6968cd7094a05dfcd00e095dd9997c4fe4453923f8047f:6fd1027d5ec3584abd6968cd7094a05dfcd00e095dd9997c4fe4453923f8047f": "Handles the cancellation of an ingest job by rolling back the job, setting its status to cancelled, and persisting the updated job state.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_handle_cancel:dcc7f05d2e55d326eec77c085bcd2ad6be24955075d0e6686af1040c8cb5b9f8:dcc7f05d2e55d326eec77c085bcd2ad6be24955075d0e6686af1040c8cb5b9f8": "The function `_handle_cancel` processes the cancellation of an `IngestJob` by rolling back the job, updating its status to `CANCELLED`, and persisting the updated status.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_handle_path:172a98deb415bb90a637a0fd1383bfb019993060c4aa10b176af261027fe0798:172a98deb415bb90a637a0fd1383bfb019993060c4aa10b176af261027fe0798": "Handles processing a file path based on the job type, returning a status and metadata dictionary. For a \"remove\" job, it deletes documents by path and returns removal details. For other jobs, it checks if the file exists, computes file metadata including checksum, and compares with previous state during a \"rescan\" job to skip unchanged files. It parses the file, handles parsing errors, and stores the parsed content as a document version, returning success or failure status along with metadata including document ID, version, preview, OCR status, and parser metadata.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_handle_path:24095349c9f46ab93d7dd849e54cce90a8827b7afb6bdded6066f974de276a85:24095349c9f46ab93d7dd849e54cce90a8827b7afb6bdded6066f974de276a85": "The function `_handle_path` processes a file path based on the type of ingestion job specified in `job`. It handles three main cases: removing a file, rescanning a file, or ingesting a new file. For removal jobs, it deletes document versions from the database and returns metadata about the removed files. For missing files, it skips processing and returns an error. For valid files, it computes file metadata including checksum, size, and modification time. During rescan jobs, it compares current file metadata with previously known metadata to determine if reprocessing is needed. If parsing fails, it records the error and returns a failure status. On successful parsing, it stores the parsed content in the database and returns detailed metadata about the processed document, including version information, preview, OCR status, and parser metadata.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_hash_file:72eecf70ad678f45adde2ea50910af3d314c4bce2f6a83d0ea0b2f655c4949cb:72eecf70ad678f45adde2ea50910af3d314c4bce2f6a83d0ea0b2f655c4949cb": "The function `_hash_file` computes a SHA-256 hash of the contents of a file located at the specified path. It reads the file in chunks of 65,536 bytes to efficiently handle large files and updates the hash digest with each chunk. The resulting hash is returned as a hexadecimal string.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_hash_file:dd8b2d2e789efa51d602aa38275d2521e428e2359e05a5a6e54133cc4e6fc8c1:dd8b2d2e789efa51d602aa38275d2521e428e2359e05a5a6e54133cc4e6fc8c1": "The function `_hash_file` computes a SHA-256 hash of a file's contents. It takes a file path as input, reads the file in 64KB chunks, and updates the hash digest with each chunk. The final hash value is returned as a hexadecimal string.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_load_known_files:089c277a494d052db42e85978494342eae5ceaa965128da5d2602be46fa56472:089c277a494d052db42e85978494342eae5ceaa965128da5d2602be46fa56472": "The function `_load_known_files` retrieves a dictionary of known files associated with a specified root directory from completed tasks stored in the repository. It iterates through specific task names related to ingestion processes, checks for records matching the given root path, and extracts file information from the task's summary data. If matching files are found, they are returned as a dictionary; otherwise, an empty dictionary is returned.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_load_known_files:449d63c4a21c2f93911ca0e6d52229d46ecb4c367c673505ab940c07d7610690:449d63c4a21c2f93911ca0e6d52229d46ecb4c367c673505ab940c07d7610690": "Loads and returns a dictionary of known files for a specified root path by querying completed tasks in the repository. The function searches for tasks named \"ingest.rescan\" and \"ingest.folder_crawl\", filters records by the given root path, and extracts known files from the task summary data. Returns an empty dictionary if no matching records are found or if no known files exist in the summary.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_matches:4a1b78f925ed90d8f00384171604a3c3623a07840eaa9288f1372c0020740f5b:4a1b78f925ed90d8f00384171604a3c3623a07840eaa9288f1372c0020740f5b": "The function `_matches` determines whether a given pattern matches a relative file path or its components. It normalizes forward and backslashes in both the relative path and pattern, then creates lists of candidates (including original, lowercase, and normalized versions of the relative path and file name) and patterns (including original, lowercase, and normalized versions of the pattern). The function iterates through all combinations of candidates and patterns using `fnmatch` to check for matches, returning `True` if any match is found, otherwise `False`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_matches:71fe7eb23de2f5b92d12c7739d64bb8af5d69bbf82a85fb01f3b9ae3981b9dc3:71fe7eb23de2f5b92d12c7739d64bb8af5d69bbf82a85fb01f3b9ae3981b9dc3": "The function `_matches` determines whether a given file path matches a specified pattern using multiple normalization and case variations. It converts backslashes to forward slashes in both the file path and the pattern for consistent comparison. The function tests the file path and its name against the pattern in various combinations of original and lowercase forms, utilizing `fnmatch` for pattern matching. It returns `True` if any combination results in a match, otherwise `False`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_matches_filters:6ddeba5439022355233ab7e698561eba4c52cf07bb8f94856cb72d200c96dfd4:6ddeba5439022355233ab7e698561eba4c52cf07bb8f94856cb72d200c96dfd4": "The function `_matches_filters` determines whether a given file path matches specified inclusion and exclusion filters. It takes a file path, lists of include and exclude patterns, and an optional base path. The function normalizes path separators and checks if the path matches any of the include patterns and does not match any of the exclude patterns. It returns `True` if the path satisfies the filtering criteria, otherwise `False`. The matching logic considers both the file name and its relative path, testing lowercase versions and normalized paths for pattern matching using `fnmatch`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_matches_filters:6de21fff9bf9cd8337071aa44a0aea69f79e8c9e7789e174b7e180fa65d8ba70:6de21fff9bf9cd8337071aa44a0aea69f79e8c9e7789e174b7e180fa65d8ba70": "The function `_matches_filters` determines whether a given file path matches specified inclusion and exclusion patterns. It accepts a file path, lists of include and exclude patterns, and an optional base path for relative normalization. The function normalizes the path for pattern matching, considering both the file's name and its relative path from the base. It evaluates each pattern against multiple variations of the path (case-sensitive and case-insensitive, with normalized forward slashes) to check for matches. The function returns `True` if the path matches all inclusion patterns (if any are specified) and does not match any exclusion patterns.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_normalize_path:154dfeb98ab579e737ba7feef2ef8c6bdf833edd6c1008bb57af865b1301e833:154dfeb98ab579e737ba7feef2ef8c6bdf833edd6c1008bb57af865b1301e833": "The function `_normalize_path` takes a `Path` object as input and returns its absolute path as a string. It resolves the path to eliminate any relative components and normalize the path representation.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_normalize_path:c61d5f62716b3a9b821a4c1c8df96a12c63333f884b5a6990c08c053aec40e7f:c61d5f62716b3a9b821a4c1c8df96a12c63333f884b5a6990c08c053aec40e7f": "The function `_normalize_path` takes a `Path` object as input and returns its normalized string representation. It achieves this by resolving the path to eliminate any relative components and then converting it to a string. This ensures that the returned path is absolute and free of symbolic links or redundant directory separators.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_persist:4f8af3b7611113e6a09d1f264d2cdb103f6073f1a12a455e8b08ef4c5c0b3f39:4f8af3b7611113e6a09d1f264d2cdb103f6073f1a12a455e8b08ef4c5c0b3f39": "The function `_persist` updates the state of an `IngestJob` in the repository, optionally setting its status, message, and completion timestamp. It serializes the job payload, updates the repository with the serialized data and optional metadata, and emits an event for the job ID. The `completed` parameter determines whether to set the `completed_at` timestamp.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_persist:9db2c53e6bea0ea25630fb2724fc54b58d770dc70db5645fc3e53c3ba42a2874:9db2c53e6bea0ea25630fb2724fc54b58d770dc70db5645fc3e53c3ba42a2874": "The function `_persist` updates the persistence state of an `IngestJob` by serializing its data and storing it in the repository. It allows updating the job's status, message, and completion timestamp. The function emits an event after the update is complete.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_process_job:4f9a5722b83d87ac00584db2a2f822dff3f2ac7e401a4e537f85bae0b21abdbd:4f9a5722b83d87ac00584db2a2f822dff3f2ac7e401a4e537f85bae0b21abdbd": "The `_process_job` method handles the execution of an ingest job by processing a list of files. It retrieves or discovers pending files, iterates through them, and processes each file using `_handle_path`. The method tracks progress, updates job state with file metadata, and manages success, skip, and removal statuses. Errors encountered during processing are logged in `job.errors`. For rescan jobs, it identifies and handles removed files by comparing against a snapshot of known files. Finally, it persists the updated job state and ensures processed files are stored in the job's state.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_process_job:8dfbcf912b73740fc51338367ecd0c58ffcf0b2b2ffa9bb4c09dd2c27997ee87:8dfbcf912b73740fc51338367ecd0c58ffcf0b2b2ffa9bb4c09dd2c27997ee87": "The `_process_job` method handles the execution of an ingestion job by processing a list of files. It retrieves pending files from the job's state, discovers new files if needed, and iterates through them to process each one using `_handle_path`. The method tracks progress, updates job statistics such as succeeded, skipped, and failed counts, and persists the job state after each file is processed. It also manages file metadata, handles errors, and performs cleanup for removed files during a rescan operation. The method updates the job's summary with information about OCR needs and removed files, and ensures that document records are updated or deleted accordingly.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_record_to_job:9458e41fc2793a19747a61efa5be2689497b81813cbc87e95698ee41bb54b5bb:9458e41fc2793a19747a61efa5be2689497b81813cbc87e95698ee41bb54b5bb": "The function `_record_to_job` converts a dictionary representation of a task record into an `IngestJob` object. It extracts various fields from the input dictionary, such as job type, parameters, status, progress, errors, summary, and state, and uses them to initialize the `IngestJob`. The function ensures default values are set for the job and handles the case where the job's status is paused by setting an internal pause event. Finally, it returns the constructed `IngestJob` instance.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_record_to_job:f330f7118f80324f3277295c0fa2d3cf650369f9ffbe3085d6edee4889b25972:f330f7118f80324f3277295c0fa2d3cf650369f9ffbe3085d6edee4889b25972": "Creates an `IngestJob` instance from a record dictionary by extracting and mapping fields from the record's extra data, setting default values where necessary, and configuring the job's status and pause state based on the extracted information.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_restore_incomplete_jobs:97ff88b6f170ee64f258736ac19a82a681aee3f4a9be7e692bb5129931b13589:97ff88b6f170ee64f258736ac19a82a681aee3f4a9be7e692bb5129931b13589": "The function `_restore_incomplete_jobs` restores incomplete jobs from the repository into the service's job management system. It iterates through all incomplete job records, converts each record into a job object, and adds it to the internal job dictionary. If a job is paused, it sets the pause event and persists the paused status. For other jobs, it ensures the status is queued, persists the status change, and adds the job to the processing queue.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_restore_incomplete_jobs:fe85349f33514653f788a44bbf752035e3e202bd10ec6b2a89177e5aa310765f:fe85349f33514653f788a44bbf752035e3e202bd10ec6b2a89177e5aa310765f": "The function `_restore_incomplete_jobs` restores incomplete background jobs from persistent storage into the service's active job management structure. It iterates through all incomplete job records retrieved from the repository, converts each record into a job object, and adds it to the internal job dictionary. If a job is paused, it sets the pause event and persists the paused status. For other incomplete jobs, it resets their status to queued, persists the change, and adds the job ID to the processing queue.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_rollback_job:7440dbda8d0ec37106ca059b7466b5cb7438fc84eb8485cf0f804468bc743492:7440dbda8d0ec37106ca059b7466b5cb7438fc84eb8485cf0f804468bc743492": "The `_rollback_job` function performs a rollback operation on an `IngestJob` by restoring the known files snapshot, updating job progress and summary counters to reflect the rollback state, and resetting processed file tracking. It updates the job's state and summary with rolled-back counts, resets succeeded and processed counters, and clears the list of processed files.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_rollback_job:f22df9080350f8288be0c1ad7841f0eb8fc6a67f3fe0d3a842e677f62b9bdcde:f22df9080350f8288be0c1ad7841f0eb8fc6a67f3fe0d3a842e677f62b9bdcde": "The `_rollback_job` function performs a rollback operation for an `IngestJob` by restoring the known files snapshot, updating job progress and summary counters to reflect the rollback, and resetting counters that represent committed work. It ensures the UI accurately reflects the rollback state by adjusting progress tracking and summary statistics.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_serialize:9aaefb3cf4cc1ad3715d309f19c30957bb4110e3f61134afb3f1fffe6c796f3a:9aaefb3cf4cc1ad3715d309f19c30957bb4110e3f61134afb3f1fffe6c796f3a": "The function `_serialize` converts an `IngestJob` object into a dictionary representation. It extracts and serializes the job's type, parameters, progress, errors, summary, and state into a structured format for storage or transmission. The job's state is further serialized using a helper method `_serialize_state`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_serialize:ef72301e5e25ae0466ebc6b0fa7ba9d7477df89a9b96636b153f18ae8f4bb25f:ef72301e5e25ae0466ebc6b0fa7ba9d7477df89a9b96636b153f18ae8f4bb25f": "Serializes an IngestJob object into a dictionary containing its type, parameters, progress, errors, summary, and state.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_serialize_state:a33833563a7e958de59ffa050468a655c2dcdce90315d93d62cb2ee8b61d3cac:a33833563a7e958de59ffa050468a655c2dcdce90315d93d62cb2ee8b61d3cac": "Serializes a state dictionary by converting Path objects to their string representations while leaving other values unchanged. Returns a new dictionary with the same keys but with Path objects converted to strings.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_serialize_state:a5b9e34e3e281ff86e0b66c975e58b3c4ce2b8b3b55d263d0ea175cdf2c44801:a5b9e34e3e281ff86e0b66c975e58b3c4ce2b8b3b55d263d0ea175cdf2c44801": "The function `_serialize_state` takes a dictionary `state` as input and returns a new dictionary where all values that are instances of `Path` have been converted to their string representation. For all other values, the original value is preserved in the returned dictionary. This ensures that the state can be serialized properly, particularly for storage or transmission purposes where path objects need to be represented as strings.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_start_job:35f735d0b6eff5b6624bca04e15676cd4ab3dbb1ce91aeb09a6d1a3c18651dfc:35f735d0b6eff5b6624bca04e15676cd4ab3dbb1ce91aeb09a6d1a3c18651dfc": "The function `_start_job` initializes and starts an ingestion job by ensuring default values are set, updating the job's status to `RUNNING`, and preserving a snapshot of known files in the job's state. It then persists the updated job state with the running status.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_start_job:9fd74eafcf577202890fbd15e3afcb9ca80213fd5c4b8456fd689bf7489398aa:9fd74eafcf577202890fbd15e3afcb9ca80213fd5c4b8456fd689bf7489398aa": "The function `_start_job` initializes and starts an ingest job by ensuring default values are set, marking the job as running, creating a snapshot of known files if one doesn't exist, and persisting the updated job state with the running status.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_sync_project_documents:54590e055273cee2dbfd5188aa78bf42987d96a428187ed4163eda207a5dde39:54590e055273cee2dbfd5188aa78bf42987d96a428187ed4163eda207a5dde39": "The function `_sync_project_documents` synchronizes the list of documents in a project with the files reported by an ingestion job. It retrieves the project ID from the job parameters and verifies the project's existence in the database. It then fetches existing documents for the project, normalizing their paths for comparison.\n\nFor each file reported as known in the job summary, it checks if the file already exists in the project. If not, it creates a new document entry; otherwise, it updates the metadata of the existing document if changes are detected.\n\nIt also processes a list of removed files from the job summary and deletes corresponding document entries from the project if they match the removed paths.\n\nThe function handles exceptions gracefully during database operations and path normalization, ensuring that errors do not halt the synchronization process. It uses a defensive programming approach to avoid crashes due to unexpected data types or database issues.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_sync_project_documents:bc511ddadaf910afc209c7e52a4ac9cc8c4bcc677c41ca7e1ef77b08f5146d89:bc511ddadaf910afc209c7e52a4ac9cc8c4bcc677c41ca7e1ef77b08f5146d89": "The function `_sync_project_documents` synchronizes project documents for a given ingest job by comparing known files with existing documents in the repository. It first verifies that the project ID is valid and exists in the database. It then retrieves existing documents associated with the project, normalizing their paths for comparison.\n\nFor each known file from the job summary, it checks if a corresponding document exists. If not, it creates a new document; if it does exist, it updates the document only if there are changes in the source path or metadata. Files marked as removed in the job summary are deleted from the repository if they match existing documents.\n\nThe function handles exceptions gracefully during database operations and path normalization, ensuring that invalid inputs or errors do not halt execution. It ensures consistency between the project's document list and the files reported by the ingest job.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_utcnow:4474987af0cbc74157917cc43f97dd071429e0df5e84c3294fa1f103abc00ccb:4474987af0cbc74157917cc43f97dd071429e0df5e84c3294fa1f103abc00ccb": "The function `_utcnow()` returns the current UTC date and time as an ISO format string. It imports `datetime` and `timezone` from the `datetime` module, gets the current date and time in UTC timezone, and converts it to an ISO format string representation.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_utcnow:854f1788e8c476a3e05659cc7b141dd03d3610712fcdeaa67bd2a30ec2636df5:854f1788e8c476a3e05659cc7b141dd03d3610712fcdeaa67bd2a30ec2636df5": "The function `_utcnow()` returns the current UTC date and time in ISO 8601 format as a string. It imports `datetime` and `timezone` from the `datetime` module, gets the current date and time with UTC timezone information, and formats it as an ISO string.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_worker_loop:229a5cf2b81ea7d8985db0bcd5686d3097426d2ab7d200bbd6500e7cad472373:229a5cf2b81ea7d8985db0bcd5686d3097426d2ab7d200bbd6500e7cad472373": "The `_worker_loop` method implements the main execution loop for a worker thread in the `IngestService`. It continuously processes jobs from a queue, handling job start, processing, completion, cancellation, and failure states. The loop respects pause and cancel events for individual jobs, and ensures proper cleanup of queued items during shutdown. The method uses a timeout to periodically check for termination signals and manages job lifecycle through dedicated handler methods.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_worker_loop:f6b6c5c2c74b426da9aa3749c18e6311beca4b8f968aee2b750d180b6d58c1d0:f6b6c5c2c74b426da9aa3749c18e6311beca4b8f968aee2b750d180b6d58c1d0": "The function `_worker_loop` implements the main processing loop for a worker thread in the `IngestService`. It continuously retrieves jobs from a queue, processes them, and handles various job states including normal execution, pausing, and cancellation. The loop runs until a stop event is signaled, at which point it drains any remaining items from the queue. Each job is processed through start, processing, and completion phases, with appropriate exception handling for pause, cancel, and general errors. The function ensures proper cleanup and synchronization using queue task_done() calls and handles job state checks before processing.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:cancel_job:2750b936a4cbfdc0264169125174c867ced59c7fb9bf79e30d8716136423c113:2750b936a4cbfdc0264169125174c867ced59c7fb9bf79e30d8716136423c113": "The `cancel_job` function cancels a job identified by `job_id` by setting its cancellation event. It retrieves the job from the internal `_jobs` dictionary using the provided `job_id`. If the job exists, it calls `cancel_event.set()` on the job to signal cancellation. If the job does not exist, the function performs no action.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:cancel_job:9b590806655d1f12b66b5cae54b559eb7620bfae41b987290afbf2f984aa71cb:9b590806655d1f12b66b5cae54b559eb7620bfae41b987290afbf2f984aa71cb": "The `cancel_job` function cancels a running job by setting a cancellation event. It retrieves the job using the provided `job_id` from the internal `_jobs` dictionary and, if the job exists, triggers its cancellation by setting the `cancel_event`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:ensure_defaults:2ec8bbe97806241293c9983fd2ca0e68e10edbe0477a4343445d4379f5101ce6:2ec8bbe97806241293c9983fd2ca0e68e10edbe0477a4343445d4379f5101ce6": "The `ensure_defaults` method initializes default values for progress tracking and state management in an `IngestJob` instance. It ensures that specific keys are present in the `progress` and `state` dictionaries, setting them to default values if they do not already exist. The method also handles the initialization and copying of `known_files` from either the job's state or parameters, ensuring that modifications to the state do not affect the original parameters. Additionally, it creates a snapshot of the known files if one does not already exist in the state.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:ensure_defaults:649b7ccbc6311a29d8ed328db54b8f978a92ec812afb66cdf9c4e84d684cce19:649b7ccbc6311a29d8ed328db54b8f978a92ec812afb66cdf9c4e84d684cce19": "The `ensure_defaults` method initializes default values for bookkeeping keys in an `IngestJob` instance. It ensures that the `progress` dictionary contains default values for \"total\", \"processed\", \"succeeded\", \"failed\", and \"skipped\" keys, all set to 0. It also sets default values for keys in the `state` dictionary: \"pending_files\" is set to None, \"position\" to 0, and \"processed_files\" to an empty list. Additionally, it handles the \"known_files\" key by either retrieving it from the state or from the params dictionary, ensuring a copy is stored in the state to prevent mutations from leaking back to the params. Finally, it ensures that a \"known_files_snapshot\" key exists in the state, initialized with a copy of the current \"known_files\".",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:pause_job:0b3aa63e631f3148fb627e3945e0662200da24ff23e4d3e50ba568e1dba730c0:0b3aa63e631f3148fb627e3945e0662200da24ff23e4d3e50ba568e1dba730c0": "The `pause_job` function pauses a running job by setting its pause event. It retrieves the job using the provided `job_id` from the internal `_jobs` dictionary and, if found, triggers the job's pause mechanism by setting its `pause_event`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:pause_job:280b54d5ff82d1ae0af772f6438dbdbcc93787ec0295c9640b13ce7b482ef66d:280b54d5ff82d1ae0af772f6438dbdbcc93787ec0295c9640b13ce7b482ef66d": "The `pause_job` function pauses a job identified by `job_id` by setting its pause event. It retrieves the job from the internal `_jobs` dictionary using the provided ID, and if the job exists, it triggers the job's pause event to halt its execution.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:queue_file_add:0a4ce3023650aa507b0d720b3c147b11f686c4269c243cebc929f88286e34230:0a4ce3023650aa507b0d720b3c147b11f686c4269c243cebc929f88286e34230": "Queues a job to ingest one or more specified files, with optional inclusion and exclusion filters. Takes a project ID, file paths (single or multiple), and filter criteria, then creates and returns a job identifier for the ingestion process.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:queue_file_add:50bb9ae859fbeb368603b052887aa51aaa042b5876a064c1d6ae8693c6c7345e:50bb9ae859fbeb368603b052887aa51aaa042b5876a064c1d6ae8693c6c7345e": "The function `queue_file_add` queues a job to ingest one or more specified files into a project. It accepts a project ID, a file or iterable of files, and optional include/exclude filters for file types. The function normalizes the file paths, determines a base directory from the first file, and creates a job with parameters specifying the ingestion task. The job is labeled \"Single file ingest\" and its identifier is returned.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:queue_folder_crawl:1e670d991047ff0ce5c60344524206546df7528c0257ed77aa59f9afab27e911:1e670d991047ff0ce5c60344524206546df7528c0257ed77aa59f9afab27e911": "Queues a job to discover and ingest all files under the specified root directory, with optional inclusion and exclusion patterns. Returns the ID of the created job.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:queue_folder_crawl:55dc950b4153cbe81be749352426a9d7269d2aab0297ab88391a9b45c9d664fc:55dc950b4153cbe81be749352426a9d7269d2aab0297ab88391a9b45c9d664fc": "The function `queue_folder_crawl` initiates a background job to discover and ingest all files within a specified directory tree. It accepts a project identifier, a root path, and optional inclusion/exclusion patterns for file filtering. The function resolves the root path, prepares job parameters including project ID, root directory, and filter lists, then creates and returns a job identifier for the folder crawling task. The job is labeled with a descriptive name indicating the root path being processed.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:queue_remove:1ca9a1cc9ad882c6b3de922de1b39308708c6459507901562dec714d9f20f2b6:1ca9a1cc9ad882c6b3de922de1b39308708c6459507901562dec714d9f20f2b6": "The function `queue_remove` is designed to remove specified files from the ingest index within a given project and root directory. It takes a project ID, a root path, and an iterable of file paths as input. The function resolves the root path and normalizes the file paths to their absolute forms. It then loads the known files associated with the root path and constructs a parameter dictionary including the project ID, root path, normalized file paths, and the known files. Finally, it creates and returns a job to remove the specified files from the ingest index, using the provided parameters and a descriptive job title.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:queue_remove:89de0b7160b7e6bcdf630e11f8646f6e2ffc308b09d1566576c7ec3164b72eee:89de0b7160b7e6bcdf630e11f8646f6e2ffc308b09d1566576c7ec3164b72eee": "Removes specified files from the ingest index for a given project and root directory. Takes a project ID, root path, and iterable of file paths to remove. Resolves all paths to their absolute forms, loads known files from the root, and creates a removal job with the provided parameters. Returns the job ID.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:queue_rescan:c9d64906941bf12cd0680f9a608d756bb5b40cf1b628b9641fd9c139d4388f2a:c9d64906941bf12cd0680f9a608d756bb5b40cf1b628b9641fd9c139d4388f2a": "The function `queue_rescan` initiates a background job to re-ingest files within a specified root directory that have changed since the last crawl. It accepts parameters including the project ID, root path, include/exclude filters, and a dictionary of known files. The function resolves the root path, loads known files if not provided, and creates a job with the specified parameters and a descriptive label. It returns the identifier of the created job.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:queue_rescan:f9fcf4d29296e58fd7fccf49f0b0480f42c20c228f26a1ce54c109c582274a5a:f9fcf4d29296e58fd7fccf49f0b0480f42c20c228f26a1ce54c109c582274a5a": "Queues a rescan job to re-ingest files that have changed since the previous crawl. Takes a project ID, root path, and optional include/exclude patterns along with known files. Returns the job ID.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:resume_job:17389bd223f1c8626a91f7e741961480a6992c0a18b9d0df01765b0928f3fbb2:17389bd223f1c8626a91f7e741961480a6992c0a18b9d0df01765b0928f3fbb2": "The `resume_job` function resumes a paused background task by clearing its pause event, updating its status from `PAUSED` to `QUEUED`, persisting the status change, and adding the job to an execution queue. If the job does not exist, the function returns without performing any actions.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:resume_job:cd22065d44bd4f0f3427e919fa959ebc19d435417d05904ef5221d686acf4b60:cd22065d44bd4f0f3427e919fa959ebc19d435417d05904ef5221d686acf4b60": "Resumes a paused job by clearing its pause event, updating its status from PAUSED to QUEUED, persisting the status change, and adding the job to the processing queue. If the job does not exist, the function returns without action.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:shutdown:2d6487f9b6005f3f98d6fc9b24dd7df4d255b7ffac5987b8c5eaaab0536c8527:2d6487f9b6005f3f98d6fc9b24dd7df4d255b7ffac5987b8c5eaaab0536c8527": "The `shutdown` method requests the worker thread to stop by setting a stop event and placing a termination signal in the queue. If the `wait` parameter is True, it blocks until the worker thread completes execution.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:shutdown:c11d9ced75feb0ab5917484fe0af961c52e13ea946283be3790bad384fd0ff5b:c11d9ced75feb0ab5917484fe0af961c52e13ea946283be3790bad384fd0ff5b": "The `shutdown` method requests the worker to stop by setting a stop event and adding a termination signal to the queue. If the `wait` parameter is True, it waits for the worker thread to complete execution before returning.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:subscribe:8e1b5f6203f62163d457ace806237e83cfb75ff2e1b51f933691366e741b1ced:8e1b5f6203f62163d457ace806237e83cfb75ff2e1b51f933691366e741b1ced": "Registers a callback function for receiving task updates and returns an unsubscribe function. The callback is added to the internal list of subscribers within a thread-safe manner using the jobs lock. The returned unsubscribe function removes the callback from the subscribers list when called, also in a thread-safe manner.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:subscribe:9780b12ef9d7f558a9d096b33cad4355957cb7b492acc276c9bf41f12c5931db:9780b12ef9d7f558a9d096b33cad4355957cb7b492acc276c9bf41f12c5931db": "The `subscribe` method registers a callback function to receive task update notifications and returns an unsubscribe handle. The method appends the provided callback to an internal list of subscribers, protected by a lock. The returned unsubscribe function removes the callback from the subscribers list when called, also under lock protection. This implements a thread-safe observer pattern for task progress updates.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:unsubscribe:195a2bb71ce0da0bccb4316e7ca22d867f4327a212fecef9516351b87cf7c1f2:195a2bb71ce0da0bccb4316e7ca22d867f4327a212fecef9516351b87cf7c1f2": "The function `unsubscribe` removes a callback from the `_subscribers` list within a thread-safe manner using `_jobs_lock`. It checks if the callback exists in `_subscribers` and removes it if present. The function does not return any value.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:unsubscribe:67ee760c4e49b61cd778060c4e252aee9f68a77b8f77ac0603f571b8c475b586:67ee760c4e49b61cd778060c4e252aee9f68a77b8f77ac0603f571b8c475b586": "The `unsubscribe` function removes a specified callback from the list of subscribers stored in `self._subscribers`. It operates under the protection of `self._jobs_lock` to ensure thread-safe modification of the subscribers list. If the callback is present in the list, it is removed; otherwise, the function performs no action.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:wait_for_completion:17357189fa3ed282ba5fc729c815b33dc2f8cc06a7f74cd22fc5901a04c2b173:17357189fa3ed282ba5fc729c815b33dc2f8cc06a7f74cd22fc5901a04c2b173": "The function `wait_for_completion` blocks execution until a job with the specified `job_id` reaches a terminal state or the specified `timeout` expires. It checks the job's status in two locations: first in `self._jobs` and then in `self.repo`. If the job is found and its status is in `TaskStatus.FINAL`, it returns `True`. If the job is not found in `self.repo`, it returns `False`. If a timeout is specified and has been exceeded, it also returns `False`. The function sleeps for 50 milliseconds between checks to avoid excessive polling.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:wait_for_completion:4dc92c6eb9aa520ba129c7c23e4f4fb0a3080f1f925d30c45c9563409d1e5cac:4dc92c6eb9aa520ba129c7c23e4f4fb0a3080f1f925d30c45c9563409d1e5cac": "The function `wait_for_completion` blocks execution until a job identified by `job_id` reaches a terminal state or a specified timeout expires. It checks the status of the job in two locations: first in `self._jobs` and then in `self.repo`. If the job is found and its status is final, it returns `True`. If the job is not found in the repository, it returns `False`. If a timeout is specified and exceeded, it also returns `False`. The function sleeps for 50 milliseconds between checks to avoid excessive polling.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\logging.py:9bf11b4d9963ffb5ce987ca8cf57892e38a8c67ac4d36fc8e50ff3b93d0c2af3:9bf11b4d9963ffb5ce987ca8cf57892e38a8c67ac4d36fc8e50ff3b93d0c2af3": "Module defines logging configuration for the DataMiner application. Creates a function that initializes logging with both file and console output. Uses rotating file handler to manage log file size and retention. Configures logging format with timestamp, logger name, level, and message. Stores logs in user's configuration directory. Sets up debug-level logging by default. Returns configured logger instance.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\logging.py:setup_logging:a19e1b4d5b77b2da0daa8e4284c72dba9093922a38bcf1c9018da416b47db537:a19e1b4d5b77b2da0daa8e4284c72dba9093922a38bcf1c9018da416b47db537": "The function `setup_logging` configures application logging with both file and console output, using a rotating file handler to manage log file size. It creates a logger for the specified application name, ensures no duplicate handlers are added, and sets up formatters for consistent log message structure. Logs are written to a rotating file in the user's configuration directory, with optional customization of logging level and log filename. The function returns the configured logger instance.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\__init__.py:13b692037a069896a52cee03e5e198eebe6cb580ba87b9cae261c2cc5e86cc2e:13b692037a069896a52cee03e5e198eebe6cb580ba87b9cae261c2cc5e86cc2e": "This module provides information retrieval components for a DataMiner application. It exports classes and services for handling citations, passages, retrieval indexing, search scopes, and search functionality. The module imports and re-exports these elements from related submodules to make them available at the package level.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:0dd865953d254d7a8359916b6b219dea032e2ce271652da2a84403d1d5670d16:0dd865953d254d7a8359916b6b219dea032e2ce271652da2a84403d1d5670d16": "The module defines components for semantic passage retrieval using vector similarity. It includes functions to normalize vectors and compute cosine similarity. The `Passage` data class stores passage information, including embeddings, metadata, and normalized fields. The `RetrievalScope` class specifies constraints for filtering passages during retrieval. The `Citation` class maps retrieved passages to their source documents. The `RetrievedPassage` class structures the output of a retrieval query. The `RetrievalIndex` class manages a collection of passages and performs semantic search with optional diversity filtering and conflict detection. Helper methods support deduplication, preview generation, and conflict resolution based on metadata.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:Citation:5b461840d31eba6347467795bc37a8c3152cb16153997e23b898d5e141ee8d31:5b461840d31eba6347467795bc37a8c3152cb16153997e23b898d5e141ee8d31": "The `Citation` class provides a structured representation of citation data, offering a method to serialize its attributes into a dictionary format. It includes information about the document ID, page number, and section details, making it easy to exchange or store citation data. This class supports the application's need to manage and render citations within retrieved results and AI-generated responses.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:Citation:to_dict:dc6766beff3f8e49e42e09c8b63a54667df43d0bbfc68c617ef2fa38fa6e05be:dc6766beff3f8e49e42e09c8b63a54667df43d0bbfc68c617ef2fa38fa6e05be": "Function that converts an object instance into a dictionary format containing document identifier, page number, and section information.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:Passage:3df2dea6f404ed2ffb2a2d3ce81544fc805a8470b234e00bc8be323f6916a709:3df2dea6f404ed2ffb2a2d3ce81544fc805a8470b234e00bc8be323f6916a709": "The `Passage` class represents a structured passage of content within a document, storing attributes such as embedding vectors, text, folder path, language, and tags, while providing normalized and processed access to these values. It includes properties for retrieving the normalized embedding, folder path, language, and a frozen set of tags, along with a deduplication key based on document ID, section, page number, and normalized text. The class ensures data integrity through post-initialization processing and read-only access patterns for its attributes.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:Passage:__post_init__:992ca8041648d065853d35c496a2451025204e369c52260acc0277193c4dc101:992ca8041648d065853d35c496a2451025204e369c52260acc0277193c4dc101": "Function initializes normalized versions of embedding, text, folder, language, and tags attributes. Creates a frozen set from integer tags and ensures metadata is a dictionary.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:Passage:deduplication_key:6cd2ccceb6bf8013caacfe849798319d758e51b805b54d22fc06546c3a53889e:6cd2ccceb6bf8013caacfe849798319d758e51b805b54d22fc06546c3a53889e": "Function that returns a tuple containing four values used as a deduplication key: an integer document identifier, an optional string section identifier, an optional integer page number, and a lowercase normalized text string.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:Passage:normalized_embedding:cc1e044e118750774632eb2b8e5b6f261ed9fceff939903e0eee53147e9e3884:cc1e044e118750774632eb2b8e5b6f261ed9fceff939903e0eee53147e9e3884": "Returns a tuple of floating-point values representing the normalized embedding vector.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:Passage:normalized_folder:12f6fb06cd8e545c2e9a9fa3d85b9b25888d6a48ddd0e6d6f8c9d1cad81f1e96:12f6fb06cd8e545c2e9a9fa3d85b9b25888d6a48ddd0e6d6f8c9d1cad81f1e96": "Returns the value of the `_normalized_folder` attribute, which can be a string or None.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:Passage:normalized_language:52f324bb370eedb9ecd7455e2e3394cdd38eabccf1a3f5269a752c8de8d90669:52f324bb370eedb9ecd7455e2e3394cdd38eabccf1a3f5269a752c8de8d90669": "Returns the language value stored in the instance's `_language` attribute. The return type is annotated as a string or None.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:Passage:tag_set:d64bc1a9923c503976f611e83d2c933f912425eb1a83ffefdd78548af57955f7:d64bc1a9923c503976f611e83d2c933f912425eb1a83ffefdd78548af57955f7": "Returns an immutable set of integer tags associated with the instance.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:RetrievalIndex:0e68dbb3b6c571f22cb95491a2df854572e9d936501a1ee2592340ffd22a5b8e:0e68dbb3b6c571f22cb95491a2df854572e9d936501a1ee2592340ffd22a5b8e": "The `RetrievalIndex` class manages a collection of document passages, allowing for adding, removing, and clearing indexed content. It supports searching for relevant passages based on query embeddings, applying scoring, diversity filtering, and conflict detection to return structured results. The class also handles preview generation for passages and ensures deduplication during scoring.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:RetrievalIndex:__init__:fde1a5a54e51785215e991d00bb0fdec925e93d83ac9012a19b8cf0fc46ad4da:fde1a5a54e51785215e991d00bb0fdec925e93d83ac9012a19b8cf0fc46ad4da": "Initializes an instance with a dictionary to store Passage objects, keyed by strings.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:RetrievalIndex:_apply_diversity_filter:e0997b250c46091d9a7a7e14565d890fcfaeb735e7249afb1c45093b7fcc550c:e0997b250c46091d9a7a7e14565d890fcfaeb735e7249afb1c45093b7fcc550c": "Function implements a diversity-aware selection algorithm that filters candidates based on both their scores and similarity to already selected items. It maintains a pool of candidates and iteratively selects the most diverse top-k results by balancing score maximization against similarity minimization. The diversity parameter controls the trade-off between relevance (score) and diversity (similarity). When diversity is zero or negative, it returns the top-k candidates based solely on scores. The function ensures selected items are dissimilar to each other while maintaining high overall quality.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:RetrievalIndex:_build_preview:4754433a0bf73a953d8d5a77c0e9447fedd2e3221d717da209ebd6b5407ced42:4754433a0bf73a953d8d5a77c0e9447fedd2e3221d717da209ebd6b5407ced42": "Function that creates a truncated preview of text content with a specified character limit. Takes input text and an optional limit parameter defaulting to 280 characters. Processes the text by removing extra whitespace and splitting into words. If the processed text fits within the limit, returns it unchanged. If text exceeds the limit, finds the last space character before the limit to avoid cutting words in half. Returns the truncated text with an ellipsis character appended at the end.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:RetrievalIndex:_detect_conflicts:44b7282cda57597f27c1d5429d5e4923e2f85f2cecbf0f9846673ec5e3c7f1a5:44b7282cda57597f27c1d5429d5e4923e2f85f2cecbf0f9846673ec5e3c7f1a5": "Function processes passages to identify conflicts based on statement and stance metadata. It groups passages by statement and stance, then identifies when multiple stances exist for the same statement. For each passage with a conflicting stance, it records opposing stances from the same statement group. Returns a dictionary mapping passage IDs to lists of conflicting passage details including ID, stance, and document ID.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:RetrievalIndex:_score_passages:f957d73231324c7173ca12e0c714b9d815de3e9328304974125b94146466e819:f957d73231324c7173ca12e0c714b9d815de3e9328304974125b94146466e819": "Function processes passages to compute cosine similarity scores against a normalized query, builds text previews, and returns the highest scoring unique passages based on deduplication keys.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:RetrievalIndex:add_passage:1f0539bd5b6b5a0881d0fe9ac63adcacefe97f9ca4f7324d960ade5a9e9963ea:1f0539bd5b6b5a0881d0fe9ac63adcacefe97f9ca4f7324d960ade5a9e9963ea": "Stores or replaces a passage in a vector index using the passage ID as the key. The passage object is saved in an internal dictionary structure, with the passage ID serving as the dictionary key and the passage object as the value. This operation maintains a collection of passages indexed by their unique identifiers.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:RetrievalIndex:clear:4507cc18837f0c4bfc32ddbbbd8aa0ba0a80a701eefadce70f28af22eecaf1eb:4507cc18837f0c4bfc32ddbbbd8aa0ba0a80a701eefadce70f28af22eecaf1eb": "Clears all passages from the internal passages collection.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:RetrievalIndex:remove_passage:b3e405bdaf77bb7e279e48260f13c2bb0a0fd8306eb90070e5d98821c074d1af:b3e405bdaf77bb7e279e48260f13c2bb0a0fd8306eb90070e5d98821c074d1af": "Removes a passage from the internal passages collection using the specified passage ID. The method safely handles cases where the passage ID does not exist by using the dictionary's pop method with a default value of None. The operation modifies the internal state by eliminating the key-value pair associated with the provided passage ID.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:RetrievalIndex:search:e48b65fd568b85ba1c4ad6d6b5c8dd0bf90c81d465c3399d45fe4f2058bfc4ce:e48b65fd568b85ba1c4ad6d6b5c8dd0bf90c81d465c3399d45fe4f2058bfc4ce": "Function performs a retrieval search based on a query embedding, returning top-k passages that match scope constraints. It normalizes the query vector, filters passages according to scope, scores the filtered passages, applies a diversity filter to the scored results, detects conflicts among selected passages, and constructs a list of retrieved passage objects with their metadata and citation information. The function handles edge cases such as non-positive top-k values, empty filtered or scored results, and returns a list of dictionaries representing the retrieved passages.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:RetrievalScope:917f6309483872bd5669e89f972b3d1c00af3e36236db104229a66045886a7eb:917f6309483872bd5669e89f972b3d1c00af3e36236db104229a66045886a7eb": "The `RetrievalScope` class defines a set of filtering criteria used to determine whether a `Passage` object matches specific conditions based on tags, folder path, time range, and supported languages. It normalizes and structures these criteria during initialization to enable efficient lookup and comparison. The `matches` method evaluates individual passages against the defined scope, returning `True` if all applicable filters are satisfied.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:RetrievalScope:__post_init__:ed79bec0349958002a22c4a640aaf0a3c9b1cb470232e60ce831ca83cdeea117:ed79bec0349958002a22c4a640aaf0a3c9b1cb470232e60ce831ca83cdeea117": "Function initializes instance attributes by converting tags and languages to tuple and frozenset types, and normalizes folder path.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:RetrievalScope:matches:c5e0e45fecbf484ba94a421809df8e2d83fc400074cbd667c1b9c5436575b5ad:c5e0e45fecbf484ba94a421809df8e2d83fc400074cbd667c1b9c5436575b5ad": "Function that evaluates whether a passage matches specified criteria across multiple attributes. Returns true if the passage satisfies all applicable conditions, false otherwise. Checks tag compatibility, folder path relationships with optional recursive matching, time range constraints using creation timestamps, and language restrictions. Returns early when any condition fails, otherwise returns true indicating full match.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:RetrievedPassage:edae8755eb4af15f1db59fce890df10b74be7890db3d8e458c9234bd32b52bc0:edae8755eb4af15f1db59fce890df10b74be7890db3d8e458c9234bd32b52bc0": "The `RetrievedPassage` class represents a passage retrieved from a document corpus, encapsulating its content, metadata, and retrieval details such as score and citation information. It provides a structured dictionary representation of the passage through the `to_dict` method, including both embedded passage data and additional retrieval-specific attributes. The class supports conditional inclusion of optional fields like language, tags, folder, and creation time in its dictionary output.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:RetrievedPassage:to_dict:04340d623400af90eac35d06e47d2a254a4b64d1540231fd6e157b85108f458c:04340d623400af90eac35d06e47d2a254a4b64d1540231fd6e157b85108f458c": "Function converts an object's attributes into a dictionary representation containing passage details, score, preview, citation data, metadata, and optional fields such as language, tags, folder, and creation timestamp.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:_ScoredPassage:f9d93a58896780667cdd3435402fefa9a215708d7f0367d3899ecb31abc6f855:f9d93a58896780667cdd3435402fefa9a215708d7f0367d3899ecb31abc6f855": "The `_ScoredPassage` class represents a passage of text that has been scored for relevance, likely as part of a retrieval-augmented generation (RAG) system for document processing and question-answering. It is designed to store and manage passages of content retrieved from a corpus based on query relevance scores, supporting offline AI interactions and local data storage. The class is part of a larger system that handles document ingestion, indexing, and retrieval using local AI models and SQLite-based storage.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:__init__:4f567b93e9eae8a5bd995fac31db7b0a7b6210e1a85a437739577cc2804b93c0:4f567b93e9eae8a5bd995fac31db7b0a7b6210e1a85a437739577cc2804b93c0": "Initializes the `RetrievalIndex` class with an empty dictionary to store passages, where each passage is indexed by a string identifier.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:__init__:a6cb66ec87393ba688f5dd4fafb80981999382b806206efab1edd09cc5b5b795:a6cb66ec87393ba688f5dd4fafb80981999382b806206efab1edd09cc5b5b795": "Initializes a new instance of the RetrievalIndex class with an empty dictionary to store passages, where keys are strings and values are Passage objects.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:__post_init__:6698a9c4a808c42c8dd14c320929f10dad10fd245b555a14977c906cd92c5cd4:6698a9c4a808c42c8dd14c320929f10dad10fd245b555a14977c906cd92c5cd4": "The `__post_init__` method initializes and normalizes attributes of the `RetrievalScope` class. It converts the `tags` and `languages` lists into tuples, creates a frozen set of integer tag IDs from `tags`, normalizes the `folder` path using `_normalise_folder`, and creates a frozen set of lowercase language codes from `languages`. The method ensures that `tags` and `languages` are properly structured as immutable collections for efficient lookup and comparison.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:__post_init__:960d96045726a7c8d86e9358e928a67442b014b8af9c698245bb128a6680af6c:960d96045726a7c8d86e9358e928a67442b014b8af9c698245bb128a6680af6c": "Initializes the `RetrievalScope` instance by processing and normalizing its attributes. Converts `tags` and `languages` to tuples, creates a frozen set of integer tags, normalizes the folder path, and creates a frozen set of lowercase languages.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:__post_init__:f0e1c3466524032286a0af6efe5a9a8b4adf72befd2b1e7fea980e8290ef8cdd:f0e1c3466524032286a0af6efe5a9a8b4adf72befd2b1e7fea980e8290ef8cdd": "The `__post_init__` method initializes several normalized and processed attributes of the `Passage` object after its creation. It normalizes the embedding vector, cleans and normalizes the text content, normalizes the folder path, converts the language to lowercase, creates a frozen set of integer tags, and ensures metadata is stored as a dictionary.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:__post_init__:f8d452869e45add5ecb7143ef617f7076f119f1229ee0fe274dd1542a80eed6e:f8d452869e45add5ecb7143ef617f7076f119f1229ee0fe274dd1542a80eed6e": "The `__post_init__` method initializes several normalized and processed attributes for a `Passage` instance. It normalizes the embedding vector, cleans whitespace in the text, normalizes the folder path, converts the language to lowercase, converts tags to a frozenset of integers, and ensures metadata is stored as a dictionary.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:_apply_diversity_filter:9d94475d8b57fcf63dd48e254b3305fa342900fdb5d38de4e40c344b728614ac:9d94475d8b57fcf63dd48e254b3305fa342900fdb5d38de4e40c344b728614ac": "The function `_apply_diversity_filter` filters a list of scored passages to return the top-k candidates while promoting diversity among them. It takes a list of candidates, a top-k count, and a diversity parameter between 0 and 1. If diversity is zero or less, it returns the top-k candidates without modification. Otherwise, it iteratively selects candidates that balance high score with low similarity to already selected passages, using a weighted value calculation that incorporates the diversity factor. The process continues until the desired number of top-k candidates is reached or the candidate pool is exhausted.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:_apply_diversity_filter:efc2f2174657d29036cd1c269ec75d979c768abb54f33d21f4912289dd007962:efc2f2174657d29036cd1c269ec75d979c768abb54f33d21f4912289dd007962": "The function `_apply_diversity_filter` filters a list of scored passages to ensure diversity among the top-k results. It takes a list of candidates, a number of top results to return (`top_k`), and a diversity parameter between 0 and 1. If diversity is zero or less, it returns the top-k candidates without modification. Otherwise, it iteratively selects passages that balance high score with low similarity to already selected passages, using a weighted value combining score and inverse similarity. The result is a list of up to `top_k` passages that are both highly scored and diverse.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:_build_preview:7f3b3a939522133d43bb10f5309d9f97c5ff7e754275d81e9f45f893811c585b:7f3b3a939522133d43bb10f5309d9f97c5ff7e754275d81e9f45f893811c585b": "The function `_build_preview` generates a truncated preview of a given text string, ensuring that the output does not exceed a specified character limit. It first removes extra whitespace from the input text by splitting and rejoining it. If the cleaned text is already within the limit, it returns the text as-is. Otherwise, it finds the last space before the limit to avoid breaking words, truncates the text at that point, and appends an ellipsis (\"\u2026\") to indicate truncation. The default limit is 280 characters.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:_build_preview:b9ec21e4c99407087f858558ed7617207e28bf74395dedccc4d54549305f8d8f:b9ec21e4c99407087f858558ed7617207e28bf74395dedccc4d54549305f8d8f": "The function `_build_preview` takes a string `text` and returns a truncated version of it with a maximum length defined by the `limit` parameter (defaulting to 280 characters). It first removes extra whitespace by splitting and rejoining the text. If the cleaned text is already within the limit, it returns the cleaned text. Otherwise, it finds the last space character before the limit to avoid cutting words in half, and truncates the text at that point. If no space is found before the limit, it truncates at the limit position. The truncated text is then suffixed with an ellipsis (\"\u2026\") to indicate truncation.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:_cosine_similarity:4c9f9fc898b11310129ac1a2a3276a870e265055e51b40f2c058c2e29d23d252:4c9f9fc898b11310129ac1a2a3276a870e265055e51b40f2c058c2e29d23d252": "Computes the cosine similarity between two pre-normalized vectors represented as sequences of floats. The similarity is calculated as the dot product of the vectors.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:_detect_conflicts:42d33aca94e84c78088af37222cfbd9d2159ac74ecc3f8aae292bbed21ed6004:42d33aca94e84c78088af37222cfbd9d2159ac74ecc3f8aae292bbed21ed6004": "The function `_detect_conflicts` identifies conflicting passages based on statement and stance metadata. It groups passages by statement and then by stance, creating buckets of passages with the same statement but different stances. For each statement with multiple stances, it records opposing stances for each passage in that stance, building a dictionary mapping passage IDs to lists of opposing passages. The function returns a dictionary where keys are passage IDs and values are lists of dictionaries containing information about conflicting passages.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:_detect_conflicts:ac94fbdbe7085bc955eb6c5379a1c97433052594a670731f3c8e3f26dd86f927:ac94fbdbe7085bc955eb6c5379a1c97433052594a670731f3c8e3f26dd86f927": "The function `_detect_conflicts` identifies conflicting passages within an iterable of `Passage` objects based on matching \"statement\" and differing \"stance\" metadata values. It groups passages by statement and stance, then for each statement with multiple stances, it records opposing stances as conflicts. Each conflict entry includes the passage ID, stance, and document ID of opposing passages. The result is a dictionary mapping passage IDs to lists of conflicting passage details.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:_normalise_folder:378f05d8ac6e4a7a9827532520003abb4b34c5a3b82130f93a57795f89b536b2:378f05d8ac6e4a7a9827532520003abb4b34c5a3b82130f93a57795f89b536b2": "Normalizes a folder path by resolving it to an absolute path or returning None if the input is None or empty.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:_normalize_vector:a813710ac4962609d48a0c5cd2b243957a5729c6a42b3ba0944971ebb789c42f:a813710ac4962609d48a0c5cd2b243957a5729c6a42b3ba0944971ebb789c42f": "The function `_normalize_vector` computes a unit-length vector from a sequence of numerical values. It first validates that the input sequence is non-empty and converts all elements to floats. It then calculates the Euclidean norm (magnitude) of the vector. If the magnitude is zero, it raises a `ValueError`, as normalization is not possible. Otherwise, it returns a tuple of components divided by the magnitude, resulting in a unit vector.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:_score_passages:29c2baff0f54b1936f311cca1c64d1f97c9eb6fefaf0d71ecaad10f8c882bcd0:29c2baff0f54b1936f311cca1c64d1f97c9eb6fefaf0d71ecaad10f8c882bcd0": "The function `_score_passages` computes similarity scores between a normalized query and an iterable of passages. It calculates cosine similarity between the query and each passage's normalized embedding, builds a preview for each passage, and uses a deduplication key to ensure only the highest-scoring unique passages are included in the result. The function returns a list of `_ScoredPassage` objects containing the passage, its score, and its preview.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:_score_passages:e717556bf281af6326bc7bed3722927242c2e56d1071e49f06eb0c8291128db3:e717556bf281af6326bc7bed3722927242c2e56d1071e49f06eb0c8291128db3": "The function `_score_passages` computes similarity scores between a normalized query and a collection of passages using cosine similarity. It deduplicates passages based on their deduplication keys, retaining only the passage with the highest score for each unique key. For each passage, it also generates a preview of the text. The result is a list of `_ScoredPassage` objects, each containing the original passage, its computed score, and its preview.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:add_passage:58d53964f11265a921425a1db5d5f76bbb9ca4ca8361d1e5c89429465ba311f2:58d53964f11265a921425a1db5d5f76bbb9ca4ca8361d1e5c89429465ba311f2": "The function `add_passage` stores or replaces a passage in the vector index. It takes a `Passage` object as input and updates the internal `_passages` dictionary with the passage, using the passage's ID as the key.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:add_passage:7cfa932b67f8573500e199720b9d6a07283c249ec5ff38ab4e3b36ac0a9062d9:7cfa932b67f8573500e199720b9d6a07283c249ec5ff38ab4e3b36ac0a9062d9": "The function `add_passage` stores or replaces a passage in the vector index. It takes a `Passage` object as input and associates it with its `passage_id` in the internal `_passages` dictionary. If a passage with the same ID already exists, it will be replaced with the new one.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:clear:1e4bfbc6358a4d67c27bc1931a551cc90a265979d51f677a364ad09359748217:1e4bfbc6358a4d67c27bc1931a551cc90a265979d51f677a364ad09359748217": "The `clear` method clears all passages stored in the `self._passages` collection, removing all indexed content from the retrieval index.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:clear:3c54ef3e7cbc31263ede3a3438758829525b3b0f7aff375e5533d3b7a8e2d0cb:3c54ef3e7cbc31263ede3a3438758829525b3b0f7aff375e5533d3b7a8e2d0cb": "The `clear` method removes all passages from the retrieval index by clearing the internal `_passages` collection.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:deduplication_key:2ab2641919d3f87a3fc74c7035a3acfc47ea50e2a597ea059550e26a22776b85:2ab2641919d3f87a3fc74c7035a3acfc47ea50e2a597ea059550e26a22776b85": "Returns a tuple used as a key for deduplication purposes, containing the document ID, section, page number, and normalized lowercase text of the passage.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:deduplication_key:ff8eee18679ad96590327ca35693c3df0245788a8f5c580609e952e35a12ba74:ff8eee18679ad96590327ca35693c3df0245788a8f5c580609e952e35a12ba74": "The function `deduplication_key` returns a tuple that serves as a unique identifier for deduplication purposes within the `Passage` class. The tuple consists of four elements: the document ID, the section name, the page number, and the lowercase normalized text of the passage. This key enables identification of duplicate passages based on these attributes.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:matches:dbb4d6f94a30a7e1316d4186d22d1624c95a61e7f9faf6c3ff5183037b76d6b0:dbb4d6f94a30a7e1316d4186d22d1624c95a61e7f9faf6c3ff5183037b76d6b0": "The `matches` method determines whether a given `Passage` object conforms to the filtering criteria defined by the `RetrievalScope`. It evaluates the passage against multiple optional conditions:\n\n\nThe method returns `True` if the passage satisfies all applicable conditions, and `False` otherwise.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:matches:ec00c23d7f9dc032bc2fa3bb505c82a4a437923e5558673af7ac883093b0467e:ec00c23d7f9dc032bc2fa3bb505c82a4a437923e5558673af7ac883093b0467e": "The `matches` function evaluates whether a given `Passage` object satisfies the filtering criteria defined by the `RetrievalScope`. It checks multiple conditions based on tags, folder path, time range, and language. If any condition fails, the function returns `False`. Otherwise, it returns `True`, indicating the passage is within the specified scope. The function considers optional filters such as tag inclusion, recursive or exact folder matching, start and end times, and supported languages.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:normalized_embedding:0a31b27796c04c2125234c26e58aef9ece1a3c6f227e70fe65c989824e23195b:0a31b27796c04c2125234c26e58aef9ece1a3c6f227e70fe65c989824e23195b": "The function `normalized_embedding` is a property method within the `Passage` class that returns the normalized embedding vector associated with the passage. The embedding is stored as a tuple of floating-point numbers and is accessed via the private attribute `_normalized_embedding`. This method provides read-only access to the precomputed normalized embedding, which is typically used for similarity comparisons or indexing purposes in retrieval-augmented generation (RAG) systems.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:normalized_embedding:4545a9c3aab9408f9633cb802404ac5827cfa1c67bca893e35b209ab67dde081:4545a9c3aab9408f9633cb802404ac5827cfa1c67bca893e35b209ab67dde081": "Returns the normalized embedding as a tuple of floating-point values.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:normalized_folder:0115d2eaf59e335018a01c32cdd84a3e7f93e8bbe1d0ceff51ece017901c023d:0115d2eaf59e335018a01c32cdd84a3e7f93e8bbe1d0ceff51ece017901c023d": "The function `normalized_folder` is a property method within the `Passage` class that returns the value of the private attribute `_normalized_folder`. This attribute likely stores a standardized or processed version of a folder path, and the method provides read-only access to this value. The return type is annotated as `str | None`, indicating it may return either a string representing the normalized folder path or None if no such path is set.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:normalized_folder:21da1b3f12727bfb16e220d00b896843062a460e452f48b2b50d1e0ae533d00f:21da1b3f12727bfb16e220d00b896843062a460e452f48b2b50d1e0ae533d00f": "Returns the normalized folder path stored in the private attribute `_normalized_folder`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:normalized_language:dca779707d1b53ee85cf637a733e34323a9571c5cb0f00255797dc219b46b5e5:dca779707d1b53ee85cf637a733e34323a9571c5cb0f00255797dc219b46b5e5": "The `normalized_language` function is a property method within the `Passage` class that returns the normalized language identifier stored in the private attribute `_language`. The return type is annotated as `str | None`, indicating it can either return a string representing the language or `None` if no language information is available. This function provides read-only access to the language attribute of a passage instance.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:normalized_language:fad13d574ae9df2da2821f8ad2eb04f1b4cb1478b068b0a79b8fb9de140f1db6:fad13d574ae9df2da2821f8ad2eb04f1b4cb1478b068b0a79b8fb9de140f1db6": "Returns the normalized language value associated with the passage, or None if no language is set.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:remove_passage:4132f86f7f23319fffe2cbd8831a07da40df615b702ff451ac019f60fa4fdda3:4132f86f7f23319fffe2cbd8831a07da40df615b702ff451ac019f60fa4fdda3": "Removes a passage from the index by its ID. If the passage ID does not exist, the operation has no effect.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:remove_passage:8e77af06ff64aa05881390da4904e693355687269a7c3c9c88107000b8e39c81:8e77af06ff64aa05881390da4904e693355687269a7c3c9c88107000b8e39c81": "The function `remove_passage` removes a passage from the internal storage of the `RetrievalIndex` class using the specified `passage_id`. If the `passage_id` does not exist in the storage, the operation has no effect. The function does not return any value.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:search:40fb34597aa9441c5ab9171e6dd03fc8fe67d53d9bf5beb7527504d320cd9b82:40fb34597aa9441c5ab9171e6dd03fc8fe67d53d9bf5beb7527504d320cd9b82": "The `search` method retrieves the top-k passages from the index that match a given query embedding, subject to optional scope constraints. It normalizes the query vector, filters passages according to the specified scope, scores the filtered passages, and applies a diversity filter to the results. The method returns a list of dictionaries representing the retrieved passages, including their scores, previews, citations, and conflict information. If no passages match the criteria or if top_k is zero, it returns an empty list.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:search:7d7c90c1101d81df0d6c0e6e2c1ebecac5e47c8bc17d6f29a917cdd8b696cdec:7d7c90c1101d81df0d6c0e6e2c1ebecac5e47c8bc17d6f29a917cdd8b696cdec": "The `search` method retrieves the top-k most relevant passages based on a query embedding, applying optional scope constraints and diversity filtering. It normalizes the query vector, filters passages according to the provided scope, scores the filtered passages, and applies a diversity filter to the top results. Conflicts among selected passages are detected, and the final results are formatted into dictionaries containing passage details, scores, previews, citations, and conflict information. If no passages match the scope or scoring yields no results, an empty list is returned.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:tag_set:43e1c81e6f3599658289b61a1cf471c82b1671ba50d498cfa55e83a6a625d41f:43e1c81e6f3599658289b61a1cf471c82b1671ba50d498cfa55e83a6a625d41f": "Returns an immutable set of integer tags associated with the passage.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:tag_set:fdac12f36c2643b39ba2388f76c7413734c73793f0b1f02d49522be659f8e53a:fdac12f36c2643b39ba2388f76c7413734c73793f0b1f02d49522be659f8e53a": "The function `tag_set` is a read-only property of the `Passage` class that returns a frozen set of integers representing the tags associated with the passage. The tags are stored in the private attribute `_tags`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:to_dict:0598b9cb235f05394bd87eef62ffb7e366f99cfcf10e4902eb7a13fc3669155a:0598b9cb235f05394bd87eef62ffb7e366f99cfcf10e4902eb7a13fc3669155a": "The function `to_dict` converts the `RetrievedPassage` object into a dictionary representation. It includes fields from the embedded `passage` object such as `passage_id`, `document_id`, `text`, and `metadata`, along with additional attributes of the `RetrievedPassage` like `score`, `preview`, `citation`, and `conflicts`. Optional fields are included conditionally, such as `language`, `tags`, `folder`, and `created_at`, depending on whether they are set. The resulting dictionary provides a structured overview of the retrieved passage and its associated data.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:to_dict:2b87d11154868ec93842f096bf5dcdf3da58628c2a4f12e9ac0461a6751544b7:2b87d11154868ec93842f096bf5dcdf3da58628c2a4f12e9ac0461a6751544b7": "The function `to_dict` converts the `RetrievedPassage` object into a dictionary representation. It includes fields from the embedded `passage` object such as `passage_id`, `document_id`, `text`, and metadata, along with score, preview, citation, and conflicts from the `RetrievedPassage` itself. Additional optional fields like `language`, `tags`, `folder`, and `created_at` are included if they are present. The resulting dictionary provides a structured view of the passage and its associated data.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:to_dict:795fda84b5a21a485e596e579dbd514678d18338e4fc3fc8a84f66f73b497e43:795fda84b5a21a485e596e579dbd514678d18338e4fc3fc8a84f66f73b497e43": "The `to_dict` method converts the Citation instance into a dictionary representation containing the document ID, page number, and section information.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:to_dict:c2ef5bad9f8b1920e0b304d3bb036bfea4fa9b212bb0d4af71cf301554682b1b:c2ef5bad9f8b1920e0b304d3bb036bfea4fa9b212bb0d4af71cf301554682b1b": "The function `to_dict` defines a method in the `Citation` class that returns a dictionary representation of the citation's attributes. The dictionary includes the document ID, page number, and section information, mapping each to corresponding instance variables. This facilitates serialization or data exchange with other components.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\search.py:9c3e209a2b9c49d7bd048ee8898b89787286d90b5e564833fd53f8b6db4d0f4d:9c3e209a2b9c49d7bd048ee8898b89787286d90b5e564833fd53f8b6db4d0f4d": "The module defines a `SearchService` class that provides keyword search functionality across indexed documents, integrating with project metadata and chat scopes. It supports searching within specified tags, folders, or chat contexts, and returns structured results including document metadata, highlights, and context snippets. The service resolves search scope from explicit parameters or stored chat state, normalizes file paths, and handles query tokenization with fallback strategies for matching. It includes methods for retrieving documents, collecting context records, and generating text snippets from search results. The implementation uses an ingest index for searching and maintains mappings of documents by path to efficiently associate search results with project data.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\search.py:SearchService:__init__:5d8480d10f84194b095935556918632d40843c2cfae5f49ff0575c8113ad33da:5d8480d10f84194b095935556918632d40843c2cfae5f49ff0575c8113ad33da": "Initializes a class instance with three repository dependencies: ingest document repository, document repository, and chat repository. Assigns these repositories as instance attributes for later use.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\search.py:SearchService:_build_path_index:1955df19b60e16d3e23adaab590d45ce720d859171e000853345eba671d823f1:1955df19b60e16d3e23adaab590d45ce720d859171e000853345eba671d823f1": "Creates a dictionary mapping normalized file paths to their corresponding document dictionaries from an iterable of document objects. Processes each document by extracting the source path, normalizing it, and using the normalized path as a key in the returned dictionary. Skips documents without a source path. Returns the constructed path-indexed dictionary.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\search.py:SearchService:_document_identifiers:fd0f1f13b73bc8938d045f830b6bbfe1b6921dee10ec1fa9d8879b33f64cb55b:fd0f1f13b73bc8938d045f830b6bbfe1b6921dee10ec1fa9d8879b33f64cb55b": "Function that extracts unique identifiers from a document dictionary. Returns a set containing string representations of the document's ID, source path, normalized source path, and title when present.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\search.py:SearchService:_normalize_folder:e2ee7f1b3a40a8042b41668cd5286d02f8ef774e9c1902dfe6d6eef5d7a4683a:e2ee7f1b3a40a8042b41668cd5286d02f8ef774e9c1902dfe6d6eef5d7a4683a": "Function that normalizes a folder path by converting it to a string representation of a Path object, returning None for None or empty string inputs.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\search.py:SearchService:_normalize_path:43870535a5127a1297e312b7ef09f9900b8fca7fbf53edd47862ee58f305cafb:43870535a5127a1297e312b7ef09f9900b8fca7fbf53edd47862ee58f305cafb": "Function that converts a path argument to a string representation of a normalized absolute path. Takes either a string or Path-like object as input and returns a string containing the normalized path. Uses Python's Path class to handle path normalization and conversion to string format.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\search.py:SearchService:_resolve_scope:1eed8a7503a52529efb7e549c74d0c162f7834118f255723f48cf6e6302b636a:1eed8a7503a52529efb7e549c74d0c162f7834118f255723f48cf6e6302b636a": "Function resolves query scope parameters for a chat, combining explicitly provided values with stored values, and optionally saving the explicit values as the new stored scope for the chat. It returns a tuple containing the resolved tags and folder path.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\search.py:SearchService:_search_with_fallback:4219dbf46c80a734a8b74864e21cd58aa21216e57899ce653e89043d8e7579a0:4219dbf46c80a734a8b74864e21cd58aa21216e57899ce653e89043d8e7579a0": "Function performs a search with multiple query attempts, using exact match, wildcard tokens, and combined wildcard tokens, returning the first non-empty result set or an empty list.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\search.py:SearchService:_tokenize_query:a18e95d48711e28c2f4454564dc5e70e11c7c5b2069b66a42d7a094efd0abbb3:a18e95d48711e28c2f4454564dc5e70e11c7c5b2069b66a42d7a094efd0abbb3": "Function processes a query string to extract significant terms for relaxed fallback queries. It identifies tokens using a predefined pattern, filters out short terms and stopwords, removes duplicates while preserving order, and returns the resulting list of unique tokens.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\search.py:SearchService:bafc6c08c178c2bd45d2d6c0d712bc52672bbdaef0dd1a7d2dcf168edc99c7a8:bafc6c08c178c2bd45d2d6c0d712bc52672bbdaef0dd1a7d2dcf168edc99c7a8": "The `SearchService` class provides document search and retrieval capabilities within a structured corpus, supporting operations like indexing, querying, and context collection based on project scope, tags, and folder hierarchies. It handles search fallback logic, path normalization, and duplicate suppression to ensure accurate and efficient result generation. The class manages document metadata, chunked content, and relevance scoring while integrating with repositories for ingestion, document management, and chat history.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\search.py:SearchService:collect_context_records:89b87eddbaf0caa4fea0104196bc626fa694a0d3bf17c87ba461ff80b1656bb3:89b87eddbaf0caa4fea0104196bc626fa694a0d3bf17c87ba461ff80b1656bb3": "Function retrieves structured context records based on a query within a specified project scope, filtering documents by tags, folder, and identifiers. It searches for relevant document chunks, applies inclusion and exclusion filters on document identifiers, and constructs records containing document metadata, chunk text, and highlights. Results are limited by a specified count and returned as a list of dictionaries.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\search.py:SearchService:retrieve_context_snippets:1c9e6ae94b8a17c778b592b42f77c635a75348547bd741624fcfcc563b250cb9:1c9e6ae94b8a17c778b592b42f77c635a75348547bd741624fcfcc563b250cb9": "Function retrieves context snippets from records based on a query and specified filters. It collects records using a helper method, then processes each record to extract document and chunk information. For each record, it constructs a labeled snippet combining a title derived from the document path or title with the context text. The function returns a list of these formatted snippets.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\search.py:SearchService:search_documents:145f20d561d8b238ea242ac260094d67c017d7a8b65f19c95251859e6b3e64bd:145f20d561d8b238ea242ac260094d67c017d7a8b65f19c95251859e6b3e64bd": "Function searches through an ingest index and merges results with project documents, returning a list of dictionaries containing document details, highlights, context, and scores. It resolves scope based on provided parameters, retrieves candidate documents, builds a path index, and iterates through search results to construct the output. The function filters out duplicate documents and limits the number of results returned.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\search.py:__init__:3d53dcb9b57456a7762de1e95c2a1c43872a5d9450694ad95abaa5a574fc0acf:3d53dcb9b57456a7762de1e95c2a1c43872a5d9450694ad95abaa5a574fc0acf": "Initializes the SearchService class with three repository dependencies: IngestDocumentRepository for document ingestion, DocumentRepository for document management, and ChatRepository for chat-related operations. Assigns these repositories to instance attributes for use in subsequent methods.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\search.py:__init__:c9fb9eccd23f86468227193248b50c7ba60ec3065ec3f916139eada6bd90f912:c9fb9eccd23f86468227193248b50c7ba60ec3065ec3f916139eada6bd90f912": "Initializes the SearchService with three repository dependencies: IngestDocumentRepository for handling document ingestion, DocumentRepository for managing documents, and ChatRepository for handling chat-related operations. Stores these repositories as instance attributes for use in other methods.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\search.py:_build_path_index:979745085b23d4baabdf706676fe0f30bc4d6ea5617deb83a67ec21bed24033e:979745085b23d4baabdf706676fe0f30bc4d6ea5617deb83a67ec21bed24033e": "The function `_build_path_index` constructs a dictionary index mapping normalized file paths to their corresponding document metadata. It takes an iterable of document dictionaries, extracts the `source_path` from each document, normalizes the path using the internal `_normalize_path` method, and stores the document data in the index under the normalized path as the key. Documents without a `source_path` are skipped. The resulting dictionary allows for efficient lookup of document metadata by file path.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\search.py:_build_path_index:dda1010a14d5783574d2806165ebfc2924970e190f7c238eb7d25030461cd40e:dda1010a14d5783574d2806165ebfc2924970e190f7c238eb7d25030461cd40e": "Builds a path-based index from a collection of documents, mapping normalized source paths to their corresponding document data. Returns a dictionary where keys are normalized paths and values are the original document entries. Skips documents without a source path field.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\search.py:_document_identifiers:2109021ebe12a85d23293ef82f0ea225bc9f74b0266026d19da9f15879798d3c:2109021ebe12a85d23293ef82f0ea225bc9f74b0266026d19da9f15879798d3c": "The function `_document_identifiers` extracts and returns a set of string identifiers from a document dictionary. It collects the document's \"id\", \"source_path\", and \"title\" fields, converting them to strings and normalizing the source path using a class method. The function ensures that only non-null and non-empty values are included in the returned set of identifiers.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\search.py:_document_identifiers:b79daf40fa2f8d1c68036d574557a5ccf494bd83ed9baa3a68779481d2ce5cb3:b79daf40fa2f8d1c68036d574557a5ccf494bd83ed9baa3a68779481d2ce5cb3": "The function `_document_identifiers` extracts a set of unique string identifiers from a document dictionary. It collects the document's ID, source path, and title, normalizing the source path for consistency. The function returns a set containing these identifiers, which may include the document ID, the raw source path, the normalized source path, and the document title if available.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\search.py:_normalize_folder:a149af21eedfee00aa155146dc6aae35119e6d79c49d435773f96b35cf2b0b92:a149af21eedfee00aa155146dc6aae35119e6d79c49d435773f96b35cf2b0b92": "Normalizes a folder path by converting None or empty strings to None, and converting Path objects or string paths to normalized string paths. Returns None for None or empty inputs, otherwise returns the string representation of the normalized path.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\search.py:_normalize_folder:a85aceb0a21a75b7cc702d03c678eb7628d73145292f81412b345e1e6037100e:a85aceb0a21a75b7cc702d03c678eb7628d73145292f81412b345e1e6037100e": "The function `_normalize_folder` takes a folder path as input, which can be a string, a `Path` object, or `None`. It returns `None` if the input is `None` or an empty string. Otherwise, it converts the input to a string representation of a `Path` object and returns that string. This ensures consistent handling of folder paths by normalizing them into a standard string format.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\search.py:_normalize_path:506aff4d11f0a9342f1761e60924216d6d9b7b62c9868dec6567135d4901cdba:506aff4d11f0a9342f1761e60924216d6d9b7b62c9868dec6567135d4901cdba": "The function `_normalize_path` takes a path argument that can be either a string or a `Path` object, converts it to a `Path` object, and then returns its string representation. This effectively normalizes the path format to a standard string representation.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\search.py:_normalize_path:9d183e3a772985be6b429de164a534ad6e38b4f27346c001f8ce39e5bf22c97b:9d183e3a772985be6b429de164a534ad6e38b4f27346c001f8ce39e5bf22c97b": "The function `_normalize_path` takes a path as input, which can be either a string or a `Path` object, and returns a normalized string representation of the path. It achieves this by converting the input to a `Path` object and then to a string, ensuring consistent path formatting.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\search.py:_resolve_scope:3fda7390aef5058122974795a848793ce513364209c55bb63b983b321de9b381:3fda7390aef5058122974795a848793ce513364209c55bb63b983b321de9b381": "Resolves the search scope based on provided parameters and stored chat settings. Returns a tuple of resolved tags and folder path, optionally saving the scope to chat storage.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\search.py:_resolve_scope:f42ba462b89372999d09153fee9b7ab17ca3475e12bdae06ee4f8bdc64f0d877:f42ba462b89372999d09153fee9b7ab17ca3475e12bdae06ee4f8bdc64f0d877": "The function `_resolve_scope` resolves and returns the effective tags and folder scope for a given chat ID, based on explicitly provided values or stored scope settings. It accepts optional `chat_id`, `tags`, and `folder` parameters, and a keyword-only `save_scope` flag. If `chat_id` is provided, it retrieves the stored scope from `self.chats`. The function prioritizes explicit values over stored ones, and if `save_scope` is True, it updates the stored scope with the explicitly provided values. It returns a tuple of the resolved tags and folder, which may be `None` if not specified or stored.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\search.py:_search_with_fallback:0db7f1afb8f650fe80aa444672f334a2a02027d69e8e17f8c8f4c123a773340d:0db7f1afb8f650fe80aa444672f334a2a02027d69e8e17f8c8f4c123a773340d": "The function `_search_with_fallback` performs a search query on an ingest index with fallback logic to handle overly strict MATCH syntax. It takes a query string and a limit for the number of results, normalizes the query, and generates multiple search attempts including wildcard-based variations. The function iterates through these attempts, executing searches and returning the first non-empty result set. If all attempts fail or return no results, it returns an empty list. The function handles potential `sqlite3.OperationalError` exceptions during search execution and ensures that duplicate attempts are not executed.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\search.py:_search_with_fallback:5b1f2f652e9c92893fbc62e55474b06fcc57a121a5e5dc12154385f4d127ab72:5b1f2f652e9c92893fbc62e55474b06fcc57a121a5e5dc12154385f4d127ab72": "The function `_search_with_fallback` performs a search query against an ingest index with fallback logic for handling strict MATCH syntax. It takes a query string and a limit parameter, normalizes the query, and generates multiple search attempts including exact match, wildcard-based OR queries, and wildcard-based space-separated queries. The function iterates through these attempts, skipping duplicates, and returns results from the first successful search attempt. If all attempts fail or the query is empty, it returns an empty list.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\search.py:_tokenize_query:b73abb517c3d6af71241e36ab5669b386d4a36f2d5c799811b870fbbc4cef2c2:b73abb517c3d6af71241e36ab5669b386d4a36f2d5c799811b870fbbc4cef2c2": "The function `_tokenize_query` processes a search query string to extract significant terms for relaxed fallback searches. It uses a predefined token pattern to identify words, converts them to lowercase, and filters out tokens that are shorter than three characters or are present in a set of stop words. The resulting tokens are then deduplicated while preserving their original order, returning a list of unique, filtered tokens.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\search.py:_tokenize_query:ed0049fc22b979e0597225404f25ea8403d6d208e2bc0a32e2b4bf7cfecb977f:ed0049fc22b979e0597225404f25ea8403d6d208e2bc0a32e2b4bf7cfecb977f": "The function `_tokenize_query` extracts significant terms from a query string for use in relaxed fallback searches. It identifies tokens using a predefined pattern, filters out short or stop words, and ensures uniqueness of the resulting tokens. The output is a list of lowercase, filtered, and deduplicated tokens.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\search.py:collect_context_records:38e1aaa0fff4602c02c15adf55b58b5efcbf05824fafc483f7763ce1fa47d0b2:38e1aaa0fff4602c02c15adf55b58b5efcbf05824fafc483f7763ce1fa47d0b2": "The function `collect_context_records` retrieves structured retrieval records for a given query within a specified scope. It filters documents based on project ID, optional tags, folder path, and recursion settings. The results are further filtered by include and exclude identifiers associated with documents. For each matching record, it constructs a context record containing document details, chunk information, text content, and highlight data. The function ensures no duplicate chunks are included in the result and limits the number of returned records based on the specified limit. The final output is a list of dictionaries, each representing a context record with relevant metadata and content.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\search.py:collect_context_records:d0636742cff24507fdc2df3b235e52c3924706de28f8ec848374e06aa3f49993:d0636742cff24507fdc2df3b235e52c3924706de28f8ec848374e06aa3f49993": "The function `collect_context_records` retrieves structured retrieval records for a given query within a specified scope. It filters documents based on project ID, optional tags, folder path, and recursion settings. The results are limited by a specified number and further filtered using include or exclude identifiers associated with documents. Each record includes document metadata, chunked text content, highlighting information, and relevance scores. The function ensures no duplicate chunks are included in the result set and returns a list of dictionaries representing the retrieved context records.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\search.py:retrieve_context_snippets:4ef7e3ca0939dd51ffbf41a56a360e5c1d6eaff5f0e105e42b637c1db4854678:4ef7e3ca0939dd51ffbf41a56a360e5c1d6eaff5f0e105e42b637c1db4854678": "The function `retrieve_context_snippets` retrieves a list of context snippets relevant to a given query from a specified project. It collects context records using the `collect_context_records` method with parameters such as project ID, query, limit, tags, folder path, recursion settings, and identifier filters. For each record, it extracts document and chunk information to construct a snippet string that includes a label (derived from the document title or file name) and the contextual text. The resulting list of formatted snippets is returned.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\search.py:retrieve_context_snippets:52f5423dbba8ffa87bd82c1ab75417689ea0e96f5818dead12d4c733eca2eb0c:52f5423dbba8ffa87bd82c1ab75417689ea0e96f5818dead12d4c733eca2eb0c": "Retrieves context snippets from records based on a search query, formatting each snippet with a label derived from the document title or path, followed by the context text. The function collects records using `collect_context_records` and processes them to extract document paths, titles, and context text, constructing formatted strings for each record. Returns a list of these formatted snippets.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\search.py:search_documents:323ff47e7cc932a883bf117c08a33c6a7d5195782f3eb7ece80cf80678b5935a:323ff47e7cc932a883bf117c08a33c6a7d5195782f3eb7ece80cf80678b5935a": "The function `search_documents` performs a search query against an ingest index and retrieves relevant project documents. It accepts parameters for the query string, project ID, result limit, chat ID, tags, folder path, recursion settings, and scope saving. The method resolves the search scope using `_resolve_scope`, lists candidate documents within that scope via `documents.list_for_scope`, and builds a path-based index of those documents. It then iterates through search results from `_search_with_fallback`, matches them to documents by path, and constructs result entries containing document details, highlights, context, and scores. The function ensures no duplicate documents are included in the results and returns a list of dictionaries representing the matched documents up to the specified limit.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\search.py:search_documents:9f9802322be31394940317ab9f55c1b63e6fc9e7ccd2834819b2b83cb6dd3e26:9f9802322be31394940317ab9f55c1b63e6fc9e7ccd2834819b2b83cb6dd3e26": "The function `search_documents` performs a search query against an indexed document corpus, returning a list of relevant document records. It accepts parameters for specifying the project, query string, result limits, chat context, tags, folder scope, and whether to save the search scope. The method resolves the search scope using `_resolve_scope`, retrieves candidate documents within that scope via `documents.list_for_scope`, and builds a path-based index of those documents. It then iterates through search results from `_search_with_fallback`, matches them to documents by path, and constructs result entries containing document metadata, highlighted text, chunk information, and relevance scores. The function ensures no duplicate documents are included in the results and stops collecting once the specified limit is reached.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\__init__.py:405ae42ba6ac834b66cc4896d7293dd37d7554c7e4afaa9a9301053afaf834da:405ae42ba6ac834b66cc4896d7293dd37d7554c7e4afaa9a9301053afaf834da": "Module defines background services for the DataMiner application, including conversation management, document hierarchy handling, export capabilities, and LMStudio client integration. It exposes core classes and exceptions from imported modules through a public API. Optional UI-related services such as progress tracking, settings management, and project handling are conditionally imported based on available PyQt6 dependencies.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\backup_service.py:383834a64eebbd0429edafc9191a4dc8292fbd5575fcdeefebdbbc79d7f018b5:383834a64eebbd0429edafc9191a4dc8292fbd5575fcdeefebdbbc79d7f018b5": "The module defines a `BackupService` class for creating and restoring archive snapshots of application data. It includes methods to generate backups in ZIP format containing database exports, project storage files, and manifest metadata. The restore process imports database snapshots and reconstructs project storage directories based on the manifest. The service uses temporary directories during backup and restore operations and handles schema version compatibility checks. The module also exports a `MANIFEST_NAME` constant for identifying manifest files within backups.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\backup_service.py:BackupService:59b118a41e88f630fdeb8eb344f905baf2e2dd8515659d84a744ffda5dfb6a7a:59b118a41e88f630fdeb8eb344f905baf2e2dd8515659d84a744ffda5dfb6a7a": "The `BackupService` class manages the creation and restoration of application backups, ensuring data and configuration integrity by packaging database files, project data, and manifests into ZIP archives. It supports exporting backups to a specified destination and importing them back into the system, handling both individual project storage locations and default root directories during restoration. The class relies on a `ProjectService` instance to coordinate backup operations and maintain project consistency throughout the process.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\backup_service.py:BackupService:__init__:8b174c062bf02631b7e80e649c4b90c8cd9a76d5bfc2d7683d86935ab3281774:8b174c062bf02631b7e80e649c4b90c8cd9a76d5bfc2d7683d86935ab3281774": "Initializes an object with a project service dependency.\n\nSets the internal `_projects` attribute to the provided ProjectService instance.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\backup_service.py:BackupService:create_backup:38f480e0f2753810310f5050d583df912b4ec34c786680e0893313d8ca70db6d:38f480e0f2753810310f5050d583df912b4ec34c786680e0893313d8ca70db6d": "Function creates a backup of project data and configuration into a ZIP archive at the specified destination. It generates a timestamped filename if the destination is a directory. The backup includes a database export, project storage files, and a manifest file containing metadata about the backup contents. The function ensures parent directories exist for the destination path and handles missing project storage locations gracefully. The resulting ZIP file contains database, derived project files, and manifest organized within the archive structure.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\backup_service.py:BackupService:restore_backup:7087f69878d7ccaf31a191bff67735d04d6b95f694e8810c3c5e77ddef72375d:7087f69878d7ccaf31a191bff67735d04d6b95f694e8810c3c5e77ddef72375d": "Restores project data from a backup archive file. Extracts contents to a temporary directory, validates the manifest file, and checks schema compatibility. Imports database content from the backup and restores storage locations for projects. Updates project storage paths and reloads the projects manager.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\backup_service.py:__init__:56e3cd0e6146366201880e53dc4406f505fa06ab206f5144dfe61bd7b9c51357:56e3cd0e6146366201880e53dc4406f505fa06ab206f5144dfe61bd7b9c51357": "The `__init__` method initializes the `BackupService` class by accepting a `ProjectService` instance and assigning it to the private attribute `_projects`. This establishes a dependency on the project service for backup operations.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\backup_service.py:__init__:99c56b15e76d7355ad6fb18f0e79e9495f664f81d00b3d0c70276b0a84de50d6:99c56b15e76d7355ad6fb18f0e79e9495f664f81d00b3d0c70276b0a84de50d6": "Initializes the BackupService instance with a ProjectService dependency.\n\nThis constructor stores a reference to the provided ProjectService instance in the private `_projects` attribute for use by other methods in the class. The service is stored as-is without any modification or additional processing.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\backup_service.py:create_backup:333881db9fece078dcaa9aa254f31e14536e118ce415e000baad4f62238b409b:333881db9fece078dcaa9aa254f31e14536e118ce415e000baad4f62238b409b": "Creates a backup of the current project data and configuration, saving it as a ZIP file at the specified destination. If the destination is a directory, a timestamped filename is generated. The backup includes the database, derived project files, and a manifest describing the backup contents. Returns the path to the created backup file.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\backup_service.py:create_backup:b4787222092666249e7d7d7b2708b809a59e9eefac066b508a3463974f9bbc2a:b4787222092666249e7d7d7b2708b809a59e9eefac066b508a3463974f9bbc2a": "The `create_backup` function generates a backup of the application's data and configuration to a specified destination. It creates a ZIP archive containing the database, project files, and a manifest file. The function ensures the destination directory exists, constructs a timestamped filename if the destination is a directory, and exports the database using the project's database manager. It includes project storage locations in the manifest and archives all relevant files from each project's storage directory. The resulting ZIP file is returned as a `Path` object.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\backup_service.py:restore_backup:0a9a310bdbcbaa797aafc28d1bd5f52fa14c2057c8b251219ab1f0f12bd03f5d:0a9a310bdbcbaa797aafc28d1bd5f52fa14c2057c8b251219ab1f0f12bd03f5d": "The `restore_backup` function restores a backup from a specified archive file. It extracts the archive contents into a temporary directory, validates the manifest file for schema compatibility, and imports the database snapshot into the project's database manager. It then processes storage locations defined in the manifest, copying derived project data to their respective target directories. If no specific storage locations are defined, it copies all project data from the archive to the default storage root. Finally, it reloads the projects to reflect the restored data.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\backup_service.py:restore_backup:253813eaae34476876bb353dbb2ce1ebe1a9542fd5f178940518523462aba33a:253813eaae34476876bb353dbb2ce1ebe1a9542fd5f178940518523462aba33a": "Restores a backup from a specified archive file. The function extracts the archive contents into a temporary directory, validates the manifest file, and checks that the schema version is supported. It then imports the database snapshot into the project's database manager. Afterward, it restores project storage locations by copying files from the archive to their respective paths, updating project storage locations in the projects manager. Finally, it reloads the projects to apply the changes. Raises `FileNotFoundError` if the archive does not exist, and `ValueError` if the manifest is missing or has an unsupported schema version, or if the database snapshot is missing.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:AssumptionDecision:13c78c210fd298d0b848e4ebd397abdbbdc1465d7ab7b6c2df5000ef5facc255:13c78c210fd298d0b848e4ebd397abdbbdc1465d7ab7b6c2df5000ef5facc255": "The `AssumptionDecision` class appears to be a component within a document processing and retrieval system that handles decision-making related to assumptions, likely in the context of AI-generated responses or query processing. It is part of a larger framework that supports offline document analysis using local AI models, with capabilities for corpus ingestion, search, and retrieval. The class contributes to the system's ability to manage and reason about document content without requiring network connectivity.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:ConnectionState:40f323ba2f407f4f97a8aa94131020a30f77dff234e4f4fb7ae6eafe3e3de7ca:40f323ba2f407f4f97a8aa94131020a30f77dff234e4f4fb7ae6eafe3e3de7ca": "The `ConnectionState` class represents the state of a connection within the document processing and question-answering application, managing the connectivity status for local AI model interactions and data storage operations. It serves as part of the project's infrastructure for handling offline document ingestion, retrieval, and AI response generation without network dependencies. The class supports the application's functionality for corpus management, search indexing, and conversation context handling using SQLite for local data storage.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:ConversationManager:14b176c94a67b64c65bfbfc1942599271639dbbc61fbd10655dee4e9abf7cd16:14b176c94a67b64c65bfbfc1942599271639dbbc61fbd10655dee4e9abf7cd16": "The `ConversationManager` class manages AI conversation sessions using an LMStudio client, handling connection state, question processing, and response generation with support for both single-shot and dynamic planning approaches. It maintains a history of conversation turns, aggregates citations and reasoning artifacts from responses, and provides mechanisms for checking connectivity and notifying listeners of connection status changes. The class supports advanced features like context window management, multi-step query planning, and deduplication of citations and reasoning artifacts to ensure clean and accurate responses.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:ConversationManager:__init__:f31b92159e4ff12ac16fd4931779a53a62df253e63d4cb3d71b842060b2707f7:f31b92159e4ff12ac16fd4931779a53a62df253e63d4cb3d71b842060b2707f7": "Initializes a conversation instance with a client, optional system prompt, and context window size. Sets up internal state for tracking conversation turns, connection status, and event listeners. Configures the context window to ensure non-negative value.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:ConversationManager:_aggregate_citations:fbcc379035878102a77aefc6f918709256582593475873402a2c571f698dfb63:fbcc379035878102a77aefc6f918709256582593475873402a2c571f698dfb63": "Function aggregates citations from multiple step results into a unified list while maintaining an index mapping. It processes each step result's citations, de-duplicates them based on a key function, and adds step indices to each citation indicating which steps referenced it. The function returns the aggregated citations and the mapping of citation keys to their positions in the aggregated list.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:ConversationManager:_ask_single_shot:635c37250f7fe8a830db5e79673f641116500742be3ac51c1bff8cc681f75c17:635c37250f7fe8a830db5e79673f641116500742be3ac51c1bff8cc681f75c17": "Function executes a single language model inference request with specified parameters and returns the conversation turn result. It constructs messages and request options, sends the request through a client, handles potential errors by updating connection status, and registers the conversation turn with provided parameters.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:ConversationManager:_ask_with_plan:989730ca1c7cbec76b196c8f0785d6053a40dd642eb675e34f8039624946ccd9:989730ca1c7cbec76b196c8f0785d6053a40dd642eb675e34f8039624946ccd9": "Function `_ask_with_plan` executes a dynamic planning process for answering a question. It generates a plan from the input question, then iterates through each plan item to gather context and generate responses using a language model. For each step, it builds prompts, manages context batches, handles model interactions, collects answers and citations, and aggregates results. The function tracks execution status of each plan item, manages assumptions, and constructs a final answer combining all step results. It returns a `ConversationTurn` object containing the full response, reasoning artifacts, citations, and metadata about the process.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:ConversationManager:_build_messages:a8c09e4a9560d0eed8444f8f946c5454d87368514ac656285822c0b82a13120e:a8c09e4a9560d0eed8444f8f946c5454d87368514ac656285822c0b82a13120e": "Function constructs a list of message dictionaries for an AI conversation interface. It incorporates a system prompt if present, adds previous conversation turns from a history buffer, and includes the current question with optional context snippets. Each message is formatted as a dictionary containing a role and content field. The function handles both system-level instructions and user-assistant dialogue exchanges, organizing them into a sequential list for processing by language models.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:ConversationManager:_build_request_options:03ba8d3f6396c2e0d2ef088319cded74a643a3b71f0420d5c643c02aadcf1906:03ba8d3f6396c2e0d2ef088319cded74a643a3b71f0420d5c643c02aadcf1906": "Function builds request options dictionary by incorporating reasoning verbosity settings, response mode configuration, and additional options. It handles merging of reasoning configurations, processes response mode for sources-only requests, and manages deep copying of extra options while normalizing question text in retrieval settings. Returns configured options dictionary for API requests.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:ConversationManager:_build_step_prompt:fde063f9749615be4bfd22d5c8bab074f22af1bf5db38146fa79e5417618ae5c:fde063f9749615be4bfd22d5c8bab074f22af1bf5db38146fa79e5417618ae5c": "Function that constructs a formatted prompt string for a specific step in a multi-step process. Takes parameters including the question, step description, current step index, total steps count, and pass number. Returns a string combining step metadata, the original question, and instructions for generating a concise factual finding without citation markers.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:ConversationManager:_citation_key:46183688ab0a95abd0c889d5190de8c4a5969cbee712ef83a63b0b7e21278822:46183688ab0a95abd0c889d5190de8c4a5969cbee712ef83a63b0b7e21278822": "Function that converts a citation object into a string key by serializing it as JSON with sorted keys, falling back to string conversion if serialization fails.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:ConversationManager:_coerce_str_list:3b158a3ac0561185f866550e4291586d8d6545ad30ef3ac667d5ab3ce297eeb9:3b158a3ac0561185f866550e4291586d8d6545ad30ef3ac667d5ab3ce297eeb9": "Function that converts input values into a list of strings, handling string inputs by stripping whitespace and returning single-item lists or empty lists for empty strings, processing sequences by filtering and stripping string items while excluding strings, bytes, and dictionaries, and returning empty lists for all other inputs.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:ConversationManager:_collect_citation_indexes:04d71140770762bf876b8afa86637d8d9d6cf390e14ebe9a5b8f622f662b1f55:04d71140770762bf876b8afa86637d8d9d6cf390e14ebe9a5b8f622f662b1f55": "Function that takes a sequence of citations and a dictionary mapping citation keys to integer indexes. It processes each citation through a key extraction method, checks if the extracted key exists in the index map, and collects matching indexes. Returns a sorted list of the collected indexes.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:ConversationManager:_compose_final_answer:5b6ace5789225ea8e2864344764e48b4d03897c9bc3ede73db907f8f2dafa649:5b6ace5789225ea8e2864344764e48b4d03897c9bc3ede73db907f8f2dafa649": "Function that processes a sequence of step results to create a formatted final answer string. It iterates through each result, extracts either the answer or description, adds citation markers if present, and joins all processed lines with double newlines.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:ConversationManager:_deduplicate_citations:5f69e91753de7f5e908a39705ac6009f1582d72834451f6cf32e3911a3287570:5f69e91753de7f5e908a39705ac6009f1582d72834451f6cf32e3911a3287570": "Function that removes duplicate citations from a sequence by generating unique keys for each citation and keeping only the first occurrence of each unique citation.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:ConversationManager:_deduplicate_preserve_order:8bc0464d2d759201b536258b306a7b970ca89b028f41f957bb613cc829d2b0f5:8bc0464d2d759201b536258b306a7b970ca89b028f41f957bb613cc829d2b0f5": "Function that removes duplicate strings from a sequence while maintaining the original order of first occurrences. Takes a sequence of strings as input and returns a list of strings with duplicates eliminated. Uses a set to track seen values and a list to preserve insertion order. Iterates through the input sequence once, adding each unique value to both the seen set and ordered list. Returns the final list containing only unique values in their first-encountered order.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:ConversationManager:_emit_connection_state:c10e053d2513832b8fa4d078e979a5e3cae26d1c1c85862bbe5ff04eb5e9ee36:c10e053d2513832b8fa4d078e979a5e3cae26d1c1c85862bbe5ff04eb5e9ee36": "Function that notifies all registered listeners about the current connection state by invoking each listener with the state parameter, while catching and ignoring any exceptions that may occur during listener execution.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:ConversationManager:_generate_plan:7817e053cd4c8c02d80b59923ab609d7d2a2ecd8ccaa274bad6e411342e797df:7817e053cd4c8c02d80b59923ab609d7d2a2ecd8ccaa274bad6e411342e797df": "Function that processes a question string into a list of PlanItem objects. It splits the input on sentence delimiters, filters out short segments, and creates plan items with \"not_started\" status. Returns at most six plan items, using the full normalized question as fallback if no valid segments exist.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:ConversationManager:_merge_step_options:0296b0b556092bc273daff37102177c7c7d5bedb72cca3a15674edfded2d6a73:0296b0b556092bc273daff37102177c7c7d5bedb72cca3a15674edfded2d6a73": "Function that merges step options with document retrieval data and builds request options. Takes base options, documents, question, reasoning verbosity, and response mode as inputs. Creates a deep copy of base options, extends document list in retrieval settings if documents are provided, then builds and returns merged request options using internal build method.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:ConversationManager:_parse_reasoning_artifacts:f0db3d9a2347c8355644dcc3e75e4c88f0ca3d1ce85b5fc2f3a8aaeb56463d51:f0db3d9a2347c8355644dcc3e75e4c88f0ca3d1ce85b5fc2f3a8aaeb56463d51": "Function processes a dictionary containing reasoning data and extracts structured components including summary bullets, plan items, assumptions, assumption decisions, and self-check results. It returns a `ReasoningArtifacts` object populated with the extracted data, or `None` if no relevant data is present. The function handles multiple possible key names for each component and normalizes data types, deduplicates entries, and constructs objects based on the parsed values.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:ConversationManager:_register_turn:d7e1dbb284a92a087f9ea7a56745a3495810d669ee33d575c9911ed57dd2f1ff:d7e1dbb284a92a087f9ea7a56745a3495810d669ee33d575c9911ed57dd2f1ff": "Function creates and registers a conversation turn with specified parameters, storing parsed reasoning artifacts and returning the created turn object.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:ConversationManager:_update_connection:f905aa3d1f38ff5b58046de35caf5b9888597f49f30cb8795e869069965f8977:f905aa3d1f38ff5b58046de35caf5b9888597f49f30cb8795e869069965f8977": "Function updates connection state and emits event when state changes.\n\nUpdates internal connection status flags and triggers connection state emission when connection status or error message differs from current values.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:ConversationManager:add_connection_listener:d536c79e4828ab9bd7370ddf85fce0b0eb63c20f2fb28b27dfa06f4b5696d28c:d536c79e4828ab9bd7370ddf85fce0b0eb63c20f2fb28b27dfa06f4b5696d28c": "Function that adds a connection state change listener to a list of listeners and returns a function to remove that listener from the list. The returned function can be called to unsubscribe the listener from future connection state updates.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:ConversationManager:ask:d6411ac15e9462b0fad61d2b957672e44fb694d22be73139c308ea6ca3e38846:d6411ac15e9462b0fad61d2b957672e44fb694d22be73139c308ea6ca3e38846": "Function sends a question to an LMStudio instance and returns the resulting conversation turn. It handles connection validation and uses either dynamic planning or single-shot prompting based on whether a context provider is supplied. The function supports various parameters for controlling response behavior, including answer length, reasoning verbosity, and response mode. It raises an exception if the LMStudio connection is unavailable.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:ConversationManager:can_ask:24b46f44a61e39fe3b833d5ff361e4af1f1ec8d04622a4db56e95494c4aa4b7e:24b46f44a61e39fe3b833d5ff361e4af1f1ec8d04622a4db56e95494c4aa4b7e": "The function returns a boolean value indicating whether it is safe to issue a new query based on the connection status. It checks the `_connected` attribute and returns its value directly.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:ConversationManager:check_connection:a2bb8b0c41da88612f6abc48a69f2f9b6a52a9aa38ec0e2126a398b43ce322a5:a2bb8b0c41da88612f6abc48a69f2f9b6a52a9aa38ec0e2126a398b43ce322a5": "Function that performs a health check on LMStudio, updates the connection state based on the result, and returns the current connection state.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:ConversationManager:connection_state:2f98c96b620ea1983f1fcbaa4310068bad49d745b84fc02595b66bf7584707b4:2f98c96b620ea1983f1fcbaa4310068bad49d745b84fc02595b66bf7584707b4": "The function returns a ConnectionState object constructed from the instance's internal connected state and connection error attributes.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:ConversationTurn:6ac664ff47da6cdd116a194ae177876915a4a6870a2ff65a489a78abb8e9eab3:6ac664ff47da6cdd116a194ae177876915a4a6870a2ff65a489a78abb8e9eab3": "The `ConversationTurn` class encapsulates the data and logic related to a single turn in a conversation, particularly focusing on reasoning artifacts such as summary bullets, plan items, assumptions, assumption decisions, and self-check results. It provides methods to access these reasoning components safely, returning empty lists or null values when the reasoning artifacts are not available. The class serves as a structured way to represent and retrieve the outcomes of AI reasoning during a conversation turn.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:ConversationTurn:assumption_decision:4c210072cac46f46e0ea4e5740d91503459530a26b3dbde6fed00e99abf98000:4c210072cac46f46e0ea4e5740d91503459530a26b3dbde6fed00e99abf98000": "The function retrieves an assumption decision from reasoning artifacts when available, returning None if the artifacts are not initialized.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:ConversationTurn:assumptions:9e143c678ba2a2154fdf0fa8decc5d0ce9f5a99bf816e163731c8fcf8990b026:9e143c678ba2a2154fdf0fa8decc5d0ce9f5a99bf816e163731c8fcf8990b026": "Function that returns a list of assumption strings from reasoning artifacts, or an empty list if the artifacts are None.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:ConversationTurn:plan:da72ac9045cae2fb8b1674a59029274a008e66a9c58fd748b489778d92120315:da72ac9045cae2fb8b1674a59029274a008e66a9c58fd748b489778d92120315": "Function that returns a list of plan items from reasoning artifacts, or an empty list if the artifacts are not available.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:ConversationTurn:reasoning_bullets:8bd07d408504a6ca37e6ad291fa72c165c03677c885ff779791c188227c94f8c:8bd07d408504a6ca37e6ad291fa72c165c03677c885ff779791c188227c94f8c": "Function that returns a list of string bullets from reasoning artifacts summary, or an empty list if artifacts are None.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:ConversationTurn:self_check:3a4f942d7cedea6dace2d231ecd36c6e6e7056c215032bb9e56ea9c95043fbcf:3a4f942d7cedea6dace2d231ecd36c6e6e7056c215032bb9e56ea9c95043fbcf": "Function that retrieves a self-check result from reasoning artifacts. Returns the self-check result if reasoning artifacts exist, otherwise returns None.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:DynamicPlanningError:a9c7e3e0acf1150060aa9dc90d5f5fb7371dc50da2b96ade6be09bc9c05b363d:a9c7e3e0acf1150060aa9dc90d5f5fb7371dc50da2b96ade6be09bc9c05b363d": "The `DynamicPlanningError` class is an exception type designed to handle errors specific to dynamic planning functionalities within the document processing and retrieval system. It is used to signal issues that occur during the planning phase of document operations, such as those involving corpus ingestion, retrieval, or AI model interactions. This error type integrates with the application's robust error handling framework to ensure reliable operation during offline document processing tasks.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:PlanItem:3f903a83f9a591d49e5c5043485e3e5bb3c0e69b6d80ce105a23fd92ac4b6a63:3f903a83f9a591d49e5c5043485e3e5bb3c0e69b6d80ce105a23fd92ac4b6a63": "The `PlanItem` class represents an item within a plan, with a status attribute that determines its completion state. The `is_complete` method evaluates whether the item's status indicates completion by checking if the lowercase status is \"complete\", \"completed\", or \"done\". This class provides a simple mechanism for tracking and querying the completion status of plan items.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:PlanItem:is_complete:8740305773e88e271c266c121cc7614be987df39f35fe7d0e4fec6a0e3e756b3:8740305773e88e271c266c121cc7614be987df39f35fe7d0e4fec6a0e3e756b3": "Function that checks if an object's status indicates completion by comparing the lowercase status value against a set of completion keywords: \"complete\", \"completed\", and \"done\". Returns a boolean value based on whether the status matches any of these keywords.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:ReasoningArtifacts:8d3acaee9fcde85b01b00191a2fe3ede289076e651bbfa15bf2d4518d0901f28:8d3acaee9fcde85b01b00191a2fe3ede289076e651bbfa15bf2d4518d0901f28": "The `ReasoningArtifacts` class serves as a component within a local AI document processing application, supporting offline question-answering and retrieval-augmented generation (RAG) capabilities. It handles structured data management for reasoning processes, including artifact storage and retrieval during AI interactions. The class is designed to integrate with corpus ingestion, search, and conversation management features while maintaining support for local AI model operations and SQLite-based data storage.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:ReasoningVerbosity:5472e2ecc8a71d8638fcf7a6c14ae0b77b7f68b9b4c63a5e185c26eb4e4b96de:5472e2ecc8a71d8638fcf7a6c14ae0b77b7f68b9b4c63a5e185c26eb4e4b96de": "The `ReasoningVerbosity` class defines presets for controlling the level of detail in AI reasoning responses, mapping these presets to specific configuration options for LMStudio requests. It provides a method `to_request_options` that translates the verbosity setting into a dictionary of parameters such as `verbosity`, `include_summary`, and `include_assumptions`, with additional settings like `include_plan` and `max_bullets` based on the verbosity level. The class supports three verbosity levels\u2014MINIMAL, BRIEF, and EXTENDED\u2014each configuring different extents of reasoning output details.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:ReasoningVerbosity:to_request_options:fbdc5a3789b867b7d9ab3764069c493438694c31bfddce30411e29fdfb9eeeed:fbdc5a3789b867b7d9ab3764069c493438694c31bfddce30411e29fdfb9eeeed": "Function translates a reasoning verbosity preset into a dictionary of LMStudio request options. The function constructs a base payload with common reasoning parameters including verbosity level and flags for summary, assumptions, and self-check. It then modifies the payload based on the specific verbosity level (MINIMAL, BRIEF, or EXTENDED) by adjusting plan inclusion and limiting parameters such as maximum bullets and plan items. The function returns the constructed dictionary containing all reasoning configuration options.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:ResponseMode:24dd914d004daecb9a2533fd9608c54cfd9ee19b0c5b84efa835375222812a9f:24dd914d004daecb9a2533fd9608c54cfd9ee19b0c5b84efa835375222812a9f": "The `ResponseMode` class serves as a configuration enumerator for defining different modes of response generation within the document processing and question-answering system. It provides predefined constants for specifying how AI responses should be formatted and delivered, supporting various output configurations for retrieved information. The class enables structured control over response handling during query processing and retrieval operations.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:SelfCheckResult:ca4af877c6dc693690408b57d345ac337ee10f7178d7963ceb2ec11b0ecc6525:ca4af877c6dc693690408b57d345ac337ee10f7178d7963ceb2ec11b0ecc6525": "The `SelfCheckResult` class is defined within a document processing and retrieval system that supports offline AI-powered question answering using local models. It is part of a larger framework for ingesting, indexing, and searching document corpora with support for various file formats and RAG capabilities. The class appears to serve as a structured result container for self-check operations within this document processing pipeline.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:StepContextBatch:b433c5f391c2f87a658708699fe725963c5770bba44beadcec3bdfd1a5bdb2e7:b433c5f391c2f87a658708699fe725963c5770bba44beadcec3bdfd1a5bdb2e7": "The `StepContextBatch` class serves as a component within a document processing and retrieval system, handling batch operations for managing document ingestion and indexing tasks. It supports processing multiple documents concurrently while maintaining structured access to project data and corpus roots. The class integrates with background task management to facilitate efficient folder crawling, file rescanning, and content organization for search and retrieval purposes.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:StepResult:b52244d905d386ebcece7061b01c6e42d08b3093ef6ce1597f35d7a36165aadf:b52244d905d386ebcece7061b01c6e42d08b3093ef6ce1597f35d7a36165aadf": "The `StepResult` class serves as a structured data container for representing the outcome of a processing step within the document ingestion and retrieval system. It encapsulates information about the result of operations such as document parsing, indexing, or query processing, supporting the application's offline AI-powered document analysis capabilities. The class is designed to integrate with the broader system's workflow for managing corpus content and generating AI responses with citations.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:__init__:0d4017355e9e97ae4b6630327081c3591aa170e127f67182d5b176619e1436e3:0d4017355e9e97ae4b6630327081c3591aa170e127f67182d5b176619e1436e3": "Initializes a `ConversationManager` instance with the specified LMStudio client, system prompt, and context window size. Sets up the conversation turns list, connection state tracking, and listener callbacks for connection status updates. The context window is normalized to a minimum value of zero.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:__init__:6e01454fa59d41e29380b2c4b279c9f2710f6fdf9164fae133a85c9a9a6e6c60:6e01454fa59d41e29380b2c4b279c9f2710f6fdf9164fae133a85c9a9a6e6c60": "Initializes a `ConversationManager` instance with the specified LMStudio client, optional system prompt, and context window size. Sets up internal state including conversation turns, connection status, and listeners for connection state changes. The context window is normalized to be non-negative.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:_aggregate_citations:2e22a1bbf4618f749faee1309b98f21ded005ad4820f9cba1627bc6d12ca32c7:2e22a1bbf4618f749faee1309b98f21ded005ad4820f9cba1627bc6d12ca32c7": "The function `_aggregate_citations` processes a sequence of `StepResult` objects to collect and merge unique citations. It returns a tuple containing a list of aggregated citation entries and a dictionary mapping citation keys to their indices in the list. For each citation in the input results, it creates a deep copy if the citation key is not already present in the index map. It then updates each aggregated citation with a sorted list of step indices where the citation appears, ensuring no duplicate steps are included.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:_aggregate_citations:af31d089e25306e58cc703ab152d58293750c4f5bd8cfb739a4dd8ad6bf6ba1d:af31d089e25306e58cc703ab152d58293750c4f5bd8cfb739a4dd8ad6bf6ba1d": "The function `_aggregate_citations` processes a sequence of `StepResult` objects to collect and merge unique citations across the results. It returns a tuple containing a list of aggregated citation entries and a dictionary mapping citation keys to their indices in the list. For each citation in the input results, it checks for uniqueness using a key generated by `_citation_key`, and if unique, adds a deep copy of the citation to the aggregated list. It then updates each citation with a sorted list of step indices from which it originated, ensuring no duplicate steps are included. The function handles potential `TypeError` during sorting gracefully.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:_ask_single_shot:0aebdacdcef5abdf9dd3264a7cb53ed886aee0e57c308597f86532f32ba5c616:0aebdacdcef5abdf9dd3264a7cb53ed886aee0e57c308597f86532f32ba5c616": "The function `_ask_single_shot` executes a single conversation turn by constructing messages and request options, sending a chat request to the client, handling potential errors, updating the connection status, and registering the turn with the conversation history. It returns a `ConversationTurn` object representing the interaction.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:_ask_single_shot:a666f66a8b83870ccbec7d5695bfcc290f21a5da9fb78eeb5e9d78b0168471fc:a666f66a8b83870ccbec7d5695bfcc290f21a5da9fb78eeb5e9d78b0168471fc": "The function `_ask_single_shot` performs a single AI query using the configured language model client. It constructs a message list from the input question and optional context snippets, builds request options based on specified parameters such as reasoning verbosity and response mode, and sends the request to the LMStudio client. If the client raises an `LMStudioError`, it updates the connection status and re-raises the exception. On successful response, it updates the connection status, registers the conversation turn with the question, response, and specified modes, and returns the resulting `ConversationTurn` object.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:_ask_with_plan:27c40d41e2cfc189cff23e3142b96a5680ce5057738efba25cf46cc10ee6b219:27c40d41e2cfc189cff23e3142b96a5680ce5057738efba25cf46cc10ee6b219": "The function `_ask_with_plan` executes a dynamic planning process for answering a given question. It generates a plan based on the input question, then iterates through each step of the plan to gather context, construct prompts, and query an LLM for responses. For each plan item, it collects context batches from a provider, processes them through multiple passes if needed, and aggregates results into a final answer. The function tracks execution status, handles errors, manages citations, deduplicates them, and constructs a structured response including reasoning artifacts and step-by-step results. It updates the conversation history with the generated turn and returns the resulting `ConversationTurn` object.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:_ask_with_plan:699506d62f29fc3ea2e72276f85c0bb6f383350e3667d2f2c8b3461433de8758:699506d62f29fc3ea2e72276f85c0bb6f383350e3667d2f2c8b3461433de8758": "The function `_ask_with_plan` executes a dynamic planning approach to answer a user's question by breaking it into a sequence of plan items, retrieving relevant context for each step, and generating responses using an LMStudio client. It iterates through each plan item, retrieves contextual batches via a provided `context_provider`, constructs prompts, and sends messages to the language model. The function aggregates results from each step, deduplicates citations, and compiles a final answer along with reasoning artifacts such as assumptions and a summary of executed steps. It raises a `DynamicPlanningError` if no plan items are generated or if the context provider fails. The resulting `ConversationTurn` object is appended to the conversation history and returned.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:_build_messages:13319d3fb1dabeb5a44a7b77e58307d9969897813f8dc0b9804c7d5cc822631c:13319d3fb1dabeb5a44a7b77e58307d9969897813f8dc0b9804c7d5cc822631c": "The function `_build_messages` constructs a list of message dictionaries suitable for use in an AI conversation, based on the current conversation context. It begins by adding a system prompt if one is defined. It then appends recent turns from the conversation history, alternating between user questions and assistant answers, up to the specified context window size. Finally, it adds the current user question, optionally including provided context snippets in the message content. The resulting list of messages encapsulates the full conversational context for generating a response.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:_build_messages:8b4ce55b6950c6c563ace4ade2f4e8ba5f829e814557b7e1465eb97e1f32bb1f:8b4ce55b6950c6c563ace4ade2f4e8ba5f829e814557b7e1465eb97e1f32bb1f": "The function `_build_messages` constructs a list of message dictionaries suitable for use in a conversation context. It begins by adding an optional system prompt if one is defined. It then appends conversation history, limited by the `context_window` setting, alternating between user and assistant roles. Finally, it adds the current user question, optionally incorporating provided context snippets into the message content. The resulting list of messages includes all relevant historical turns and the current query with its associated context.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:_build_request_options:55ba4ac59a66597fc1f22f881c239c6311d13cd2399626305955da312cca41d4:55ba4ac59a66597fc1f22f881c239c6311d13cd2399626305955da312cca41d4": "The function `_build_request_options` constructs a dictionary of request options based on input parameters including a question, reasoning verbosity, response mode, and additional options. It updates the options dictionary with settings derived from `reasoning_verbosity` and `response_mode`. If `extra_options` are provided, they are merged into the options dictionary, with special handling for nested \"reasoning\" dictionaries. The function also ensures that a normalized version of the question is used as the query in the retrieval configuration if applicable. The resulting dictionary contains all configured options for processing a request.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:_build_request_options:f9eea5ab5a45a6d85c71ac1e2e7bd4b7850c0ec8fd35fc8720f60d81d33b75ef:f9eea5ab5a45a6d85c71ac1e2e7bd4b7850c0ec8fd35fc8720f60d81d33b75ef": "The function `_build_request_options` constructs a dictionary of request options based on input parameters. It initializes an empty dictionary `options`, then conditionally updates it with settings derived from `reasoning_verbosity`, `response_mode`, and `extra_options`. If `reasoning_verbosity` is provided, it merges its request options into `options`. If `response_mode` is set to `SOURCES_ONLY`, it adds the corresponding value to `options`. For `extra_options`, it processes each key-value pair, with special handling for the \"reasoning\" key to merge dictionaries rather than replace them. It also normalizes the question and updates the retrieval query if needed. Finally, it returns the constructed `options` dictionary.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:_build_step_prompt:849fd5a3e0a59eeee1bb2c90ef9433f64844e94795e9006fa99ae810a2f758d9:849fd5a3e0a59eeee1bb2c90ef9433f64844e94795e9006fa99ae810a2f758d9": "The function `_build_step_prompt` constructs a prompt string for a specific step in a multi-step process. It takes parameters including the original question, a description of the current step, the step index, total number of steps, and the pass index. The resulting prompt includes the step details, the original question, and instructions to provide a concise factual finding without citation markers.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:_build_step_prompt:dcc673c5a0ecc3773bcd23816dca7b03d2878ae2ecefa0509f0e39874acbe541:dcc673c5a0ecc3773bcd23816dca7b03d2878ae2ecefa0509f0e39874acbe541": "The function `_build_step_prompt` constructs a formatted prompt string for a specific step in a conversation process. It takes parameters including a question, step description, current step index, total number of steps, and pass index. The prompt begins with a prefix indicating the step number, total steps, and pass number, followed by the original question and specific instructions for providing a concise factual finding without citations.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:_citation_key:1afeeb485e5549e6cb52d67eb703b18ace17918e53eb4ecdccb5efb47dc6a098:1afeeb485e5549e6cb52d67eb703b18ace17918e53eb4ecdccb5efb47dc6a098": "The function `_citation_key` generates a stable string key for a given citation object. It attempts to serialize the citation using `json.dumps` with sorted keys and a default string conversion for non-serializable objects. If serialization fails due to a `TypeError`, it falls back to converting the citation directly to a string. The resulting string serves as a unique identifier for the citation, ensuring consistent hashing or indexing behavior.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:_citation_key:d90b32f309ccd951ac9876450fd8dfa50f2cd04c1da702df66c37d82305f8eeb:d90b32f309ccd951ac9876450fd8dfa50f2cd04c1da702df66c37d82305f8eeb": "The function `_citation_key` takes a citation object and converts it to a JSON string representation. It attempts to serialize the citation using `json.dumps` with sorted keys and a default string conversion for non-serializable objects. If serialization fails due to a `TypeError`, it falls back to converting the citation directly to a string. The resulting string serves as a unique key for the citation.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:_coerce_str_list:3753b6b815bb0da7eeb5704f6ff7484dd3324113fa66c339ca32f5a1e468d261:3753b6b815bb0da7eeb5704f6ff7484dd3324113fa66c339ca32f5a1e468d261": "The function `_coerce_str_list` converts a given input value into a list of strings. If the input is a string, it strips whitespace and returns a single-element list if the string is non-empty; otherwise, it returns an empty list. If the input is a sequence (but not a string, bytes, or dict), it iterates through the elements, strips whitespace from each string element, and appends non-empty stripped strings to the result list. For all other inputs, it returns an empty list.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:_coerce_str_list:9b1b4e9134c0f330ab766036612a07fa105df9c8333b715db86e0fd4c67cb5e3:9b1b4e9134c0f330ab766036612a07fa105df9c8333b715db86e0fd4c67cb5e3": "Converts a value to a list of strings, handling various input types including strings, sequences, and other iterables. Returns a list containing the string representations of the input value, with empty strings filtered out. If the input is a string, it is split into a single-element list after stripping whitespace. If the input is a sequence (excluding strings, bytes, and dicts), each element is checked for being a non-empty string and added to the result list. Returns an empty list if the input does not match expected types or contains no valid strings.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:_collect_citation_indexes:12839fa5cdbdbab3db3346b3909bda5ef2e7eca0987992ccd9085a46855dd258:12839fa5cdbdbab3db3346b3909bda5ef2e7eca0987992ccd9085a46855dd258": "Collects and returns a sorted list of indexes corresponding to citations based on a provided index mapping.\n\nThe function takes a sequence of citations and a dictionary mapping citation keys to integer indexes. It processes each citation by generating its key using `ConversationManager._citation_key()`, checks if the key exists in the index map, and collects the corresponding indexes. The resulting set of indexes is then sorted and returned as a list.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:_collect_citation_indexes:59f3c91dedf7e2bd990da8765f8e1b1d87912af40ec3f5e503e64406b3427f41:59f3c91dedf7e2bd990da8765f8e1b1d87912af40ec3f5e503e64406b3427f41": "The function `_collect_citation_indexes` takes a sequence of citations and a dictionary mapping citation keys to indexes. It processes each citation by generating its key using `ConversationManager._citation_key`, checks if the key exists in the provided `index_map`, and collects the corresponding index. The resulting set of indexes is converted to a sorted list and returned.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:_compose_final_answer:46646a3a6618f224845f7840ed4e45a582e2b790f3b9c8d68e0bb060c0965de5:46646a3a6618f224845f7840ed4e45a582e2b790f3b9c8d68e0bb060c0965de5": "The function `_compose_final_answer` takes a sequence of `StepResult` objects and constructs a final answer string by processing each result. For each `StepResult`, it uses the `answer` field if available, otherwise falling back to the `description` field. It then appends citation markers, formatted as indexed references (e.g., \"[1][2]\"), to the text if citation indexes are present. Each processed line is joined with double newlines to form the final concatenated string output.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:_compose_final_answer:9ef6ed8936f51ad74d43c4c1202c6d8338ed7eb977d462d2351b49ff1d742905:9ef6ed8936f51ad74d43c4c1202c6d8338ed7eb977d462d2351b49ff1d742905": "The function `_compose_final_answer` takes a sequence of `StepResult` objects and constructs a final answer string. For each `StepResult`, it uses the `answer` field if available (otherwise falling back to the `description` field), and appends citation markers if present. Each processed result is joined with double newlines to form the final output.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:_deduplicate_citations:1a9e3244ddec91384cd3417ea5f91270ddc6f838078b86df7c3845f7400a48a5:1a9e3244ddec91384cd3417ea5f91270ddc6f838078b86df7c3845f7400a48a5": "The function `_deduplicate_citations` removes duplicate citations from a sequence by using a set to track seen citation keys. It iterates through the input citations, generates a key for each using the private method `_citation_key`, and only adds citations to the result list if their key has not been encountered before. Each citation is deep-copied before being added to ensure that modifications to the original citations do not affect the deduplicated list. The function returns a list of unique citations in the order of their first appearance.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:_deduplicate_citations:2737aea265cad904c9641639fd04372d45632351465442f2240378e5dcd32fbb:2737aea265cad904c9641639fd04372d45632351465442f2240378e5dcd32fbb": "The function `_deduplicate_citations` removes duplicate citations from a sequence, preserving the first occurrence of each unique citation. It uses a set to track seen citation keys generated by `ConversationManager._citation_key`, ensuring that only the first instance of each citation is included in the returned list. The function performs a deep copy of each unique citation before adding it to the result list to avoid modifying the original objects.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:_deduplicate_preserve_order:74f5fd6dc56f32cc5cd00b4ed43d06ea1b45404791cf6748eca790dbac5044b0:74f5fd6dc56f32cc5cd00b4ed43d06ea1b45404791cf6748eca790dbac5044b0": "The function `_deduplicate_preserve_order` takes a sequence of strings and returns a list of strings with duplicates removed while preserving the original order of elements. It uses a set to track seen values and a list to maintain the order of first occurrences.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:_deduplicate_preserve_order:ba07e897b743c93e713a24b0fe255358ce35253bcdc22b3bee23f438a959a968:ba07e897b743c93e713a24b0fe255358ce35253bcdc22b3bee23f438a959a968": "The function `_deduplicate_preserve_order` takes a sequence of strings and returns a list of strings with duplicates removed while preserving the original order of elements. It uses a set to track seen values and a list to maintain the order of first occurrences.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:_emit_connection_state:8ffe44ccb53ac8598457b0739eb7309e4da731bf81cf10380bd36aa7c7512045:8ffe44ccb53ac8598457b0739eb7309e4da731bf81cf10380bd36aa7c7512045": "Emits the current connection state to all registered listeners by invoking each listener with the current state as an argument. Handles exceptions during listener invocation by continuing to notify remaining listeners.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:_emit_connection_state:a1c5f563250cdfdeb9ad1393327893fd5fd0f29711ba9c66e871ca81a894dd82:a1c5f563250cdfdeb9ad1393327893fd5fd0f29711ba9c66e871ca81a894dd82": "The function `_emit_connection_state` notifies all registered listeners of the current connection state. It retrieves the connection state from `self.connection_state` and iterates through a copy of `self._listeners`, calling each listener with the current state. If an exception occurs while invoking a listener, it is caught and ignored, ensuring other listeners are not affected.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:_generate_plan:181f6d06715e8c792e9c0b0b757b402b67ea8ceb9436abba1cde561c38c969a3:181f6d06715e8c792e9c0b0b757b402b67ea8ceb9436abba1cde561c38c969a3": "The function `_generate_plan` takes a string `question`, normalizes it by stripping whitespace, and splits it into segments using punctuation marks (`\\n`, `.`, `!`, `?`). It iterates through the segments, filtering out those with fewer than four characters, and creates a list of `PlanItem` objects with each valid segment as the description and an initial status of `\"not_started\"`. If no valid segments are found, it defaults to creating a single `PlanItem` from the full normalized question. The resulting plan is limited to six items and returned.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:_generate_plan:1d6eca93421ffc13f8b3594a34d09e711d3f6ad5cdd3c5757677e4c52cef06ac:1d6eca93421ffc13f8b3594a34d09e711d3f6ad5cdd3c5757677e4c52cef06ac": "The function `_generate_plan` takes a string input `question`, normalizes it by stripping whitespace, and splits it into segments using punctuation marks (newline, period, exclamation mark, or question mark) as delimiters. It then processes each segment to create a list of `PlanItem` objects, skipping segments with fewer than four characters. If no valid segments are found, it creates a single `PlanItem` from the entire normalized input. The function returns at most six `PlanItem` objects, each containing a description and a status set to \"not_started\".",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:_merge_step_options:43e7161888a6291ad3a6c288bebe37efef3e61fadc0c4ae51dae648c45c1ca38:43e7161888a6291ad3a6c288bebe37efef3e61fadc0c4ae51dae648c45c1ca38": "The function `_merge_step_options` merges base configuration options with document-specific retrieval settings and builds a complete set of request options for processing a question. It takes a dictionary of base options, a sequence of document dictionaries, a question string, an optional reasoning verbosity level, and a response mode. The documents are deep-copied and added to the retrieval section of the options under the key \"documents\". Then, it calls `_build_request_options` with the question, reasoning verbosity, response mode, and the modified options to produce and return the final merged configuration.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:_merge_step_options:8da3136e5a85c32774077cc769d5420b71c58052c4e1aeada11b3a50ffab5deb:8da3136e5a85c32774077cc769d5420b71c58052c4e1aeada11b3a50ffab5deb": "The function `_merge_step_options` merges base configuration options with document-related data and builds a complete set of request options. It takes base options, a sequence of documents, a question, reasoning verbosity, and a response mode as inputs. If documents are provided, it deep-copies them into the retrieval section of the extra options. Then, it calls `_build_request_options` with the question, reasoning verbosity, response mode, and the merged options to return the final configuration.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:_parse_reasoning_artifacts:18fe99f90b13774feedbb3dd241ddaec2c1f6363de78397b5df104a53dc34612:18fe99f90b13774feedbb3dd241ddaec2c1f6363de78397b5df104a53dc34612": "Parses a reasoning dictionary into a `ReasoningArtifacts` object, extracting summary bullets, plan items, assumptions, assumption decisions, and self-check results. Returns `None` if no relevant data is found. Summary candidates are collected from multiple potential keys and deduplicated. Plan items are constructed from sequences of dictionaries or strings, with status handling. Assumptions are parsed into a list and an associated decision, which determines whether to clarify or assume. Self-check results are extracted from a dictionary with fields for passed status, flags, and notes. The function consolidates these components into a structured return object only if at least one component is present.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:_parse_reasoning_artifacts:c6b5b0b0bc5f8a35e2151150e198ff79b494d76e71f79e3c8065489e44af92c1:c6b5b0b0bc5f8a35e2151150e198ff79b494d76e71f79e3c8065489e44af92c1": "The function `_parse_reasoning_artifacts` processes a dictionary containing reasoning data and converts it into a structured `ReasoningArtifacts` object. It extracts and normalizes summary bullet points, plan items, assumptions, and self-check results from the input dictionary. Summary candidates are collected from multiple potential keys and deduplicated while preserving order. Plan items are parsed from sequences, with support for both dictionary and string formats. Assumptions are handled as either a dictionary or sequence, with associated decision metadata derived from the input. Self-check data is extracted to form a `SelfCheckResult`. If no meaningful reasoning data is present, the function returns `None`. Otherwise, it constructs and returns a `ReasoningArtifacts` object populated with the parsed components.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:_register_turn:d2265f40ba98b27ff30bbc9bc51ba33af3dc6faa8fa01bdaae171dbf0d8d0ca9:d2265f40ba98b27ff30bbc9bc51ba33af3dc6faa8fa01bdaae171dbf0d8d0ca9": "The function `_register_turn` creates and appends a new `ConversationTurn` object to the `turns` list of the `ConversationManager`. It constructs the `ConversationTurn` using the provided question, response details, response mode, and answer length. The response's reasoning is parsed into artifacts, and the model name from the client is included. The newly created turn is then returned.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:_register_turn:e5dfcaae0777684f01c271d10f5b736b2c5895ccfa6ef484b3e71c04ad188f6f:e5dfcaae0777684f01c271d10f5b736b2c5895ccfa6ef484b3e71c04ad188f6f": "The function `_register_turn` creates and stores a conversation turn by constructing a `ConversationTurn` object with the provided question, response details, reasoning artifacts, and other metadata. It parses reasoning artifacts from the response, initializes the turn with all relevant information, appends it to the manager's list of turns, and returns the created turn object.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:_update_connection:c9bad676810667c9a3f2e1b5014dd752e8adbb35e263433366cb0a63a41f9867:c9bad676810667c9a3f2e1b5014dd752e8adbb35e263433366cb0a63a41f9867": "Updates the connection state of the conversation manager. Sets the connected status and optional error message, then emits a connection state change event if the state has actually changed.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:_update_connection:e443102b6c9a0167cf48d25ae71de71058ce4461694b2c2f9d569ea5d0162c48:e443102b6c9a0167cf48d25ae71de71058ce4461694b2c2f9d569ea5d0162c48": "Updates the connection state of the `ConversationManager` instance, storing whether it is connected and any associated error message. If the connection state or error message has changed, it emits a signal indicating the connection state has updated.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:add_connection_listener:363c4ec681503c619ce8e2bdb0d2b5f2fce907fb2b008bea7f3e241adf7d8d53:363c4ec681503c619ce8e2bdb0d2b5f2fce907fb2b008bea7f3e241adf7d8d53": "The function `add_connection_listener` subscribes a provided callback function to listen for connection state changes. It appends the listener to an internal list of listeners and returns an unsubscribe function that removes the listener from the list when called. This enables dynamic management of connection state notifications within the `ConversationManager` class.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:add_connection_listener:e21bc1d6fb2d44a5247f3d82436317422f5177970602cfe61f246487ffb3a6c2:e21bc1d6fb2d44a5247f3d82436317422f5177970602cfe61f246487ffb3a6c2": "Adds a connection state change listener to the conversation manager and returns a function to remove that listener. The returned unsubscribe function removes the listener from the internal list of listeners when called.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:ask:670d12736f5dc20feaf41189f5d392ba6f8d491ed971fc49ffb8772e7acd9de8:670d12736f5dc20feaf41189f5d392ba6f8d491ed971fc49ffb8772e7acd9de8": "The `ask` method sends a user question to an LMStudio connection and returns the resulting conversation turn. It first checks for a valid connection, raising an error if disconnected. Depending on whether a `context_provider` is supplied, it either attempts dynamic planning or uses a single-shot approach to generate a response. The method supports various parameters such as answer length, reasoning verbosity, response mode, and additional options, and delegates to internal methods `_ask_with_plan` or `_ask_single_shot` based on the presence of a context provider.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:ask:f36b55bce757de5083245a225c3474ca44d41c1dea9a2cb3b0ceb4806d746ea2:f36b55bce757de5083245a225c3474ca44d41c1dea9a2cb3b0ceb4806d746ea2": "The function `ask` sends a question to an LMStudio connection and appends the resulting response as a conversation turn. It accepts optional parameters for context snippets, answer length preset, reasoning verbosity, response mode, and extra options. If a `context_provider` is provided, it attempts dynamic planning; if that fails, it falls back to a single-shot query. The function raises an `LMStudioConnectionError` if the connection is not established. It returns a `ConversationTurn` object representing the response to the question.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:assumption_decision:7aef5cdbeb78a60ebdf5f21efc8f2c4b0293862e949ac9a9f6c6803adda6cedf:7aef5cdbeb78a60ebdf5f21efc8f2c4b0293862e949ac9a9f6c6803adda6cedf": "The function `assumption_decision` retrieves the `AssumptionDecision` object from the `reasoning_artifacts` attribute of the `ConversationTurn` instance. If `reasoning_artifacts` is `None`, it returns `None`. Otherwise, it returns the value of `assumption_decision` from `reasoning_artifacts`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:assumption_decision:ef86a9b90d041980bdea5c258e27c6bcc321609a8915dc00040632e7a1cd47ef:ef86a9b90d041980bdea5c258e27c6bcc321609a8915dc00040632e7a1cd47ef": "Returns the `AssumptionDecision` object from the `reasoning_artifacts` attribute of the `ConversationTurn` instance, or `None` if `reasoning_artifacts` is `None`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:assumptions:0b6e4fc4d6d01fdb6d68af62865073f8f994c8a4bceaaf646a03b605f0549cc1:0b6e4fc4d6d01fdb6d68af62865073f8f994c8a4bceaaf646a03b605f0549cc1": "Returns a list of assumptions from the conversation turn's reasoning artifacts. If reasoning artifacts are not present, returns an empty list.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:assumptions:bf500bbab2ba247e792bd5ec05d015d621b3d539de1a36a434623f1e65ec66b8:bf500bbab2ba247e792bd5ec05d015d621b3d539de1a36a434623f1e65ec66b8": "The function `assumptions` returns a list of strings representing the assumptions extracted from the `reasoning_artifacts` attribute of the `ConversationTurn` instance. If `reasoning_artifacts` is `None`, it returns an empty list.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:can_ask:2eafe1d952dee6d29a9aca76cb151e52bc47688839ecde1510c659047e18ca86:2eafe1d952dee6d29a9aca76cb151e52bc47688839ecde1510c659047e18ca86": "The `can_ask` method returns a boolean value indicating whether it is safe to issue a new query. It returns `True` if the `_connected` attribute is set to `True`, otherwise it returns `False`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:can_ask:ad1646224c52421430734c8b5ada6642b5cede554446ac977badcfd329bbadbc:ad1646224c52421430734c8b5ada6642b5cede554446ac977badcfd329bbadbc": "The function `can_ask` returns a boolean value indicating whether it is safe to issue a new query. It returns `True` when the conversation manager is connected (`self._connected` is `True`), and `False` otherwise.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:check_connection:0d64f6518fa0e6bd9cdb9d7a15ed06eb0ac6a448123866adcc09ccda076038fc:0d64f6518fa0e6bd9cdb9d7a15ed06eb0ac6a448123866adcc09ccda076038fc": "The function `check_connection` probes LMStudio to determine its connectivity status. It calls the `health_check` method on the client, and based on the result, updates the connection state using `_update_connection`. If the health check is successful, it sets the connection as healthy with no error message. Otherwise, it marks the connection as unhealthy with an error message indicating that LMStudio is unreachable. The function returns the current connection state.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:check_connection:4b69107694249511263db704e4892ac859868246bfdb5d61d8d824c24754c21a:4b69107694249511263db704e4892ac859868246bfdb5d61d8d824c24754c21a": "The function `check_connection` probes the LMStudio client to determine its connectivity status. It performs a health check via `self.client.health_check()`. If the check succeeds, it updates the connection state to healthy with no error message. If the check fails, it updates the connection state to unhealthy with an error message indicating that LMStudio is unreachable. The function returns the current connection state.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:connection_state:7d908c8c2f728e9183d9c6c37c081c9159a43e6cf1db5b1a1b2ce5c5fa4439ae:7d908c8c2f728e9183d9c6c37c081c9159a43e6cf1db5b1a1b2ce5c5fa4439ae": "The function `connection_state` is a property method within the `ConversationManager` class that returns a `ConnectionState` object. This object is initialized with two attributes: `self._connected`, which indicates the connection status, and `self._connection_error`, which holds any error message related to the connection. The method provides access to the current connection state of the conversation manager.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:connection_state:fe574183cf396fce46be4757de4cd9d42c1288e983f3ba1775505f8bc3c8ccc4:fe574183cf396fce46be4757de4cd9d42c1288e983f3ba1775505f8bc3c8ccc4": "Returns a `ConnectionState` object constructed from the internal `_connected` and `_connection_error` attributes of the `ConversationManager` instance.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:d129c68dc76206873621607ede1b25a78c8e1b64c5b1d6e4106b760a570aed6d:merge0:eb73298feac9cf7f19daeb9ca4b2041a407595fa01ed429883169a0266116e2d": "This module provides stateful helpers for managing conversations with LMStudio, defining data structures for conversation turns, reasoning artifacts, and response modes while supporting both single-shot and dynamic planning approaches. It includes enums for specifying response behavior and reasoning verbosity, along with classes representing plan items, self-check results, assumption decisions, and structured reasoning data extracted from LMStudio metadata. The implementation offers methods for managing conversation turns, building request options, merging step configurations, constructing prompts, handling citations, composing final answers, parsing reasoning artifacts, and managing connection states. Key functionality encompasses deduplicating citations, aggregating citation data, collecting citation indexes, and formatting messages for API requests, with support for various response modes, reasoning verbosity levels, and structured data extraction from reasoning outputs including summaries, plans, assumptions, and self-check results. The module also manages system prompts, context windows, and emits connection state changes to listeners.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:d129c68dc76206873621607ede1b25a78c8e1b64c5b1d6e4106b760a570aed6d:part0:b67c958ee4fddb4cb38042ec8da9249eba6496685ec504740db93f265fa3022a": "Module defines stateful helpers for managing conversations with LMStudio, including data structures for conversation turns, reasoning artifacts, and response modes. It supports single-shot and dynamic planning approaches for handling queries, with mechanisms for tracking connection status, managing context snippets, and aggregating step results. The module includes enums for specifying response behavior and reasoning verbosity, along with classes for representing plan items, self-check results, assumption decisions, and structured reasoning data extracted from LMStudio metadata.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:d129c68dc76206873621607ede1b25a78c8e1b64c5b1d6e4106b760a570aed6d:part1:6bc0b98c50bcf9ecfb30b4f488c22353bfcbc2cc0781300d553bdf39b947a985": "The module defines methods for managing conversation turns, building request options, merging step configurations, constructing prompts, handling citations, composing final answers, parsing reasoning artifacts, and managing connection states. It includes functions for deduplicating citations, aggregating citation data, collecting citation indexes, and formatting messages for API requests. The implementation supports various response modes, reasoning verbosity levels, and handles structured data extraction from reasoning outputs such as summaries, plans, assumptions, and self-check results. It also manages system prompts, context windows, and emits connection state changes to listeners.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:is_complete:88f6208e04f2c9923c20edbb18d6e434d5145c6aeee495f4d6568b6d73b54162:88f6208e04f2c9923c20edbb18d6e434d5145c6aeee495f4d6568b6d73b54162": "The function `is_complete` checks whether the status of a plan item indicates completion. It returns `True` if the status (converted to lowercase) is one of \"complete\", \"completed\", or \"done\", and `False` otherwise.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:is_complete:cb6665da3d71a87d04edac2b617c3d3980570ade9427dbfa76622566fd0c5823:cb6665da3d71a87d04edac2b617c3d3980570ade9427dbfa76622566fd0c5823": "The function `is_complete` checks whether the status of a `PlanItem` instance indicates completion. It returns `True` if the lowercase version of the `status` attribute is one of the strings \"complete\", \"completed\", or \"done\", and `False` otherwise.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:plan:6520659d4bd913913b15cd579acb9d6d19d4c78a88bbbe1e9953577b2a887dac:6520659d4bd913913b15cd579acb9d6d19d4c78a88bbbe1e9953577b2a887dac": "The function `plan` returns a list of `PlanItem` objects from the `reasoning_artifacts` attribute of the `ConversationTurn` instance. If `reasoning_artifacts` is `None`, it returns an empty list. Otherwise, it converts the `plan_items` attribute of `reasoning_artifacts` into a list and returns it.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:plan:ef631bad5baf1c54ec252d1947c17d926c115ece69eeeb38375bc95a1232aa23:ef631bad5baf1c54ec252d1947c17d926c115ece69eeeb38375bc95a1232aa23": "Returns a list of PlanItem objects from the conversation turn's reasoning artifacts. If reasoning artifacts are not set, returns an empty list.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:reasoning_bullets:47977394d5fc9ee1fa7526a98dfbabd79cbc6db4c09e7c49f85bd38a9ce67e0e:47977394d5fc9ee1fa7526a98dfbabd79cbc6db4c09e7c49f85bd38a9ce67e0e": "The function `reasoning_bullets` returns a list of strings representing summary bullets from the `reasoning_artifacts` attribute of the `ConversationTurn` instance. If `reasoning_artifacts` is `None`, it returns an empty list. Otherwise, it extracts and returns the `summary_bullets` from `reasoning_artifacts`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:reasoning_bullets:fd219efde96796ac1e403f588467d676c5cc2498a12fd92cf1cec7b7fbb4913f:fd219efde96796ac1e403f588467d676c5cc2498a12fd92cf1cec7b7fbb4913f": "Returns a list of summary bullets from the reasoning artifacts associated with the conversation turn. If no reasoning artifacts exist, returns an empty list.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:self_check:a22ecccb7f7560f29ef0506d97265e645be0353a0fba58157a54ba61cbd8381c:a22ecccb7f7560f29ef0506d97265e645be0353a0fba58157a54ba61cbd8381c": "The function `self_check` retrieves the `SelfCheckResult` from the `reasoning_artifacts` attribute of the `ConversationTurn` instance. If `reasoning_artifacts` is `None`, it returns `None`. Otherwise, it returns the `self_check` property of `reasoning_artifacts`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:self_check:f03f312cd796fa1601548cc796eb4a4fa45466ec1a03819cf33509f182f81ef5:f03f312cd796fa1601548cc796eb4a4fa45466ec1a03819cf33509f182f81ef5": "The function `self_check` returns the `self_check` attribute from the `reasoning_artifacts` object if `reasoning_artifacts` is not None, otherwise it returns None.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:to_request_options:17275ef30d25d0e36323ad508b908edcc44953555de09d1565505e2936ce5d0f:17275ef30d25d0e36323ad508b908edcc44953555de09d1565505e2936ce5d0f": "The function `to_request_options` translates a verbosity preset into a dictionary of LMStudio request options. It constructs a payload with default settings for reasoning verbosity and includes summary, assumptions, and self-check options. Depending on the specific verbosity level (MINIMAL, BRIEF, or EXTENDED), it updates the payload with additional parameters such as whether to include a plan, maximum number of bullets, and maximum number of plan items. The function returns the configured payload dictionary.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:to_request_options:acc1391a4615a75471cd6e8cb6990d5cdccdabf7e16dcb806546b1aafb8da82f:acc1391a4615a75471cd6e8cb6990d5cdccdabf7e16dcb806546b1aafb8da82f": "The function `to_request_options` translates the verbosity preset of the `ReasoningVerbosity` class into a dictionary of LMStudio request options. It sets default values for reasoning parameters such as `verbosity`, `include_summary`, `include_assumptions`, and `include_self_check`. Depending on the specific verbosity level (MINIMAL, BRIEF, or EXTENDED), it updates the payload with additional settings including `include_plan`, `max_bullets`, and `max_plan_items`. The function returns the constructed payload dictionary.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:unsubscribe:33e6c9ed9d7bcac44c0a1716d206783c2ac215a40d8b4fe457a54a7f4581694f:33e6c9ed9d7bcac44c0a1716d206783c2ac215a40d8b4fe457a54a7f4581694f": "The function `unsubscribe` removes a specified listener from the `_listeners` collection if it exists. It performs a membership check to ensure the listener is present before attempting removal. This function is part of the `ConversationManager` class and manages the list of active listeners for event handling.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:unsubscribe:68174ba945311be6a72620f6d9e50876623be67e8e48749a243760b11215a03d:68174ba945311be6a72620f6d9e50876623be67e8e48749a243760b11215a03d": "The function `unsubscribe` removes a specified listener from the `_listeners` collection if it exists within the collection. It performs a membership check before attempting removal to avoid errors. This method is designed to manage event listeners by allowing them to be removed from the conversation manager's listener list.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_settings.py:ConversationSettings:04825331a3c3d0e6c9053bc0ab7dd797922fd29928f4ed534bdc51e7aae04d37:04825331a3c3d0e6c9053bc0ab7dd797922fd29928f4ed534bdc51e7aae04d37": "The `ConversationSettings` class manages various configuration options for conversation behavior, including reasoning verbosity, plan and assumption visibility, sources-only mode, answer length presets, and the selected AI model. It provides getter and setter methods for each setting, ensuring type validation and emitting signals when values change. The class supports toggling between generative and sources-only response modes based on the configured settings.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_settings.py:ConversationSettings:__init__:ff9f70c3e53be8b8140f0cc3a14854ef85b236b05116baeda6d513e49c714598:ff9f70c3e53be8b8140f0cc3a14854ef85b236b05116baeda6d513e49c714598": "Initializes an object with default configuration settings for reasoning verbosity, plan display, assumption display, sources-only mode, answer length, and model name. Sets reasoning verbosity to brief, enables plan and assumptions display, disables sources-only mode, sets answer length to normal, and configures the model name to \"lmstudio\".",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_settings.py:ConversationSettings:answer_length:b5beee446d9c33b973d187c5861fa781531051a5d648106c3f661d3b750c95aa:b5beee446d9c33b973d187c5861fa781531051a5d648106c3f661d3b750c95aa": "This function defines a property getter that returns the value of the `_answer_length` attribute. The return type is annotated as `AnswerLength`, indicating it provides access to an answer length enumeration or value. The function serves as a read-only interface to the internal `_answer_length` storage, allowing external code to retrieve its current value without modification.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_settings.py:ConversationSettings:model_name:29ec08cdd52a0d4b54bca5e15e62faa3fc9f85e05bd064b2f97c8fe4a22f070f:29ec08cdd52a0d4b54bca5e15e62faa3fc9f85e05bd064b2f97c8fe4a22f070f": "Defines a property getter method that returns the value stored in the private attribute `_model_name`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_settings.py:ConversationSettings:reasoning_verbosity:4a1b6f940075031dd93551e13f35fba6f2ff4ec4e45b78330601086036dee096:4a1b6f940075031dd93551e13f35fba6f2ff4ec4e45b78330601086036dee096": "This function defines a property getter that returns the value of the `_reasoning_verbosity` attribute. The return type is annotated as `ReasoningVerbosity`, indicating it provides access to a verbosity setting for reasoning operations. The function serves as a read-only interface to retrieve the current verbosity level configuration.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_settings.py:ConversationSettings:response_mode:6840629624402e56fba4030b038c4c5a982e66534311b73be93df19188659433:6840629624402e56fba4030b038c4c5a982e66534311b73be93df19188659433": "Function that returns a ResponseMode enum value based on a condition. Returns SOURCES_ONLY when _sources_only_mode is True, otherwise returns GENERATIVE.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_settings.py:ConversationSettings:set_answer_length:2f05c0db2edb180967b748df01a9bd31366de71633836e2954e9712898a6e008:2f05c0db2edb180967b748df01a9bd31366de71633836e2954e9712898a6e008": "Function that sets an answer length property value and emits a change signal when the value is modified. Takes a parameter of type AnswerLength and raises TypeError if the parameter is not of the correct type. Compares the new value with the current value and only updates and emits the signal if they differ. The function does not return any value.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_settings.py:ConversationSettings:set_model_name:bfa4e31762ebabd2aa3ab03d87ad5dc17f720b3e0ee21f988d3606bcc436a872:bfa4e31762ebabd2aa3ab03d87ad5dc17f720b3e0ee21f988d3606bcc436a872": "Function that updates a model name attribute after cleaning whitespace from input, emits a change signal when the name is actually modified.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_settings.py:ConversationSettings:set_reasoning_verbosity:a1fb768902bf2d41f99602038916a09f02e5eb8513a742eef9d6efd1bb7f2d1e:a1fb768902bf2d41f99602038916a09f02e5eb8513a742eef9d6efd1bb7f2d1e": "Function that sets reasoning verbosity level, validates input type, updates internal state, and emits a change notification signal.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_settings.py:ConversationSettings:set_show_assumptions:6aa1b912772617cbbe698dc6ded71c9c8ed74800a4a4e53d913561d3e0840927:6aa1b912772617cbbe698dc6ded71c9c8ed74800a4a4e53d913561d3e0840927": "Function that manages a boolean flag for showing assumptions and emits a signal when the flag changes. Takes a boolean parameter to enable or disable assumption display, converts it to a boolean value, compares it with the current stored value, updates the stored value if different, and emits a signal with the new value.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_settings.py:ConversationSettings:set_show_plan:e2cd53e18d5766b91789a757e24830936534b57cc8f1bcc198f8af07c79f18e3:e2cd53e18d5766b91789a757e24830936534b57cc8f1bcc198f8af07c79f18e3": "Function that manages a boolean flag controlling plan display functionality. Takes a boolean parameter to enable or disable the feature, compares it with the current state, updates the internal flag if changed, and emits a signal to notify listeners of the state change.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_settings.py:ConversationSettings:set_sources_only_mode:4735782332d4066f80e49ad783db47991296c848c9cff5c4be9c6a94a8101189:4735782332d4066f80e49ad783db47991296c848c9cff5c4be9c6a94a8101189": "Function that enables or disables sources-only mode. Takes a boolean parameter to set the mode state, stores the new value internally, and emits a signal when the mode changes. Returns early if the requested state matches the current state.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_settings.py:ConversationSettings:show_assumptions:930ccbb93223efd018c960e21e0583c6227efb5c5987d8742f6103b0c66aad42:930ccbb93223efd018c960e21e0583c6227efb5c5987d8742f6103b0c66aad42": "Function that returns the value of the private attribute `_show_assumptions`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_settings.py:ConversationSettings:show_plan:39e2724cba1bd395c87f3d8da307f2b244a3a12133b91d1cb16cc21923a425b5:39e2724cba1bd395c87f3d8da307f2b244a3a12133b91d1cb16cc21923a425b5": "This function returns the value of the private attribute `_show_plan` from the instance it belongs to. The return type is specified as boolean, indicating that `_show_plan` stores a boolean value. The function provides read access to the `_show_plan` attribute's current state.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_settings.py:ConversationSettings:sources_only_mode:1cf4f86555633f1bb94282974fc079ccdfa207f376a8ed2b6851e8dbffeb1934:1cf4f86555633f1bb94282974fc079ccdfa207f376a8ed2b6851e8dbffeb1934": "Function that returns the value of the internal `_sources_only_mode` attribute.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_settings.py:__init__:5555abb46eb8d44cdc473d305fc000f73692b3281ca5ff90c96ab28e10905f15:5555abb46eb8d44cdc473d305fc000f73692b3281ca5ff90c96ab28e10905f15": "Initializes a `ConversationSettings` instance with default values for reasoning verbosity, plan visibility, assumption visibility, sources-only mode, answer length, and model name. Sets reasoning verbosity to brief, enables plan and assumptions display, disables sources-only mode, sets answer length to normal, and configures the model name to \"lmstudio\".",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_settings.py:__init__:c39902412db10dc040bc1e4b90c715e7813bea43f21326f4aeb9a0aa9461adcf:c39902412db10dc040bc1e4b90c715e7813bea43f21326f4aeb9a0aa9461adcf": "Initializes a `ConversationSettings` instance with default values for reasoning verbosity, plan visibility, assumption visibility, sources-only mode, answer length, and model name. Sets the model name to \"lmstudio\" by default.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_settings.py:answer_length:4dd318c06728fb3138055da6f47f445681a91ae325ba1a885bd52472895f8d83:4dd318c06728fb3138055da6f47f445681a91ae325ba1a885bd52472895f8d83": "The function `answer_length` is a property getter method within the `ConversationSettings` class. It returns the value of the private attribute `_answer_length`, which represents the configured answer length setting for conversation responses. The return type is annotated as `AnswerLength`, indicating it provides access to an enumeration or similar type defining different answer length options.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_settings.py:answer_length:8283d649b9e65d09a3931a3545a59caa69b02b9f0f3580cc3663d96ddbb3f85c:8283d649b9e65d09a3931a3545a59caa69b02b9f0f3580cc3663d96ddbb3f85c": "The function `answer_length` is a property method within the `ConversationSettings` class that returns the value of the private attribute `_answer_length`, which is of type `AnswerLength`. This method provides read-only access to the answer length setting.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_settings.py:d7bcf988af1d615b57cf54116a22cae152161ee253863571aadd36f28f01a2ae:d7bcf988af1d615b57cf54116a22cae152161ee253863571aadd36f28f01a2ae": "Defines a `ConversationSettings` class that manages conversation-level preferences for a UI, including reasoning verbosity, plan and assumption visibility, sources-only mode, answer length, and model selection. The class emits signals when these settings change and provides properties with associated setter methods to update the values. It inherits from `QObject` to support Qt's signal-slot mechanism. Settings are stored as private attributes and validated before updates. The `response_mode` property dynamically reflects whether sources-only mode is enabled.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_settings.py:model_name:94951eda9b929ba1ae339fb86b51716a1e3a0c404407f9bfcc24b9410bcc949c:94951eda9b929ba1ae339fb86b51716a1e3a0c404407f9bfcc24b9410bcc949c": "The function `model_name` is a property getter in the `ConversationSettings` class that returns the value of the private attribute `_model_name`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_settings.py:model_name:e20823e4ad50a35ed44d92b2fe5f05baad2f7c8a01812a02d2529f953378876f:e20823e4ad50a35ed44d92b2fe5f05baad2f7c8a01812a02d2529f953378876f": "Returns the model name stored in the private attribute `_model_name`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_settings.py:reasoning_verbosity:811d69ca1323f9588b1c5dd8e694121eec0202988d4e94ac09ccbce06f983b80:811d69ca1323f9588b1c5dd8e694121eec0202988d4e94ac09ccbce06f983b80": "Returns the current reasoning verbosity setting.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_settings.py:reasoning_verbosity:c917695c0cccfb69820a367eb299a026a7429b0688db15766b4b278d6021e971:c917695c0cccfb69820a367eb299a026a7429b0688db15766b4b278d6021e971": "Returns the current reasoning verbosity setting stored in the `_reasoning_verbosity` attribute.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_settings.py:response_mode:07322327efec55cee570331ca0747d101a44dd855306aad0b512ecb708bd40e4:07322327efec55cee570331ca0747d101a44dd855306aad0b512ecb708bd40e4": "Returns the response mode based on the `_sources_only_mode` attribute. If `_sources_only_mode` is True, returns `ResponseMode.SOURCES_ONLY`; otherwise, returns `ResponseMode.GENERATIVE`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_settings.py:response_mode:578b17025262810a1110b845a5136e60e2c138c22d564db7f78e9dd57acf86c7:578b17025262810a1110b845a5136e60e2c138c22d564db7f78e9dd57acf86c7": "The function `response_mode` defines a property that returns a `ResponseMode` enum value. It evaluates the boolean attribute `_sources_only_mode` and returns `ResponseMode.SOURCES_ONLY` if `_sources_only_mode` is `True`, otherwise it returns `ResponseMode.GENERATIVE`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_settings.py:set_answer_length:034e4ab8b404173470749e838307ac80eb007c0ef79b851a486ae73d4175173b:034e4ab8b404173470749e838307ac80eb007c0ef79b851a486ae73d4175173b": "The function `set_answer_length` sets the answer length preset for the conversation settings. It validates that the provided `preset` is an instance of the `AnswerLength` enum, and if the new value differs from the current one, it updates the internal `_answer_length` attribute and emits an `answer_length_changed` signal with the new preset value.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_settings.py:set_answer_length:8b51b14961f4384f2c6fd4612ab08e6aadf9082d7ffedd8c58bed48ea6c4ef28:8b51b14961f4384f2c6fd4612ab08e6aadf9082d7ffedd8c58bed48ea6c4ef28": "Sets the answer length preset for the conversation. Raises a TypeError if the provided preset is not an AnswerLength value. If the preset is different from the current setting, updates the internal _answer_length attribute and emits the answer_length_changed signal with the new preset value.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_settings.py:set_model_name:165e3b1741a822896db6ce1e0b20f03231e79f5cafe1bad229a4145a6e5db11c:165e3b1741a822896db6ce1e0b20f03231e79f5cafe1bad229a4145a6e5db11c": "The function `set_model_name` updates the model name stored in the `ConversationSettings` instance. It takes a string input, strips whitespace, and if the resulting string is non-empty and different from the currently stored model name, it updates the internal `_model_name` attribute and emits a `model_changed` signal with the new name. If the input is empty or unchanged, the function performs no action.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_settings.py:set_model_name:e24c072bb1328a5e6006da0ab1a99a4c40de465898ebb9cc5379283a7bb1f264:e24c072bb1328a5e6006da0ab1a99a4c40de465898ebb9cc5379283a7bb1f264": "Sets the model name for the conversation, emitting a signal when the value changes. The function cleanses the input by stripping whitespace and only updates the internal `_model_name` attribute if the new value differs from the current one. If the input is empty or whitespace-only, the function returns without making changes.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_settings.py:set_reasoning_verbosity:8665dba195463f426b10caac734536449b80e758168f242797c995591cc5ca75:8665dba195463f426b10caac734536449b80e758168f242797c995591cc5ca75": "Sets the reasoning verbosity level for the conversation. Validates that the provided verbosity is a `ReasoningVerbosity` enum value, updates the internal `_reasoning_verbosity` attribute if the value differs from the current setting, and emits the `reasoning_verbosity_changed` signal with the new verbosity level.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_settings.py:set_reasoning_verbosity:f4a82af523b1852ca2c225a8ac2fd148f853ab7113a3d06d06c2c8490e407f5a:f4a82af523b1852ca2c225a8ac2fd148f853ab7113a3d06d06c2c8490e407f5a": "The function `set_reasoning_verbosity` updates the reasoning verbosity level for conversation settings. It accepts a parameter of type `ReasoningVerbosity`, validates its type, and emits a signal when the value changes. If the new verbosity level is the same as the current one, the function returns without making changes.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_settings.py:set_show_assumptions:3fb0c33f80463b348d90e25b47540fe6babf462b6dd8e29dfeeb65e5ba896e86:3fb0c33f80463b348d90e25b47540fe6babf462b6dd8e29dfeeb65e5ba896e86": "The function `set_show_assumptions` is a method of the `ConversationSettings` class that updates the internal state of whether assumptions should be displayed in the user interface. It accepts a boolean parameter `enabled`, converts it to a boolean type, and if the new value differs from the current `_show_assumptions` attribute, it updates the attribute and emits a signal `show_assumptions_changed` with the new value.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_settings.py:set_show_assumptions:fac947cbbbf1e31e61ad51f3abbd40935a78a4cc1f674b1c099988f94deb6b8e:fac947cbbbf1e31e61ad51f3abbd40935a78a4cc1f674b1c099988f94deb6b8e": "The function `set_show_assumptions` configures the visibility of assumptions in a conversation interface. It accepts a boolean parameter `enabled` to determine whether assumptions should be displayed. If the new setting matches the current state, the function returns without making changes. Otherwise, it updates the internal `_show_assumptions` attribute and emits a `show_assumptions_changed` signal with the new value.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_settings.py:set_show_plan:500e24b00200c4d597379ffeca82a375f7221c19c4e9b7f8c1088ecaf8e407f9:500e24b00200c4d597379ffeca82a375f7221c19c4e9b7f8c1088ecaf8e407f9": "The function `set_show_plan` is a method of the `ConversationSettings` class that updates the internal state `_show_plan` with the provided boolean value `enabled`. If the new value differs from the current value of `_show_plan`, it updates the state and emits a signal `show_plan_changed` with the new value. This function is used to control whether a plan should be displayed in the conversation settings.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_settings.py:set_show_plan:8be4781b4615375ae7b4a436b366084dbdf09731c076a5fa3de56bd17d742b91:8be4781b4615375ae7b4a436b366084dbdf09731c076a5fa3de56bd17d742b91": "The `set_show_plan` method in the `ConversationSettings` class updates the internal `_show_plan` attribute with the provided boolean value. If the new value differs from the current value, it emits a `show_plan_changed` signal to notify observers of the change.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_settings.py:set_sources_only_mode:a0eb6695b29524acf4e68945d634bfb1199343a597a88895382232899e135fe3:a0eb6695b29524acf4e68945d634bfb1199343a597a88895382232899e135fe3": "The function `set_sources_only_mode` configures the conversation settings to enable or disable sources-only mode. It accepts a boolean parameter `enabled` and updates the internal `_sources_only_mode` attribute accordingly. If the new value differs from the current setting, it emits a `sources_only_mode_changed` signal with the new boolean value.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_settings.py:set_sources_only_mode:fe703b90b448cd90db490c11c704c209abf8fd647e6ad41cea799637f7c5455b:fe703b90b448cd90db490c11c704c209abf8fd647e6ad41cea799637f7c5455b": "The function `set_sources_only_mode` configures the conversation settings to enable or disable \"sources only\" mode. It accepts a boolean parameter `enabled` and updates the internal `_sources_only_mode` attribute if the value differs from the current setting. When the setting changes, it emits the `sources_only_mode_changed` signal with the new boolean value.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_settings.py:show_assumptions:14eee02d8347df7ed064986c96f976086c23b3b69ef14e59366419a649581062:14eee02d8347df7ed064986c96f976086c23b3b69ef14e59366419a649581062": "The function `show_assumptions` is a getter method that returns the value of the private attribute `_show_assumptions`. This attribute likely controls whether assumptions or background information should be displayed within the conversation settings. The method provides read access to this configuration setting, returning a boolean value indicating the current state of the assumption display flag.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_settings.py:show_assumptions:daeae1a55bc7ad325ee8d14db5574399957eba702c8eb13831c4e08d5fa36cf4:daeae1a55bc7ad325ee8d14db5574399957eba702c8eb13831c4e08d5fa36cf4": "The function `show_assumptions` is a getter method that returns the value of the private attribute `_show_assumptions`. This attribute likely controls whether assumptions or reasoning steps are displayed within the conversation settings of the application. The method itself does not perform any operations beyond retrieving and returning the value of `_show_assumptions`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_settings.py:show_plan:6b6718d28dbb7ca605bcd3dff290c8211af2955180427b621a2a355e7e530a9d:6b6718d28dbb7ca605bcd3dff290c8211af2955180427b621a2a355e7e530a9d": "The function `show_plan` is a getter method that returns the value of the private attribute `_show_plan`. This attribute likely controls whether a plan or outline is displayed within the application's user interface. The method itself does not perform any operations beyond retrieving and returning the state of `_show_plan`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_settings.py:show_plan:80cc34f7e566ae0427fcf8bb982e3ec7249e95b3ae167efe492abe8f717e658a:80cc34f7e566ae0427fcf8bb982e3ec7249e95b3ae167efe492abe8f717e658a": "The `show_plan` method is a getter function that returns the boolean value of the private attribute `_show_plan`. This attribute likely controls whether a conversation plan should be displayed or not. The method provides read access to this internal setting.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_settings.py:sources_only_mode:a993a1f33345b464894d99eb333efef0b6d0660ac7738c2bb79684801c44035a:a993a1f33345b464894d99eb333efef0b6d0660ac7738c2bb79684801c44035a": "The function `sources_only_mode` is a property getter method within the `ConversationSettings` class. It returns the boolean value stored in the private instance variable `self._sources_only_mode`. This property likely controls whether the conversation system operates in a mode that only considers source materials, without incorporating other data or context.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_settings.py:sources_only_mode:ecd45aec73c61b3978dee3c42d524b0bb58c7e048bb3822dc8330d53818f1715:ecd45aec73c61b3978dee3c42d524b0bb58c7e048bb3822dc8330d53818f1715": "The function `sources_only_mode` is a property method within the `ConversationSettings` class that returns the value of the private attribute `_sources_only_mode`. This attribute likely controls whether the conversation system operates in a mode that restricts responses to sources only, without additional generated content.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\document_hierarchy.py:8efc3f11b280d862839fe5c699e035718ae2c074618d672adf26c9c4feb266e5:8efc3f11b280d862839fe5c699e035718ae2c074618d672adf26c9c4feb266e5": "The module defines a `DocumentHierarchyService` class that provides functionality for organizing documents into hierarchical folder structures and retrieving enriched document metadata. It includes methods to build nested folder trees with attached documents, list documents based on scope criteria such as tags or folder path, retrieve detailed metadata views for individual documents, and refresh tag counts. The service uses a `DocumentRepository` for data access and implements helper methods for path manipulation, node creation, sorting, and tag enrichment.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\document_hierarchy.py:DocumentHierarchyService:96db23dd98d58bf3f7e627fb6dd26355f064559e6c4241726c0b145f30ad0511:96db23dd98d58bf3f7e627fb6dd26355f064559e6c4241726c0b145f30ad0511": "The `DocumentHierarchyService` class manages the hierarchical organization of documents within a project, providing functionality to build folder trees, list documents by scope or tags, and retrieve document metadata with associated tags. It includes helper methods for path normalization, relative path calculations, and tree sorting to maintain a structured view of the document corpus. The service supports operations like refreshing tag counts and enriching document data with metadata, all while working with a `DocumentRepository` for underlying data management.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\document_hierarchy.py:DocumentHierarchyService:__init__:eb799f89e68df04d2d12542ffa1937cd5f431d5c3ce85d7a649138d8419f9153:eb799f89e68df04d2d12542ffa1937cd5f431d5c3ce85d7a649138d8419f9153": "Initializes an object with a DocumentRepository instance, storing it as an attribute named 'documents'.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\document_hierarchy.py:DocumentHierarchyService:_absolute_path:7cfa56a9eec710a52ac321688911874318a2c715f38338f77cd86565018acda3:7cfa56a9eec710a52ac321688911874318a2c715f38338f77cd86565018acda3": "Function that computes an absolute path from a base path and relative path component. Returns the base path converted to string if relative path is None or empty. Returns the relative path converted to string if base path is None. Returns the concatenation of base path and relative path if both are provided. Returns None if both inputs are None.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\document_hierarchy.py:DocumentHierarchyService:_create_node:d3aaf195f2c37025503d65720d558d17623726bf8d1d402370518fa7a1ff1c8d:d3aaf195f2c37025503d65720d558d17623726bf8d1d402370518fa7a1ff1c8d": "Creates a dictionary representing a node structure with specified name, path, empty documents list, and empty children list.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\document_hierarchy.py:DocumentHierarchyService:_determine_base_path:605658e012ffef65d57da58315d8d36b047a9b9c1503dd8e664b1a769d7b1c54:605658e012ffef65d57da58315d8d36b047a9b9c1503dd8e664b1a769d7b1c54": "Function that finds the common base path among a collection of document folder paths. Takes an iterable of dictionaries containing folder path information, extracts valid paths, and determines their shared parent directory by iteratively checking relative relationships between paths. Returns the highest common directory path or None if no valid paths exist.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\document_hierarchy.py:DocumentHierarchyService:_iter_folder_paths:7fa4ef861a61c547066aef2541dbfbc0e8d641272acb9ec650482b02243ab57a:7fa4ef861a61c547066aef2541dbfbc0e8d641272acb9ec650482b02243ab57a": "Generator function that yields folder paths starting with None, then iterates through all ancestor directories of a given folder path, yielding each ancestor path as a string in reverse order from the deepest to the shallowest ancestor. Returns early if the input folder is None, empty string, or current directory reference. Uses Path objects for path manipulation and handles edge cases where parent directory equals current directory or parent string is empty or current directory reference.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\document_hierarchy.py:DocumentHierarchyService:_node_name:1581fd081f4af64c9e0158007670a62cc86ebe32da324e3ab41ca4c5ac49f515:1581fd081f4af64c9e0158007670a62cc86ebe32da324e3ab41ca4c5ac49f515": "Function that takes a file path and returns the filename component, or the full path if the filename is empty. Returns an empty string when input is None.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\document_hierarchy.py:DocumentHierarchyService:_normalize_folder:f62e7a466ec3ddd1aa4fe8a4606ab838af13468204d644f822802bae921b602d:f62e7a466ec3ddd1aa4fe8a4606ab838af13468204d644f822802bae921b602d": "Function that normalizes a folder path input by converting it to a string representation of a Path object, returning None for None or empty string inputs.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\document_hierarchy.py:DocumentHierarchyService:_parent_folder_key:80b7c0f0bd73e2d19d46ebc6cf0f6ae471839ad38744b2b6508c4c54f7f71ab2:80b7c0f0bd73e2d19d46ebc6cf0f6ae471839ad38744b2b6508c4c54f7f71ab2": "Function that computes the parent folder path of a given path, returning None for edge cases such as None, empty string, or current directory references. It uses pathlib to resolve the parent directory and handles cases where the parent equals the current path or results in empty/relative references.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\document_hierarchy.py:DocumentHierarchyService:_relative_folder:932990209b1ed85b6ffbeb4dc49cbd428730046f885785b4f3c17c5014f517f2:932990209b1ed85b6ffbeb4dc49cbd428730046f885785b4f3c17c5014f517f2": "Function that computes the relative path of a folder with respect to a base path. Returns None if the folder is None or if the computed relative path is empty or current directory. Returns the absolute path as string if the folder is not relative to the base path.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\document_hierarchy.py:DocumentHierarchyService:_sort_tree:e40f082bd4b8e5f8470faffdb710a618a84981514fec40e4e960cceca6509810:e40f082bd4b8e5f8470faffdb710a618a84981514fec40e4e960cceca6509810": "Function sorts documents and children of a tree node recursively by title and name respectively.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\document_hierarchy.py:DocumentHierarchyService:_with_tags:369db17ee126ae759db84b3d1c55ec776fa3a5cab620fc4e00ccbd4c3920b2d7:369db17ee126ae759db84b3d1c55ec776fa3a5cab620fc4e00ccbd4c3920b2d7": "Function that adds tags to a document dictionary by fetching tags for the document ID and returning a new dictionary containing the original document data plus the fetched tags.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\document_hierarchy.py:DocumentHierarchyService:build_folder_tree:0c2cea109d1f20362601fa2e916e43dbef657e8008413f8306dcb5a96972ce3f:0c2cea109d1f20362601fa2e916e43dbef657e8008413f8306dcb5a96972ce3f": "Function builds a nested folder structure for a project's documents, organizing them by their folder paths and attaching document metadata to corresponding nodes in the tree. It processes a list of documents for a given project ID, determines the base path, creates nodes for each folder level, establishes parent-child relationships between folders, appends documents to their respective folder nodes, and sorts the final tree structure before returning it.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\document_hierarchy.py:DocumentHierarchyService:get_document_view:ea507bd03339cf799ab4de01ff9da9780fb005625e6e54b2f3d40ec6bcd8e251:ea507bd03339cf799ab4de01ff9da9780fb005625e6e54b2f3d40ec6bcd8e251": "Function retrieves metadata for a document by ID, including associated tags. Returns dictionary with document data and tags, or None if document doesn't exist.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\document_hierarchy.py:DocumentHierarchyService:list_documents_for_scope:4526829d63f792d6e8eb614d28979572f76050f469478cfad34269b45c5dd2ff:4526829d63f792d6e8eb614d28979572f76050f469478cfad34269b45c5dd2ff": "Function that retrieves documents for a specified project scope, optionally filtered by tags or folder, and enriches each document with tag metadata before returning the list.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\document_hierarchy.py:DocumentHierarchyService:refresh_tag_counts:8e8e5d8393704d1a0241e1f60586eddba810aabe642c4b81331b5d2c9498a72c:8e8e5d8393704d1a0241e1f60586eddba810aabe642c4b81331b5d2c9498a72c": "Function that recalculates tag counts by calling a repository helper method. Takes an optional project identifier parameter and returns no value.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\document_hierarchy.py:__init__:478debe5876528d4cd29ef2713a625bf8303d1c8e1026679dd3e888dc195ce74:478debe5876528d4cd29ef2713a625bf8303d1c8e1026679dd3e888dc195ce74": "Initializes the DocumentHierarchyService with a DocumentRepository instance. The service stores a reference to the document repository for later use in retrieving and managing document hierarchies.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\document_hierarchy.py:__init__:7d03ada145b3ed6b0a59e4ac0d7492fef7e67c2f90d58eddeb9cb7d3c058109a:7d03ada145b3ed6b0a59e4ac0d7492fef7e67c2f90d58eddeb9cb7d3c058109a": "Initializes the `DocumentHierarchyService` class with a `DocumentRepository` instance. The service stores the provided document repository for use in managing document hierarchies.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\document_hierarchy.py:_absolute_path:537a479e13f6527e3a0ea6562340b44d5b381e5ace489bf9dc968e0de6c52766:537a479e13f6527e3a0ea6562340b44d5b381e5ace489bf9dc968e0de6c52766": "The function `_absolute_path` computes and returns the absolute path constructed from a base path and a relative path component. If the relative path is `None` or an empty string, it returns the string representation of the base path, or `None` if the base path is also `None`. If the base path is `None` but the relative path is provided, it returns the string representation of the relative path as a `Path` object. Otherwise, it combines the base path and the relative path using the `/` operator to form a new `Path` object, returning its string representation.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\document_hierarchy.py:_absolute_path:b023f113b3f314c677f41acbd88f8faafe73c9bd3bdd2aab367eb8eb57eb7fd1:b023f113b3f314c677f41acbd88f8faafe73c9bd3bdd2aab367eb8eb57eb7fd1": "Returns the absolute path constructed from a base path and a relative path component. If the relative path is None or empty, returns the string representation of the base path if it exists, otherwise None. If the base path is None, returns the string representation of the relative path as a Path. Otherwise, returns the string representation of the combined path formed by resolving the relative path against the base path.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\document_hierarchy.py:_create_node:443680a5a1ae6a47085160716054dceab66e33c48d93b02b533d084160910332:443680a5a1ae6a47085160716054dceab66e33c48d93b02b533d084160910332": "Creates a dictionary representing a node in a document hierarchy with specified name and path, initializing empty lists for documents and children.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\document_hierarchy.py:_create_node:f0ad6fc0c6d2e72d30dd0ffa7325d5bcdae0d29d993dc99b576ac290122b7233:f0ad6fc0c6d2e72d30dd0ffa7325d5bcdae0d29d993dc99b576ac290122b7233": "Creates a dictionary representation of a node for use in a document hierarchy. The node contains a name, an optional path, and empty lists for documents and children.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\document_hierarchy.py:_determine_base_path:0beee91f9acb6c1378bfaaaf75b5d868a92c41eaffa06bf0f4de2fc5fd713b74:0beee91f9acb6c1378bfaaaf75b5d868a92c41eaffa06bf0f4de2fc5fd713b74": "The function `_determine_base_path` takes an iterable of document dictionaries and extracts their folder paths to determine the deepest common parent directory among them. It returns a `Path` object representing this base path, or `None` if no valid folder paths are present in the input documents. The function iterates through the extracted paths, adjusting the base path upward through parent directories until it finds a common ancestor that contains all specified folders.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\document_hierarchy.py:_determine_base_path:6cf3c4e9d5c1b812f2fce319c44e02969f17de6609a4a753986ed27208a9f603:6cf3c4e9d5c1b812f2fce319c44e02969f17de6609a4a753986ed27208a9f603": "The function `_determine_base_path` takes an iterable of document dictionaries and extracts the folder paths from them. It then determines the deepest common parent directory (base path) shared by all the provided folder paths. If no folder paths are present, it returns `None`. The function iteratively adjusts the base path upward through the directory tree until it finds a common ancestor that contains all specified folders.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\document_hierarchy.py:_iter_folder_paths:33e81cfb6c94a4e61985eb13c82eb0a73a15cd02ccd09844465635b21486b4b6:33e81cfb6c94a4e61985eb13c82eb0a73a15cd02ccd09844465635b21486b4b6": "Generates an iterable sequence of folder paths starting with `None`, followed by the provided folder path and all its ancestral paths, ending with the root. If the input folder is `None`, empty string, or \".\", the function yields only `None` and returns immediately. For other inputs, it traverses up the directory tree from the given folder to the root, yielding each ancestor path in reverse order, including the original folder path.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\document_hierarchy.py:_iter_folder_paths:c2778aba0555766de5766ec272b8431924736e5be408e2611143427629f1f7b1:c2778aba0555766de5766ec272b8431924736e5be408e2611143427629f1f7b1": "The function `_iter_folder_paths` generates an iterable sequence of folder paths starting with `None`, followed by a sequence of ancestor paths leading up to the root, inclusive of the input folder itself. If the input folder is `None`, empty string, or current directory (`.`), it returns immediately without yielding any ancestor paths. The function uses `Path` from the `pathlib` module to traverse up the directory tree and yields each ancestor path in reverse order, ensuring that the deepest ancestor is yielded first.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\document_hierarchy.py:_node_name:4339e8e1c24f1ec15e7f676eda4c19a538abd17b3e7e8ff373eaf1f2a70f3f97:4339e8e1c24f1ec15e7f676eda4c19a538abd17b3e7e8ff373eaf1f2a70f3f97": "The function `_node_name` takes a file path as input and returns the name of the file or directory at that path. If the input is `None`, it returns an empty string. It uses `Path(path).name` to extract the name component of the path, and if that results in an empty string (which can happen with certain paths like root directories), it falls back to converting the entire path to a string.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\document_hierarchy.py:_node_name:b34a49689109eca014b5a2f118949c12c5667e22396d0a654c066b769fc93db8:b34a49689109eca014b5a2f118949c12c5667e22396d0a654c066b769fc93db8": "Returns the name of a file or directory from a given path, or the full path string if the name cannot be determined. If the input path is None, returns an empty string. Uses `Path.name` to extract the file/directory name, falling back to the full path string if `name` is empty.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\document_hierarchy.py:_normalize_folder:525123ad883950b9c5a5b2dce4fead42329efda8cf6e1d77a9ef36f3eb433a79:525123ad883950b9c5a5b2dce4fead42329efda8cf6e1d77a9ef36f3eb433a79": "Normalizes a folder path by converting it to a string representation of a Path object, returning None for None or empty string inputs.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\document_hierarchy.py:_normalize_folder:87b1451166086e9b4f6d5ad5c1eeeb9ac11e40e12471052486e476059d7803e8:87b1451166086e9b4f6d5ad5c1eeeb9ac11e40e12471052486e476059d7803e8": "The function `_normalize_folder` takes a single argument `folder` of type `Any` and returns either a string or `None`. If the input `folder` is `None` or an empty string, the function returns `None`. Otherwise, it converts the input to a string representation of a `Path` object and returns that string. This utility function ensures consistent handling of folder paths by normalizing them into a standard string format or returning `None` for invalid inputs.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\document_hierarchy.py:_parent_folder_key:606b8bb0382d78918f95c663d5a5dacede79961de6ed9c42f11e35f37a365eaa:606b8bb0382d78918f95c663d5a5dacede79961de6ed9c42f11e35f37a365eaa": "Returns the parent folder path of a given path, or None if the path is None, empty, or represents the root level. Handles edge cases where the parent equals the current path or results in an empty/relative root string.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\document_hierarchy.py:_parent_folder_key:ce4604fea32f1f3e9098b77d5041027aaa68ac6e62f60670792e975d9e7f200c:ce4604fea32f1f3e9098b77d5041027aaa68ac6e62f60670792e975d9e7f200c": "The function `_parent_folder_key` computes the parent folder path of a given file system path. It returns `None` if the input path is `None`, empty, or represents the current directory (`.`). For valid paths, it determines the parent directory using `Path.parent` and returns the parent path as a string. If the parent directory is the same as the input path or is empty/invalid, it returns `None`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\document_hierarchy.py:_relative_folder:57a13a87e6772200719cd3c3991aed32d454c8bb83a45144ad6235a9927ef1b7:57a13a87e6772200719cd3c3991aed32d454c8bb83a45144ad6235a9927ef1b7": "Returns the relative path of a folder with respect to a base path, or the absolute path if the folder is not within the base path. If the folder is None, returns None. If the base path is None, returns the string representation of the folder path. If the folder path cannot be made relative to the base path, returns the string representation of the folder path. Returns None if the relative path is empty or current directory.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\document_hierarchy.py:_relative_folder:d7b41f82edb5822993ceaba4dc404795a1515c1972c16bcc78466b78eebe0fd9:d7b41f82edb5822993ceaba4dc404795a1515c1972c16bcc78466b78eebe0fd9": "The function `_relative_folder` computes the relative path of a given folder with respect to a base path. If the folder is `None`, it returns `None`. If the base path is `None`, it returns the absolute path of the folder. Otherwise, it attempts to calculate the relative path using `Path.relative_to()`. If the calculation fails (e.g., due to paths being on different drives), it falls back to returning the absolute path of the folder. If the resulting relative path is an empty string or a dot (`.`), indicating the folder is the same as the base, it returns `None`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\document_hierarchy.py:_sort_tree:c771ca1d2f1e487d59b899bcef8af299181ee3157892ab5a08f9c09954898a4a:c771ca1d2f1e487d59b899bcef8af299181ee3157892ab5a08f9c09954898a4a": "Sorts the documents and children of a given node recursively. Documents are sorted by their title (case-insensitive), and children are sorted by their name (case-insensitive). The sorting is applied in-place to the node's documents and children, and the function recursively processes all child nodes.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\document_hierarchy.py:_sort_tree:d38156f612154f9ba80ee09b488a50a554818b37b1d8165e430240a9f587835d:d38156f612154f9ba80ee09b488a50a554818b37b1d8165e430240a9f587835d": "The function `_sort_tree` recursively sorts the documents and children of a given node within a document hierarchy. It sorts the documents by their title (case-insensitive) and the children by their name (case-insensitive). The sorting is performed in-place, modifying the structure of the node and its descendants.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\document_hierarchy.py:_with_tags:7ee7f3d3b7881d991d9482039c2dc40a4da91491500e09a6ff5c7d396b32d352:7ee7f3d3b7881d991d9482039c2dc40a4da91491500e09a6ff5c7d396b32d352": "The function `_with_tags` takes a document dictionary and returns a new dictionary that includes the original document data along with an additional \"tags\" key. The value of the \"tags\" key is obtained by calling `self.documents.list_tags_for_document()` with the document's ID. This enriches the document with its associated tags.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\document_hierarchy.py:_with_tags:92ad725432af860083752150d523f1b96e638d6651a9d37301b047a533090947:92ad725432af860083752150d523f1b96e638d6651a9d37301b047a533090947": "The function `_with_tags` takes a document dictionary as input and returns a new dictionary that includes the original document data along with an additional \"tags\" key. The value of the \"tags\" key is obtained by calling `self.documents.list_tags_for_document()` with the document's ID. This enriches the document with its associated tags.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\document_hierarchy.py:build_folder_tree:7fa7d56f200d68ca882d5db33b2ad3f38eb9099d00d8c0cd157cdc3ba85a5eb7:7fa7d56f200d68ca882d5db33b2ad3f38eb9099d00d8c0cd157cdc3ba85a5eb7": "The function `build_folder_tree` constructs a nested dictionary representation of a folder structure for a given project, attaching documents to their respective folders. It begins by retrieving all documents associated with the specified project ID and determines a base path shared by these documents. A root node is created to represent the top level of the tree. The function iterates through each document, normalizes its folder path, and calculates its relative position from the base path. For each ancestor folder in the path, it ensures that a corresponding node exists in the tree, creating parent-child relationships as needed. Each document is then appended to the appropriate folder node's \"documents\" list. Finally, the tree is sorted recursively before being returned.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\document_hierarchy.py:build_folder_tree:d5d28e5baa24f36fe562212daa65a6bc59877f65582696bdc07ad02e9fa48fbe:d5d28e5baa24f36fe562212daa65a6bc59877f65582696bdc07ad02e9fa48fbe": "The function `build_folder_tree` constructs a nested folder structure for a given project, attaching documents to their respective nodes. It begins by retrieving all documents associated with the project and determining a base path. A root node is created, followed by iteration through each document to normalize its folder path and compute its relative position from the base path. For each ancestor folder in the path, it ensures the corresponding node exists in the index, creating parent-child relationships as needed. Each document is then appended to the appropriate leaf node's documents list. Finally, the tree is sorted and returned as a nested dictionary structure.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\document_hierarchy.py:get_document_view:4920485839e049c25b2965ccd1d338d1ba1bcf767d59f5db51eb1e91bffe2493:4920485839e049c25b2965ccd1d338d1ba1bcf767d59f5db51eb1e91bffe2493": "Returns a metadata view for a specified document ID, including its associated tags. If the document ID is not found, returns None.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\document_hierarchy.py:get_document_view:69cfb9fa0b55f2686ed8e9e3f579b71a90ab4e520794bcae34d0a1278ca38a23:69cfb9fa0b55f2686ed8e9e3f579b71a90ab4e520794bcae34d0a1278ca38a23": "Returns a metadata view for the specified document ID, including its associated tags. If the document ID does not exist, returns None. The returned view is constructed by incorporating tags into the document's metadata through the internal `_with_tags` method.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\document_hierarchy.py:list_documents_for_scope:08cb3a170236ef4b858d58bd3dd0d042fbebf97435a4d69cff75998a72a21faa:08cb3a170236ef4b858d58bd3dd0d042fbebf97435a4d69cff75998a72a21faa": "Returns a list of documents matching specified tags or folder scope, enriched with tag metadata. The function retrieves documents using the `list_for_scope` method from the `documents` service and augments each document with additional tag information by calling `_with_tags`. It accepts parameters for project ID, optional tags, optional folder path, and recursive search flag.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\document_hierarchy.py:list_documents_for_scope:5ee068dd6f3333b1eb92e1b82532c480e60b7d169464d573b0dbd651146b4928:5ee068dd6f3333b1eb92e1b82532c480e60b7d169464d573b0dbd651146b4928": "Returns a list of documents matching specified tags and/or folder within a project, with each document enriched with tag metadata. The function filters documents by project ID, optional tags, and optional folder path, and optionally searches recursively within the folder. Each returned document includes additional tag information through the `_with_tags` method.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\document_hierarchy.py:refresh_tag_counts:29d8b5dc181a16fc8c65970d88ecefbcc0b8bf70d40b0db8d4445b69081ce50d:29d8b5dc181a16fc8c65970d88ecefbcc0b8bf70d40b0db8d4445b69081ce50d": "The function `refresh_tag_counts` recalculates tag counts for documents within a specified project by invoking the `refresh_tag_counts` method of the `documents` attribute, passing along an optional project ID. This updates the tag count information stored in the repository helper.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\document_hierarchy.py:refresh_tag_counts:a7b4c6512f2ee23d3b129d66e8bff7597b91a649021ae5259cbd58a440de1fde:a7b4c6512f2ee23d3b129d66e8bff7597b91a649021ae5259cbd58a440de1fde": "The function `refresh_tag_counts` recalculates tag counts for documents within a specified project by delegating the operation to the `refresh_tag_counts` method of the `documents` attribute, which is expected to be a repository helper. The optional `project_id` parameter allows targeting specific project tag counts, with a value of `None` indicating all projects should be processed.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\export_service.py:ExportService:_format_citation_text:b7f306f3f6e6e6b21d7a5cda486e8c6d8f4a07a54af3b7885d958fb8a296936d:b7f306f3f6e6e6b21d7a5cda486e8c6d8f4a07a54af3b7885d958fb8a296936d": "Function that formats citation text from various input types into a standardized string representation, handling strings, dictionaries with citation metadata, and other objects by converting them to strings.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\export_service.py:ExportService:_format_reasoning_html:e86119f0a6f070bb96ad467b6e9618c5f06f790a417b62f2a0b8e4bb9ff616e8:e86119f0a6f070bb96ad467b6e9618c5f06f790a417b62f2a0b8e4bb9ff616e8": "Function formats the reasoning components of a conversation turn into an HTML string. It processes four types of data: reasoning bullets, plan items, assumptions with optional decision details, and self-check results. Each component is wrapped in a section with a heading and formatted as HTML list elements. The output combines all non-empty sections into a single HTML string.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\export_service.py:ExportService:_format_reasoning_markdown:e5759ae73ee590b83d2452d5fd777f8c9933b064ba38302f667c11425427f8fc:e5759ae73ee590b83d2452d5fd777f8c9933b064ba38302f667c11425427f8fc": "Function formats conversation turn reasoning into a markdown list with sections for reasoning bullets, plan items, assumptions, and self-check results. Returns a list of strings representing the formatted markdown content.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\export_service.py:ExportService:_strip_html:710924cb2c0de055075d38dfc8ee84d2a9805a1a99b5ef4a981d4b908676be59:710924cb2c0de055075d38dfc8ee84d2a9805a1a99b5ef4a981d4b908676be59": "Function processes HTML string by removing tags, converting line breaks to newlines, unescaping HTML entities, and normalizing whitespace. Takes a string or None input, returns cleaned string with all HTML markup removed and extra whitespace collapsed. Handles <br> and <br/> tags specifically by converting them to newline characters. Uses a state machine approach to track when inside HTML tags versus text content. Processes characters sequentially, building output from text outside of HTML tags while maintaining proper spacing and line breaks. Returns empty string for None or empty input.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\export_service.py:ExportService:_turn_to_html:8a24847d2182c21c48d2adcf2e49da82e8122f5fc07e0d0ee3e839e6112d11a7:8a24847d2182c21c48d2adcf2e49da82e8122f5fc07e0d0ee3e839e6112d11a7": "Function generates an HTML representation of a conversation turn, including question, answer, timing information, citations, reasoning, and token usage. It formats each component with appropriate HTML escaping and structure, handling missing data with default values. The output consists of structured HTML sections organized by content type.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\export_service.py:ExportService:_turn_to_markdown:87569815c179c660fffa2178ce48b7fea6267ab7675e36b4e1ca7ab86cdfabf0:87569815c179c660fffa2178ce48b7fea6267ab7675e36b4e1ca7ab86cdfabf0": "Function converts a conversation turn into a list of markdown-formatted strings. Includes timestamp information, question and answer text with proper indentation, citation details if available, reasoning content if present, and token usage statistics formatted as JSON. Handles missing data by substituting \"\u2014\" for empty values. Returns a list of string lines representing the markdown content.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\export_service.py:ExportService:conversation_to_html:adeb305c57ff1dc0a50cbdc87849f1f68a5c9edd6051db23562aa905262f2ce7:adeb305c57ff1dc0a50cbdc87849f1f68a5c9edd6051db23562aa905262f2ce7": "Function accepts conversation turns and optional title and metadata to generate an HTML document. It constructs the HTML with embedded CSS styling, includes a timestamp and metadata if provided, and processes each turn using a helper method. The output is a complete HTML string with structured content and formatting.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\export_service.py:ExportService:conversation_to_markdown:722bd7a59ccc9d52a24aca0a30157b553c9efbe9c900991fece5353f06307746:722bd7a59ccc9d52a24aca0a30157b553c9efbe9c900991fece5353f06307746": "Function that converts a sequence of conversation turns into a markdown formatted string with optional title and metadata, including timestamp generation and turn-by-turn processing.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\export_service.py:ExportService:dfb95259991ebff5ce52565828a98d3348a06c76b0b8215dbffa222a6c1465ad:dfb95259991ebff5ce52565828a98d3348a06c76b0b8215dbffa222a6c1465ad": "The `ExportService` class provides functionality for converting conversation data and snippets into various export formats, including Markdown, HTML, and plain text. It includes methods to format individual conversation turns and reasoning components into structured outputs suitable for file export. The class supports writing these formatted outputs to files and handles the conversion of citations and snippet data into readable text or HTML representations.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\export_service.py:ExportService:export_conversation_html:741b7ccb79de291c61bf2375c3b0f3acef8728d5bdf761f1f3edb2cef3d015b0:741b7ccb79de291c61bf2375c3b0f3acef8728d5bdf761f1f3edb2cef3d015b0": "Function exports conversation turns to an HTML file at the specified destination path. Takes conversation turns as input, converts them to HTML format using a helper method, and writes the resulting content to disk. Returns the path of the created file. Supports optional title and metadata parameters for customizing the exported content.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\export_service.py:ExportService:export_conversation_markdown:35764ac21637d44bc3b9fd4a1fd566e2bee087504676d294e841887ab206eae1:35764ac21637d44bc3b9fd4a1fd566e2bee087504676d294e841887ab206eae1": "Function exports conversation turns to a markdown file at the specified destination path. Takes conversation turns as input, converts them to markdown format using an internal method, and writes the resulting content to disk. Returns the path of the written file. Supports optional title and metadata parameters for the exported content.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\export_service.py:ExportService:export_snippets_text:3b12d7d0fafaaa752a0bbf73a1b0a7168160e868a59b376064d461876fa20225:3b12d7d0fafaaa752a0bbf73a1b0a7168160e868a59b376064d461876fa20225": "Function that converts snippets to text format and writes the content to a specified destination file path. Takes a destination path and iterable of snippets as input parameters. Returns the path object of the written file. The conversion is handled by an internal method `snippets_to_text`, and the writing is performed by `write_text`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\export_service.py:ExportService:snippets_to_text:accf3ded49697de5cef329c44ce596bffbf7f2fd91b3fd38610f179689504ed2:accf3ded49697de5cef329c44ce596bffbf7f2fd91b3fd38610f179689504ed2": "Function processes an iterable of snippet dictionaries or strings into a formatted text string. For each snippet, it extracts content based on key presence, applies HTML stripping, and appends metadata when available. Strings are used directly, while non-string types are converted to strings. Empty lines are filtered out from the final output.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\export_service.py:ExportService:write_text:cf9f9db298713a9f9faa7277a1e14e318722fd17991e6a5958bb77c9b5de17c4:cf9f9db298713a9f9faa7277a1e14e318722fd17991e6a5958bb77c9b5de17c4": "Function that writes text content to a specified file path, creating parent directories if they don't exist, and returns the Path object of the written file.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\export_service.py:_format_citation_text:2a6bab5ceb574e6552e556371b679f5d09224a09f8a7e52a71811cba0b8e5d86:2a6bab5ceb574e6552e556371b679f5d09224a09f8a7e52a71811cba0b8e5d86": "The function `_format_citation_text` takes a citation object and formats it into a human-readable string. If the citation is a string, it returns the string directly. If it is a dictionary, it extracts fields such as `source`, `title`, `path`, `page`, `section`, and `snippet` to construct a formatted citation. The `source` field is prioritized from `source`, `title`, or `path`. Page and section information are included in parentheses. If a snippet is present, it is stripped of HTML tags and included in the output. If no snippet is provided, only the label and location are returned. For any other type, the citation is converted to a string.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\export_service.py:_format_citation_text:cff9030ad60d8eb4ad33a0814507ccf3d900325a94089aee75bbcf4e3fe205c0:cff9030ad60d8eb4ad33a0814507ccf3d900325a94089aee75bbcf4e3fe205c0": "Formats a citation object into a human-readable string representation. Handles three types of input: plain strings, dictionaries with citation metadata, and other objects. For dictionaries, extracts source/title/path as the main label, appends page and section information if present, and includes snippet text if available. Returns the formatted string with appropriate labeling and structure.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\export_service.py:_format_reasoning_html:0383357fe2520f8b3bbcbfff096b59152f0f1436d72dccc3341e0b393ca5456c:0383357fe2520f8b3bbcbfff096b59152f0f1436d72dccc3341e0b393ca5456c": "Formats the reasoning content of a conversation turn into an HTML string, including sections for reasoning bullets, plan items, assumptions, and self-check results. Each section is conditionally included based on whether its corresponding data is present in the turn. Bullet points and list items are escaped for HTML safety. The output is a concatenated HTML string containing structured sections with appropriate headings and formatting.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\export_service.py:_format_reasoning_html:bdff5073615a17fec31c448504fd7207e280b8c17700e368bd4c6fed88cc1703:bdff5073615a17fec31c448504fd7207e280b8c17700e368bd4c6fed88cc1703": "The function `_format_reasoning_html` generates an HTML-formatted string representing the reasoning components of a conversation turn. It processes and formats the following elements from the `turn` object: reasoning bullets, plan items, assumptions (including assumption decisions), and self-check results. Each component is wrapped in a structured HTML section with appropriate headings and formatting. The function ensures that text content is safely escaped to prevent HTML injection. The resulting HTML string combines all non-empty sections into a single formatted output.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\export_service.py:_format_reasoning_markdown:edbe3c60abd66100e958ba35ea363d61a38cd76859d79f1776e830139c52dbd3:edbe3c60abd66100e958ba35ea363d61a38cd76859d79f1776e830139c52dbd3": "Formats the reasoning components of a conversation turn into a list of markdown-formatted strings. Includes sections for reasoning bullets, plan items with status, assumptions with decision details, and self-check results with flags and notes. Each section is only added if its corresponding data is present in the turn. Returns a list of strings representing the formatted markdown content.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\export_service.py:_format_reasoning_markdown:f8fb66c38a92c1f76a487f083ed83206ba70f0a6ed1d5624b9a041dc5225f972:f8fb66c38a92c1f76a487f083ed83206ba70f0a6ed1d5624b9a041dc5225f972": "The function `_format_reasoning_markdown` takes a `ConversationTurn` object and formats its reasoning-related attributes into a list of markdown-formatted strings. It includes sections for reasoning bullets, plan items with status, assumptions with an optional decision summary, and self-check results with flags and notes. Each section is only added to the output if the corresponding attribute of the `ConversationTurn` object contains data. The function returns the formatted lines as a list of strings.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\export_service.py:_strip_html:e8bd97d8a4dcede31a8e12a1c6c9957a171128d853228cadd1221f1fc1c7e2ea:e8bd97d8a4dcede31a8e12a1c6c9957a171128d853228cadd1221f1fc1c7e2ea": "Strips HTML markup from a string value, replacing line break tags with newline characters, removing all other HTML tags, and normalizing whitespace in the resulting text. Returns an empty string if the input is None or empty.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\export_service.py:_strip_html:fee923b72757990ec2cf407b3e0ed22d9620585b241b1ce8d912d4da007c3366:fee923b72757990ec2cf407b3e0ed22d9620585b241b1ce8d912d4da007c3366": "The function `_strip_html` takes a string input, which may be `None`, and removes HTML tags from it. It replaces `<br>` and `<br/>` with newline characters, then iterates through the string to build a cleaned text output by ignoring content within HTML tags. It uses `html.unescape` to decode HTML entities and returns the resulting text with normalized whitespace. If the input is `None`, it returns an empty string.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\export_service.py:_turn_to_html:3ded08673834a5b8e5cc0d0ec0d6975f711b505352519342275fe583f21f14f1:3ded08673834a5b8e5cc0d0ec0d6975f711b505352519342275fe583f21f14f1": "The function `_turn_to_html` converts a `ConversationTurn` object into an HTML-formatted string for display in the user interface. It formats the turn's question, answer, timestamps, latency, citations, reasoning, and token usage into structured HTML sections. The question and answer text are escaped to prevent XSS issues, with newlines in the answer converted to `<br/>` tags. Citations are rendered as a list, defaulting to \"No citations available.\" if none exist. Reasoning content is included if present, and token usage is displayed as a formatted JSON block. Each section is wrapped with appropriate HTML tags and classes for styling. The function returns the complete HTML string for a single conversation turn.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\export_service.py:_turn_to_html:c0dca0ca91e72a7adfcd0d5fd58984dea41690513079bd6a740e8e7ab9b13d71:c0dca0ca91e72a7adfcd0d5fd58984dea41690513079bd6a740e8e7ab9b13d71": "Converts a conversation turn into an HTML-formatted string, including question, answer, metadata, citations, reasoning, and token usage. Formats timestamps, handles missing data with default values, escapes HTML special characters, and structures content with appropriate HTML tags and classes.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\export_service.py:_turn_to_markdown:9b77e974fe1c964e694c0dbafc26215d13ea936059ed0a7a45d44825a4786dac:9b77e974fe1c964e694c0dbafc26215d13ea936059ed0a7a45d44825a4786dac": "Converts a conversation turn into a list of markdown-formatted strings, including question, answer, timestamps, latency, citations, reasoning, and token usage. Handles missing data by displaying \"\u2014\" for empty fields. Formats citations as numbered lists and includes reasoning if present. Token usage is displayed as a JSON block with indentation.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\export_service.py:_turn_to_markdown:db72ff0db35fdfcec596d4f49a9911a18a4fb80f5de79e8cc0271937809dfbbc:db72ff0db35fdfcec596d4f49a9911a18a4fb80f5de79e8cc0271937809dfbbc": "The function `_turn_to_markdown` converts a `ConversationTurn` object into a list of markdown-formatted strings. It includes details such as the turn index, question, answer, timestamps (asked and answered), latency, citations, reasoning, and token usage. The answer is indented with blockquote syntax, and citations are listed numerically. If no citations are present, it indicates \"No citations available.\" Reasoning content is appended if available, followed by formatted token usage data. Each line of the resulting markdown content is included as a separate string in the returned list.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\export_service.py:a5fb9955b341f43eb1ebc66bf1324efc46665a5a75d5eafe112854fcc60a39a3:a5fb9955b341f43eb1ebc66bf1324efc46665a5a75d5eafe112854fcc60a39a3": "The module defines an `ExportService` class for rendering conversation history and snippets into export-friendly formats. It supports exporting conversations to Markdown and HTML, and snippets to plain text. The service includes methods for generating formatted output in these formats, handling metadata, citations, reasoning steps, and token usage information. It also provides functionality to write the generated content to files. Helper methods manage formatting of individual conversation turns and citation text, as well as stripping HTML tags from content.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\export_service.py:conversation_to_html:5914674323d19b48e3a1696c0edd4ff6206c95a0ff785640b3222ee9f94a0fae:5914674323d19b48e3a1696c0edd4ff6206c95a0ff785640b3222ee9f94a0fae": "The function `conversation_to_html` converts a sequence of conversation turns into an HTML document. It accepts conversation turns, an optional title, and optional metadata, and returns a formatted HTML string. The output includes a header with styling, a timestamp, optional metadata in a list format, and each conversation turn processed by `_turn_to_html`. The resulting HTML is structured with appropriate semantic elements and CSS styles for rendering the conversation in a readable format.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\export_service.py:conversation_to_html:8f680673e13ff9fafb27f05f1b95499a006eca63e799482aa6b1126b05063470:8f680673e13ff9fafb27f05f1b95499a006eca63e799482aa6b1126b05063470": "Generates an HTML representation of a conversation, including metadata and formatted turns. Takes a sequence or iterable of `ConversationTurn` objects, optional title, and metadata dictionary. Returns a string containing the complete HTML document with styled content. Includes timestamp, title, metadata list if provided, and each turn formatted using `_turn_to_html`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\export_service.py:conversation_to_markdown:1b0ccccfd5371ce15934d82896c15cf66262b31e95cac2dfcc7844df37a41e71:1b0ccccfd5371ce15934d82896c15cf66262b31e95cac2dfcc7844df37a41e71": "Converts a sequence of conversation turns into a markdown-formatted string with optional title and metadata. The function generates a header with the specified title, adds a timestamp, includes metadata as key-value pairs, and formats each conversation turn using a helper method `_turn_to_markdown`. Returns the complete markdown content as a string with proper line endings.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\export_service.py:conversation_to_markdown:c0b5cb421bf9a96faba5e155c7c2558ea29464ec20fabb1e6693cd188923aed5:c0b5cb421bf9a96faba5e155c7c2558ea29464ec20fabb1e6693cd188923aed5": "The function `conversation_to_markdown` converts a sequence of conversation turns into a markdown-formatted string. It accepts conversation turns, an optional title, and optional metadata. The output includes a header with the title, a timestamp indicating when the export was generated, and formatted metadata if provided. Each conversation turn is processed using a helper method `_turn_to_markdown`, which generates markdown content for individual turns. The final result is a properly formatted markdown document representing the conversation, including all turns and metadata, with appropriate line breaks and formatting.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\export_service.py:export_conversation_html:4db32679b6b890ae7729fdf96823566141380761f645feddbb171b65c0b265cb:4db32679b6b890ae7729fdf96823566141380761f645feddbb171b65c0b265cb": "Exports a conversation to an HTML file. Takes a destination path, sequence of conversation turns, and optional title and metadata parameters. Converts the conversation to HTML format using `conversation_to_html` and writes the content to the specified destination using `write_text`, returning the resulting file path.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\export_service.py:export_conversation_html:d70ac3a07b0b01ae303418966b94bfda2ba5e7ce2e76a1dca23d6d8d914b85f8:d70ac3a07b0b01ae303418966b94bfda2ba5e7ce2e76a1dca23d6d8d914b85f8": "Exports a conversation to an HTML file.\n\nParameters:\n\nReturns:",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\export_service.py:export_conversation_markdown:0cd9ca7eec3bc0f60819301e4ccab9b02affc88dd244682a69a9c77e4ef54acb:0cd9ca7eec3bc0f60819301e4ccab9b02affc88dd244682a69a9c77e4ef54acb": "Exports a conversation to a markdown file. Takes a destination path, sequence of conversation turns, and optional title and metadata parameters. Converts the conversation to markdown format using `conversation_to_markdown` and writes the content to the specified destination using `write_text`, returning the resulting file path.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\export_service.py:export_conversation_markdown:aedba0260568b69ba32115b20fd233a3d75eb75818b578704db672b282ea3aa7:aedba0260568b69ba32115b20fd233a3d75eb75818b578704db672b282ea3aa7": "Exports a conversation to a Markdown file at the specified destination.\n\nParameters:\n\nReturns:\n\nThe function converts the conversation turns into a Markdown formatted string using `conversation_to_markdown`, then writes this content to the specified destination using `write_text`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\export_service.py:export_snippets_text:0f6aeea09a3091b90ba278dbca2012294e2beb70db1eefcc2bb37bc5733d66d9:0f6aeea09a3091b90ba278dbca2012294e2beb70db1eefcc2bb37bc5733d66d9": "Exports snippets to a text file at the specified destination path.\n\nThis function takes an iterable of snippets (either dictionaries or strings), converts them to text format using the `snippets_to_text` method, and writes the resulting content to the provided destination path using the `write_text` method. It returns the Path object representing the written file.\n\nParameters:\n\nReturns:",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\export_service.py:export_snippets_text:f7861f9063f3586afe03900cc00ab87ca8ad1dcf8d9cec72203222fe47dd1815:f7861f9063f3586afe03900cc00ab87ca8ad1dcf8d9cec72203222fe47dd1815": "The function `export_snippets_text` exports a collection of snippets to a text file. It takes a destination path and an iterable of snippets, converts the snippets into text format using the `snippets_to_text` method, and writes the resulting content to the specified destination using the `write_text` method. The function returns the path of the written file.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\export_service.py:snippets_to_text:00ddca4475250ddcdb2aae64ea207377ea05f12a1ca67debdc6c1d7f977a8f0c:00ddca4475250ddcdb2aae64ea207377ea05f12a1ca67debdc6c1d7f977a8f0c": "The function `snippets_to_text` converts an iterable of snippet dictionaries or strings into a formatted text string. For each snippet:\n\n\nEach processed snippet is stripped of leading/trailing whitespace and joined with double newlines. Empty lines are filtered out before joining. The result is a single text string containing all formatted snippets separated by double newlines.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\export_service.py:snippets_to_text:62c025adb54424ae1cd5ee60541845dc608ebaa79df4601a078a8559d663c4b3:62c025adb54424ae1cd5ee60541845dc608ebaa79df4601a078a8559d663c4b3": "Converts an iterable of snippet dictionaries or strings into a formatted text string. For each snippet, if it's a string, it's used directly. If it's a dictionary, the function extracts label, content, and metadata to format a structured text output. HTML content is stripped of tags before being included in the output. Empty lines are filtered out from the final result.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\export_service.py:write_text:6e6efc98c3a636fe7d1d9f0e7aebf58ffd61da1cb916ce67a9f1ea2747a8fee9:6e6efc98c3a636fe7d1d9f0e7aebf58ffd61da1cb916ce67a9f1ea2747a8fee9": "The function `write_text` writes the provided string content to a file at the specified destination path. It ensures the parent directory of the destination exists by creating it if necessary. The function returns the `Path` object representing the written file.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\export_service.py:write_text:c55ad19593469ba9335696769c7f7350a9076b9b2b88525d75e91f5c634cadcc:c55ad19593469ba9335696769c7f7350a9076b9b2b88525d75e91f5c634cadcc": "Writes text content to a specified destination path, creating parent directories if they don't exist, and returns the Path object of the written file.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\lmstudio_client.py:AnswerLength:9ba37ee630c1426e850da14a119a5145a4b62e1bdadd979f65f15a5829eb9687:9ba37ee630c1426e850da14a119a5145a4b62e1bdadd979f65f15a5829eb9687": "The `AnswerLength` class defines an enumeration-like structure that maps answer length preferences to specific AI response parameters. It provides a method `to_request_params` that returns a dictionary of parameter overrides, including `max_tokens` and `temperature`, based on the enum value. The class supports three answer length settings\u2014`BRIEF`, `DETAILED`, and a default\u2014each with distinct token and temperature configurations for AI-generated responses.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\lmstudio_client.py:AnswerLength:to_request_params:d9d6ec47615bfe560b62b13a77d559017c445ad8c07b15b168f8512d43ebd416:d9d6ec47615bfe560b62b13a77d559017c445ad8c07b15b168f8512d43ebd416": "Function that returns a dictionary of request parameters based on an enumeration value. The function maps specific enumeration values to corresponding dictionaries containing 'max_tokens' and 'temperature' keys with integer and float values respectively. Returns different parameter sets depending on whether the instance matches AnswerLength.BRIEF, AnswerLength.DETAILED, or default case.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\lmstudio_client.py:ChatMessage:dadaecb93e73eb12978a07ef587de4535972068319b80e8bbb34a2c38f97d8dd:dadaecb93e73eb12978a07ef587de4535972068319b80e8bbb34a2c38f97d8dd": "The `ChatMessage` class represents a structured data model for handling conversation messages within the document processing and question-answering application. It supports offline AI interactions by managing message content, context, and citations derived from local document corpora. The class is designed to integrate with the application's retrieval-augmented generation (RAG) system for generating responses based on indexed document content.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\lmstudio_client.py:LMStudioClient:__init__:fa1d15ddea1130d9472a8c0088aba5671e076aa6db2e2d649ee6a498b0053d97:fa1d15ddea1130d9472a8c0088aba5671e076aa6db2e2d649ee6a498b0053d97": "Initializes a class instance with configuration parameters for API connectivity and retry behavior. Sets up the base URL by removing trailing slashes, configures the model identifier, establishes maximum retry attempts with a minimum value of zero, and defines the backoff interval between retries.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\lmstudio_client.py:LMStudioClient:_normalize_message_content:4661221d3a708f8d241e1450caba8bb12b3122ca40cefee43e495db06d18a1c8:4661221d3a708f8d241e1450caba8bb12b3122ca40cefee43e495db06d18a1c8": "Function that converts message content to a string, accepting either a string or iterable of items containing strings or dictionaries with text fields, raising an error if content is invalid.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\lmstudio_client.py:LMStudioClient:_parse_chat_response:1cecad41f9c75ffb33e689b98773ad8a556d518e297376c871c27ea196d07232:1cecad41f9c75ffb33e689b98773ad8a556d518e297376c871c27ea196d07232": "Function processes a dictionary response from LMStudio to extract and structure chat message information, including content, citations, and reasoning, while handling missing or malformed data through error raising and default value assignment.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\lmstudio_client.py:LMStudioClient:_request:f99bbcd1473ab2cb27e756155723437660d3593ea8e273728659b648a1b652c4:f99bbcd1473ab2cb27e756155723437660d3593ea8e273728659b648a1b652c4": "Function performs HTTP requests with retry logic and error handling. Takes method, path, and optional payload to construct and send requests. Returns response body as bytes. Handles JSON serialization for payloads. Processes HTTP errors and connection issues. Implements exponential backoff for retries. Raises custom exceptions for various error conditions. Includes timeout handling and status code validation. Supports configurable retry attempts and backoff timing.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\lmstudio_client.py:LMStudioClient:_request_json:94d4ec2f8667ac603a41d4e41af692d211b73eb52084586c1a0d3fe39759f32a:94d4ec2f8667ac603a41d4e41af692d211b73eb52084586c1a0d3fe39759f32a": "Function that sends an HTTP request to an LMStudio endpoint and returns the parsed JSON response. Takes an HTTP method, API path, and optional payload dictionary. Makes a request using a helper method, validates the response is not empty, decodes the UTF-8 response body, and parses it as JSON. Raises a custom exception if the response is empty or contains invalid JSON.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\lmstudio_client.py:LMStudioClient:_should_retry:0d0f376379527f2992e8b8037897eef680425fccbcac3f7be430be78c2ecffef:0d0f376379527f2992e8b8037897eef680425fccbcac3f7be430be78c2ecffef": "Function that determines whether a request should be retried based on HTTP status code. Returns True for None status codes or specific retryable status codes (408, 409, 429, 500, 502, 503, 504), False otherwise.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\lmstudio_client.py:LMStudioClient:base_url:f14a85ea54191273712779dde763f67786c808f55c673859df2ebeae3f8569d6:f14a85ea54191273712779dde763f67786c808f55c673859df2ebeae3f8569d6": "Defines a property method that returns the value stored in the instance variable `_base_url`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\lmstudio_client.py:LMStudioClient:chat:103a465e7a6433e128b213fd794bb335eb6bc6f001e1e4abc2295d859569a115:103a465e7a6433e128b213fd794bb335eb6bc6f001e1e4abc2295d859569a115": "Function sends a sequence of messages to an LMStudio endpoint and returns the first completion as a ChatMessage object. It constructs a request payload with model information, messages, preset parameters, and optional extra options. The function sets streaming to false by default and processes the JSON response to produce a ChatMessage result.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\lmstudio_client.py:LMStudioClient:configure:923d7aba6b001c5f8dd80d146385bbc3e918def3e20087993f20d81ca5e64ce1:923d7aba6b001c5f8dd80d146385bbc3e918def3e20087993f20d81ca5e64ce1": "Function updates connection configuration settings by accepting optional base URL and model parameters, normalizing the base URL by removing trailing slashes, and assigning values to instance variables while preserving existing values when parameters are None.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\lmstudio_client.py:LMStudioClient:d816fe39e9cc734793871078da09856d891e438e549a930bb2b0ef7a6c91d99f:d816fe39e9cc734793871078da09856d891e438e549a930bb2b0ef7a6c91d99f": "The `LMStudioClient` class provides a structured interface for interacting with an LMStudio server, handling configuration, health checks, and chat completions while managing connection settings and error recovery through retry logic. It supports sending message sequences to the language model and parsing responses into structured chat messages, including content, citations, and reasoning. The class includes internal methods for making HTTP requests, validating responses, and determining retry behavior based on HTTP status codes.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\lmstudio_client.py:LMStudioClient:health_check:d94c2dc0c40554307193e72ff7b1b15ba3d1dab52211d45d987db80492dd9ce7:d94c2dc0c40554307193e72ff7b1b15ba3d1dab52211d45d987db80492dd9ce7": "Function that performs a health check on an LMStudio server by sending a GET request to a health endpoint and returning True if the request succeeds, False if an LMStudioError is raised during the request.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\lmstudio_client.py:LMStudioClient:model:a51b290f61e294a6780680c42a3ec581c2671b52114c714121a87183d6e31df9:a51b290f61e294a6780680c42a3ec581c2671b52114c714121a87183d6e31df9": "This function defines a getter method that returns the value stored in the private attribute `_model`. The method has no parameters and is typed to return a string. It provides read access to the internal `_model` attribute's value.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\lmstudio_client.py:LMStudioConnectionError:dbda186207b441283e6e1c1a076e4baa6dd1be5189e13dff11a46e6de347eea6:dbda186207b441283e6e1c1a076e4baa6dd1be5189e13dff11a46e6de347eea6": "The `LMStudioConnectionError` class represents an exception type used within the document processing application to handle errors specifically related to connections with the LMStudio client. It is part of the system's error handling framework for managing issues that arise during interactions with local AI models. This class supports the application's functionality by providing a dedicated error type for connection failures in the language model service.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\lmstudio_client.py:LMStudioError:17ac5e7fa07882684cdc75f907a1f3ee3bbfb52e9e6ef92aed7f8c31a1ec7747:17ac5e7fa07882684cdc75f907a1f3ee3bbfb52e9e6ef92aed7f8c31a1ec7747": "The `LMStudioError` class is defined as part of a project that provides a desktop application scaffold for offline document processing and question-answering using local AI models. It supports corpus ingestion, retrieval, and user interface rendering with PyQt6 and SQLite, ensuring all functionality operates without network dependencies. The application handles document loading from various file types, content indexing, and AI response generation with citations, while offering advanced RAG capabilities and reasoning features.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\lmstudio_client.py:LMStudioResponseError:36938e3a7c91063178513e327fbc4bae1aaa57e0ab0d7f928e58d6f3b65dca28:36938e3a7c91063178513e327fbc4bae1aaa57e0ab0d7f928e58d6f3b65dca28": "The `LMStudioResponseError` class is defined within a project that provides a desktop application scaffold for offline document processing and question-answering using local AI models. It supports corpus ingestion, retrieval, and user interface rendering with PyQt6 and SQLite, enabling all functionality to operate without network dependencies. The application handles document loading from various file types, content indexing, AI response generation with citations, and advanced RAG capabilities.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\lmstudio_client.py:__init__:97244b5305de9b8de491025a37702cf62d121712b97bbabd1f7896f58e3588b3:97244b5305de9b8de491025a37702cf62d121712b97bbabd1f7896f58e3588b3": "Initializes an `LMStudioClient` instance with specified configuration parameters. Sets the base URL, model identifier, maximum number of retries, and retry backoff interval. The base URL is normalized to remove trailing slashes, defaulting to a predefined value if empty. The maximum retries is ensured to be non-negative.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\lmstudio_client.py:__init__:e313c97374c278518c15db97052304c50d114c787b52fa0e9d61ea7f266b000f:e313c97374c278518c15db97052304c50d114c787b52fa0e9d61ea7f266b000f": "Initializes an LMStudioClient instance with specified configuration parameters including base URL, model name, maximum retries, and retry backoff duration. Sets up internal attributes for base URL, model identifier, retry limits, and backoff timing. Ensures the base URL does not end with a slash and defaults to DEFAULT_BASE_URL if empty. Validates that max_retries is non-negative by taking the maximum of the provided value and zero.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\lmstudio_client.py:_normalize_message_content:1bcd43cf941cfabd31f81f3088107510cc306547209986695df80451126449e8:1bcd43cf941cfabd31f81f3088107510cc306547209986695df80451126449e8": "The function `_normalize_message_content` takes a value of any type and attempts to extract or convert it into a string. If the input is already a string, it returns the string directly. If the input is an iterable, it processes each item, collecting string values and dictionary entries with a \"text\" key, then joins them into a single string. If no valid string content is found, it raises an `LMStudioResponseError` indicating that the message is missing content.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\lmstudio_client.py:_normalize_message_content:9b492de32508c458dbc56818c9f23741599ed17f8e8536d336745ddb1fbc1913:9b492de32508c458dbc56818c9f23741599ed17f8e8536d336745ddb1fbc1913": "The function `_normalize_message_content` takes a value of any type and attempts to extract or construct a string from it. If the input is already a string, it returns the string directly. If the input is an iterable, it processes each item, collecting strings and extracting text from dictionaries with a \"text\" key. If successful in collecting parts, it joins them into a single string. If no valid content is found, it raises an `LMStudioResponseError` indicating that the message content is missing.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\lmstudio_client.py:_parse_chat_response:30a209faea4baf218063edcb8ed77fa6e223dbe6ce61fba074809168be335711:30a209faea4baf218063edcb8ed77fa6e223dbe6ce61fba074809168be335711": "Parses a chat response from the LMStudio API into a `ChatMessage` object. Extracts the message content, citations, and reasoning from the response data, normalizes the content, and constructs a `ChatMessage` with the parsed information and the original response data. Raises `LMStudioResponseError` if required fields are missing or malformed.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\lmstudio_client.py:_parse_chat_response:fee6294e8612139d193c094f617053e8250ede25c43328f9d328731e1cd46834:fee6294e8612139d193c094f617053e8250ede25c43328f9d328731e1cd46834": "The function `_parse_chat_response` processes a dictionary response from the LMStudio API and extracts structured chat message information. It retrieves the content, citations, and reasoning from the response, normalizes the content, and constructs a `ChatMessage` object with these components along with the raw response data. The function includes error handling to ensure the response contains expected fields and data types.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\lmstudio_client.py:_request:0703c1f80732a5c4cb642aff6572937e30fdcdd999a3081bde4113c50de1403a:0703c1f80732a5c4cb642aff6572937e30fdcdd999a3081bde4113c50de1403a": "The function `_request` sends an HTTP request to the LMStudio API and returns the response body as bytes. It supports GET, POST, and other HTTP methods, and handles JSON payloads. The function includes retry logic with exponential backoff for failed requests, and raises custom exceptions (`LMStudioResponseError`, `LMStudioConnectionError`, `LMStudioError`) based on the type of error encountered during the request. It decodes HTTP errors and timeouts appropriately, and ensures that the response status code is checked for errors before returning the body.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\lmstudio_client.py:_request:5d5f804a7d1dd519cdea3867020a17141b70a262382cbf6ca971bb765f2159ff:5d5f804a7d1dd519cdea3867020a17141b70a262382cbf6ca971bb765f2159ff": "The function `_request` performs an HTTP request to the LMStudio API with support for retries and error handling. It constructs a URL from a base URL and path, encodes a JSON payload if provided, and sends the request using `urllib.request`. The function handles various HTTP errors, timeouts, and connection issues, raising appropriate custom exceptions based on the type of failure. It implements exponential backoff for retry attempts and returns the response body as bytes upon success. If all retry attempts are exhausted or an unrecoverable error occurs, it raises a `LMStudioError` with details about the failure.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\lmstudio_client.py:_request_json:0bfc8b4d211fa8c54fe5f892df610a3163afad41def2290ede759173dcbc066e:0bfc8b4d211fa8c54fe5f892df610a3163afad41def2290ede759173dcbc066e": "The function `_request_json` sends an HTTP request using the specified method and path, with an optional payload. It decodes the response body as UTF-8 and attempts to parse it as JSON. If the response is empty, it raises an `LMStudioResponseError`. If the JSON parsing fails, it also raises an `LMStudioResponseError` with the original exception as the cause. The function returns the parsed JSON dictionary.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\lmstudio_client.py:_request_json:71774b5a15112187f7b83354892f1c093c98908513d6c4d0000722671797927b:71774b5a15112187f7b83354892f1c093c98908513d6c4d0000722671797927b": "The function `_request_json` sends an HTTP request to the LMStudio API using the specified method and path, with an optional payload. It retrieves the response body, checks for empty responses, and attempts to decode the body as UTF-8 JSON. If the response is empty, it raises an `LMStudioResponseError`. If the JSON decoding fails, it also raises an `LMStudioResponseError` with the original exception as the cause. The function returns the parsed JSON data as a dictionary.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\lmstudio_client.py:_should_retry:abf6262c2016c7e43d82f86b104d537a03495fd9e9480cfaf4a942fa263c1600:abf6262c2016c7e43d82f86b104d537a03495fd9e9480cfaf4a942fa263c1600": "The function `_should_retry` determines whether a request should be retried based on the HTTP status code. It returns `True` if the status is `None` or if the status code is one of the specified retryable codes: 408 (Request Timeout), 409 (Conflict), 429 (Too Many Requests), 500 (Internal Server Error), 502 (Bad Gateway), 503 (Service Unavailable), or 504 (Gateway Timeout). For all other status codes, it returns `False`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\lmstudio_client.py:_should_retry:d83e57ee9854f2403371f02c54e8593e0f6ec9c91af2cfd6e99ab24e24d143b5:d83e57ee9854f2403371f02c54e8593e0f6ec9c91af2cfd6e99ab24e24d143b5": "The function `_should_retry` determines whether a request should be retried based on the HTTP status code provided. It returns `True` if the status is `None` or if the status code is one of the retryable errors: 408 (Request Timeout), 409 (Conflict), 429 (Too Many Requests), 500 (Internal Server Error), 502 (Bad Gateway), 503 (Service Unavailable), or 504 (Gateway Timeout). Otherwise, it returns `False`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\lmstudio_client.py:ae2cb81979b11a49cf23eca396dabce2a9dfe4917f83e7bbff147271569e0ea4:ae2cb81979b11a49cf23eca396dabce2a9dfe4917f83e7bbff147271569e0ea4": "Defines a client for interacting with a local LMStudio HTTP server that provides chat completion functionality. Includes error handling for connection and response issues, support for different answer length presets, and methods for health checks and sending messages. The client handles retries with exponential backoff and parses structured responses into data classes. Provides utilities for configuring connection settings and normalizing message content from responses.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\lmstudio_client.py:base_url:0bacd6988429fd27c121dda821d42aff4166d5a1408e105334e4d03e7f7b3caf:0bacd6988429fd27c121dda821d42aff4166d5a1408e105334e4d03e7f7b3caf": "The function `base_url` is a property method that returns the value of the private attribute `_base_url`. It provides read-only access to the base URL stored within the `LMStudioClient` instance.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\lmstudio_client.py:base_url:d7ea7dd272e3e04aa88f035319741ce18759a62fa5b80def6194b2de0abfe2b3:d7ea7dd272e3e04aa88f035319741ce18759a62fa5b80def6194b2de0abfe2b3": "Returns the base URL stored in the private attribute `_base_url`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\lmstudio_client.py:chat:11cf64f572ca56a9ae7353b85026eda3c47a052d3d3cca1374649a84ac13e4a5:11cf64f572ca56a9ae7353b85026eda3c47a052d3d3cca1374649a84ac13e4a5": "The `chat` method sends a sequence of messages to the LMStudio client for processing and returns the first completion as a `ChatMessage`. It constructs a request payload containing the model, messages, preset parameters derived from the `AnswerLength` enum, and optional extra options. The method disables streaming by default, sends the payload to the LMStudio API endpoint for chat completions, and parses the response into a `ChatMessage` object.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\lmstudio_client.py:chat:254d84b3919805ac7721f3a0952f441fd7b1a0b3780b9d5ba8b85c47e076d492:254d84b3919805ac7721f3a0952f441fd7b1a0b3780b9d5ba8b85c47e076d492": "The `chat` method sends a sequence of messages to an LMStudio server and returns the first completion response. It constructs a request payload containing the model identifier, messages, preset parameters derived from the `AnswerLength` enum, and optional extra configuration. The method ensures streaming is disabled and processes the server's JSON response into a `ChatMessage` object using a dedicated parser.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\lmstudio_client.py:configure:1015069a4553ac6bc135da5a07caac43ff24b1c44519c89726ce707eb4d933f5:1015069a4553ac6bc135da5a07caac43ff24b1c44519c89726ce707eb4d933f5": "The `configure` method updates the connection settings for the `LMStudioClient` instance. It accepts optional arguments for `base_url` and `model`, allowing the client's base URL and model to be modified without requiring a full client recreation. The `base_url` is normalized by removing any trailing slashes, and if the resulting string is empty, it defaults to `DEFAULT_BASE_URL`. The `model` parameter directly updates the client's assigned model.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\lmstudio_client.py:configure:3450250c2de05ce80310a99554e8e807af848a14a89874b5f88db8060c2a2a18:3450250c2de05ce80310a99554e8e807af848a14a89874b5f88db8060c2a2a18": "The `configure` method updates the connection settings for an LMStudioClient instance without requiring it to be recreated. It accepts optional parameters for `base_url` and `model`, allowing the client's base URL and model identifier to be modified. The base URL is normalized by removing any trailing slashes, with a fallback to a default URL if the provided value is empty. If either parameter is not provided, the corresponding attribute remains unchanged.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\lmstudio_client.py:health_check:bc5755c86ff33890a2e6d9f5b37bf26a1b10efa494d4be77d6ada61bd46eb646:bc5755c86ff33890a2e6d9f5b37bf26a1b10efa494d4be77d6ada61bd46eb646": "The `health_check` method in the `LMStudioClient` class determines whether the LMStudio server is responsive by sending a GET request to a health probe endpoint. It returns `True` if the server responds successfully, and `False` if an `LMStudioError` is raised during the request attempt.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\lmstudio_client.py:health_check:c629c2a3bed1ad1a1f6babc4d62be18541f93687e2a99160f59351978ad58b2f:c629c2a3bed1ad1a1f6babc4d62be18541f93687e2a99160f59351978ad58b2f": "The `health_check` method performs a health probe against the LMStudio server by sending a GET request to a predefined health endpoint. It returns `True` if the server responds successfully, and `False` if an `LMStudioError` is raised during the request, indicating the server is not responsive.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\lmstudio_client.py:model:2441262d622e0a60db9f071c0bce5c9cf8b6692cfe54fab92c6a5579e17fe0a1:2441262d622e0a60db9f071c0bce5c9cf8b6692cfe54fab92c6a5579e17fe0a1": "Returns the value of the private attribute `_model`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\lmstudio_client.py:model:5d7ac4ffdf972315d10414725eb4ccaa7087077e3b7d41cd6600ef51eae34f23:5d7ac4ffdf972315d10414725eb4ccaa7087077e3b7d41cd6600ef51eae34f23": "The function `model` is a property getter that returns the value of the private attribute `_model`. This attribute likely stores the identifier or name of a language model used by the `LMStudioClient` class. The method provides read-only access to the model configuration.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\lmstudio_client.py:to_request_params:61a99b47020f72bc403d1411c8e61489053f0fb2db07ca95f562079a1dd4745f:61a99b47020f72bc403d1411c8e61489053f0fb2db07ca95f562079a1dd4745f": "The function `to_request_params` returns a dictionary of request parameter overrides based on the enum value of `AnswerLength`. For `BRIEF`, it sets `max_tokens` to 256 and `temperature` to 0.2. For `DETAILED`, it sets `max_tokens` to 1024 and `temperature` to 0.4. For the default case, it sets `max_tokens` to 512 and `temperature` to 0.3.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\lmstudio_client.py:to_request_params:a3f340a42767ecf645fcb210ca4a2cdf7ae8a5fb015ef8a85bd3a9507649a957:a3f340a42767ecf645fcb210ca4a2cdf7ae8a5fb015ef8a85bd3a9507649a957": "Returns a dictionary of request parameter overrides based on the enum value. For `BRIEF`, returns `{\"max_tokens\": 256, \"temperature\": 0.2}`. For `DETAILED`, returns `{\"max_tokens\": 1024, \"temperature\": 0.4}`. For the default case, returns `{\"max_tokens\": 512, \"temperature\": 0.3}`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\progress_service.py:ProgressService:__init__:8f8750e9aef974d4bf4311f97be98b2569bcc9271040e5e77977bb902ddb13b0:8f8750e9aef974d4bf4311f97be98b2569bcc9271040e5e77977bb902ddb13b0": "Initializes the object with an empty list of subscriptions for progress update callbacks. The subscriptions are typed as callables that accept a ProgressUpdate parameter and return None. Inherits initialization behavior from a parent class.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\progress_service.py:ProgressService:_dispatch:c908a697084778d47bbc5c4a4dde56daedae7b1671c1bf6856b9f01d9c1f9e03:c908a697084778d47bbc5c4a4dde56daedae7b1671c1bf6856b9f01d9c1f9e03": "Function dispatches a progress update to all subscribed callbacks. Takes a progress update object as input and iterates through a copy of the subscriptions list, calling each callback with the update parameter. Uses list() to create a snapshot of subscriptions to avoid issues if callbacks modify the subscription list during iteration. Does not return any value.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\progress_service.py:ProgressService:f15e3ff02c25a9ca322c37b87afdc61bdb538fb940e812ed97a8506c5d5a15b7:f15e3ff02c25a9ca322c37b87afdc61bdb538fb940e812ed97a8506c5d5a15b7": "The `ProgressService` class manages progress tracking and notifications for background tasks within the application, allowing subscribers to receive updates on task status through a signal-based system. It supports starting, updating, and finishing progress events, as well as emitting toast notifications for user feedback. The class facilitates subscription management for progress updates and integrates with background task emitters by connecting their signals to corresponding progress methods.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\progress_service.py:ProgressService:finish:8ba4f46cf4853f67d77627390f89e0931c931da67310855565dd5e100a46a1d8:8ba4f46cf4853f67d77627390f89e0931c931da67310855565dd5e100a46a1d8": "Function that completes a progress task by emitting a finished signal and dispatching an update with 100% completion.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\progress_service.py:ProgressService:notify:57f1b8b46064d756006d6741f6ed28a29a5126a722c8ad5a7702d524d41d1fe4:57f1b8b46064d756006d6741f6ed28a29a5126a722c8ad5a7702d524d41d1fe4": "Function that emits a toast notification request with a specified message, level, and duration.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\progress_service.py:ProgressService:start:c0cbc73f6e52e72582d05e13b66e9f0173c42ba83112a6ad0bb2d4bec33976b1:c0cbc73f6e52e72582d05e13b66e9f0173c42ba83112a6ad0bb2d4bec33976b1": "Function that initiates a progress tracking event by creating a ProgressUpdate object with zero percentage and emitting it through a progress_started signal, followed by dispatching the update.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\progress_service.py:ProgressService:subscribe:d43fe2574ec0752f158c09e72f056ad202136aaa6b100dc015b738fab51f9d80:d43fe2574ec0752f158c09e72f056ad202136aaa6b100dc015b738fab51f9d80": "Function that adds a callback to a list of subscriptions for handling progress events. The callback receives progress update objects and is only added if it's not already present in the subscription list.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\progress_service.py:ProgressService:subscribe_to:ef47fea1898d3a7a95a8b73abfeb9f4d6e6483030a3743f4bfce8e093509fb06:ef47fea1898d3a7a95a8b73abfeb9f4d6e6483030a3743f4bfce8e093509fb06": "Function connects a background task emitter's signals to corresponding methods for handling task lifecycle events. Takes an object with optional started, progress, and finished attributes that emit signals. Connects the started signal to a start method, progress signal to an update method, and finished signal to a finish method. Uses lambda functions to pass task identifiers and optional messages to the respective handler methods. Handles cases where emitter attributes may not exist by checking with hasattr before connecting signals.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\progress_service.py:ProgressService:unsubscribe:c8062d939b9d749e3468f292cf397afe37586e92187faae8bb3fcd90c3d9a08d:c8062d939b9d749e3468f292cf397afe37586e92187faae8bb3fcd90c3d9a08d": "Removes a callback function from an internal list of subscriptions. Takes a callback parameter of type Callable that accepts a ProgressUpdate argument and returns None. Checks if the callback exists in the internal _subscriptions list and removes it if present. Does not return any value.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\progress_service.py:ProgressService:update:7000b902b6556d9eca3b7c853fa8df85d8deb4f30d75b50b5f5bd2f748b91459:7000b902b6556d9eca3b7c853fa8df85d8deb4f30d75b50b5f5bd2f748b91459": "Function updates progress information for a specified task and emits events. Takes a task identifier and optional message, percentage, and indeterminate state parameters. Constructs a ProgressUpdate object with provided values, defaulting message to empty string and indeterminate to False when not specified. Emits a progress_updated signal with the update object and dispatches the update internally.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\progress_service.py:ProgressUpdate:0873a579bdd0199f5e28249e239e82a03a3916362d8240d467e02c6131b9d3b8:0873a579bdd0199f5e28249e239e82a03a3916362d8240d467e02c6131b9d3b8": "The `ProgressUpdate` class represents a data structure for handling progress updates within the document processing and retrieval system. It is designed to support background tasks such as folder crawling, file rescanning, and corpus ingestion by providing structured progress information. The class integrates with the application's task management and user interface rendering components to communicate processing status.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\progress_service.py:__init__:18f4e7aa95178bd314ab1df914c61a5ff17e66b94548afcb16869f5e18367ea9:18f4e7aa95178bd314ab1df914c61a5ff17e66b94548afcb16869f5e18367ea9": "Initializes the ProgressService instance by calling the parent constructor and setting up an empty list to store progress update subscriptions. The subscriptions list is typed to hold callable functions that accept a ProgressUpdate parameter and return None.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\progress_service.py:__init__:894cdc33a21620447fc5958031f5c3c5a8b782727bf6d6880c5b8d1391ba7ad8:894cdc33a21620447fc5958031f5c3c5a8b782727bf6d6880c5b8d1391ba7ad8": "Initializes the `ProgressService` instance, setting up an empty list to store subscriptions for progress updates. The class inherits from an unspecified parent class, and the `_subscriptions` attribute holds a list of callable objects that accept a `ProgressUpdate` parameter.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\progress_service.py:_dispatch:a0cd2060c8326e9b6e6c9e3c964ec79990dc1c76ab3759b15099968eec4dd522:a0cd2060c8326e9b6e6c9e3c964ec79990dc1c76ab3759b15099968eec4dd522": "The function `_dispatch` sends a `ProgressUpdate` object to all subscribed callbacks. It iterates over a copy of the `_subscriptions` list and invokes each callback with the provided update. This enables asynchronous notification of progress changes to multiple listeners.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\progress_service.py:_dispatch:cc253f087be3609e74ebe47f13d3e65dfcf8f0b08c4e7f7818bce0a6280b6206:cc253f087be3609e74ebe47f13d3e65dfcf8f0b08c4e7f7818bce0a6280b6206": "The `_dispatch` method processes a `ProgressUpdate` by iterating through all registered callbacks in `self._subscriptions` and invoking each one with the provided update. It creates a copy of the subscriptions list to ensure that modifications to the subscription set during iteration do not affect the current dispatch operation.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\progress_service.py:b8c3b5dcd9966b561d329331684333971331e63bc9119dd4b56929ff9863b8b7:b8c3b5dcd9966b561d329331684333971331e63bc9119dd4b56929ff9863b8b7": "Defines a progress tracking and toast notification system using PyQt6 signals. Provides a `ProgressUpdate` data class to represent progress state and a `ProgressService` class that manages subscriptions to progress events and emits signals for task start, update, and completion. Includes methods to subscribe and unsubscribe callbacks, dispatch updates, and integrate with background task emitters. Supports toast notifications with message, level, and duration parameters.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\progress_service.py:finish:247384a6a8a8aad5dd6ee3210e6e630d2bc75ce8e0b7f73c33fa92c3dbe22597:247384a6a8a8aad5dd6ee3210e6e630d2bc75ce8e0b7f73c33fa92c3dbe22597": "The `finish` method marks a progress task as completed by creating a `ProgressUpdate` object with a specified task ID, optional message, and sets the completion percentage to 100.0. It then emits a `progress_finished` signal with the update and dispatches the update internally.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\progress_service.py:finish:2a2b77708e432724a4a4d246329b907fae1466b64d0e158c79a4732182430247:2a2b77708e432724a4a4d246329b907fae1466b64d0e158c79a4732182430247": "The `finish` method marks a progress task as completed by creating a `ProgressUpdate` object with 100% completion percentage and the provided message, then emits the update through the `progress_finished` signal and dispatches it internally.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\progress_service.py:notify:967fd4269cfd537d7680efc6e353b8c5616863ebd0e0ce11842639add0a6eea6:967fd4269cfd537d7680efc6e353b8c5616863ebd0e0ce11842639add0a6eea6": "The `notify` method in the `ProgressService` class requests a toast notification with a specified message, notification level, and duration. It emits a signal containing the message, level, and duration in milliseconds to trigger the toast display. The default level is \"info\" and the default duration is 4000 milliseconds.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\progress_service.py:notify:cf488b7cae349fbc11c560aa83b70c7ecf217fb2ec2d0fe21b6760c26fb8a7c0:cf488b7cae349fbc11c560aa83b70c7ecf217fb2ec2d0fe21b6760c26fb8a7c0": "The function `notify` emits a signal requesting a toast notification with a specified message, level, and duration. It takes a message string, an optional level (defaulting to \"info\"), and an optional duration in milliseconds (defaulting to 4000). The signal `toast_requested` is emitted with these parameters to trigger the display of the notification.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\progress_service.py:start:607d391de2f6259d108c49a2e0f484ce82d829d510467acfb0ec84173e8652db:607d391de2f6259d108c49a2e0f484ce82d829d510467acfb0ec84173e8652db": "The `start` method initializes a progress tracking operation for a given task. It creates a `ProgressUpdate` object with the specified task ID, optional message, and sets the progress percentage to 0.0. The method then emits a `progress_started` signal with this update and dispatches it through the service's internal dispatch mechanism.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\progress_service.py:start:c66f7e16190f7df530b43a77759da4a0bea9d2a573d96384ccf53353c97957cb:c66f7e16190f7df530b43a77759da4a0bea9d2a573d96384ccf53353c97957cb": "The `start` method initializes a progress update event for a given task ID and optional message. It creates a `ProgressUpdate` object with the specified task ID, message, and an initial progress percentage of 0.0. The method then emits a `progress_started` signal with the created update object and dispatches the update using the `_dispatch` method. This function is used to notify listeners of a new progress tracking event and initiate the progress reporting cycle.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\progress_service.py:subscribe:10c7956a6638b49c50f63a2733ac73659bc687e1b7f7a444b6f51216decba48b:10c7956a6638b49c50f63a2733ac73659bc687e1b7f7a444b6f51216decba48b": "The `subscribe` method allows registering a callback function to receive raw progress events. It appends the provided callback to an internal list of subscriptions, ensuring that duplicate subscriptions are not added. The method takes a callable that accepts a `ProgressUpdate` parameter and returns `None`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\progress_service.py:subscribe:69c374c70f101b41dfe5bffab1f215d1676c9d448fe137299d566e6d5c6bc3d7:69c374c70f101b41dfe5bffab1f215d1676c9d448fe137299d566e6d5c6bc3d7": "The function `subscribe` allows registering a callback function to receive raw progress events. It takes a callable that accepts a `ProgressUpdate` parameter and adds it to the internal list of subscriptions if it is not already present. This enables external code to listen for and respond to progress updates emitted by the `ProgressService`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\progress_service.py:subscribe_to:1e6f3c0159ef58495358f6c92e34dd6c2b9a2d4f18bb5a1b99e20939d0ed5f74:1e6f3c0159ef58495358f6c92e34dd6c2b9a2d4f18bb5a1b99e20939d0ed5f74": "Connects a background task emitter to progress tracking signals.\n\nEstablishes connections to `started`, `progress`, and `finished` signals from the provided emitter object. When the `started` signal is emitted, it triggers the `start` method with the task ID and optional message. When the `progress` signal is emitted, it calls the `update` method with task ID, percent complete, and optional message. When the `finished` signal is emitted, it invokes the `finish` method with the task ID and optional message.\n\nThe function handles cases where the emitter may not have all three signals by checking for their existence before connecting. The connections use lambda functions to adapt the signal signatures to match the expected method signatures of the progress service methods.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\progress_service.py:subscribe_to:fb4b5f340b3240848519fdbea7553c49ea78a027b15f33d6f5d06278abfb66cd:fb4b5f340b3240848519fdbea7553c49ea78a027b15f33d6f5d06278abfb66cd": "The `subscribe_to` method connects a background task emitter to the `ProgressService` by linking its `started`, `progress`, and `finished` signals to corresponding methods in the service. It handles three types of signals: `started` triggers the `start` method, `progress` triggers the `update` method, and `finished` triggers the `finish` method. The method checks for the existence of each signal before connecting it.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\progress_service.py:unsubscribe:529c8f725d7483870ba554fd399af37cbc2968048da238c85c4fafd5a512b752:529c8f725d7483870ba554fd399af37cbc2968048da238c85c4fafd5a512b752": "Removes a callback function from the service's subscription list if it exists.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\progress_service.py:unsubscribe:6c64c3056d307ad43daa143f2c793331a1ef8ec6ed6ecba328e1ffe099511150:6c64c3056d307ad43daa143f2c793331a1ef8ec6ed6ecba328e1ffe099511150": "The function `unsubscribe` removes a specified callback function from the list of subscriptions managed by the `ProgressService` class. It takes a single argument, `callback`, which is expected to be a callable that accepts a `ProgressUpdate` object. The function checks if the callback exists in the internal `_subscriptions` list and removes it if present. This allows for dynamic management of event listeners or observers that are notified of progress updates.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\progress_service.py:update:1987cec881d4848b55a6d84a5b8cd1e211b2a9d52e75113be90f3fc0fe37ebaf:1987cec881d4848b55a6d84a5b8cd1e211b2a9d52e75113be90f3fc0fe37ebaf": "The `update` method in the `ProgressService` class emits a `ProgressUpdate` event with specified progress details, including a task ID, message, percentage, and indeterminate state. It constructs a `ProgressUpdate` object using the provided parameters and forwards it to registered listeners via the `progress_updated` signal. Additionally, it dispatches the update internally using the `_dispatch` method. The method accepts optional parameters for the progress message, completion percentage, and indeterminate state, defaulting values where necessary.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\progress_service.py:update:93b5bbde39aeb6159112efcc76b76729adb6f11fad0185adad2b570bbd725171:93b5bbde39aeb6159112efcc76b76729adb6f11fad0185adad2b570bbd725171": "Updates the progress of a specified task with optional message, percentage, and indeterminate state. Emits a progress updated signal and dispatches the update internally.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:ProjectRecord:d47bac7a153db911a0f8ea6f3f9cf935875b23193e9540e58a1f4100a476324f:d47bac7a153db911a0f8ea6f3f9cf935875b23193e9540e58a1f4100a476324f": "The `ProjectRecord` class serves as a structured representation of a project within the document processing and retrieval system, defining the layout and organization of project data. It supports corpus ingestion, document hierarchy management, and search functionality using SQLite for local data storage. The class facilitates offline AI interactions and RAG capabilities while providing support for conversation context management and export operations.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:ProjectService:9f79938afa87454768fe941b250815b0b1f72da51db9f14d181da1c92775a7ce:9f79938afa87454768fe941b250815b0b1f72da51db9f14d181da1c92775a7ce": "The `ProjectService` class manages project lifecycle operations within a local document processing application, handling creation, retrieval, renaming, deletion, and activation of projects while maintaining associated storage directories and configurations. It provides functionality for managing corpus roots, conversation settings, and database snapshots, ensuring data integrity through thread-safe operations and configuration persistence. The class supports reloading persisted state, purging derived project data, and emitting signals to notify listeners of changes to projects or the active project.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:ProjectService:__init__:92155e0ba3c3dd9bc6c5552949b65565762be9668d2ee14d0c5442851bd780f9:92155e0ba3c3dd9bc6c5552949b65565762be9668d2ee14d0c5442851bd780f9": "Initializes a class instance with configuration and database setup. Creates a storage directory if needed, initializes a database at that location, and sets up repositories for managing projects, documents, chats, ingested documents, and background tasks. Configures a thread-safe lock for concurrent access and ensures a default project exists and is loaded.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:ProjectService:_clear_project_storage_path:3e961c28c105a7765d198f730617cdeab85769dda5a6ab835c9e511f579bc199:3e961c28c105a7765d198f730617cdeab85769dda5a6ab835c9e511f579bc199": "Function removes a project's storage location entry from configuration data based on project ID, and cleans up empty storage locations dictionary.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:ProjectService:_emit_active_project_changed:f540b4935c3ae1e81921294da8edc73451c7a2c9faffd3e61c3183933967b122:f540b4935c3ae1e81921294da8edc73451c7a2c9faffd3e61c3183933967b122": "This function emits a signal indicating that the active project has changed, passing the new project record as an argument.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:ProjectService:_emit_projects_changed:bbf85ba285b2d36ab2340d1842f1f91c74cd67b8a19e2fa50bb3742598634552:bbf85ba285b2d36ab2340d1842f1f91c74cd67b8a19e2fa50bb3742598634552": "The function emits a signal indicating that projects have changed, passing the result of retrieving the list of projects as an argument.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:ProjectService:_ensure_default_project:8a4317bc9f967dd9df954c9e8b7955531aa678ddc6c1943718773cb2de39d935:8a4317bc9f967dd9df954c9e8b7955531aa678ddc6c1943718773cb2de39d935": "Function ensures a default project exists by checking for existing projects, creating one if none exist, setting up project storage, and storing the active project ID.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:ProjectService:_ensure_project_storage:a140083a143e9fa29a976f4a5f711e20ac828f8a834fdc2aec63ce7cf57f6e12:a140083a143e9fa29a976f4a5f711e20ac828f8a834fdc2aec63ce7cf57f6e12": "Function ensures the existence of a project storage directory by creating it if necessary and returns the path to the storage directory.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:ProjectService:_load_active_project:875e5c1bf6d3b6abbb159e1adba1eec59b83dc2cc0311d640774a2a4ea06adba:875e5c1bf6d3b6abbb159e1adba1eec59b83dc2cc0311d640774a2a4ea06adba": "Function loads and validates the active project ID from storage, selecting the first available project if the stored ID is invalid, or raising an error if no projects exist. It then ensures the project storage is properly initialized for the selected project.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:ProjectService:_load_active_project_id:ca1bf537029f55a51089dec709fba8c7fe738d111ee698b7582f7eb0efc6343b:ca1bf537029f55a51089dec709fba8c7fe738d111ee698b7582f7eb0efc6343b": "Function that retrieves and validates the active project ID from configuration data. It loads configuration, verifies data structure, extracts the active project identifier, and attempts type conversion to integer. Returns the converted integer value or None if validation fails at any step.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:ProjectService:_load_project_storage_path:38ae90ef61df7710b462e8d18b5449319b74a7f3ec37c145309c240b0065be02:38ae90ef61df7710b462e8d18b5449319b74a7f3ec37c145309c240b0065be02": "Function that retrieves a storage path for a given project ID from configuration data. Takes a project identifier and returns either a Path object containing the storage location or None. Processes configuration data through multiple validation steps to ensure proper data types at each level of nested dictionaries. Returns the stored path string converted to a Path object when found and valid, otherwise returns None.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:ProjectService:_path_within:b136c58f362be83900454d2a1a98f7639d21b0fbbc12c42e7dc4e4904988ff10:b136c58f362be83900454d2a1a98f7639d21b0fbbc12c42e7dc4e4904988ff10": "Function that checks if a given path is within a specified parent directory, handling various Python version compatibility cases and file system exceptions. Returns a boolean indicating the relationship between the paths.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:ProjectService:_primary_corpus_root:26a95959161632fbe0dc4af61da14fb3c77d20d8f877ae9b0372db9602793f02:26a95959161632fbe0dc4af61da14fb3c77d20d8f877ae9b0372db9602793f02": "Function that retrieves the primary corpus root path for a given project ID by fetching the first root from a list of corpus roots and returning it as a Path object, or None if no roots exist.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:ProjectService:_project_storage_dir:5ff9dbf86032c657561dbf376040fcf5615f2a786f78aceed6a5acfd846dbdad:5ff9dbf86032c657561dbf376040fcf5615f2a786f78aceed6a5acfd846dbdad": "Function that determines and returns the storage directory path for a given project ID. It first attempts to load a previously stored path, falling back to constructing a new path based on the primary corpus root. If a legacy storage location exists but the new location does not, it moves the legacy data to the new location. The function stores the resolved path for future use and returns the final storage directory path, or None if no valid path can be determined.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:ProjectService:_remove_project_settings:ca03fdb44802e86d8875cebb05877b376c5e6f068d7770433a2daa32b4fc400d:ca03fdb44802e86d8875cebb05877b376c5e6f068d7770433a2daa32b4fc400d": "Function removes project settings for a given project ID from configuration data. It loads configuration, checks if projects section exists and is a dictionary, then removes the project ID from three specific sub-sections: conversation, corpus_roots, and storage_locations. If any removal occurs, it saves the modified configuration back to storage.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:ProjectService:_store_active_project:a6351534d44cbf4cff8b430ddb0f244cb6259320c745b66e567c436cac3afa8e:a6351534d44cbf4cff8b430ddb0f244cb6259320c745b66e567c436cac3afa8e": "Stores the active project ID in configuration data by loading existing data, ensuring it's a dictionary structure, creating a projects dictionary if needed, setting the active project ID, and saving the updated data back to configuration.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:ProjectService:_store_project_storage_path:6ff7ed66be11e80ea8859128a43d653a6fb43accffab483895d8c56638dc5a94:6ff7ed66be11e80ea8859128a43d653a6fb43accffab483895d8c56638dc5a94": "Stores a project's storage path in configuration data, updating the configuration only when the path differs from the existing value. The method retrieves existing configuration, navigates to the projects.storage_locations section, and updates the entry for the specified project ID with the new path. Changes are persisted to the configuration file only if the path has actually changed.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:ProjectService:active_project:f29c6c3e6b63840202a7e8999c2fb3b3fd44a206275f795c6b039b80a836f45e:f29c6c3e6b63840202a7e8999c2fb3b3fd44a206275f795c6b039b80a836f45e": "The function retrieves a project record corresponding to the active project ID. It calls a method to fetch the project using the active project ID, and if no record is found, it raises a runtime error indicating that the active project record is missing. If a record exists, it returns the project record.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:ProjectService:active_project_id:6ef5566ec1179924c53b9bf80bbe70a31d28136c0e854da71437d2c511e26798:6ef5566ec1179924c53b9bf80bbe70a31d28136c0e854da71437d2c511e26798": "Function that retrieves the ID of an active project, raising a runtime error if the project has not been initialized.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:ProjectService:add_corpus_root:1ed503d4aabfeef2ffa83c8f85e121b0a88a879e9d7a1d4362da5470cc066487:1ed503d4aabfeef2ffa83c8f85e121b0a88a879e9d7a1d4362da5470cc066487": "Function adds a normalized path as an indexed corpus root for a specified project ID, storing it in configuration data. It ensures the path is not already present in the list of roots for the project before appending it. After saving the updated configuration, it triggers project storage initialization and attempts to export a database snapshot for the project, logging any errors that occur during the snapshot export process.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:ProjectService:clear_corpus_roots:b5f3f42439fe16be142719c195f1f1a26b12430b05358818886d0d6a2803599e:b5f3f42439fe16be142719c195f1f1a26b12430b05358818886d0d6a2803599e": "Removes all stored corpus roots associated with a specified project ID. The function acquires a lock, loads configuration data, and checks if the data structure is valid. If the project ID exists in the corpus roots dictionary, it removes the entry and saves the updated configuration. It also removes the corresponding storage directory and clears the project's storage path.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:ProjectService:create_project:fa032b5a97add82f5fc41078d22e95c50b12f7647ffc5a89685139b5fb473799:fa032b5a97add82f5fc41078d22e95c50b12f7647ffc5a89685139b5fb473799": "Creates a new project with the specified name and optional description. Returns a ProjectRecord containing the project's ID, name, and description. Optionally activates the newly created project. Uses a lock for thread safety during creation. Ensures project storage exists and emits a projects changed event after creation.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:ProjectService:database_manager:3144f810e1d4352bfc6c64fd46fd31dc13ec7bc7f27156c05082a1ca5732dd53:3144f810e1d4352bfc6c64fd46fd31dc13ec7bc7f27156c05082a1ca5732dd53": "This function defines a property that returns a DatabaseManager instance stored in the private attribute `_db`. The property provides read access to the database manager object associated with the current instance.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:ProjectService:database_path:9114d5df2cb4fbe2457ce7f53c7da4eb6998a895037ca752f07b2ce3e2d2c667:9114d5df2cb4fbe2457ce7f53c7da4eb6998a895037ca752f07b2ce3e2d2c667": "This function defines a method that returns a Path object stored in the instance variable `_db_path`. The method has no parameters and provides read access to the database path attribute.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:ProjectService:delete_project:0dd7c3a4231465718eaf25b6f85d3c557aff7a253ec7a42192b3dac048bef2e4:0dd7c3a4231465718eaf25b6f85d3c557aff7a253ec7a42192b3dac048bef2e4": "Function deletes a project by ID after validating it's not the active project, removes the project from storage, and cleans up associated settings and notifications.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:ProjectService:export_project_database_snapshot:b3a2932b1125ca71c6f09ad638661d0d4d1c15166ad75e31d0010d374dfcc5d4:b3a2932b1125ca71c6f09ad638661d0d4d1c15166ad75e31d0010d374dfcc5d4": "Function exports a SQLite database snapshot for a specified project into the project's storage directory, returning the path to the exported file or None if the operation fails.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:ProjectService:get_project:428c9d98c2e518614dc1164d01f13c6f3f12c015b6baf13bc57656bd1795f083:428c9d98c2e518614dc1164d01f13c6f3f12c015b6baf13bc57656bd1795f083": "Function retrieves a project record by ID from a cached collection, returning None if not found. It constructs and returns a ProjectRecord object with id, name, and description fields extracted from the stored data. The name field defaults to an empty string if not present, and the description field may be None if not present in the source data.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:ProjectService:get_project_storage:813c78fafaf3d900ac800256e54e6e25f3fef911f71f4511ae5e16494c367560:813c78fafaf3d900ac800256e54e6e25f3fef911f71f4511ae5e16494c367560": "Function retrieves the storage path for a project by first obtaining the project's storage directory, raising a runtime error if no corpus root is configured, creating the directory path if it doesn't exist, and returning the resulting path.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:ProjectService:get_project_storage_location:2d0e26a1e74542773c0155964e04028a4c3df9aa1f51cf2f3b2950bdcb1f9ee9:2d0e26a1e74542773c0155964e04028a4c3df9aa1f51cf2f3b2950bdcb1f9ee9": "Returns the configured storage path for a project identifier without creating the path. Takes a project ID as input and returns a Path object or None. Uses an internal method to determine the storage directory location.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:ProjectService:list_corpus_roots:a2869bcd5fee098322d369aed6fe74c0717b55ef440d34a77e4662ddc255ffc4:a2869bcd5fee098322d369aed6fe74c0717b55ef440d34a77e4662ddc255ffc4": "Function that retrieves and returns a list of absolute paths for corpus root folders associated with a specified project ID from configuration data. The function processes configuration data to extract corpus root paths, resolves them to absolute paths, and returns them as a list of strings. Returns an empty list if the configuration data structure is invalid or if no corpus roots are found for the project ID.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:ProjectService:list_projects:17aa1dbfee9ccac6477fc8fd45b8b52b1621709fe370ea42901ad103a6e847bc:17aa1dbfee9ccac6477fc8fd45b8b52b1621709fe370ea42901ad103a6e847bc": "Function retrieves project records from a list of project entries, converting each entry into a ProjectRecord object with id, name, and description attributes. The function iterates through project entries, skips empty entries, and constructs ProjectRecord instances with type-converted values. Returns a list of ProjectRecord objects containing the processed project data.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:ProjectService:load_conversation_settings:68c821b873006b92497aa59eafbbee3da7003e5989564ba6822b4937e9879b33:68c821b873006b92497aa59eafbbee3da7003e5989564ba6822b4937e9879b33": "Function retrieves conversation settings for a specified project from configuration data. It loads configuration, navigates to the projects section, accesses conversation settings, and returns the settings dictionary for the given project ID. Returns an empty dictionary if any expected data structure is missing or invalid.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:ProjectService:project_storage_directories:a27788097e0a3976894d840e10b74461080ff79a6ae08f736923b87eb4fba848:a27788097e0a3976894d840e10b74461080ff79a6ae08f736923b87eb4fba848": "Function that maps project identifiers to their corresponding storage directory paths, filtering only those projects that have existing storage directories. Returns a dictionary where keys are project IDs and values are Path objects pointing to the storage directories. The function iterates through all projects, checks if each project has a defined storage directory, and verifies that the directory exists before including it in the returned mapping.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:ProjectService:purge_project_data:dc16d5c9731809403293f658eda847d923a77050bde218aa7fd47d9f41ebcf05:dc16d5c9731809403293f658eda847d923a77050bde218aa7fd47d9f41ebcf05": "Function removes derived data associated with a project ID while preserving source files. It deletes records from documents, chats, and tags tables in the database for the specified project. It also removes the project's storage directory contents if it exists. The function ensures thread safety using a lock and handles database transactions. After cleanup, it reinitializes the project storage directory.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:ProjectService:reload:92a8633aebfa0d041bc33094a15b1573dcc70d276f87389d805437790f7eb183:92a8633aebfa0d041bc33094a15b1573dcc70d276f87389d805437790f7eb183": "Function reload closes the current database connection, creates a new DatabaseManager instance at the same path, initializes it, and reassigns repository instances to use the new database connection. It ensures a default project exists, loads the active project, and emits change notifications for projects and the active project. The operation is protected by a lock mechanism.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:ProjectService:remove_corpus_root:44bed0fc11f9f61d277a79b808474bec6aaa7ee5bd851575b9dcb0f8cd95f68d:44bed0fc11f9f61d277a79b808474bec6aaa7ee5bd851575b9dcb0f8cd95f68d": "Function removes a specified path from the corpus roots associated with a project ID in configuration data. It normalizes the input path, updates the configuration by filtering out the specified path from the list of corpus roots for the given project, and persists the updated configuration. If the project's corpus roots become empty after removal, it deletes the project's storage directory and clears its storage path entry. If the removed path is within the project's storage path, it also removes the storage directory and clears the storage path entry. Finally, it ensures that the project has a valid storage path configured.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:ProjectService:rename_project:0d7b323726cee9666af9d736996f8c1d63ce1ac7e8ab92e9e23fe086fcf47b7a:0d7b323726cee9666af9d736996f8c1d63ce1ac7e8ab92e9e23fe086fcf47b7a": "Function updates project properties and returns the modified project record. It accepts a project ID and optional name or description parameters. When neither name nor description is provided, it retrieves and returns the existing project record. When updates are specified, it modifies the project in the database, validates the update result, constructs a new project record with updated values, emits change notifications, and returns the updated record. The function uses a lock to ensure thread safety during database operations.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:ProjectService:save_conversation_settings:84b6040a9a848730ae45fdb802c8a37d8e44d95820f04ab5dc4e96a1f1c8a45b:84b6040a9a848730ae45fdb802c8a37d8e44d95820f04ab5dc4e96a1f1c8a45b": "Function saves conversation settings for a specific project ID by loading existing configuration data, ensuring proper nested dictionary structure, and updating the settings for the given project. The updated configuration is then persisted back to storage.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:ProjectService:set_active_project:0eab2330fd7dddf3e577db31f9873b93abba9f2b42f1ecb83dcf0dbda3f084c6:0eab2330fd7dddf3e577db31f9873b93abba9f2b42f1ecb83dcf0dbda3f084c6": "Sets the active project by ID, validating the project exists, acquiring a lock, updating internal state, ensuring storage exists, storing the active project, and emitting a change notification.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:ProjectService:set_project_storage_location:58d3318bf2daeadfab92ccd3a9c1793571f41a1a8b3b8f22e2fe7a257658fcfe:58d3318bf2daeadfab92ccd3a9c1793571f41a1a8b3b8f22e2fe7a257658fcfe": "Function that stores a resolved file system path as the storage location for a specified project ID, using a lock for thread safety during the storage operation.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:ProjectService:shutdown:5b5bf4c6c452f8d15243370e474947736fe55c93b7057a393b60b29db59eed2f:5b5bf4c6c452f8d15243370e474947736fe55c93b7057a393b60b29db59eed2f": "The function closes database resources held by the service instance. It acquires a lock before closing the database connection to ensure thread safety during the shutdown process.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:ProjectService:storage_root:d1e1053eb5918223f93f0923ea78ca0f49a221f577dc345eb0fed17de4ae1bdd:d1e1053eb5918223f93f0923ea78ca0f49a221f577dc345eb0fed17de4ae1bdd": "Returns the storage root path from the instance's private attribute `_storage_root`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:__init__:92434a0e4ee39811658ee2fbc4662f2e1a895c1a70e78acd50a136a1b3221190:92434a0e4ee39811658ee2fbc4662f2e1a895c1a70e78acd50a136a1b3221190": "Initializes the `ProjectService` class with a specified storage root and configuration manager. Creates necessary directories, initializes a database, and sets up repositories for managing projects, documents, chats, ingestion, and background tasks. Ensures a default project exists and loads the active project.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:__init__:c22203dc1a1c8c82e53f8126cba681311bc30e9bd440671c948642900fede80f:c22203dc1a1c8c82e53f8126cba681311bc30e9bd440671c948642900fede80f": "Initializes the ProjectService with optional storage root and configuration manager. Sets up database persistence, repositories for projects, documents, chats, ingestion, and background tasks, and ensures a default project exists.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:_clear_project_storage_path:63b63d8a90865108f647a6bf2f051ab6539ecbf0c6a19dcb0c2956715d5de175:63b63d8a90865108f647a6bf2f051ab6539ecbf0c6a19dcb0c2956715d5de175": "The function `_clear_project_storage_path` removes the storage location entry for a specified project ID from the configuration data. It retrieves the configuration, navigates to the `projects.storage_locations` section, and deletes the entry corresponding to the given `project_id`. If the `storage_locations` dictionary becomes empty after the removal, it also removes the entire `storage_locations` key from the projects section. Finally, it saves the updated configuration back to storage.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:_clear_project_storage_path:e7675c2257106c37954d71185936d1bcb9fd49e28830df8ce8029a570bd501cf:e7675c2257106c37954d71185936d1bcb9fd49e28830df8ce8029a570bd501cf": "Removes the storage location entry for a specified project ID from the configuration data. If the project ID exists in the storage locations dictionary, it removes the entry and saves the updated configuration. If the storage locations dictionary becomes empty after removal, it also removes the entire storage_locations key from the projects section. The function performs type checking to ensure the configuration data structure is valid before attempting modifications.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:_emit_active_project_changed:4d5ffd38d39fc9f358e3e0026d267803e3abfeb283fdee8bbde26f3549e76b5b:4d5ffd38d39fc9f358e3e0026d267803e3abfeb283fdee8bbde26f3549e76b5b": "Emits the `active_project_changed` signal with the specified `ProjectRecord` instance as the argument.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:_emit_active_project_changed:d5bd978cc6f5c70efe6138ba8d36eada6488a1bf0c28d0b163fd31719f2a1870:d5bd978cc6f5c70efe6138ba8d36eada6488a1bf0c28d0b163fd31719f2a1870": "Emits the active_project_changed signal with the specified ProjectRecord as an argument.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:_emit_projects_changed:25ff9b2db15f6652be5f7c41649535ee2e404a1666a8d42446ae4e81a7399bc6:25ff9b2db15f6652be5f7c41649535ee2e404a1666a8d42446ae4e81a7399bc6": "The function `_emit_projects_changed` emits a signal named `projects_changed`, passing the result of `self.list_projects()` as an argument. This indicates that the function is designed to notify observers of changes in the project list by providing the current list of projects.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:_emit_projects_changed:e78250a6e0560ca103dbf4133c6ca27a60c92293cebfc5e2ae45ec2b977afcdf:e78250a6e0560ca103dbf4133c6ca27a60c92293cebfc5e2ae45ec2b977afcdf": "Emits a signal indicating that the list of projects has changed, sending the current list of projects to any connected listeners.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:_ensure_default_project:92c3060dd5737247ef1679938f15d38669cf6197eb622897c0a25502b0838bbb:92c3060dd5737247ef1679938f15d38669cf6197eb622897c0a25502b0838bbb": "The function ensures a default project exists by checking if any projects are available. If no projects exist, it creates a new project with a default name, sets up storage for the project, and designates it as the active project.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:_ensure_default_project:c2eaf2c3eb5d6722d30c16239d105d92f0dbf83436079f68a9cd28f0c97e6b48:c2eaf2c3eb5d6722d30c16239d105d92f0dbf83436079f68a9cd28f0c97e6b48": "The function `_ensure_default_project` checks if any projects exist within the `ProjectService`. If no projects are found, it creates a new project with the name `DEFAULT_PROJECT_NAME`, ensures that the project has associated storage, and sets the newly created project as the active project.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:_ensure_project_storage:29c1b01952d430625c23dcf3a323206dedd5e808d2060603bba628c437e53c6d:29c1b01952d430625c23dcf3a323206dedd5e808d2060603bba628c437e53c6d": "The function `_ensure_project_storage` ensures that the storage directory for a given project ID exists. It retrieves the storage directory path using `_project_storage_dir`, creates the directory and its parent directories if they do not exist, and returns the path to the storage directory. If the storage directory cannot be determined, it returns `None`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:_ensure_project_storage:7ff13830bd7753ceeec511d846c98c21705c6acb1960f13f24ff5ea3d29a7801:7ff13830bd7753ceeec511d846c98c21705c6acb1960f13f24ff5ea3d29a7801": "Creates and returns the storage directory path for a given project ID, ensuring the directory exists. Returns None if the storage directory cannot be determined. The directory is created with all necessary parent directories, and existing directories are not overwritten.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:_load_active_project:0235351b91a6805b0243c93ec39a6d8c10db3720ab2c0894c853e0c6b7c1217d:0235351b91a6805b0243c93ec39a6d8c10db3720ab2c0894c853e0c6b7c1217d": "Loads the active project ID from storage and validates it against available projects. If the stored ID is valid, it sets that as the active project. If not, it selects the first available project alphabetically. If no projects exist, it raises a runtime error. Ensures storage exists for the selected active project.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:_load_active_project:aadb03876ca903a8b639894f912eaa579ae2eb39a36acfbe6273c8f7856ebecd:aadb03876ca903a8b639894f912eaa579ae2eb39a36acfbe6273c8f7856ebecd": "Loads the active project ID from storage and sets it as the current project, ensuring that the project exists and has storage initialized. If the stored project ID is not found among available projects, it selects the first available project. Raises a RuntimeError if no projects are available.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:_load_active_project_id:17e4dfd93d30692fb90237cb0c044ec4720d27aba5d0b1ba4e5074129668417b:17e4dfd93d30692fb90237cb0c044ec4720d27aba5d0b1ba4e5074129668417b": "The function `_load_active_project_id` retrieves the ID of the currently active project from the configuration data. It loads the configuration, checks if the data is a dictionary and contains a \"projects\" key with a dictionary value, then attempts to extract and convert the \"active_id\" to an integer. If any step fails, it returns `None`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:_load_active_project_id:6bd8b14f6044f09cb1c2926773e6be1f5ed9bc39dae53e566f62d21da5aa4be9:6bd8b14f6044f09cb1c2926773e6be1f5ed9bc39dae53e566f62d21da5aa4be9": "Loads and returns the active project ID from configuration data. Retrieves the project ID from the \"projects.active_id\" field in the loaded configuration, converting it to an integer. Returns None if the configuration data is invalid or the project ID cannot be converted to an integer.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:_load_project_storage_path:3b4452e9d8b686d0872bee602967e3adac85e63ae4ea36c97eb0427bded25da2:3b4452e9d8b686d0872bee602967e3adac85e63ae4ea36c97eb0427bded25da2": "The function `_load_project_storage_path` retrieves the storage path for a specified project ID from the application's configuration. It accesses the configuration data, navigates through nested dictionaries to find the `storage_locations` entry under the `projects` key, and returns the path associated with the given `project_id` if it exists and is valid. If any step in the configuration structure is missing or invalid, the function returns `None`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:_load_project_storage_path:69e7f5f7cc534207c89dcbac7607433f293939738bfd05a4a8d98ea4150b1ab2:69e7f5f7cc534207c89dcbac7607433f293939738bfd05a4a8d98ea4150b1ab2": "Loads and returns the storage path for a given project ID from configuration data. Returns None if the project ID is not found or if the configuration data is malformed. The function navigates through nested dictionary structures to locate the storage path associated with the specified project ID, converting the stored string path to a Path object if found.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:_path_within:4564ade0cfae3bcdb3aa2c6bd08b7ab23bfc4eab2a8fde31e5bb1e703195715e:4564ade0cfae3bcdb3aa2c6bd08b7ab23bfc4eab2a8fde31e5bb1e703195715e": "The function `_path_within` determines whether a given path is located within a specified parent directory. It attempts to use the `is_relative_to` method available in Python 3.9+ to check if the resolved path is relative to the resolved parent path. If that method is not available (due to older Python versions), it falls back to using `relative_to` within a try-except block to achieve the same result. The function also handles cases where files may not exist by using `resolve(strict=False)` and includes fallback logic for very old Python versions where neither method is available. The function returns a boolean value indicating whether the path is within the parent directory.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:_path_within:6d32ca1292c109e31521afcdc389f3814b8f85d495e754b9a70362096e4668cd:6d32ca1292c109e31521afcdc389f3814b8f85d495e754b9a70362096e4668cd": "The function `_path_within` determines whether a given path is located within a specified parent directory. It attempts to use the `is_relative_to` method available in Python 3.9+ to check if the resolved path is relative to the resolved parent path. If that method is not available (due to an older Python version), it falls back to using `relative_to` and catching a `ValueError` to determine the result. In cases where file resolution fails, it performs a similar check with `strict=False` to handle non-existent files. The function returns a boolean value indicating whether the path is within the parent directory.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:_primary_corpus_root:5c2c101b1d8e4f44a7e9ab01f3fbd6cfd18935bc76aa821960607f66eb4d35df:5c2c101b1d8e4f44a7e9ab01f3fbd6cfd18935bc76aa821960607f66eb4d35df": "Returns the primary corpus root path for a given project ID, or None if no roots exist. Retrieves the list of corpus roots for the project and returns the first root as a Path object, or None if the list is empty.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:_primary_corpus_root:7363dd6d8178aaf87f25a5110685fc79e34a758cb576788ae1392d9ac7214929:7363dd6d8178aaf87f25a5110685fc79e34a758cb576788ae1392d9ac7214929": "Returns the primary corpus root path for a given project ID. Retrieves the list of corpus roots associated with the project and returns the first root as a Path object. If no corpus roots are found, returns None.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:_project_storage_dir:39c7797a382c9618197a0857e04fe66b8fecdd67e2a900065d256670d7409167:39c7797a382c9618197a0857e04fe66b8fecdd67e2a900065d256670d7409167": "Returns the storage directory path for a given project ID, handling migration from a legacy storage location if necessary. Loads the stored path if available, otherwise constructs the path based on the primary corpus root. If a legacy path exists and the new path doesn't, it moves the legacy directory to the new location. Stores the resolved path for future use and returns it, or None if the primary corpus root cannot be determined.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:_project_storage_dir:8e047c3e0160bb84aff3e9426ecffa018067d50b62703fbc43238ffeed7e2181:8e047c3e0160bb84aff3e9426ecffa018067d50b62703fbc43238ffeed7e2181": "The function `_project_storage_dir` determines the storage directory for a specified project by first attempting to load a previously stored path. If no stored path exists, it derives the path from the project's primary corpus root, creating a standard directory structure under `.dataminer/projects/<project_id>`. It migrates legacy storage directories if they exist and have not been migrated already. Finally, it stores the resolved path for future use and returns the path.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:_remove_project_settings:359bae73bbd21ad3df7d7ee262eba9f0c05e48c7ff53243e2fb1041105c91bf5:359bae73bbd21ad3df7d7ee262eba9f0c05e48c7ff53243e2fb1041105c91bf5": "Removes project settings for a given project ID from the configuration data. The function checks for the existence of the project ID in three specific sections of the projects dictionary: \"conversation\", \"corpus_roots\", and \"storage_locations\". If the project ID is found in any of these sections, it removes the corresponding entry. If any modifications are made to the configuration data, the updated data is saved back to the configuration file.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:_remove_project_settings:4ded4c7622c597e8e594c0012730669387ff38262f2dfbbc7382b06203d5c956:4ded4c7622c597e8e594c0012730669387ff38262f2dfbbc7382b06203d5c956": "The function `_remove_project_settings` removes project-specific settings from the configuration data associated with a given `project_id`. It modifies the configuration by deleting entries related to conversation history, corpus roots, and storage locations that are linked to the specified project ID. If any modifications are made, the updated configuration is saved back to the storage.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:_store_active_project:6562d29b923a76ffbd8041198ce006a2690035a2f39215923a332c1db208eb65:6562d29b923a76ffbd8041198ce006a2690035a2f39215923a332c1db208eb65": "Stores the specified project ID as the active project in the configuration data. Retrieves existing configuration, ensures it is a dictionary, accesses or initializes the \"projects\" section, and sets the \"active_id\" key to the provided project ID before saving the updated configuration.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:_store_active_project:d40c9b573999038cff8194df81d026a68dcadcbc2db9957ee451510fcd7cf33e:d40c9b573999038cff8194df81d026a68dcadcbc2db9957ee451510fcd7cf33e": "Stores the given project ID as the active project in the configuration data. Loads the existing configuration, ensures it contains a dictionary structure for projects, and sets the \"active_id\" key within the projects dictionary to the provided project ID. Saves the updated configuration back to storage.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:_store_project_storage_path:762bd89a3fa7cf4ea8768cbb7a7a486cbeafec90109491b370a1f67692afb99f:762bd89a3fa7cf4ea8768cbb7a7a486cbeafec90109491b370a1f67692afb99f": "Stores the file system path for a project's storage location in the configuration. Updates the configuration data structure to map the given project ID to its storage path, ensuring the path is only saved if it differs from the existing value. The configuration is updated and persisted after any changes.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:_store_project_storage_path:c160d03b8ce8e922c6b769fe6c069786789733a925ea2348e8b723cb031671a5:c160d03b8ce8e922c6b769fe6c069786789733a925ea2348e8b723cb031671a5": "Stores the project storage path for a given project ID in the configuration, ensuring that the path is only updated if it differs from the existing value. If the configuration data is not in the expected dictionary format, it initializes the necessary nested dictionaries. The updated configuration is then saved to disk.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:active_project:48b78d962fa3c0f4edf6031c476a57f80ed1f9ce149c61e4521861771ce44d18:48b78d962fa3c0f4edf6031c476a57f80ed1f9ce149c61e4521861771ce44d18": "Returns the active project record based on the `active_project_id`. Raises a `RuntimeError` if the project record cannot be retrieved.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:active_project:fc7aca9b758bca895cb9441efe8e70b852ce34d1dd31c587ba214a1fbab14bba:fc7aca9b758bca895cb9441efe8e70b852ce34d1dd31c587ba214a1fbab14bba": "Returns the active project record for the current service instance. Retrieves the project using the stored active project ID and raises a runtime error if no record is found for the ID.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:active_project_id:27886a76fe1fa5f4bfbca6a7a8e9c5cd4ee5369a4c2b94a735816825da0d7464:27886a76fe1fa5f4bfbca6a7a8e9c5cd4ee5369a4c2b94a735816825da0d7464": "Returns the ID of the currently active project. Raises a RuntimeError if the active project has not been initialized.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:active_project_id:5de8454109201df5dc679c8b564c485a4fdbf21cf0e8be3ff8e6654ec7cf7986:5de8454109201df5dc679c8b564c485a4fdbf21cf0e8be3ff8e6654ec7cf7986": "The function `active_project_id` is a property method that returns the ID of the currently active project. It first checks if `_active_project_id` is set to `None`, and if so, raises a `RuntimeError` with the message \"Active project not initialised\". Otherwise, it returns the value of `_active_project_id`. This ensures that accessing the active project ID fails explicitly if no project has been initialized.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:add_corpus_root:9828d50c60967a90641fe792a4389406acceda640f60803c5802df8213e6cad8:9828d50c60967a90641fe792a4389406acceda640f60803c5802df8213e6cad8": "The function `add_corpus_root` adds a normalized absolute path as an indexed corpus root for a specified project ID. It ensures the path is stored within the project's configuration, avoiding duplicates. After updating the configuration, it initializes project storage and attempts to export a database snapshot for the project, logging any errors that occur during the snapshot export process.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:add_corpus_root:9e9be00989f7e6923c0a3d18ce1da838bde2823053351f33a5a55b24599cae85:9e9be00989f7e6923c0a3d18ce1da838bde2823053351f33a5a55b24599cae85": "The function `add_corpus_root` adds a specified directory path as an indexed corpus root for a given project ID. It ensures the path is normalized and resolves any symbolic links. The function updates the configuration data structure to include the new path under the corresponding project's corpus roots, avoiding duplicates. After saving the updated configuration, it ensures the project storage is initialized and attempts to export a database snapshot for the project, logging any errors that occur during the snapshot export process.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:b1a5858488a738fe7c6b79fb7043090b26f387f44754b3cdabd2674de0255a1b:merge0:96c45117efc823a1722d4f1bac81c61b4210cc38921b15b68d296ba93845b907": "The project management service implements comprehensive application state coordination with functionality for creating, listing, retrieving, renaming, and deleting projects while managing active project tracking and default project initialization. It provides robust storage management through corpus root handling for adding, removing, and clearing indexed directories, along with database connection and transaction management for project-related data. The service ensures thread safety using reentrant locks and offers methods for reloading persisted state, purging project data, and managing conversation settings per project. Additional utilities support project storage location determination, proper directory creation, configuration persistence, and signal emission for project change events, including methods for removing project configurations, exporting database snapshots, loading and storing storage locations, clearing storage paths, determining primary corpus roots, ensuring storage directories exist, checking path relationships, and managing active project change notifications.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:b1a5858488a738fe7c6b79fb7043090b26f387f44754b3cdabd2674de0255a1b:part0:3819f112e510436c041d5a3554c36daa827f2f0050b246022eb5004ba9a4fff2": "A project management service that handles application state coordination, including project lifecycle operations, storage management, and configuration persistence. Provides functionality for creating, listing, retrieving, renaming, and deleting projects. Manages active project tracking and ensures default project initialization. Supports corpus root management for projects, including adding, removing, and clearing indexed directories. Handles database connections and transactions for project-related data. Implements thread-safe operations using a reentrant lock. Offers methods for reloading persisted state, purging project data, and managing conversation settings per project. Includes utilities for determining project storage locations and ensuring proper directory creation.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:b1a5858488a738fe7c6b79fb7043090b26f387f44754b3cdabd2674de0255a1b:part1:97d753f2006add4872e51ad8182a633cd4ee0c58d0913d821b28ce30d39f9ed2": "Methods for managing project settings and storage paths, including removing project configurations, exporting database snapshots, loading and storing storage locations, clearing storage paths, determining primary corpus roots, ensuring storage directories exist, checking path relationships, and emitting signals when projects or the active project change.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:clear_corpus_roots:68db33ac585093b337614e45dd9e45b5f9c64bc0563bc76d8321901784fe9c65:68db33ac585093b337614e45dd9e45b5f9c64bc0563bc76d8321901784fe9c65": "The function `clear_corpus_roots` removes all stored corpus roots associated with a given project ID. It acquires a lock to ensure thread safety, loads the configuration data, and verifies that the data structure is valid. If the project ID exists in the corpus roots, it removes the entry and saves the updated configuration. Additionally, it deletes the project's storage directory if it exists and clears the project's storage path.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:clear_corpus_roots:f66756bd03fb6e5ee2f9a401229944f745833771f6e8743bdf188a1ba0a9f7a4:f66756bd03fb6e5ee2f9a401229944f745833771f6e8743bdf188a1ba0a9f7a4": "Removes all stored corpus roots associated with the specified project ID. This function first loads the configuration data, then locates the corpus roots dictionary for the given project ID and removes it. After saving the updated configuration, it removes the project's storage directory if it exists. Finally, it clears the project's storage path from the internal tracking mechanism.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:create_project:1f66e7906408962adfb13d816fa5e7e594ee844078f8a8ea20d5e398313513f2:1f66e7906408962adfb13d816fa5e7e594ee844078f8a8ea20d5e398313513f2": "Creates a new project with the specified name and optional description, ensuring project storage is initialized and emitting a projects changed event. Optionally activates the newly created project. Returns the created project record.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:create_project:5b4bce2f10f35a10be4779207cbc642d2cf8877909d3c1917ad1b79a18312a4b:5b4bce2f10f35a10be4779207cbc642d2cf8877909d3c1917ad1b79a18312a4b": "Creates a new project with the specified name and optional description. Returns a ProjectRecord containing the project's details. Optionally activates the project. Uses a lock for thread safety, ensures storage exists for the project, and emits a projects changed event.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:database_manager:2cc5dd033b78b4dfba264a800b0084758a87fca54b105d411edca659a3355708:2cc5dd033b78b4dfba264a800b0084758a87fca54b105d411edca659a3355708": "Returns the DatabaseManager instance associated with the ProjectService.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:database_manager:40976c5703b63e23d353b70e93c84a44b3ee0dea829c4b36754edbbe31473299:40976c5703b63e23d353b70e93c84a44b3ee0dea829c4b36754edbbe31473299": "Returns the `DatabaseManager` instance associated with the project.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:database_path:204d46f82dcd8a7437f6652dd5f73fbf1de75eba5e3975e6e2801ccf90bc1272:204d46f82dcd8a7437f6652dd5f73fbf1de75eba5e3975e6e2801ccf90bc1272": "The function `database_path` is a property method that returns the value of the private attribute `_db_path`. This attribute represents the file path to the SQLite database used by the `ProjectService` class for local data storage. The method provides read-only access to the database path, ensuring that the path can be retrieved but not directly modified from outside the class.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:database_path:b3e9121a7a908094ad7d999254236ef6ad7ee6649272d70c633b24c4e7858ccb:b3e9121a7a908094ad7d999254236ef6ad7ee6649272d70c633b24c4e7858ccb": "Returns the database path stored in the private attribute `_db_path`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:delete_project:3b0da57d8d6503e9384f3bc427f43cbf3f9534a4cce8b2176c29bd24e20526f5:3b0da57d8d6503e9384f3bc427f43cbf3f9534a4cce8b2176c29bd24e20526f5": "Deletes a project by its ID, ensuring it is not the active project. Removes the project from storage, deletes associated project settings, and notifies of project changes. Uses a lock for thread safety.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:delete_project:a02377d004f1a0c0823ee6211db158fdc0fcaa4fabfb834ed95e3a95666e53f0:a02377d004f1a0c0823ee6211db158fdc0fcaa4fabfb834ed95e3a95666e53f0": "The `delete_project` function removes a project identified by `project_id` from the system. It first checks if the project is currently active and raises an error if so. It then deletes the project from the projects collection, removes the associated storage directory recursively, clears the project's settings, and emits a signal indicating that the list of projects has changed.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:export_project_database_snapshot:28c8887132289777a623e3364dd2e9d42141cf3eac681ad383ad07dca26c701c:28c8887132289777a623e3364dd2e9d42141cf3eac681ad383ad07dca26c701c": "Exports a SQLite database snapshot for a specified project into the project's storage directory. Returns the path to the exported file or None if the project storage cannot be initialized.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:export_project_database_snapshot:feb9bf0f85084cb4e72fa2cfeec5d5fc18c377a01087aabd6c0fd0ba6fae15f6:feb9bf0f85084cb4e72fa2cfeec5d5fc18c377a01087aabd6c0fd0ba6fae15f6": "Exports a SQLite database snapshot for a specified project into the project's storage directory. Returns the path to the exported file or None if the operation fails.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:get_project:07df668be8156755de6091f86b14ea4fe745ce7d181592a01fe7c0cfe7db5528:07df668be8156755de6091f86b14ea4fe745ce7d181592a01fe7c0cfe7db5528": "Retrieves a project record by its ID from the internal projects dictionary. Returns a `ProjectRecord` object if the project exists, otherwise returns `None`. The returned record includes the project's ID, name, and description.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:get_project:6af8e9d5adeb18323c11bca57deb3f2caef6278e532eca1949e80f3aca197966:6af8e9d5adeb18323c11bca57deb3f2caef6278e532eca1949e80f3aca197966": "Retrieves a project record by its ID from the internal projects collection. Returns a `ProjectRecord` object if the project exists, or `None` if not found. The returned record includes the project's ID, name, and description, with default values for missing fields.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:get_project_storage:8d19b688bcfbd3ee4877a8cc0efec32c0d17c9d65aecb019e009b6df6287dacc:8d19b688bcfbd3ee4877a8cc0efec32c0d17c9d65aecb019e009b6df6287dacc": "The function `get_project_storage` retrieves the storage path for a given project ID by first determining the project's storage directory using `_project_storage_dir`. If the storage directory is not configured (i.e., returns `None`), it raises a `RuntimeError` indicating that the project lacks a configured corpus root. Otherwise, it ensures the directory exists by creating it if necessary and returns the path.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:get_project_storage:d664172cb57e27a160df1c7e44d123d2176a3c9109c189d0f17acf9455e204fe:d664172cb57e27a160df1c7e44d123d2176a3c9109c189d0f17acf9455e204fe": "Returns the storage path for a project, creating the directory if it doesn't exist. Raises a RuntimeError if the project has no configured corpus root.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:get_project_storage_location:45fad308aa5664abd274789e92f4c991d3a53d4f86e3c10f715768b0c94e1c67:45fad308aa5664abd274789e92f4c991d3a53d4f86e3c10f715768b0c94e1c67": "Returns the configured storage path for a given project ID without creating the directory structure. Takes a project ID as input and returns a Path object or None, depending on whether a storage location is configured for that project. The actual path resolution is delegated to the internal `_project_storage_dir` method.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:get_project_storage_location:cb85696d60d8ad2d44339cf5623c1ffc3cbb76727fb2c910dbc1c234d39937fa:cb85696d60d8ad2d44339cf5623c1ffc3cbb76727fb2c910dbc1c234d39937fa": "Returns the configured storage path for the specified project ID without creating the directory.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:list_corpus_roots:47e4abdda3beae532b105d89a023bffd8301a68d83ddc94219fdcd5c51c42b4e:47e4abdda3beae532b105d89a023bffd8301a68d83ddc94219fdcd5c51c42b4e": "Returns a list of absolute paths to corpus root folders indexed for a given project ID. The method retrieves project configuration data, validates its structure, and normalizes each root path to its absolute form. If the configuration data is malformed or missing expected fields, it returns an empty list. Each valid root path is converted to a normalized absolute path using `Path.resolve()`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:list_corpus_roots:a6ed1fb426a273cb5f935c3917f8b03f1580fa6f6b378a25e148dfb392f1ea59:a6ed1fb426a273cb5f935c3917f8b03f1580fa6f6b378a25e148dfb392f1ea59": "The function `list_corpus_roots` retrieves a list of indexed corpus root folders associated with a specified project ID. It loads configuration data, navigates through nested dictionary structures to locate the corpus roots for the given project ID, and returns a list of resolved absolute paths for those roots. If any part of the configuration structure is missing or malformed, it returns an empty list. Each path in the returned list is normalized to its absolute form.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:list_projects:45fc04990846f7b913a9a3f94aaa5cbdc1f05e420126c2d183a5af5ed1227e26:45fc04990846f7b913a9a3f94aaa5cbdc1f05e420126c2d183a5af5ed1227e26": "The function `list_projects` retrieves a list of project records by iterating through the projects stored in `self.projects`. For each project entry, it creates a `ProjectRecord` object containing the project's ID, name, and description. If an entry is empty or invalid, it skips that entry. The function returns a list of `ProjectRecord` objects representing all valid projects.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:list_projects:d9211e663d132790c0d8101719c618c46bf344efb7e3ab8bbf49191ba73c34cd:d9211e663d132790c0d8101719c618c46bf344efb7e3ab8bbf49191ba73c34cd": "The function `list_projects` retrieves a list of project records from the `self.projects` collection. It iterates through each entry, skipping any null or empty entries, and constructs `ProjectRecord` objects with the `id`, `name`, and `description` fields extracted from each entry. The resulting list of `ProjectRecord` objects is returned.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:load_conversation_settings:8d70eccc32ee455c9ad041e4f79149b2b987a9ac25bbccaf5f5e57de6f166614:8d70eccc32ee455c9ad041e4f79149b2b987a9ac25bbccaf5f5e57de6f166614": "Loads and returns conversation settings for a specified project ID from configuration data. Retrieves the configuration, extracts project settings, and returns the conversation settings for the given project ID as a dictionary, or an empty dictionary if the data is invalid or not found.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:load_conversation_settings:cf7e31e2f048fd38423bf78051dec6daad3f649cb03d2aee6e44c72b1e29ba9c:cf7e31e2f048fd38423bf78051dec6daad3f649cb03d2aee6e44c72b1e29ba9c": "The function `load_conversation_settings` retrieves conversation-related settings for a specified project from the application's configuration. It accesses the configuration data, navigates to the section corresponding to projects and their conversation settings, and returns the settings associated with the given `project_id`. If any part of the configuration structure is missing or invalid, it returns an empty dictionary.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:project_storage_directories:354860854089d5c20e28d9ba4dcf3ac22fb6d0a338e18554ee9c0979d7ad1c7f:354860854089d5c20e28d9ba4dcf3ac22fb6d0a338e18554ee9c0979d7ad1c7f": "Returns a dictionary mapping project IDs to their corresponding storage directory paths for projects that have existing storage directories. The method iterates through all projects, checks if each project has a valid storage directory path, and includes only those projects where the storage directory exists. Projects without storage directories or with non-existent storage paths are excluded from the returned mapping.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:project_storage_directories:6cda6a18926503d725fc916d8d1ad97cbceac581327ed96b503d3a6cf56ffefc:6cda6a18926503d725fc916d8d1ad97cbceac581327ed96b503d3a6cf56ffefc": "Returns a dictionary mapping project IDs to their corresponding existing storage directory paths. For each project in the list of projects, it retrieves the project's storage directory path and includes it in the returned dictionary only if the directory exists.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:purge_project_data:733c8b74f92a439081c6c16136810332ac243d46838898ce385966f84f442735:733c8b74f92a439081c6c16136810332ac243d46838898ce385966f84f442735": "Removes all derived data associated with a specified project ID from the database and storage, while preserving source files. This includes deleting records from the documents, chats, and tags tables, removing the project's storage directory contents, and ensuring a new storage directory is initialized for the project. The operation is performed within a database transaction to maintain consistency.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:purge_project_data:856b988aa560710846307d3e17add473fe9b3f9b87c093c361e77b9b3521b8d9:856b988aa560710846307d3e17add473fe9b3f9b87c093c361e77b9b3521b8d9": "The function `purge_project_data` removes all derived data associated with a specified project, identified by `project_id`, while preserving the original source files. It performs the following actions:\n\n1. Acquires a lock to ensure thread safety.\n2. Within a database transaction, deletes records from the `documents`, `chats`, and `tags` tables that are linked to the given `project_id`.\n3. Removes the project's storage directory, if it exists, by recursively deleting its contents.\n4. Ensures that the project storage directory is re-established after deletion.\n\nThis function is intended to clean up all generated or processed data for a project without affecting the original files.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:reload:c7285791e1ad4daf49d8bf69c858d9c19c3a186d9706f9087af09f7ef9a2cf9f:c7285791e1ad4daf49d8bf69c858d9c19c3a186d9706f9087af09f7ef9a2cf9f": "Reloads persisted state after an external change such as restore. Closes the current database connection, creates a new DatabaseManager instance, initializes it, and reassigns all repository instances (ProjectRepository, DocumentRepository, ChatRepository, IngestDocumentRepository, BackgroundTaskLogRepository) to use the new database connection. Ensures a default project exists, loads the active project, and emits events indicating that projects and the active project have changed.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:reload:f05c81164b018784390942a72be3f24676b7cf0c6aa5f3502636bd66cb1ed7f1:f05c81164b018784390942a72be3f24676b7cf0c6aa5f3502636bd66cb1ed7f1": "The `reload` function in the `ProjectService` class is responsible for reloading the persisted state of the application after an external change, such as a restore operation. It acquires a lock to ensure thread safety, closes the existing database connection, and initializes a new one. It then reinitializes all repositories associated with the project service (projects, documents, chats, ingestion, and background tasks) using the newly created database. The function ensures a default project exists, loads the active project, and emits signals to notify listeners of changes to the projects list and the active project.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:remove_corpus_root:4beae0eccc94ac3b55e3a3bccb45e68800cae92d1a236beacc3ddb24f460e288:4beae0eccc94ac3b55e3a3bccb45e68800cae92d1a236beacc3ddb24f460e288": "The function `remove_corpus_root` removes a specified path from the corpus roots associated with a given project ID. It normalizes the input path, retrieves and modifies the configuration data to filter out the specified root path, and updates the configuration file. If the project has no remaining corpus roots, it removes the project's storage directory. Additionally, if the removed path is within the project's stored path, it cleans up the corresponding storage directory and ensures a new storage path is set up for the project. The operation is protected by a lock to ensure thread safety.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:remove_corpus_root:512841833e3c892f0ab4fb3db3c47c32013c2238efdb5c5f1a5fcfdf2f8ae76d:512841833e3c892f0ab4fb3db3c47c32013c2238efdb5c5f1a5fcfdf2f8ae76d": "Removes a specified path from the corpus roots associated with a given project ID. If the path is the last or only root for the project, it also removes the project's storage directory. If the removed path was within the project's storage path, the storage directory is cleared and re-established. The function ensures thread safety using a lock and updates the configuration file accordingly.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:rename_project:2ffb5e1e958a2f85dc240c389d1141082322f7555cbd024196b8ee23a11e3267:2ffb5e1e958a2f85dc240c389d1141082322f7555cbd024196b8ee23a11e3267": "The `rename_project` function updates the name and/or description of a project identified by `project_id`. It accepts optional `name` and `description` parameters, and returns a `ProjectRecord` object with the updated project details. If neither `name` nor `description` is provided, it retrieves and returns the existing project record without modification. The function raises a `LookupError` if the `project_id` is invalid. Updates are applied within a lock to ensure thread safety, and events are emitted to notify of project changes and, if applicable, active project updates.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:rename_project:dd39a8eb351f6467f2977989e8eabcbdc292aee87e10245e8957fe63f7acb4a4:dd39a8eb351f6467f2977989e8eabcbdc292aee87e10245e8957fe63f7acb4a4": "Renames a project by updating its name and/or description. Accepts optional `name` and `description` parameters. If neither is provided, returns the current project record without modification. Raises `LookupError` if the project ID does not exist. Updates the project in the database, emits change notifications, and returns the updated `ProjectRecord`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:save_conversation_settings:104891aa16f241bef9ee243018495b276b07073882e869590145e78f8baada6f:104891aa16f241bef9ee243018495b276b07073882e869590145e78f8baada6f": "The function `save_conversation_settings` saves conversation settings for a specified project ID into the configuration data structure. It retrieves the existing configuration, ensures the data structure is properly initialized with nested dictionaries for projects and conversation settings, and then stores the provided settings under the project ID key within the conversation dictionary. Finally, it persists the updated configuration back to storage.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:save_conversation_settings:7fb27324e2df732256a6b7d40fd9bafe558a11270da2f7a69ac31ffa78e55d9f:7fb27324e2df732256a6b7d40fd9bafe558a11270da2f7a69ac31ffa78e55d9f": "The function `save_conversation_settings` stores conversation settings for a specified project ID within a configuration structure. It loads the existing configuration data, ensures the data structure is properly initialized with nested dictionaries for projects and conversation settings, and then saves the provided settings under the given project ID. The updated configuration is persisted back to storage.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:set_active_project:76f56e828829a48ecbb8e5f9121569e6f02a14f81ad87e160642da0ba024a607:76f56e828829a48ecbb8e5f9121569e6f02a14f81ad87e160642da0ba024a607": "Sets the active project by its ID, ensuring the project exists, updating internal state, and notifying listeners of the change. Raises `LookupError` if the project ID is invalid.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:set_active_project:b9bebef871159d1448823a10aa0bae778dcd9c29b0c4518ad9488d4546ad5541:b9bebef871159d1448823a10aa0bae778dcd9c29b0c4518ad9488d4546ad5541": "Sets the active project by ID, ensuring the project exists and updating internal state and storage. Raises LookupError if the project ID is invalid. Updates the active project ID, ensures project storage exists, stores the active project, and emits a change event.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:set_project_storage_location:012101ef05b9110a64cec0056705ad53a53a95bb77db7f0b1fded8713996496f:012101ef05b9110a64cec0056705ad53a53a95bb77db7f0b1fded8713996496f": "The function `set_project_storage_location` persists a specified storage path for a given project ID. It resolves the provided path to an absolute path and stores it within a locked context to ensure thread safety. The function interacts with an internal method `_store_project_storage_path` to perform the actual storage operation.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:set_project_storage_location:4aa5fe12e597de2fca409f32b5e44b9f3e98831a32fadf483f5b5965f7f014ec:4aa5fe12e597de2fca409f32b5e44b9f3e98831a32fadf483f5b5965f7f014ec": "Sets the storage location for a specified project ID by persisting the provided path. The path is resolved to an absolute path before being stored. This operation is thread-safe, as it is protected by a lock mechanism. The function does not return any value.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:shutdown:318910bb6342ea44cf5bc76c850794fae84bcadfa52c2f6c8c201af6b53fac5a:318910bb6342ea44cf5bc76c850794fae84bcadfa52c2f6c8c201af6b53fac5a": "The `shutdown` method closes database resources held by the service. It acquires a lock before closing the database connection to ensure thread safety during the shutdown process.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:shutdown:c37d267bc46d355dd9c45b5633302a5e64e08ce5a144497e026688460280de56:c37d267bc46d355dd9c45b5633302a5e64e08ce5a144497e026688460280de56": "The `shutdown` method closes the database connection held by the service. It acquires a lock to ensure thread safety before closing the database connection stored in `self._db`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:storage_root:3414e37a6db50d81b04265ffe734130c8b989a19720b4f6b564d64d6520826cf:3414e37a6db50d81b04265ffe734130c8b989a19720b4f6b564d64d6520826cf": "Returns the storage root path for the project service.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:storage_root:bf0bba547576a4ab1cf2ae5c84fd9b3f2ecf27fc999231d9630ef48a810f052b:bf0bba547576a4ab1cf2ae5c84fd9b3f2ecf27fc999231d9630ef48a810f052b": "The function `storage_root` is a property method within the `ProjectService` class that returns the value of the private attribute `_storage_root`. This attribute represents the root directory path used for storing project-related data. The method provides read-only access to this path, ensuring that the storage location can be retrieved but not directly modified from outside the class.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:037254d2d99a89fcef1c4166db5758901fb986a0603fa4cf64a569c44ae93c9f:037254d2d99a89fcef1c4166db5758901fb986a0603fa4cf64a569c44ae93c9f": "Defines UI settings management for a PyQt6 application, including theme, font scaling, density, and panel visibility. Provides persistence through a configuration manager and emits signals on setting changes. Includes methods to apply theme and font scale to the QApplication instance. Settings are stored and loaded as a dictionary with keys for theme, font_scale, density, splitter_sizes, show_corpus_panel, and show_evidence_panel. The UISettings dataclass holds default values for these settings. The SettingsService class manages loading, saving, and updating settings, with validation and clamping for numeric values. Theme application involves setting QPalette colors and a stylesheet. Font scaling adjusts the QApplication's default font size based on a base point size and scale factor.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:SettingsService:75e401823cac5f41cbc4428700264130f24f4229bec5d479949fe27e60c1eca6:75e401823cac5f41cbc4428700264130f24f4229bec5d479949fe27e60c1eca6": "The `SettingsService` class manages application settings such as theme, font scale, density, and panel visibility, handling both loading and saving these configurations to persistent storage. It provides properties and methods to update and apply UI-related settings, including theme and font scaling, while ensuring values are validated and within acceptable ranges. The class also includes functionality to apply visual themes and font adjustments to the PyQt6 application interface.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:SettingsService:__init__:1ff0ff22e3b0f41064edc85189d2800b8024087d9bf74e50870d94146aea02cb:1ff0ff22e3b0f41064edc85189d2800b8024087d9bf74e50870d94146aea02cb": "Initializes the object with an optional configuration manager, sets up a default configuration manager if none is provided, creates UI settings, and initializes the base font point size as None before reloading the configuration.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:SettingsService:apply_font_scale:47dcddf36b640de526cc76f0f63888d868849c649d0b64e70ad0b965f9118ae6:47dcddf36b640de526cc76f0f63888d868849c649d0b64e70ad0b965f9118ae6": "Function that adjusts the application's default font size based on a configured scale factor. It retrieves the current application instance, obtains the default font, determines a base point size if not already set, applies the scaling factor to the base size, and updates the application's font settings accordingly.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:SettingsService:apply_theme:3ea2039b1af7f7067a60e4e619b9e1711ece2f5e564eb26ca09c9c3a9b8891d5:3ea2039b1af7f7067a60e4e619b9e1711ece2f5e564eb26ca09c9c3a9b8891d5": "Function applies a theme palette to a QApplication instance based on current settings, configuring colors for various UI elements and setting a stylesheet with detailed styling rules for widgets.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:SettingsService:density:384d0915196229157046e1c1eac646b831458bb27d2787d4668663f90c866beb:384d0915196229157046e1c1eac646b831458bb27d2787d4668663f90c866beb": "The function retrieves and returns the density value from the object's settings attribute. It accesses a `_settings` attribute of the instance and returns the `density` property or key from that settings object. The return type is specified as str, indicating it expects the density value to be a string.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:SettingsService:font_scale:9187beb1dc04dee7179368102ef9e33dd32cb181ecd582f1220fc64c0e4b650e:9187beb1dc04dee7179368102ef9e33dd32cb181ecd582f1220fc64c0e4b650e": "Returns the font scale value from the settings object.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:SettingsService:reload:ee57480478f7a8cb08f402f84f65247dc22eb938f9baeb43598786e0acb519e0:ee57480478f7a8cb08f402f84f65247dc22eb938f9baeb43598786e0acb519e0": "Function reload retrieves configuration data from disk, processes UI-related settings, validates and clamps numerical values, and constructs a new UISettings object with the processed values. It handles default fallbacks for missing or invalid configuration values, ensures type consistency, and updates the instance's settings while resetting the base font point size.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:SettingsService:save:7bf3e9d64a4f2870807a86919e4fda612eb1c6dbd2879b4c5fda4bb06e902d7b:7bf3e9d64a4f2870807a86919e4fda612eb1c6dbd2879b4c5fda4bb06e902d7b": "Function saves current settings to disk by loading existing configuration data, updating UI-related parameters with values from internal settings, and persisting the modified data back to the configuration storage. The function retrieves and validates configuration data structure, ensures UI data is properly formatted as a dictionary, updates specific UI parameters including theme, font scale, density, splitter sizes, and panel visibility settings, then writes the complete configuration back to persistent storage.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:SettingsService:set_density:7119c458d788412f5d8e2e18f81bc96094ecc8171669918309c61009b3ace55f:7119c458d788412f5d8e2e18f81bc96094ecc8171669918309c61009b3ace55f": "Function sets the density setting to either \"compact\" or \"comfortable\" after normalizing the input string. It compares the new value against the current setting, updates the setting only if different, saves the change, and emits a density changed signal.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:SettingsService:set_font_scale:06079c9f62765b4b9c3beb23a733d995df1278f1510861ea13fe7816b0fee36e:06079c9f62765b4b9c3beb23a733d995df1278f1510861ea13fe7816b0fee36e": "Function sets font scale property with validation and change notification. Takes a scale parameter, converts it to float, clamps it within defined bounds, and updates the settings only if the value differs from current setting. Emits a change signal when the font scale is updated.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:SettingsService:set_show_corpus_panel:0e3976357c29df6cd8d93a4a4669e1f91bb1123781d119b7a98cc78ad87b6da2:0e3976357c29df6cd8d93a4a4669e1f91bb1123781d119b7a98cc78ad87b6da2": "Function that controls the visibility of a corpus panel in a settings system. Takes a boolean parameter to set whether the panel should be shown or hidden. Compares the requested state with the current setting, and only updates the setting and saves changes if there's actually a difference. Uses a private settings object to store the panel visibility state and calls a save method to persist the change.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:SettingsService:set_show_evidence_panel:01e7c0381cbe1ecd1a0613dcb4fc3b716fe90305febbcc44cd5eadfff64594d7:01e7c0381cbe1ecd1a0613dcb4fc3b716fe90305febbcc44cd5eadfff64594d7": "Function sets the visibility state of an evidence panel and persists the change to settings. Takes a boolean parameter indicating whether the panel should be visible. If the requested visibility state matches the current setting, the function returns without making changes. Otherwise, it updates the setting and saves the configuration.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:SettingsService:set_splitter_sizes:1cb261733abe45cdc516e280963e3817a03c4b2e6ca4e09880a49dbe114319f7:1cb261733abe45cdc516e280963e3817a03c4b2e6ca4e09880a49dbe114319f7": "Function that updates splitter sizes with validation and persistence.\n\nAccepts an iterable of integer values, ensures each value is at least 80, validates there are exactly three values, checks if the new values differ from current settings, updates the settings if different, and saves the changes.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:SettingsService:set_theme:f7163f0772fd8629f04dab5660205af20672b4853582ef5595b9f2e62c2795a1:f7163f0772fd8629f04dab5660205af20672b4853582ef5595b9f2e62c2795a1": "Function sets the theme for an application, normalizing input to either \"dark\" or \"light\" and updating the settings only if the theme has changed. It emits a signal when the theme is updated.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:SettingsService:show_corpus_panel:5f82a5c82f40616e69d5b03f2c156afdc02cf3dbf75d37c8095bbbc65974b944:5f82a5c82f40616e69d5b03f2c156afdc02cf3dbf75d37c8095bbbc65974b944": "The function retrieves and returns the value of the `show_corpus_panel` attribute from the `_settings` object.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:SettingsService:show_evidence_panel:66929a46f8f2b0ce904afcdab15a4dd55cbe30b9548cc76f5219d9f0cde8c8c4:66929a46f8f2b0ce904afcdab15a4dd55cbe30b9548cc76f5219d9f0cde8c8c4": "The function retrieves and returns the value of the `show_evidence_panel` attribute from the `_settings` object. The return type is a boolean indicating whether the evidence panel should be displayed.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:SettingsService:splitter_sizes:747d3efa82d75c462c825a2c543b6552317f432a3063f1f3df4b633f7e48a4f6:747d3efa82d75c462c825a2c543b6552317f432a3063f1f3df4b633f7e48a4f6": "Returns a tuple of three integers representing splitter sizes from the settings.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:SettingsService:theme:fcbcf11f41c2ff1f147eaf230aee47254acba6da56b9630fb3d5dd68716cf2ea:fcbcf11f41c2ff1f147eaf230aee47254acba6da56b9630fb3d5dd68716cf2ea": "The function retrieves and returns the theme value from the object's settings attribute.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:SettingsService:toggle_theme:485cd1ea990c93729ec8e51f8f291de3ba3d05354eafb7edd9958b58025f96e4:485cd1ea990c93729ec8e51f8f291de3ba3d05354eafb7edd9958b58025f96e4": "Function that switches between light and dark themes by checking the current theme setting and setting the opposite theme.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:UISettings:c79b07e03f97582e9e2a147ec1a240059a703c6ccd5177bc639e9b1a3f2fb668:c79b07e03f97582e9e2a147ec1a240059a703c6ccd5177bc639e9b1a3f2fb668": "The `UISettings` class manages user interface configuration and preferences for the desktop application scaffold. It handles settings related to the PyQt6-based graphical interface, ensuring consistent rendering and behavior across the document processing and question-answering system. The class supports the application's offline AI capabilities by maintaining UI state and configuration without requiring network connectivity.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:__init__:87eb30d2dc5cddeb79c713733c8ba06cc9fc9012fe57e08c2aea681a5b80fb4e:87eb30d2dc5cddeb79c713733c8ba06cc9fc9012fe57e08c2aea681a5b80fb4e": "Initializes the `SettingsService` instance. Sets up the configuration manager, UI settings, and base font point size. Calls `reload()` to initialize the service's state.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:__init__:b99bf2dac5e288d38bec7a4d689dc45d1e812c386876df302ef7385293f08a93:b99bf2dac5e288d38bec7a4d689dc45d1e812c386876df302ef7385293f08a93": "Initializes the SettingsService instance with an optional configuration manager, creates a UISettings object, initializes the base font point size to None, and calls reload() to populate settings.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:_clamp:98eecded6c86c87404e3c21120849676bad152ad48477759cf78efc00e34844c:98eecded6c86c87404e3c21120849676bad152ad48477759cf78efc00e34844c": "The function `_clamp` takes a floating-point value and constrains it to lie within the inclusive range defined by `low` and `high`. It returns the value if it is between `low` and `high`, or returns `low` if the value is below `low`, or returns `high` if the value is above `high`. The function ensures the returned value is always within the specified bounds.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:apply_font_scale:35781306193a690d8449dc0380c77d04169c7d3504f08e4ea186b49bc54c80ca:35781306193a690d8449dc0380c77d04169c7d3504f08e4ea186b49bc54c80ca": "The function `apply_font_scale` adjusts the application's default font size based on a scaling factor defined in the settings. It retrieves the current application instance, obtains the default font, and calculates a base font point size if not already set. The font size is then scaled by multiplying the base size with the font scale factor from the settings, and the updated font is applied to the application. If no application instance is available, the function returns without making changes.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:apply_font_scale:d7829f9c71441bdc50d777bcd678e73ae4689f1d1f8636dea62ffdac9d6414e3:d7829f9c71441bdc50d777bcd678e73ae4689f1d1f8636dea62ffdac9d6414e3": "Applies a font scale factor to the application's default font based on configured settings. Retrieves the current application instance, determines the base font point size if not already set, scales the font according to the configured `font_scale` setting, and applies the modified font to the application. If no application instance exists or if the font point size cannot be determined, the function returns without making changes.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:apply_theme:bda89c040e611a2b186199bed468bc79f7c65091c6c7bcd4386031e647244780:bda89c040e611a2b186199bed468bc79f7c65091c6c7bcd4386031e647244780": "The function `apply_theme` configures the visual theme of a PyQt6 application by setting a color palette and stylesheet based on the current theme setting (`dark` or `light`). It defines colors for various UI elements such as window, text, buttons, highlights, and borders, and applies these to the `QApplication` instance. The function also generates a stylesheet with CSS-like rules to style widgets like `QWidget`, `QFrame`, `QTextBrowser`, `QPushButton`, `QLabel`, `QListWidget`, and `QTreeWidget` according to the selected theme. If no `QApplication` instance is provided or available, the function returns without applying changes.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:apply_theme:e07d1492529dd0c6bc8ccc9561b671e72bda62c5a66dd236474d19c6a789487b:e07d1492529dd0c6bc8ccc9561b671e72bda62c5a66dd236474d19c6a789487b": "Applies the current theme palette to a `QApplication` instance, configuring both the color scheme and stylesheet. It sets colors for various `QPalette.ColorRole` values based on whether the theme is \"dark\" or not, and then applies a stylesheet that defines the visual appearance of widgets such as buttons, labels, frames, and lists according to the selected theme. The function retrieves the application instance if not provided, and returns early if no application exists.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:density:39bbd55274201f0499249fa96b10960f64ad7c304c2160a54ed02601c6777939:39bbd55274201f0499249fa96b10960f64ad7c304c2160a54ed02601c6777939": "The function `density` is a property method within the `SettingsService` class that retrieves and returns the value of the `density` attribute from the `_settings` object. The returned value is a string representing the density setting.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:density:826fd0eb5f92a7763f0aa5ad2988bdcdb7079a1ac81b5e1c3e5cd4007caea0f9:826fd0eb5f92a7763f0aa5ad2988bdcdb7079a1ac81b5e1c3e5cd4007caea0f9": "Returns the density setting value as a string.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:font_scale:741edc1c08090a1431acb336ded739b2c67f48ff083a2bc122129ddac5f7119f:741edc1c08090a1431acb336ded739b2c67f48ff083a2bc122129ddac5f7119f": "Returns the current font scale value from the settings configuration.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:font_scale:c1b24979dfe3509f696ac934059f573ce943c8521545c5359473a7bc55abb8d3:c1b24979dfe3509f696ac934059f573ce943c8521545c5359473a7bc55abb8d3": "The function `font_scale` is a property method within the `SettingsService` class that retrieves and returns the value of `font_scale` from the `_settings` attribute. This value represents a scaling factor for font sizes, likely used to adjust the visual appearance of text in the application's user interface.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:reload:4b66dbc5455a259eb3e0e47712cd21d167b5fbe1aca0502a7b0d4d656b9ccb86:4b66dbc5455a259eb3e0e47712cd21d167b5fbe1aca0502a7b0d4d656b9ccb86": "The `reload` method updates the settings by loading data from disk and processing UI-related configurations. It ensures that each setting has a valid value, using defaults when necessary, and constructs a new `UISettings` object with the processed values. The method also resets the base font point size to `None`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:reload:6de12c54674c8902dd949f6a9ae3ad7ed648741d3068f60f4647f6c942fbb95f:6de12c54674c8902dd949f6a9ae3ad7ed648741d3068f60f4647f6c942fbb95f": "The `reload` method in the `SettingsService` class loads UI settings from persistent storage and applies default values or validation where necessary. It retrieves configuration data, ensures it is a dictionary, and extracts UI-specific settings such as theme, font scale, density, splitter sizes, and panel visibility flags. Invalid or missing values are replaced with defaults, and numeric values are clamped to valid ranges. The method then constructs an `UISettings` object with the processed values and updates the internal `_settings` attribute. It also resets the base font point size to `None`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:save:57f76fb799d868118851dea41152ec594a1333fad3c92db10ec1f54ba67b46a5:57f76fb799d868118851dea41152ec594a1333fad3c92db10ec1f54ba67b46a5": "The `save` method persists the current settings to disk by loading existing configuration data, updating it with the current UI settings from `_settings`, and then saving the updated data back to the configuration file. It ensures that the configuration data structure is properly initialized as a dictionary and handles the UI-specific settings including theme, font scale, density, splitter sizes, and panel visibility flags.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:save:ae602e605939e6047857aae0636fb35e6ecd264818c53ed37e35db6ea2246bd7:ae602e605939e6047857aae0636fb35e6ecd264818c53ed37e35db6ea2246bd7": "The `save` method persists the current settings to disk by loading existing configuration data, updating the UI-related settings with values from `_settings`, and then saving the modified data back to the configuration file. The UI settings updated include theme, font scale, density, splitter sizes, and visibility toggles for corpus and evidence panels.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:set_density:4a7030ad62faf8d2f81b1b04fdb522cb05e05962afe5be9dbc59d2ea51b60f48:4a7030ad62faf8d2f81b1b04fdb522cb05e05962afe5be9dbc59d2ea51b60f48": "The function `set_density` updates the density setting of the application interface to either \"compact\" or \"comfortable\". It normalizes the input string to lowercase, validates that it is one of the allowed values, and only proceeds to update the setting if it differs from the current value. After updating, it saves the new setting and emits a signal indicating that the density has changed.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:set_density:b14637cf6a288473a76b5c43cc35b65dd6fa8a0e680c73ea43f0f6bf723e927e:b14637cf6a288473a76b5c43cc35b65dd6fa8a0e680c73ea43f0f6bf723e927e": "Sets the density setting to either \"compact\" or \"comfortable\". If the new density value is different from the current setting, it updates the setting, saves the changes, and emits a density_changed signal.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:set_font_scale:a647f7d5ab233755d0e2fe77c03eed8535f39d8698dd0bf2caac0ce8f8b6e374:a647f7d5ab233755d0e2fe77c03eed8535f39d8698dd0bf2caac0ce8f8b6e374": "The function `set_font_scale` updates the font scale setting of the application. It accepts a scale value, validates it as a float, clamps it within predefined minimum and maximum bounds, and only applies the change if the new value differs from the current setting. Upon updating, it saves the setting and emits a signal indicating the font scale has changed.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:set_font_scale:fe3f13f9887194905586e4fa3a86de22ce5f67ec63d3cd129bc1c6047c47f0e0:fe3f13f9887194905586e4fa3a86de22ce5f67ec63d3cd129bc1c6047c47f0e0": "Sets the font scale to the specified value, clamping it within defined bounds. If the new value differs from the current setting, it updates the setting, saves the change, and emits a font scale changed signal. Invalid input values are ignored.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:set_show_corpus_panel:aafef771737b97ea07d2fa047fb094a175ea9c7ce6b6159ca45a9c994f0bbd36:aafef771737b97ea07d2fa047fb094a175ea9c7ce6b6159ca45a9c994f0bbd36": "The function `set_show_corpus_panel` updates the visibility setting for the corpus panel in the application's settings. It takes a boolean parameter `visible`, converts it to a boolean type, and checks if the value differs from the current setting. If the value is different, it updates the `_settings.show_corpus_panel` attribute with the new value and saves the updated settings.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:set_show_corpus_panel:c83eec8774c6311d68b8fce71bc8bffa09d1e5cbb56bb96f37f4364ecc265878:c83eec8774c6311d68b8fce71bc8bffa09d1e5cbb56bb96f37f4364ecc265878": "Sets the visibility state of the corpus panel in the application settings. Takes a boolean parameter indicating whether the panel should be shown or hidden. If the requested state matches the current setting, the method returns without making changes. Otherwise, it updates the setting and saves the configuration.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:set_show_evidence_panel:8773c915a1d9a45d87408a8f00873db7724af03d7250586559ed77848d8ebf02:8773c915a1d9a45d87408a8f00873db7724af03d7250586559ed77848d8ebf02": "The function `set_show_evidence_panel` updates the visibility setting for the evidence panel in the application's UI. It takes a boolean parameter `visible`, converts it to a boolean type, and checks if the value differs from the current setting stored in `self._settings.show_evidence_panel`. If the value is different, it updates the setting and triggers a save operation.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:set_show_evidence_panel:915a0bd2754d6bfa19d2f5c32a1d1a5b1239f5a1502003353d57507531165421:915a0bd2754d6bfa19d2f5c32a1d1a5b1239f5a1502003353d57507531165421": "Sets the visibility of the evidence panel in the application settings. Takes a boolean parameter indicating whether the panel should be visible. If the new value matches the current setting, the function returns without making changes. Otherwise, it updates the setting and saves the configuration.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:set_splitter_sizes:03a25bd3485114bb6326a6bfa8a89af9177a6d9992cd3ed7ed7d91e008fe90f7:03a25bd3485114bb6326a6bfa8a89af9177a6d9992cd3ed7ed7d91e008fe90f7": "The function `set_splitter_sizes` configures the splitter sizes for the application's layout. It accepts an iterable of integer values, ensures each value is at least 80, and validates that exactly three values are provided. If the new sizes differ from the currently stored sizes, it updates the settings and persists the change by calling `save()`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:set_splitter_sizes:32d135c6bfe93d2d01c3db28ced8fdf4f895ff33e738e4a818572e92ad648544:32d135c6bfe93d2d01c3db28ced8fdf4f895ff33e738e4a818572e92ad648544": "Sets the splitter sizes for the application, ensuring each size is at least 80 pixels. The method validates that exactly three values are provided and that the new sizes differ from the current settings before updating and saving the configuration.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:set_theme:60d107937a17a9a03ad9bd1b7c9e7935a13f32d4aa6b11f4f3412b36545b264d:60d107937a17a9a03ad9bd1b7c9e7935a13f32d4aa6b11f4f3412b36545b264d": "Sets the application theme to either \"dark\" or \"light\" based on the provided theme parameter. If the new theme differs from the current theme, it updates the setting, saves the change, and emits a theme_changed signal with the new theme value.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:set_theme:b2bc28783980ce0a40fcce7c030b0d52e295530e729a6457bd92e42ba433f3a8:b2bc28783980ce0a40fcce7c030b0d52e295530e729a6457bd92e42ba433f3a8": "The `set_theme` function in the `SettingsService` class updates the application's theme to either \"dark\" or \"light\" based on the provided input. It normalizes the input string to ensure consistent formatting, checks if the theme has changed, and if so, updates the internal settings, saves the change, and emits a signal indicating the theme has been updated.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:show_corpus_panel:4969e0d01aebe0afb4d2aac12130cfb56ee7ced693b77af1deefaa5e2f52749f:4969e0d01aebe0afb4d2aac12130cfb56ee7ced693b77af1deefaa5e2f52749f": "The function `show_corpus_panel` is a getter method that returns the value of the boolean attribute `_settings.show_corpus_panel`. This attribute likely controls whether a corpus panel is displayed in the application's user interface. The method itself does not perform any operations beyond retrieving and returning this setting value.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:show_corpus_panel:c4719537dc163b85a35f98245936bc8b289b10ecc29fe6056aeefcde48576a48:c4719537dc163b85a35f98245936bc8b289b10ecc29fe6056aeefcde48576a48": "The function `show_corpus_panel` is a getter method that returns the boolean value of the `_settings.show_corpus_panel` attribute. It provides access to the configuration setting that controls whether a corpus panel is displayed.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:show_evidence_panel:a228e4092f2d6e2f0ad20d59b1497282664eef0bca48f6caa00caee776072371:a228e4092f2d6e2f0ad20d59b1497282664eef0bca48f6caa00caee776072371": "The function `show_evidence_panel` is a getter method that retrieves the current state of the `show_evidence_panel` setting from the internal `_settings` object. It returns a boolean value indicating whether the evidence panel should be displayed.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:show_evidence_panel:e4d2281f16e14b9cd2741034d58de4bcc4e8c232dd0034c3dbcc2f00cddfc905:e4d2281f16e14b9cd2741034d58de4bcc4e8c232dd0034c3dbcc2f00cddfc905": "The function `show_evidence_panel` returns a boolean value indicating whether the evidence panel should be displayed. It accesses the `show_evidence_panel` attribute from the `_settings` object stored within the `SettingsService` class instance.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:splitter_sizes:1cfc9e41e3dc5690fb26b692a8787a70796cffd6405e5dba5adafdc08a77be49:1cfc9e41e3dc5690fb26b692a8787a70796cffd6405e5dba5adafdc08a77be49": "Returns a tuple containing the splitter sizes configuration from the settings.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:splitter_sizes:850eb2b4fdf07587ffb5f30eee727ef552a0802bd34c0af60e3a4eae48362bfa:850eb2b4fdf07587ffb5f30eee727ef552a0802bd34c0af60e3a4eae48362bfa": "Returns a tuple of three integers representing the splitter sizes stored in the settings.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:theme:d9b9d3b62978b9145aae5cc98c15d7f6283833cf1447a8f836ebb60296249fa4:d9b9d3b62978b9145aae5cc98c15d7f6283833cf1447a8f836ebb60296249fa4": "The `theme` function is a property method within the `SettingsService` class that retrieves and returns the current theme setting. It accesses the `_settings` attribute of the class instance and returns the value of its `theme` property. This function provides read-only access to the application's visual theme configuration.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:theme:f3cff091bd57c7f705e63a5faeea68d075123d1d04b4f3f79906e46020d6c1e8:f3cff091bd57c7f705e63a5faeea68d075123d1d04b4f3f79906e46020d6c1e8": "Returns the current theme setting value from the internal settings object.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:toggle_theme:54ec2233c8ba988d3a3c15ed83fbcb0c1f22811cc6a53dc320f28d92d35723dc:54ec2233c8ba988d3a3c15ed83fbcb0c1f22811cc6a53dc320f28d92d35723dc": "Toggles the application theme between light and dark modes. If the current theme is light, it switches to dark; if the current theme is dark, it switches to light. The function uses the `set_theme` method to apply the new theme setting.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:toggle_theme:76eb67365c980374cc9326eefdbc720a2ea18ef7d37b27127a398a5558b59103:76eb67365c980374cc9326eefdbc720a2ea18ef7d37b27127a398a5558b59103": "The `toggle_theme` function switches the application's theme between \"light\" and \"dark\" modes. It checks the current theme stored in `self._settings.theme`, and if it is \"light\", it sets the theme to \"dark\", otherwise it sets it to \"light\". The actual theme change is performed by calling `self.set_theme()` with the new theme string.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\__init__.py:ca970e7b286f6b3f1a4d34142d7bd3b9ba7f8facd6bb5d4f9a6ef6436ba77ccf:ca970e7b286f6b3f1a4d34142d7bd3b9ba7f8facd6bb5d4f9a6ef6436ba77ccf": "This module defines storage interfaces for the DataMiner application by importing and re-exporting repository classes and database-related exceptions. It exposes a set of repository types for managing different data entities including background task logs, chat data, documents, and projects, along with database management and error handling components. The module serves as an interface layer for data access operations within the application's database subsystem.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:5143d4435f9f257e58befdd28bfa6a730f9cc7dcb5989218b899db32b0a565d9:merge0:5de81b8d69484ab7b63f4dcfe2cf13b9bb20c026dd2e3a4b410ba2dafbf44ba0": "This module defines a comprehensive set of database utilities and repository classes for managing structured data within SQLite storage. It includes a `DatabaseManager` class that handles database connections, schema initialization, migrations, transactions, and import/export operations, along with a custom `DatabaseError` exception for handling failures. The module implements several repository classes: `BaseRepository` providing shared functionality, `ProjectRepository` for CRUD operations on project data, `DocumentRepository` for managing documents, their file versions, tags, and embeddings including folder-based organization and tag counting, `IngestDocumentRepository` for handling parsed document data with text, previews, and search indexes including versioning and chunking support, `ChatRepository` for chat session management with query scopes, citations, and reasoning summaries, and `BackgroundTaskLogRepository` for tracking background task execution metadata with filtering and retrieval capabilities. Each repository class uses SQL queries for database interactions and includes helper methods for path normalization, pattern building, and data decoding from database results.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:5143d4435f9f257e58befdd28bfa6a730f9cc7dcb5989218b899db32b0a565d9:part0:ab9898de20b9169f5db01ae6be761d88afb417316e8a1875dfc79ccb05473b0c": "Defines database utilities and migration helpers for managing SQLite storage. Includes a `DatabaseManager` class that handles connections, schema initialization, migrations, transactions, and database import/export operations. Provides a `BaseRepository` with shared functionality and a `ProjectRepository` implementing CRUD operations for project data. Contains a custom `DatabaseError` exception for handling database-related failures.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:5143d4435f9f257e58befdd28bfa6a730f9cc7dcb5989218b899db32b0a565d9:part1:17f5e1cc6bce914d8fc81474cb140953cd682ea909f2d3a22de761b0c1499edd": "The module defines a `DocumentRepository` class that provides methods for managing documents, their file versions, tags, and embeddings within a project. It supports creating, retrieving, updating, and deleting documents, as well as organizing them by folder or tag. The class includes functionality for associating tags with documents and maintaining tag counts. It also handles file versioning for documents, storing file paths, checksums, and sizes. The implementation uses SQL queries to interact with a database, including transactions for data consistency. Helper methods normalize file paths and folders, build patterns for folder-based queries, and decode document rows from database results.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:5143d4435f9f257e58befdd28bfa6a730f9cc7dcb5989218b899db32b0a565d9:part2:c6d57b9d7c9c9aa980f23a1f8712d53c98165aa7d1e3469ae0c0cdbdb968f921": "The module defines a repository class `IngestDocumentRepository` for managing parsed document data, including text, previews, and search indexes. It provides methods to store document versions, retrieve documents by ID or path, list document versions, delete documents by path, and perform full-text search on document chunks. The class handles document versioning, chunking of text for indexing, and maintains associations between documents and their indexed chunks. It uses SQLite for storage and includes functionality for normalizing text, building previews, and managing database transactions.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:5143d4435f9f257e58befdd28bfa6a730f9cc7dcb5989218b899db32b0a565d9:part3:bcce7d94ec3f098c6db1a16c530d2e93a70676f39b67a63f6ecd463da6c92132": "The module defines two repository classes for managing data in a database.\n\nThe `ChatRepository` class handles operations related to chat sessions, including creating, retrieving, listing, and deleting chats. It also manages query scopes associated with chats, storing them as JSON-encoded strings in the database. The class supports adding and retrieving citations and reasoning summaries linked to specific chats.\n\nThe `BackgroundTaskLogRepository` class manages background task execution metadata. It provides methods for creating, retrieving, updating, and listing task logs. The class supports filtering incomplete tasks and finding the latest completed task by name. Task data is stored with optional JSON-encoded extra information.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:BackgroundTaskLogRepository:8e453e8983d5d3842769daf41b7844a2ade872937b3c742b72897920ab27b10c:8e453e8983d5d3842769daf41b7844a2ade872937b3c742b72897920ab27b10c": "The `BackgroundTaskLogRepository` class provides a set of methods for managing background task logs in an SQLite database, supporting operations such as creating, retrieving, updating, and listing task records with support for JSON-serialized extra data. It allows filtering tasks by status, including incomplete or completed tasks, and offers functionality to find the latest completed task for a given name. The class ensures data integrity through database transactions and handles the conversion of database rows into dictionary format, including parsing JSON fields.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:BackgroundTaskLogRepository:create:24e364ac8d7ae073114121efe3d07ca3925a0185724147298d9838adc5197e6f:24e364ac8d7ae073114121efe3d07ca3925a0185724147298d9838adc5197e6f": "Creates a new background task log entry in the database with specified parameters and returns the created task record.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:BackgroundTaskLogRepository:find_latest_completed:4cd031f9533504d1d521c958d79f50217325d4546c98a8f4cb57b941dd406b08:4cd031f9533504d1d521c958d79f50217325d4546c98a8f4cb57b941dd406b08": "Function retrieves the most recent completed task record from a database table based on task name, ordering by completion time and creation time, returning None if no matching record exists. The returned record includes parsed JSON data for extra_data field if present.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:BackgroundTaskLogRepository:get:ed8d9e2c5e87e279cc25235deaf9ab152e5f9d095338a609ceff54ca3c295def:ed8d9e2c5e87e279cc25235deaf9ab152e5f9d095338a609ceff54ca3c295def": "Retrieves a task record from the database by ID and returns it as a dictionary. Fetches the row using a parameterized query, converts it to a dictionary format, and deserializes JSON data if present in the extra_data field. Returns None if no record is found.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:BackgroundTaskLogRepository:list_completed:1a3839c1cc80dba42c864c24947d12172bc4a4e3e25f452584e99ffb436a299f:1a3839c1cc80dba42c864c24947d12172bc4a4e3e25f452584e99ffb436a299f": "Function retrieves completed task records from a database table, filtering by task name and status, and returns them as a list of dictionaries with parsed JSON data.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:BackgroundTaskLogRepository:list_incomplete:78cd37b597e559c0748c3a749e64f43f40be4f4ac2f2e01d3d01bf715426a7a8:78cd37b597e559c0748c3a749e64f43f40be4f4ac2f2e01d3d01bf715426a7a8": "Function retrieves database records from a specified table where the status is either 'queued', 'running', or 'paused', ordered by creation time. It converts each row to a dictionary, processes any extra data field by parsing JSON content, and returns a list of these processed records.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:BackgroundTaskLogRepository:update:bd4e43b6bb5e8b90a5fd59bd78c21280208feb7154ec15b41bb7523a072d0f8f:bd4e43b6bb5e8b90a5fd59bd78c21280208feb7154ec15b41bb7523a072d0f8f": "Function updates task record fields in a database table. It accepts task identifier and optional parameters for status, message, extra_data, and completion timestamp. Function constructs dynamic SQL UPDATE statement based on provided parameters, executes the update within a transaction, and returns the updated task record. If no update parameters are specified, it retrieves and returns the existing task record. Function uses a transaction context manager for database operations and handles JSON serialization for extra_data field.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:BaseRepository:8dbece417b06bed6a8c93a5c6aeff1e2aa59abfde8d626f525bbc105ae815a79:8dbece417b06bed6a8c93a5c6aeff1e2aa59abfde8d626f525bbc105ae815a79": "The `BaseRepository` class serves as a foundational component for database interactions within the application, initializing with a `DatabaseManager` and providing methods to manage database transactions and row-to-dictionary conversions. It offers a context manager for handling database transactions and includes functionality to transform SQLite query results into dictionary format for easier data manipulation. The class facilitates structured access to local SQLite storage, supporting the application's document processing and retrieval workflows.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:BaseRepository:__init__:15c2d1dca46c73968882daabcd406cf2c8676f548349279c597790f0bec58d3c:15c2d1dca46c73968882daabcd406cf2c8676f548349279c597790f0bec58d3c": "Initializes an object with a DatabaseManager instance, storing it as an attribute.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:BaseRepository:_row_to_dict:d18625f1d80e5a06e5ab589380d7d424c94332dd74045edcb919d432434654c3:d18625f1d80e5a06e5ab589380d7d424c94332dd74045edcb919d432434654c3": "Function that converts a SQLite row object into a dictionary mapping column names to their values, returning None if the input row is None.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:BaseRepository:transaction:5a62f9ca6c8404f26b5d0c85a5b1edf4cd48544c0ebab054f25fd950ec148fda:5a62f9ca6c8404f26b5d0c85a5b1edf4cd48544c0ebab054f25fd950ec148fda": "This function provides a context manager interface for database transactions. It yields a database connection within an active transaction scope, allowing database operations to be performed within that transaction. The transaction is automatically managed by the database connection's transaction handler, ensuring proper commit or rollback behavior. The function returns an iterable that produces the connection object for use in transactional operations.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:ChatRepository:403f4dab1d095dafc4053c0344284f38d97c0eff77088d1f81ab00e10176aaed:403f4dab1d095dafc4053c0344284f38d97c0eff77088d1f81ab00e10176aaed": "The `ChatRepository` class provides a database interface for managing chat records, including creating, retrieving, listing, and deleting chats, as well as handling query scopes, citations, and reasoning summaries associated with chats. It supports operations such as inserting and fetching citation and reasoning summary data, all while ensuring data consistency through database transactions. The class also includes helper methods for decoding database rows and managing chat-related metadata.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:ChatRepository:_decode_chat_row:c31efd342c7449190be99868bdcf3bbef02fe5ee66cc8d955f6dd3d914160ddf:c31efd342c7449190be99868bdcf3bbef02fe5ee66cc8d955f6dd3d914160ddf": "Function that converts a SQLite database row into a dictionary, handling JSON deserialization of a query_scope field when present. Returns None if input row is None. Processes all columns from the row into key-value pairs in the returned dictionary. If the query_scope column exists and contains data, it parses the JSON string into a Python object.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:ChatRepository:add_citation:1cade5569ba43cbee59df9c449b6b2e9cc042faa7c60bcce5fc9111a3255f55e:1cade5569ba43cbee59df9c449b6b2e9cc042faa7c60bcce5fc9111a3255f55e": "Function inserts a new citation record into the database with specified chat ID and optional document or file version identifiers, along with an optional text snippet. Function returns the inserted citation record by retrieving it using its auto-generated ID.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:ChatRepository:add_reasoning_summary:09ac902ecf7ae85fc63d5a725689e1b12a9e9324e4f66fbc313e13866128b92b:09ac902ecf7ae85fc63d5a725689e1b12a9e9324e4f66fbc313e13866128b92b": "Function inserts a new reasoning summary record into the database with provided chat ID and content, then retrieves and returns the inserted summary record.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:ChatRepository:create:81dfce4be529ebbc8da3a095b942d806d62851a261414a4839688c8aff484095:81dfce4be529ebbc8da3a095b942d806d62851a261414a4839688c8aff484095": "Creates a new chat record in the database with specified project ID and optional title and query scope. Stores the query scope as a JSON-encoded string if provided. Returns the created chat record by fetching it using its generated ID.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:ChatRepository:delete:4f53c341582e2515f5b3a3baadbdbaed8279c161fd8cf200a347446939601bb7:4f53c341582e2515f5b3a3baadbdbaed8279c161fd8cf200a347446939601bb7": "Deletes a chat record from the database by its ID within a transactional context.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:ChatRepository:get:96f83e5db83398ab72d87fa8f5eac32038f3040016cdeef84b07468a4c455e16:96f83e5db83398ab72d87fa8f5eac32038f3040016cdeef84b07468a4c455e16": "Retrieves a chat record from the database by its ID and returns the decoded chat data as a dictionary, or None if no matching record is found.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:ChatRepository:get_citation:e1d8c36984269bec82c72d3a91a83e6795cdd8dc603d03b565234098e3517342:e1d8c36984269bec82c72d3a91a83e6795cdd8dc603d03b565234098e3517342": "Function retrieves a citation record from a database by its ID and converts the result to a dictionary format. Returns None if no matching record is found. Uses a SQL query to select all columns from the citations table where the id matches the provided parameter. Processes the retrieved row using a helper method to transform it into a dictionary representation.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:ChatRepository:get_query_scope:e3182c8b6b307d8a92c51144e4c121df1ecc573902cecb35be4fff7f89b066b1:e3182c8b6b307d8a92c51144e4c121df1ecc573902cecb35be4fff7f89b066b1": "Function retrieves query scope information for a specific chat ID by first fetching the chat object, then extracting and validating the query_scope field as a dictionary. Returns the query scope dictionary if valid, otherwise returns None.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:ChatRepository:get_reasoning_summary:e5bbf1e584a9724b53aa3bad50860c6e1313701cdfeda50faac02992f04c039e:e5bbf1e584a9724b53aa3bad50860c6e1313701cdfeda50faac02992f04c039e": "Function retrieves a reasoning summary from the database by ID and converts the result row to a dictionary format. Returns None if no matching record is found.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:ChatRepository:list_citations:26e03842c11e8b0963f12cd509ae8f30ca6b42913a97a4dca03b23ffe900c965:26e03842c11e8b0963f12cd509ae8f30ca6b42913a97a4dca03b23ffe900c965": "Function retrieves all citations from the database for a specified chat ID, ordered by creation time, and converts each database row into a dictionary format.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:ChatRepository:list_for_project:33561cf73ee28f7e8abec7f9c65448790993611f2702ea2d68cc448a48b0ecde:33561cf73ee28f7e8abec7f9c65448790993611f2702ea2d68cc448a48b0ecde": "Retrieves all chat records associated with a specific project ID from the database, ordered by creation time, and returns them as a list of decoded dictionaries. Each chat record is processed through a decoding function, and empty results are filtered out.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:ChatRepository:list_reasoning_summaries:dc521048598ec1d4de7770bd06608a184791ac0285169fe198ce2833668e01c6:dc521048598ec1d4de7770bd06608a184791ac0285169fe198ce2833668e01c6": "Function retrieves all reasoning summaries associated with a specific chat ID from a database table, ordered by creation time in ascending order. It returns a list of dictionaries representing the retrieved rows, excluding any null values. The function uses a database connection to execute a SELECT query and converts each resulting row into a dictionary format using a helper method.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:ChatRepository:set_query_scope:aa4340e37bb6f3b9f7a1f3219b27fdda5e00d660e99715d1a1edb14038f4d82b:aa4340e37bb6f3b9f7a1f3219b27fdda5e00d660e99715d1a1edb14038f4d82b": "Function updates the query scope for a specified chat ID in a database table and returns the updated chat record.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:DatabaseError:25295489aa064f16f475da3f10b6eaea7615d4a2822ac340e7390e1081378459:25295489aa064f16f475da3f10b6eaea7615d4a2822ac340e7390e1081378459": "The `DatabaseError` class is defined within a document processing and retrieval system that uses SQLite for local data storage. It represents an exception type used to handle errors occurring during database operations within the application's offline AI-powered workflow. The class serves as a custom error handling mechanism specific to the system's database interactions.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:DatabaseManager:__init__:87d2e4c576191bf653946bf994258765687b6d26e111cc482e1cf496e4dbe12f:87d2e4c576191bf653946bf994258765687b6d26e111cc482e1cf496e4dbe12f": "Initializes a class instance with a file path, ensuring the parent directory exists, and sets up thread-safe connection management for SQLite database connections.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:DatabaseManager:_apply_migrations:dfac64c113c37c31f5f5ad0394eeb7950b8eeca400e96c4afe3860d57750e5aa:dfac64c113c37c31f5f5ad0394eeb7950b8eeca400e96c4afe3860d57750e5aa": "Function that applies database schema migrations by checking if the current version is less than the target version, and if so, reinstalls the base schema. The function serves as a placeholder for future incremental migration logic and currently performs a full schema reinstallation when version gaps exist.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:DatabaseManager:_get_user_version:9fc47613a48f7523d030cb37d84ef63f45a4a1b291dba08b9401fbce5a9ea8a6:9fc47613a48f7523d030cb37d84ef63f45a4a1b291dba08b9401fbce5a9ea8a6": "Function retrieves the user version pragma value from a SQLite database connection, returning it as an integer. If no result is found, it returns zero.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:DatabaseManager:_install_base_schema:c0040d08b370e8ec7f01aa6b625d02b50e35f4bb7dbe4d35c758b2234a3547d8:c0040d08b370e8ec7f01aa6b625d02b50e35f4bb7dbe4d35c758b2234a3547d8": "Function that installs a base database schema by reading SQL definitions from a file and executing them against a SQLite connection, then updates the database's user version number.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:DatabaseManager:_set_user_version:1c1a4dc99c3ee877682a76accd40f1e92b2b887cddd3a0dc3032a3836871ea72:1c1a4dc99c3ee877682a76accd40f1e92b2b887cddd3a0dc3032a3836871ea72": "Function that sets the user version pragma in an SQLite database connection to a specified integer value.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:DatabaseManager:a1e20ddeaf633fe2d8349e06d55110f535d0b93039df2db01039256bddf40672:a1e20ddeaf633fe2d8349e06d55110f535d0b93039df2db01039256bddf40672": "The `DatabaseManager` class manages thread-safe SQLite database connections and ensures the database schema is up-to-date by applying necessary migrations. It provides methods for initializing the database, handling transactions, and exporting or importing database files. The class uses a reentrant lock to manage access to database connections and enforces schema version compatibility during import operations.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:DatabaseManager:close:9fa96a836c619dc047b29a4ad88492dc9eb447f317aa1818758bcc529868fc1f:9fa96a836c619dc047b29a4ad88492dc9eb447f317aa1818758bcc529868fc1f": "Function closes all database connections managed by the instance and clears the internal connections dictionary. The operation is thread-safe, using a lock to synchronize access to the connections collection during the closing process. Each connection in the collection is individually closed, with the lock ensuring no concurrent modifications occur while connections are being processed.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:DatabaseManager:connect:e92df2f7bdd9336db21f1bcb8a2bd5ec903f548b522679279995c5f37214510e:e92df2f7bdd9336db21f1bcb8a2bd5ec903f548b522679279995c5f37214510e": "Function that returns a thread-local SQLite database connection with shared connection management. Creates and caches connections per thread identifier, configures each connection with row factory set to sqlite3.Row, enables foreign key constraints, and disables thread checking for the connection. Uses a lock to ensure thread-safe access to the connection cache.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:DatabaseManager:export_database:32b41cdb3a817161907f5969cfdfae4cbd6677024cb69b62ce2fb2b88d5f31a6:32b41cdb3a817161907f5969cfdfae4cbd6677024cb69b62ce2fb2b88d5f31a6": "Creates a database snapshot at the specified destination path. If the destination is a directory, generates a timestamped filename using the source database name. Ensures parent directories exist for the destination. Establishes a connection to the source database and performs a backup operation to the target location. Returns the full path to the created backup file.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:DatabaseManager:import_database:cda6624067b487ef24c8788cc1a2801d6135373f309fa64ff50b7cae3acef903:cda6624067b487ef24c8788cc1a2801d6135373f309fa64ff50b7cae3acef903": "Function that replaces the current database with a source database file while maintaining schema compatibility. Takes a source path argument, validates its existence, closes the current database connection, copies the source file to a staging location, checks the schema version against a supported version, raises an error if the source has a newer schema, replaces the original database file with the staging file, reinitializes the database connection, and returns the path to the newly imported database.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:DatabaseManager:initialize:d8896f154ec5244f0cac76f1f59ed8fa5f0705b58cd2a600efcffdef80b75c21:d8896f154ec5244f0cac76f1f59ed8fa5f0705b58cd2a600efcffdef80b75c21": "Function initializes database schema by establishing connection and applying migrations if needed. It retrieves current schema version and compares it to expected version. If version is zero, it installs base schema. If version is less than expected, it applies necessary migrations. If version exceeds expected, it raises an error indicating database is too new for the application. All initialization operations occur within a transaction to ensure atomicity.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:DatabaseManager:transaction:cff92c7b92dee0ec5f8e74a7236c1d7ea0a988323e5b447e86ee7658823c398f:cff92c7b92dee0ec5f8e74a7236c1d7ea0a988323e5b447e86ee7658823c398f": "Function that provides a context manager for database transactions, yielding a database connection within a transaction block and converting database errors to a custom DatabaseError exception.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:DocumentRepository:_build_folder_like_pattern:c4cbc9b8228ef24387c55298954ba57bc78fb9d779640498e71f39bca1a65db2:c4cbc9b8228ef24387c55298954ba57bc78fb9d779640498e71f39bca1a65db2": "Function that constructs a pattern string for folder-like matching by escaping special characters and appending a wildcard. It processes a folder path by escaping percent signs and underscores, then adds a trailing wildcard if the path ends with a separator, or appends a separator followed by a wildcard to match subfolders. The function determines the appropriate path separator based on the input folder string.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:DocumentRepository:_decode_document_row:c3de2e1443800560279ca20e7fdd6689e6b3ee3e7fbbbc15c9b70db1dfeac16a:c3de2e1443800560279ca20e7fdd6689e6b3ee3e7fbbbc15c9b70db1dfeac16a": "Function that converts a SQLite database row into a dictionary, handling metadata parsing. Takes a row object from sqlite3 and returns a dictionary with all column values, or None if the input is None. If the row contains a metadata column, it parses the JSON string into a Python object. Returns the processed dictionary with all column data accessible by key name.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:DocumentRepository:_normalize_folder:ad06a9945fe74438bbea3530872162be4104072faae3f9eab2a2f415d0448da7:ad06a9945fe74438bbea3530872162be4104072faae3f9eab2a2f415d0448da7": "Function that normalizes a folder path by resolving it to an absolute path string, returning None for None or empty string inputs.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:DocumentRepository:_normalize_path:0667d82e755ecc090f43e690fe3412861a9cfdb11878f94eb72cf4d6779e0eed:0667d82e755ecc090f43e690fe3412861a9cfdb11878f94eb72cf4d6779e0eed": "Function that normalizes a file path by resolving it to an absolute path string, returning None if input is None.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:DocumentRepository:add_file_version:9538a610fb86887edfd02901b258f827147a50acb9a70f86242f6c69e71a54a2:9538a610fb86887edfd02901b258f827147a50acb9a70f86242f6c69e71a54a2": "Function adds a new file version record to the database for a specified document, calculating the next version number based on existing versions. It inserts the file path, checksum, and size into the file_versions table, resolves the file path to an absolute path, and returns the created version record by ID. The operation is wrapped in a transaction to ensure data consistency.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:DocumentRepository:create:4f0df2a93d6b445a1023583b88fb7ae3197272ff74c2dc9963bdbf41241e4b4e:4f0df2a93d6b445a1023583b88fb7ae3197272ff74c2dc9963bdbf41241e4b4e": "Creates a new document record in the database with specified project ID, title, and optional source details. Accepts parameters for source type, source path, metadata, and folder path. Normalizes paths and handles folder assignment based on source path if folder is not provided. Stores metadata as JSON string. Returns the created document's data after insertion.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:DocumentRepository:create_tag:ee9a80131eb069dc71a3384154385f3477e929824694f6c1baeb125d64b45b66:ee9a80131eb069dc71a3384154385f3477e929824694f6c1baeb125d64b45b66": "Creates a new tag in the database with specified project ID, name, description, and color. Returns the created tag as a dictionary. Uses a database transaction for the operation. Inserts the tag into the tags table and retrieves the newly created tag by its ID.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:DocumentRepository:delete:dc6efc8fc62424913d04ebc21ca141474661b82bc314bcc5776f4082fe4a1da3:dc6efc8fc62424913d04ebc21ca141474661b82bc314bcc5776f4082fe4a1da3": "Function deletes a document by ID and updates associated tag counts. Takes a document ID as input and performs two database operations within a transaction: removes the document from the documents table, and decrements the document_count field in the tags table for all tags associated with the deleted document. Tag count updates only occur if the document had associated tags, and ensures tag counts never go below zero.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:DocumentRepository:delete_tag:5a04b87564544440cb90d33e92b34331f0282dfb8b701d3c3e2c3b9ea4bf4c7d:5a04b87564544440cb90d33e92b34331f0282dfb8b701d3c3e2c3b9ea4bf4c7d": "Deletes a tag record from the database table using the provided tag identifier.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:DocumentRepository:f1956782a9cf6ff9cc61d230e702d07e28daf7e7db86264016afacddf61288e1:f1956782a9cf6ff9cc61d230e702d07e28daf7e7db86264016afacddf61288e1": "The `DocumentRepository` class provides a comprehensive interface for managing document records and their associated metadata, tags, and file versions within a project-based system. It supports creating, retrieving, updating, and deleting documents and tags, as well as organizing documents by folder or tag scope, and ensures data consistency through database transactions. The class also handles normalization of file paths and construction of SQL query patterns for efficient document retrieval and filtering.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:DocumentRepository:get:08c63b39c931a4c164caf88f355a2dcf610e60f525891455471d773521c1c7ae:08c63b39c931a4c164caf88f355a2dcf610e60f525891455471d773521c1c7ae": "Function retrieves a document by ID from a database and returns the decoded document data as a dictionary, or None if not found.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:DocumentRepository:get_file_version:650369dc65be018d2cd237e3d59f4e8a9c1725665326ecdacaafcc59a854d3e4:650369dc65be018d2cd237e3d59f4e8a9c1725665326ecdacaafcc59a854d3e4": "Function retrieves a file version record from the database by its ID and converts it to a dictionary format. Takes a version identifier as input and returns either a dictionary containing the record data or None if no matching record is found. Uses a database query to fetch the specific record and applies a helper method to transform the result row into a dictionary structure.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:DocumentRepository:get_tag:a293e2220ba7550521a4f3f4862be857eec7120a393fa6501855f6629d5a4b96:a293e2220ba7550521a4f3f4862be857eec7120a393fa6501855f6629d5a4b96": "Function retrieves a single tag record from the database by its ID and converts it to a dictionary format. Returns None if no matching record is found. Uses a database connection to execute a SELECT query against the tags table with the provided ID parameter. The result row is processed through an internal method that transforms the database row into a dictionary representation.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:DocumentRepository:list_file_versions:ff02e95298b20e8666e18e5dd8dd1e0c755334f4a7ffad28b6d8a42c2bb46e68:ff02e95298b20e8666e18e5dd8dd1e0c755334f4a7ffad28b6d8a42c2bb46e68": "Function retrieves all file versions associated with a given document ID from a database table, returning them as a list of dictionaries ordered by version number in ascending order. Each dictionary represents a row from the file_versions table containing version information for the specified document.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:DocumentRepository:list_for_folder:885006b9101d625f6b8a07ef2a24ef3385ae99ef3958d747e188bcc378b1f933:885006b9101d625f6b8a07ef2a24ef3385ae99ef3958d747e188bcc378b1f933": "Function that retrieves a list of items for a specified folder path within a project. Takes a project identifier, folder path, and optional recursive flag, then delegates to a scope-based listing method using the provided folder parameter. Returns a list of dictionaries containing item information.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:DocumentRepository:list_for_project:bef4d24c660a3e274024dc4505b4b7b15cefe6be523c2e1d2ceda692ed1f039d:bef4d24c660a3e274024dc4505b4b7b15cefe6be523c2e1d2ceda692ed1f039d": "Retrieves all documents associated with a specific project ID from the database, ordered by creation date. Returns a list of decoded document records, filtering out any None values.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:DocumentRepository:list_for_scope:4df1a55e0f3e42aac978059e3451147d5c54c02bdbba15910d804eff6fb18b0b:4df1a55e0f3e42aac978059e3451147d5c54c02bdbba15910d804eff6fb18b0b": "Function retrieves a list of documents from a database based on project ID and optional filtering by tags and folder path. It constructs a SQL query dynamically to join tables, apply filters, and group results when tags are specified. The function supports recursive folder path matching and returns decoded document records ordered by creation date.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:DocumentRepository:list_for_tag:4cc916aab9b26f680f8442f8ece45c401222e2ce4e1502896696cf440ab4085d:4cc916aab9b26f680f8442f8ece45c401222e2ce4e1502896696cf440ab4085d": "Function that retrieves a list of items associated with a specific tag within a project by calling another method with the project ID and tag ID as parameters.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:DocumentRepository:list_tags_for_document:4df9dcca1a105bf5b9bafe3d4aed5e2fb7f3cd182d150e9ba5c656884baf50ed:4df9dcca1a105bf5b9bafe3d4aed5e2fb7f3cd182d150e9ba5c656884baf50ed": "Function retrieves all tags associated with a specific document ID from a database, returning them as a list of dictionaries sorted alphabetically by tag name. It joins the tags table with a linking table to find matching tags for the given document ID. Each retrieved row is converted to a dictionary format before being returned in the result list.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:DocumentRepository:list_tags_for_project:3eb5fa4a08f972637b2713d636d21e259ad1bbbf56d5b1933e38954e553272a8:3eb5fa4a08f972637b2713d636d21e259ad1bbbf56d5b1933e38954e553272a8": "Function retrieves all tags associated with a specific project ID from a database, returning them as a list of dictionaries sorted alphabetically by tag name. It executes a SQL query to fetch tag records matching the project identifier, processes each retrieved row into a dictionary format using a helper method, and filters out any null rows before returning the final list.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:DocumentRepository:refresh_tag_counts:932652ede698d4a66f9e252277e7d75abe5dec354f073a508c634a2e38311c68:932652ede698d4a66f9e252277e7d75abe5dec354f073a508c634a2e38311c68": "Function updates tag document counts in the database. When no project ID provided, updates all tags with count of associated documents. When project ID provided, updates only tags belonging to that project with document counts from matching documents. Uses SQL UPDATE statements with subqueries to calculate and assign document counts. Takes database connection from self.db and executes updates directly on tags table.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:DocumentRepository:tag_document:aaae1a5f11ca922802fee3b4889a9bf1a6451f82842529a6276d447ec0478ad3:aaae1a5f11ca922802fee3b4889a9bf1a6451f82842529a6276d447ec0478ad3": "Function associates a document with a tag by inserting a link record and updating the tag's document count. It uses a database transaction to ensure atomicity of the insert and update operations. The function ignores duplicate insertion attempts and only increments the tag's document count when a new link is successfully created.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:DocumentRepository:untag_document:22c612f28fe8dd5cfe3ab805502b8d8676d3ef81d07382fa390fc37e587634b9:22c612f28fe8dd5cfe3ab805502b8d8676d3ef81d07382fa390fc37e587634b9": "Function removes a tag from a document and decrements the tag's document count if the tag was successfully removed. Takes a document ID and tag ID as parameters. Uses a database transaction to ensure atomicity of the delete and update operations. The delete operation removes the link between the document and tag from the tag_links table. If rows are affected by the delete, the tag's document_count in the tags table is decremented by one, with a minimum value of zero. Returns nothing.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:DocumentRepository:update:04a238b2e28492e5896c624228a53e32a9dbba75e62409aa9c8830beb0c61eee:04a238b2e28492e5896c624228a53e32a9dbba75e62409aa9c8830beb0c61eee": "Function updates document fields in a database table and returns the updated document. It processes metadata by serializing it to JSON, normalizes file paths and folder paths, constructs an SQL UPDATE statement with provided fields, executes the update within a transaction, and retrieves the updated document. If no fields are provided, it returns the current document state.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:IngestDocumentRepository:_build_preview:f425a4c66fb692295614f7ad72f6fd49998dcea3eea4d277fb54deb7a4a547c1:f425a4c66fb692295614f7ad72f6fd49998dcea3eea4d277fb54deb7a4a547c1": "Function that creates a truncated preview of text with an ellipsis, limiting the output to a specified character count. When the input text exceeds the limit, it finds the last space within the limit to avoid breaking words, and appends an ellipsis character. If no space is found within the limit, it truncates at the exact limit position. Returns the original text if it's already within the limit.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:IngestDocumentRepository:_chunk_document:1efec8fd5f8d64ebc1b5892d2361e75cc6c3b354eb38dd64a7c4349ed4150dc8:1efec8fd5f8d64ebc1b5892d2361e75cc6c3b354eb38dd64a7c4349ed4150dc8": "Function splits input text into overlapping chunks based on token count, using regex to identify non-whitespace sequences. It calculates chunk boundaries considering specified maximum tokens and overlap values. Each chunk includes index, text content, token count, and offset information. If no matches are found, it returns a single chunk with normalized text. Overlapping regions are handled by advancing the start position by the step size, which is derived from max tokens and overlap. The function ensures that chunks do not exceed the maximum token limit and adjusts for edge cases where text is empty or insufficient. Final fallback returns a chunk using normalized text if no valid chunks were created during iteration.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:IngestDocumentRepository:_decode_document_row:54f462d1caf1c368c61e769c56b095eb4a8ab8337b6207f8888239abf056079c:54f462d1caf1c368c61e769c56b095eb4a8ab8337b6207f8888239abf056079c": "Function that converts a SQLite database row into a dictionary, handling JSON-decoded fields and boolean conversion for OCR flag.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:IngestDocumentRepository:_delete_chunks_for_documents:e89a332cdd6dd9031245d8a0d341ff81d79cd5f7aee802e3932829756acf0d44:e89a332cdd6dd9031245d8a0d341ff81d79cd5f7aee802e3932829756acf0d44": "Function deletes chunks and associated index entries from database tables for specified document IDs. Takes a database connection and iterable of document IDs as input. Retrieves chunk IDs associated with the given document IDs from the ingest_document_chunks table. If chunk IDs exist, removes corresponding entries from both ingest_document_index and ingest_document_chunks tables using parameterized queries. Handles empty input cases by returning early. Uses SQL placeholders for safe query execution with dynamic parameter counts.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:IngestDocumentRepository:_normalize_text:f668d375be4a2eacc6af0099836f41cf073dc6b02d40e68a75db65ecbc6173bd:f668d375be4a2eacc6af0099836f41cf073dc6b02d40e68a75db65ecbc6173bd": "Function that takes a string input and returns a normalized version with all whitespace sequences replaced by single spaces, while stripping leading and trailing whitespace.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:IngestDocumentRepository:_replace_chunks:d44c9cca090db27be9da738ac1476aff702ce3c9f494cf08d63dccf9aeea8e6b:d44c9cca090db27be9da738ac1476aff702ce3c9f494cf08d63dccf9aeea8e6b": "Function replaces document chunks in database tables with new chunk data derived from provided text. Takes a database connection, document identifier, file path, and text content as inputs. Processes the text into chunks using an internal chunking method. Removes existing chunks associated with the document ID from the ingest_document_chunks table. Inserts new chunk records into the ingest_document_chunks table with metadata including index, text, token count, and position offsets. For each inserted chunk, adds a corresponding entry to the ingest_document_index table containing search content, file path, and relationship data linking to the chunk and document. Uses transactional database operations to maintain consistency between chunk and index records.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:IngestDocumentRepository:bd9282969a3a3c1e0156b563660fdb77cb5d11e424a5d72c02510ffd47ffe518:bd9282969a3a3c1e0156b563660fdb77cb5d11e424a5d72c02510ffd47ffe518": "The `IngestDocumentRepository` class manages the storage, retrieval, and search of parsed documents within a local database, supporting versioned document entries and associated text chunks for offline AI processing. It provides methods to store new versions of documents, fetch specific or all document versions, delete documents by path, and perform full-text searches across indexed content. The class handles document chunking, preview generation, and metadata decoding to support efficient ingestion and retrieval of structured document data.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:IngestDocumentRepository:delete_by_paths:8188fbf8f901be7ede26da93b9a044019d0519634626a275d1c5a2e4f0919527:8188fbf8f901be7ede26da93b9a044019d0519634626a275d1c5a2e4f0919527": "Function deletes ingest records associated with provided file paths, returning the total number of deleted rows from both the main ingest table and an associated FTS index. It normalizes input paths to absolute form, removes duplicates, and processes each unique path to find matching records. For each record found, it first deletes related chunks, then removes the document record itself. The function uses a transaction to ensure atomicity of operations across all deletions.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:IngestDocumentRepository:get:d15aa0477d21f8c8c153af499869880ac2c8848fb046c9eb091f505d207c76a4:d15aa0477d21f8c8c153af499869880ac2c8848fb046c9eb091f505d207c76a4": "Retrieves a document from the database by its ID and returns it as a dictionary, or None if not found.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:IngestDocumentRepository:get_latest_by_path:f114c079f2068ae90c21fce84d0d0a13c1a22eea6c2de710cb10e37ac2a14fd9:f114c079f2068ae90c21fce84d0d0a13c1a22eea6c2de710cb10e37ac2a14fd9": "Retrieves the most recent document record from the database for a given file path. Takes a path parameter, normalizes it to an absolute string representation, queries the ingest_documents table for records matching that path, orders results by version in descending order, and returns the latest record. Returns None if no matching record is found. Uses a database connection from self.db to execute the query and fetches a single row result. Processes the fetched row using a helper method _decode_document_row to convert it into a dictionary format.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:IngestDocumentRepository:list_all:288228f0214c40ebfa2db1125eda3ae29fc96f0b554f81f591cf5640341496b3:288228f0214c40ebfa2db1125eda3ae29fc96f0b554f81f591cf5640341496b3": "Function retrieves all records from the ingest_documents table, orders them by creation date in ascending order, decodes each row using a helper method, and returns a list of decoded records that are not empty.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:IngestDocumentRepository:list_versions:6ee13208e5900aa72c270c433c70cf9f9d2bc5d55363e734862c25a60be542e4:6ee13208e5900aa72c270c433c70cf9f9d2bc5d55363e734862c25a60be542e4": "Function retrieves all versions of a document from a database table, ordered by version descending, and returns them as a list of dictionaries after decoding each row.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:IngestDocumentRepository:search:6a3b796d142a5bc5cdd85b14ce9a9a0a39578177b907459f450d813d4ff35175:6a3b796d142a5bc5cdd85b14ce9a9a0a39578177b907459f450d813d4ff35175": "This function implements a search method that takes a query string and an optional limit parameter, returning a list of dictionaries containing search results. The implementation delegates to another method called search_chunks, passing through the query and limit arguments. The function is defined with type hints indicating it accepts a string query and returns a list of dictionaries with arbitrary key-value pairs.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:IngestDocumentRepository:search_chunks:c038050466ea261f8e991af78c159ba327c6b462aa40a8ec6174fe0badc4e409:c038050466ea261f8e991af78c159ba327c6b462aa40a8ec6174fe0badc4e409": "Function executes a full-text search query against indexed document chunks, returning ranked results with snippets and associated document metadata. It retrieves matching chunks from a database, joins them with document information, and structures the output with chunk details, document data, search highlights, and relevance scores. Results are ordered by search score and chunk index, limited by a specified count.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:IngestDocumentRepository:store_version:5de75a632a18cd41533b3b0b701723edc41a883fac4ed2e289b8c46fef5b4b9f:5de75a632a18cd41533b3b0b701723edc41a883fac4ed2e289b8c46fef5b4b9f": "Function stores a document version in a database, associating it with metadata, text content, and parsed sections and pages. It calculates a new version number based on existing entries, inserts the document data into the `ingest_documents` table, and manages related chunks of text. The function returns the stored document's data after insertion.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:ProjectRepository:52bc4c58aa8f625a91f99b0af3ba74ef9640f7a3c9cad545810cdea1d6a21f36:52bc4c58aa8f625a91f99b0af3ba74ef9640f7a3c9cad545810cdea1d6a21f36": "The `ProjectRepository` class manages the storage and retrieval of project entries in a SQLite database, providing methods to create, read, update, and delete project records. It supports listing all projects, fetching individual projects by ID, and updating specific fields of a project within a transactional context. The class handles database interactions using SQL queries and converts row data into dictionary format for easy access.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:ProjectRepository:create:59e5cab8e2e25e3d063ed00766ac0d98a2ed54f51b4157460a48b4cee4136527:59e5cab8e2e25e3d063ed00766ac0d98a2ed54f51b4157460a48b4cee4136527": "Creates a new project record in the database with the specified name and optional description. Returns the created project's data as a dictionary. Uses a database transaction to ensure atomicity of the operation. Inserts the project into the projects table and retrieves the newly created project's data by its ID.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:ProjectRepository:delete:50f28e6d75a87041a0ba08922ca21816875a903cfbe6e9f380f8f1aafb81d257:50f28e6d75a87041a0ba08922ca21816875a903cfbe6e9f380f8f1aafb81d257": "Deletes a project record from the database by its ID within a transactional context.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:ProjectRepository:get:28716c1df1c7ee1eaefb740b28156359eb54cdd3e564b584cf8da419e8305f31:28716c1df1c7ee1eaefb740b28156359eb54cdd3e564b584cf8da419e8305f31": "Function retrieves a project record by ID from a database and converts it to a dictionary format. Takes a project identifier as input and returns either a dictionary containing the project data or None if no matching record is found. Uses a database connection to execute a SELECT query against the projects table with the provided ID parameter. The resulting database row is transformed into a dictionary using an internal helper method.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:ProjectRepository:list:b5ae43a2c7e74b32dd9615f4ee43cee5370bafac6db41d79b12cceaca2c6f215:b5ae43a2c7e74b32dd9615f4ee43cee5370bafac6db41d79b12cceaca2c6f215": "Function retrieves all project records from a database table, orders them by creation date in ascending order, and converts each row to a dictionary format. Returns a list of these dictionary representations.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:ProjectRepository:update:934385618c847d130802db90d9ca4a7ba8e2845f0d5c3b42a703ff0012024670:934385618c847d130802db90d9ca4a7ba8e2845f0d5c3b42a703ff0012024670": "Function updates project record with provided fields and returns the updated record, or None if no fields are provided. Function constructs dynamic SQL UPDATE statement using provided field names and values, executes update within transaction context, and retrieves updated record after modification. Function uses parameterized queries to prevent SQL injection. Function expects project_id as integer and fields as keyword arguments of any type. Function returns dictionary containing updated project data or None if no updates occurred.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:__init__:13d3c69695c4e08c3e62a4233df3f2fe34b8ed910bd28ffe1a1bcd7981e4589e:13d3c69695c4e08c3e62a4233df3f2fe34b8ed910bd28ffe1a1bcd7981e4589e": "Initializes the `BaseRepository` instance with a `DatabaseManager` object, which is stored as an attribute for database operations.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:__init__:560a38300f2b3b7c7743975a7a3084422818e843bdeb7d9d16b0612eb1b02d71:560a38300f2b3b7c7743975a7a3084422818e843bdeb7d9d16b0612eb1b02d71": "Initializes a DatabaseManager instance with the specified database file path. Creates the parent directory if it doesn't exist, initializes a reentrant lock for thread-safe connection management, and creates an empty dictionary to store database connections keyed by thread ID.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:__init__:729e75114c13416ba2a911580006cc747ad588f0e5a6e36352498aa29f9a1571:729e75114c13416ba2a911580006cc747ad588f0e5a6e36352498aa29f9a1571": "Initializes the BaseRepository instance with a DatabaseManager object.\n\nSets the db attribute to the provided DatabaseManager instance for database operations.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:__init__:97a040f6ddcad330690c92c047a6f2d4c56e6aa345b1b61a1d760564e8a8d54c:97a040f6ddcad330690c92c047a6f2d4c56e6aa345b1b61a1d760564e8a8d54c": "Initializes a `DatabaseManager` instance with a specified file path, ensuring the parent directory exists. It sets up a reentrant lock for thread-safe database connection handling and initializes a dictionary to store database connections per thread.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:_apply_migrations:1adf2d44dc270cb973658014be40232eb8b409e5a67e3e2919db3712945aec28:1adf2d44dc270cb973658014be40232eb8b409e5a67e3e2919db3712945aec28": "The function `_apply_migrations` is a placeholder method intended for applying database schema migrations. It checks if the current schema version is less than the target `SCHEMA_VERSION`. If so, it re-applies the base schema using the `_install_base_schema` method to ensure consistency, without implementing incremental migration logic.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:_apply_migrations:d4418babac3bf9d709c7c17ff824bc48dbfee4e816b0a4d14723e2abfc115c0b:d4418babac3bf9d709c7c17ff824bc48dbfee4e816b0a4d14723e2abfc115c0b": "The function `_apply_migrations` serves as a placeholder for applying database schema migrations. It takes a database connection and the current schema version, and if the current version is less than the target `SCHEMA_VERSION`, it reinstalls the base schema to ensure the database matches the expected structure. The function currently does not implement incremental migrations, instead opting to reapply the full schema when version gaps are detected.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:_build_folder_like_pattern:2a54ccd77cf3d9bb079cc523598d70ddd0a6206048fb7e253ddc902e7a055593:2a54ccd77cf3d9bb079cc523598d70ddd0a6206048fb7e253ddc902e7a055593": "The function `_build_folder_like_pattern` constructs a string pattern for database queries that matches files or folders within a specified directory path. It sanitizes the input folder path by escaping special characters `%` and `_` to prevent unintended wildcard matching in SQL LIKE clauses. If the folder path ends with a path separator (`/` or `\\`), it appends a `%` to match all contents within that folder. Otherwise, it determines the appropriate path separator based on the input and appends the separator followed by `%` to match items in the specified directory. The resulting pattern is designed for use in SQL queries to filter paths that are children of the given folder.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:_build_folder_like_pattern:819bcf523401655b7c9d159aac2787a145673f4f85df42a89e4a7582646f602e:819bcf523401655b7c9d159aac2787a145673f4f85df42a89e4a7582646f602e": "The function `_build_folder_like_pattern` constructs a pattern string for folder-like paths, intended for use in database queries or file system operations. It sanitizes the input folder path by escaping special characters `%` and `_` with backslashes to prevent them from being interpreted as wildcards. If the folder path ends with a path separator (`/` or `\\`), it appends a `%` wildcard to match any contents within that folder. Otherwise, it determines the appropriate path separator based on the input and appends the separator followed by a `%` wildcard to match subfolders or files within the specified directory.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:_build_preview:77a7b7acab4d675d7d80c6ee3508e23cb42d7ecc65c58a45619e505bb69f0633:77a7b7acab4d675d7d80c6ee3508e23cb42d7ecc65c58a45619e505bb69f0633": "The function `_build_preview` generates a truncated preview of a given text string, ensuring that the output does not exceed a specified character limit. If the input text is shorter than or equal to the limit, it is returned unchanged. Otherwise, the text is cut off at the last space within the limit, and an ellipsis (\"\u2026\") is appended to indicate truncation. If no space is found within the limit, the text is truncated exactly at the limit.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:_build_preview:b60329af258711e7b589ab6111b1b89ad7265fccec5c987e48a591a8e554925f:b60329af258711e7b589ab6111b1b89ad7265fccec5c987e48a591a8e554925f": "The function `_build_preview` generates a truncated preview of input text, limited to a specified number of characters. If the text exceeds the limit, it truncates at the last space within the limit and appends an ellipsis character. If no space is found within the limit, it truncates exactly at the limit. The default limit is 320 characters.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:_chunk_document:b224baa0b9e2533fcb60c68a1843d5b4942edb209087ad84d4026339bd8b4dff:b224baa0b9e2533fcb60c68a1843d5b4942edb209087ad84d4026339bd8b4dff": "The function `_chunk_document` splits input text into overlapping token-based chunks for processing. It takes a string `text`, normalized text, and parameters for maximum tokens per chunk and overlap. The function uses regex to find non-whitespace sequences as tokens, then iteratively builds chunks with specified overlap. Each chunk includes metadata such as index, text content, token count, and offset positions. If the input text is empty or contains no tokens, it returns a single chunk using the normalized text. The final chunk list is returned with all chunks properly indexed and formatted.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:_chunk_document:d817d75bb2202098b63e5a6eb40c9dacfaf2cf712103b5caa3fab106daef022b:d817d75bb2202098b63e5a6eb40c9dacfaf2cf712103b5caa3fab106daef022b": "The function `_chunk_document` splits a given text into overlapping chunks based on token count, with options for maximum tokens per chunk and overlap between chunks. It processes the input text by identifying non-whitespace sequences and creating chunks that respect the specified token limits and overlap. If the text is empty or contains no words, it returns a single chunk with the normalized text. The function ensures that chunks are properly aligned with word boundaries and handles edge cases such as insufficient content or invalid parameters. Each chunk includes metadata such as index, text content, token count, and offset positions.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:_decode_chat_row:6cc12e4fdf7044c7275aaafa2d7b4dbee7f8ea4ed2b7c2a1f7556a98014cb5a8:6cc12e4fdf7044c7275aaafa2d7b4dbee7f8ea4ed2b7c2a1f7556a98014cb5a8": "The function `_decode_chat_row` converts a SQLite database row into a dictionary representation. It takes a row from the database (either a `sqlite3.Row` object or `None`) and returns a dictionary with all column values, or `None` if the input is `None`. If the row contains a \"query_scope\" field, it is parsed from a JSON string into a Python object using `json.loads`. The function maps each column name to its corresponding value in the row.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:_decode_chat_row:c03813a43167aa2cc7d723129abad3cb5bd69be22fc1f6b6c27fe8785937a2b1:c03813a43167aa2cc7d723129abad3cb5bd69be22fc1f6b6c27fe8785937a2b1": "The function `_decode_chat_row` converts a SQLite database row into a dictionary, handling the deserialization of the `query_scope` field if it exists. It takes a row from a SQLite query result and returns a dictionary with all column values, where the `query_scope` value is parsed from a JSON string into a Python object. If the input row is `None`, the function returns `None`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:_decode_document_row:15dc08e2a6d0f7bb8b5c178230d2e759bc913f07a9692a25ecd7a353fe5215e6:15dc08e2a6d0f7bb8b5c178230d2e759bc913f07a9692a25ecd7a353fe5215e6": "The function `_decode_document_row` converts a SQLite database row into a Python dictionary, handling the deserialization of JSON-encoded fields. It takes a row from a SQLite query result and transforms it into a dictionary where each key-value pair corresponds to a column in the row. For specific fields (\"metadata\", \"sections\", \"pages\"), it parses the stored JSON string into Python objects. It also ensures the \"needs_ocr\" field is converted to a boolean value. If the input row is `None`, the function returns `None`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:_decode_document_row:380c41c4351fb2ca568e7d27469a9668ed8ff394a5497791fc238c3809982aa6:380c41c4351fb2ca568e7d27469a9668ed8ff394a5497791fc238c3809982aa6": "The function `_decode_document_row` converts a SQLite database row into a dictionary representation. It takes a row from a SQLite query result and transforms it into a dictionary where keys are column names and values are the corresponding row values. If the row is None, it returns None. For rows with metadata, it parses the metadata field from JSON format into a Python dictionary. The function handles the conversion of SQLite row objects to standard Python data types, ensuring that metadata stored as JSON strings is properly deserialized.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:_decode_document_row:7275a244f25388c22e84b2a5862a2c03e967a27678c70291437eb187e85c7860:7275a244f25388c22e84b2a5862a2c03e967a27678c70291437eb187e85c7860": "The function `_decode_document_row` converts a SQLite database row into a dictionary representation. It takes a row from a SQLite query result and maps its columns to keys in a dictionary. If the row is `None`, it returns `None`. For rows with metadata, it parses the metadata column from a JSON string into a Python dictionary. The function ensures that all column values are included in the returned dictionary, with proper handling of the metadata field.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:_decode_document_row:ef7072d3393df8ce3766705b86c500245c9c23790094acb42fb80e3f4fbd0443:ef7072d3393df8ce3766705b86c500245c9c23790094acb42fb80e3f4fbd0443": "The function `_decode_document_row` converts a SQLite row into a dictionary, handling JSON-decoding for specific fields. It takes a row from a SQLite query result and returns a dictionary representation of that row. If the input row is None, it returns None. For each field named \"metadata\", \"sections\", or \"pages\", if present in the row, it parses the corresponding string value as JSON. It also converts the \"needs_ocr\" field to a boolean value. The function preserves all other fields from the row without modification.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:_delete_chunks_for_documents:b5b95fc0831e11584d84a7a1307633a56ad225e7fc8947cf612aa3a4778a5bde:b5b95fc0831e11584d84a7a1307633a56ad225e7fc8947cf612aa3a4778a5bde": "The function `_delete_chunks_for_documents` removes all chunks and their associated index entries for a given set of document IDs from the database. It first retrieves the IDs of chunks linked to the specified documents, then deletes those chunks from both the `ingest_document_index` and `ingest_document_chunks` tables. The operation is performed within a provided SQLite database connection.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:_delete_chunks_for_documents:d63b60593a4382a19314b28c7e05b96c42315a954cb8c886290954326b49431e:d63b60593a4382a19314b28c7e05b96c42315a954cb8c886290954326b49431e": "Deletes all chunks associated with specified document IDs from the database. Takes a database connection and an iterable of document IDs, retrieves the corresponding chunk IDs, and removes both the index entries and chunk records for those IDs. Returns early if no document or chunk IDs are provided.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:_get_user_version:b4dc2b4f12b613149f08750d0a9d3e71b2e24dfb2e058ec07106acca0f24e5a3:b4dc2b4f12b613149f08750d0a9d3e71b2e24dfb2e058ec07106acca0f24e5a3": "Retrieves the `user_version` pragma value from a SQLite database connection, returning it as an integer. If no value is found, returns 0.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:_get_user_version:f4b3bf22a0f66a18456705cd30df2cc4be9052d756bfebf4bbf4a6a5ac267a43:f4b3bf22a0f66a18456705cd30df2cc4be9052d756bfebf4bbf4a6a5ac267a43": "Retrieves the user version pragma value from a SQLite database connection, returning it as an integer. If no row is returned, it defaults to 0.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:_install_base_schema:aaaf9b73919e62772b77d60ae201bab6d1e4ab7bce736b1cd2f7d70cff35ec8a:aaaf9b73919e62772b77d60ae201bab6d1e4ab7bce736b1cd2f7d70cff35ec8a": "The function `_install_base_schema` initializes the database schema by reading SQL statements from a file specified by `SCHEMA_FILENAME` and executing them against the provided SQLite connection. After executing the schema script, it sets the database's user version to the value defined by `SCHEMA_VERSION`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:_install_base_schema:ede4eb727efa38f90ef451c5439cde3d650fc05802d5854f4ce480333c87b18c:ede4eb727efa38f90ef451c5439cde3d650fc05802d5854f4ce480333c87b18c": "Installs the base database schema by reading SQL statements from a file, executing them against the provided database connection, and setting the database's user version to the current schema version.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:_normalize_folder:128cfe9ce9145b1dae8a1bd1a6314a7230e97ab9bf5c5da27b1410f0372ced49:128cfe9ce9145b1dae8a1bd1a6314a7230e97ab9bf5c5da27b1410f0372ced49": "The function `_normalize_folder` takes a path input, which can be a string, `Path` object, or `None`, and returns a normalized string representation of the resolved path. If the input is `None` or an empty string, it returns `None`. Otherwise, it resolves the path to its absolute form and converts it to a string.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:_normalize_folder:f4c685d609d74c88c208c2540a7d778e76b782689d1931d63a2e9705ef14f1df:f4c685d609d74c88c208c2540a7d778e76b782689d1931d63a2e9705ef14f1df": "Normalizes a folder path by resolving its absolute path or returning None if the input is None or empty.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:_normalize_path:3160c507fac48c53fb7c80956914fe9996f913365f2bf8f8a4cfd7d66e369487:3160c507fac48c53fb7c80956914fe9996f913365f2bf8f8a4cfd7d66e369487": "The function `_normalize_path` takes a path input, which can be a string, `Path` object, or `None`, and returns a normalized string representation of the path. If the input is `None`, it returns `None`. Otherwise, it resolves the path to its absolute form using `Path.resolve()` and converts it to a string.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:_normalize_path:e9580135276ce6e28271b64a22ec3986108b30481800204db866ae937b239247:e9580135276ce6e28271b64a22ec3986108b30481800204db866ae937b239247": "Normalizes a file path by resolving it to an absolute path string, returning None if the input is None.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:_normalize_text:63c0989e9202fde851a2af4ae065f43b648bc2c07a8afc0c7581ed65b1b6f6b9:63c0989e9202fde851a2af4ae065f43b648bc2c07a8afc0c7581ed65b1b6f6b9": "The function `_normalize_text` takes a string input and normalizes it by replacing all sequences of whitespace characters with a single space, then strips leading and trailing whitespace from the result.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:_normalize_text:8640a1b010166ffb716821ce2cec8bc3be75945b116846715910b5c65317d04d:8640a1b010166ffb716821ce2cec8bc3be75945b116846715910b5c65317d04d": "The function `_normalize_text` takes a string input and normalizes it by replacing all sequences of whitespace characters with a single space, then strips leading and trailing whitespace from the result.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:_replace_chunks:037e33f3c0a88442d89e53caab0ad4f0e2cfb5d74017f4324c66224033e1fcfe:037e33f3c0a88442d89e53caab0ad4f0e2cfb5d74017f4324c66224033e1fcfe": "The function `_replace_chunks` replaces the chunks of a document in the database with new chunks generated from the provided text. It first deletes existing chunks associated with the given `document_id`, then inserts the newly chunked content into the `ingest_document_chunks` table. For each chunk, it also inserts corresponding entries into the `ingest_document_index` table to support search functionality. The function uses a database connection to perform these operations and ensures that the chunked data is properly indexed for retrieval.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:_replace_chunks:6798350c347e301b061ca10eeb5519462e6f6337e387c614071864aceb1a7984:6798350c347e301b061ca10eeb5519462e6f6337e387c614071864aceb1a7984": "The function `_replace_chunks` processes and replaces the chunks of a document in the database. It first splits the document text into chunks using the `_chunk_document` method. Then, it deletes all existing chunks associated with the given `document_id` from the `ingest_document_chunks` table. After that, it inserts the new chunks into the same table, including their index, text, token count, and offset information. For each inserted chunk, it also creates a corresponding entry in the `ingest_document_index` table, linking the chunk to its document and path for search indexing purposes. The function operates within a provided database connection and takes the document ID, file path, and document text as inputs.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:_row_to_dict:58db0c91434b62952fc42ad052e8bc7b827d0a88b4549f971d60cce1d75332b3:58db0c91434b62952fc42ad052e8bc7b827d0a88b4549f971d60cce1d75332b3": "Converts a SQLite row object into a dictionary mapping column names to values, or returns None if the input row is None.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:_row_to_dict:5fa52b0e64b7146ec24e6467e54557a72a8896cce6f3e8cf44de6b65980f915a:5fa52b0e64b7146ec24e6467e54557a72a8896cce6f3e8cf44de6b65980f915a": "Converts a SQLite database row into a dictionary representation.\n\nThis function takes a row from a SQLite query result and transforms it into a dictionary where the keys are the column names and the values are the corresponding row values. If the input row is None, it returns None. The function uses the row's `keys()` method to retrieve column names and accesses each column by name to build the dictionary.\n\nParameters:\n\nReturns:",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:_set_user_version:87499a79ce6fe9f1472ffb711d624df428c40c2d6c669b3bce6ba1a8ef31dfc9:87499a79ce6fe9f1472ffb711d624df428c40c2d6c669b3bce6ba1a8ef31dfc9": "Sets the user version pragma value for a SQLite database connection to the specified integer version number.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:_set_user_version:fb1efecb1a055fbdb5b590daad1dab39a08d200c64272694a92cf8e168a97b20:fb1efecb1a055fbdb5b590daad1dab39a08d200c64272694a92cf8e168a97b20": "Sets the user version pragma of the provided SQLite database connection to the specified version integer.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:add_citation:8057f14162834186dbd761c2167b955c8af0427c64af9d0ae2221f800d80b923:8057f14162834186dbd761c2167b955c8af0427c64af9d0ae2221f800d80b923": "Adds a citation to the database for a given chat, with optional document, file version, or snippet details, and returns the created citation record.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:add_citation:9ae825f7e602f233eaa2bfa89cece8edb3d569f44bda7b023f4861fef3d61348:9ae825f7e602f233eaa2bfa89cece8edb3d569f44bda7b023f4861fef3d61348": "The function `add_citation` inserts a new citation record into the `citations` table within the database. It accepts parameters for `chat_id`, `document_id`, `file_version_id`, and `snippet`, and returns the inserted citation's data by calling `get_citation` with the newly created citation ID. The operation is performed within a database transaction to ensure data consistency.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:add_file_version:23722db3f14b8170f4bcca61a4956b15ee8ac942eeb95761fef491bfca163113:23722db3f14b8170f4bcca61a4956b15ee8ac942eeb95761fef491bfca163113": "The function `add_file_version` inserts a new file version record into the `file_versions` table in the database. It calculates the next version number for the given document ID by selecting the maximum existing version and incrementing it by one. The function then executes an insert operation with the provided document ID, calculated version, resolved file path, checksum, and file size. After the insertion, it retrieves and returns the newly created file version record using the `get_file_version` method. The operation is wrapped in a transaction to ensure data consistency.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:add_file_version:aa9c4f6e59cff03518ff4105f12686c904232799039fe1ffc40dc8c4cc45834e:aa9c4f6e59cff03518ff4105f12686c904232799039fe1ffc40dc8c4cc45834e": "Adds a new file version to the repository for a specified document, recording the file path, checksum, and size. Returns the details of the newly created file version. The version number is automatically determined as the next sequential integer based on existing versions for the document. The file path is stored in its resolved absolute form.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:add_reasoning_summary:8d81b63a413b879ceb0123b1cee410fce83554b21fc8ca710ad80771238c8c8e:8d81b63a413b879ceb0123b1cee410fce83554b21fc8ca710ad80771238c8c8e": "Adds a new reasoning summary for a chat session and returns the created summary record. Inserts a new row into the reasoning_summaries table with the provided chat ID and content, then retrieves and returns the complete summary record using the generated ID.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:add_reasoning_summary:ab81a093409eabcdb9413102b1e45598a92b44c5b3ae9b3734ff0856429107aa:ab81a093409eabcdb9413102b1e45598a92b44c5b3ae9b3734ff0856429107aa": "The function `add_reasoning_summary` inserts a new reasoning summary into the `reasoning_summaries` table with the provided `chat_id` and `content`. It uses a database transaction to ensure data integrity, retrieves the ID of the newly inserted row, and then fetches and returns the inserted summary using the `get_reasoning_summary` method. The function returns a dictionary representation of the inserted reasoning summary.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:close:228946b9a8f01788e87275c8bdf4a84e59fe87e2f474fb7d1b81f36060a36231:228946b9a8f01788e87275c8bdf4a84e59fe87e2f474fb7d1b81f36060a36231": "Closes the underlying database connection if it exists. The method acquires a lock to safely access the connections dictionary, retrieves all current connections, clears the dictionary, and then closes each connection individually.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:close:fd9bea6f4f04cce0d72c1e5f5294833e5c6d673726b8aa242d4d30ae382690a8:fd9bea6f4f04cce0d72c1e5f5294833e5c6d673726b8aa242d4d30ae382690a8": "The `close` method closes all active database connections managed by the `DatabaseManager` instance. It acquires a lock to ensure thread safety, retrieves all current connections, clears the internal connections dictionary, and then closes each connection individually. This ensures that all database resources are properly released when the manager is closed.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:connect:32d4b6e1947ea0618b7a489922562dc4317545dde90688e6478c6cca5a092dd1:32d4b6e1947ea0618b7a489922562dc4317545dde90688e6478c6cca5a092dd1": "Returns a singleton SQLite connection for the current thread, creating it if necessary. Uses a thread-safe approach with a lock to manage connections per thread ID. Configures the connection with foreign key constraints enabled and a row factory for dict-like access to rows. The connection is created with `check_same_thread=False` to allow usage across threads.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:connect:4e7910b3f71b018eb76e2deb18b6d124c1af1a10e3c209de0b2462898dea90c1:4e7910b3f71b018eb76e2deb18b6d124c1af1a10e3c209de0b2462898dea90c1": "The function `connect` returns a singleton SQLite database connection tailored for the thread it is called from. It ensures that each thread has its own connection instance, avoiding concurrency issues. The connection is configured with `check_same_thread=False` to allow use across threads, sets a `sqlite3.Row` factory for row access by column name, and enables foreign key constraints. A lock is used to manage access to the connections dictionary, ensuring thread-safe creation and retrieval of connections.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:create:04411893179cbeb6c738b5e27a163ad4b718cd4c22742c8fc01e786d3fa9f336:04411893179cbeb6c738b5e27a163ad4b718cd4c22742c8fc01e786d3fa9f336": "Creates a new document record in the database with the specified parameters. Accepts project ID, title, and optional source type, source path, metadata, and folder path. Normalizes paths and stores metadata as JSON. Inserts the document into the database and returns the created document's data.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:create:22dd76210be97f6696df4a668078183410d504c6112810a59723b1bb1d157016:22dd76210be97f6696df4a668078183410d504c6112810a59723b1bb1d157016": "Creates a new project record in the database with the specified name and optional description. Returns the created project's data as a dictionary. Uses a database transaction to ensure atomicity of the operation. The project ID is automatically generated by the database and used to retrieve the complete project information after insertion.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:create:251721da7f2a4095b75a73215cd46edba152d13ccd19fadef6c56fe927d94270:251721da7f2a4095b75a73215cd46edba152d13ccd19fadef6c56fe927d94270": "The `create` method inserts a new chat record into the `chats` table with the specified project ID, title, and query scope. The query scope is serialized to JSON if provided. It returns the created chat record by calling the `get` method with the newly inserted chat ID. The operation is performed within a database transaction.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:create:4f15d90c896a4bb92f45013f155d88368118d9619aa7099455afa2b519b43741:4f15d90c896a4bb92f45013f155d88368118d9619aa7099455afa2b519b43741": "Creates a new project entry in the database with the specified name and optional description. Returns the created project's data as a dictionary.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:create:691a1e9640a0b527ece7169c7329034ed929c502d97956f8632753efa6f9c446:691a1e9640a0b527ece7169c7329034ed929c502d97956f8632753efa6f9c446": "Creates a new background task log entry with the specified parameters and returns the created record. The function inserts a new row into the `background_task_logs` table with the provided task name, status, message, and optional extra data serialized as JSON. It uses a database transaction to ensure data consistency and retrieves the newly created record by its ID before returning it.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:create:cc807f910e63c0bd472de675112dff8c6a4db149abf0c7261d6327aa998d57d2:cc807f910e63c0bd472de675112dff8c6a4db149abf0c7261d6327aa998d57d2": "The `create` method inserts a new document record into the `documents` table of the database. It accepts parameters for the project ID, title, source type, source path, folder path, and metadata. The source path and folder path are normalized using helper methods `_normalize_path` and `_normalize_folder`. If no folder path is provided but a source path is given, the parent directory of the source path is used as the folder path. Metadata is serialized to JSON before being stored. The method returns the created document's data by calling `self.get(document_id)` after inserting the record. The operation is performed within a database transaction.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:create:eb053f0e0cebccc956b345ce465cb97e744e1d04cf27bd5185bb0b3401065f15:eb053f0e0cebccc956b345ce465cb97e744e1d04cf27bd5185bb0b3401065f15": "Creates a new chat entry in the database with the specified project ID and optional title and query scope. The query scope is serialized as JSON and stored with the chat. Returns the created chat's data by retrieving it using its ID.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:create:f8edfe7acd72be87a587885698d613e87ef6f5c6050ba223baf692e5bacf4867:f8edfe7acd72be87a587885698d613e87ef6f5c6050ba223baf692e5bacf4867": "The `create` method inserts a new record into the `background_task_logs` table with the specified task name, status, optional message, and optional extra data. The extra data is serialized to JSON before being stored. The method returns the created task record by calling the `get` method with the newly inserted task's ID. The operation is performed within a database transaction.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:create_tag:2834e6f164a1c2f8def0ae8e6c1ce428e5477f99572aceb73963a61a6ea938c5:2834e6f164a1c2f8def0ae8e6c1ce428e5477f99572aceb73963a61a6ea938c5": "The function `create_tag` inserts a new tag into the `tags` table of the database, associating it with a specified project. It accepts parameters for `project_id`, `name`, `description`, and `color`. The function executes an SQL `INSERT` statement to add the tag, retrieves the ID of the newly inserted row, and returns the created tag by calling `self.get_tag(tag_id)`. The operation is performed within a database transaction.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:create_tag:3bae82ac9e858f983cf6ad66f1252a08f97fd350123d29fbede236d1a6013cb3:3bae82ac9e858f983cf6ad66f1252a08f97fd350123d29fbede236d1a6013cb3": "Creates a new tag in the database with the specified project ID, name, description, and color. Returns the created tag as a dictionary. The tag is inserted into the `tags` table, and the newly created tag's data is retrieved and returned using the `get_tag` method.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:delete:1987da123591108e6f672c662dec08f3025a373c0888510ea6bb37ad467e7ff6:1987da123591108e6f672c662dec08f3025a373c0888510ea6bb37ad467e7ff6": "Deletes a document with the specified ID and updates the document counts for associated tags. The function first retrieves all tag IDs linked to the document, then removes the document from the database within a transaction. If tags exist for the document, it decrements the document count for each tag, ensuring the count does not go below zero.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:delete:7a8aacfa1efc1387607eaf8b34eb1b9813f84800d739174afbe7bcf38c64782b:7a8aacfa1efc1387607eaf8b34eb1b9813f84800d739174afbe7bcf38c64782b": "Deletes a project from the database by its ID.\n\nThis function removes a project record from the 'projects' table using a parameterized SQL DELETE statement. It operates within a database transaction context to ensure atomicity of the delete operation. The function takes a project ID as input and performs the deletion without returning any value.\n\nParameters:\n\nThe function uses a transactional connection to safely execute the DELETE operation, preventing partial updates if the operation fails.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:delete:828261f6d81ddfebb1d5cfb2079f385701f565279847d7fcbacd5fa7f6f82b14:828261f6d81ddfebb1d5cfb2079f385701f565279847d7fcbacd5fa7f6f82b14": "Deletes a chat record from the database by its ID.\n\nThis function removes a single chat entry from the 'chats' table using the provided chat_id parameter. The operation is performed within a database transaction to ensure atomicity, and uses parameterized queries to prevent SQL injection attacks. The function does not return any value upon successful completion.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:delete:aa6501783cf54c5ad0283948f580baff3b245c4ff238143f98f19d5b8d6a4c43:aa6501783cf54c5ad0283948f580baff3b245c4ff238143f98f19d5b8d6a4c43": "The `delete` method removes a chat entry from the database by its ID. It executes a SQL DELETE statement within a transactional context to ensure data consistency. The method takes a single parameter, `chat_id`, which specifies the identifier of the chat to be deleted.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:delete:af8a12171603826bb7b5fdd524cec2fceb2cdb4d0739e3bee54ea62e9161c483:af8a12171603826bb7b5fdd524cec2fceb2cdb4d0739e3bee54ea62e9161c483": "The `delete` function removes a project from the repository based on its unique identifier. It executes a SQL DELETE statement on the `projects` table, targeting the specific project by its `id`. The operation is performed within a transactional context to ensure data consistency.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:delete:de25703b8be9833948998f36b672e9c7750c1d9d06de5d5c0a9b46e1cb6dba5f:de25703b8be9833948998f36b672e9c7750c1d9d06de5d5c0a9b46e1cb6dba5f": "The `delete` function removes a document from the repository based on its ID. It first retrieves all tag IDs associated with the document. Then, within a database transaction, it deletes the document and updates the document count for each associated tag, ensuring the count does not go below zero.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:delete_by_paths:01540149eaac50329a4b65e01a5af7b3b2b368f7239f082baaff8d7cb70802d6:01540149eaac50329a4b65e01a5af7b3b2b368f7239f082baaff8d7cb70802d6": "The function `delete_by_paths` removes all ingest records from the database that are associated with the provided file paths. It accepts an iterable of paths, normalizes them to absolute form, and ensures uniqueness before processing. For each unique path, it identifies corresponding document IDs in the `ingest_documents` table, deletes related chunks using `_delete_chunks_for_documents`, and then removes the document records. The function returns the total count of deleted rows across both the `ingest_documents` table and its associated FTS index. If no valid paths are provided, it returns zero.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:delete_by_paths:6fad20b1757bc8dc26e18a5480b2bd96796aac389c77d8c03ca265304b5ffe3e:6fad20b1757bc8dc26e18a5480b2bd96796aac389c77d8c03ca265304b5ffe3e": "Deletes all ingest records associated with the provided paths. Returns the total number of rows deleted from both the ingest table and its associated FTS index. Paths are normalized to absolute form before matching, accepting either relative or absolute input values. Uses a transaction to ensure atomicity of the delete operations. Handles duplicate paths by deduplicating them before processing. For each unique path, it identifies matching records, deletes their associated chunks, and then removes the records themselves from the ingest_documents table.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:delete_tag:3acca08d923ee8464929ada4d0529f83139d9feacaedfbaeeebe65524523d9e2:3acca08d923ee8464929ada4d0529f83139d9feacaedfbaeeebe65524523d9e2": "Deletes a tag from the database by its ID within a transactional context.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:delete_tag:7be5e00866658b37cdf5e0a763762d3aa9675754d9415ee3487fe755112ce3f0:7be5e00866658b37cdf5e0a763762d3aa9675754d9415ee3487fe755112ce3f0": "The function `delete_tag` removes a tag from the repository by its ID. It executes a SQL DELETE statement within a database transaction to remove the row corresponding to the specified `tag_id` from the `tags` table.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:export_database:a4b3bfbaa333018e8d3318f4f394f21f8bac59a431ad5def437be733ce636b8d:a4b3bfbaa333018e8d3318f4f394f21f8bac59a431ad5def437be733ce636b8d": "Creates a consistent snapshot of the database at the specified destination path. If the destination is a directory, it generates a timestamped filename with the pattern `{original_db_name}-backup-{timestamp}.db`. Ensures the destination directory exists by creating it if necessary. Uses SQLite's backup API to create a consistent copy of the database connection into the destination file. Returns the absolute path to the created backup file.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:export_database:daa0828dbd18f417b241ec6ae06fbc2ef25d3e920a7b38e48aeff117d3e3e546:daa0828dbd18f417b241ec6ae06fbc2ef25d3e920a7b38e48aeff117d3e3e546": "The `export_database` function creates a consistent snapshot of the database at the specified destination. If the destination is a directory, it generates a filename with a timestamp prefix. It ensures the destination directory exists, establishes a connection to the current database, and performs a backup to the specified path using SQLite's backup functionality. The function returns the path to the created backup file.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:find_latest_completed:53a1abe94a6dd3927254cad38244680eda913772919a5023bc889f5e798e8b12:53a1abe94a6dd3927254cad38244680eda913772919a5023bc889f5e798e8b12": "Retrieves the most recently completed task record for a given task name from the database table. Returns a dictionary representation of the record, including parsed JSON data for the `extra_data` field if present, or None if no matching record is found. The query orders results by `completed_at` and `created_at` in descending order to prioritize the latest entries.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:find_latest_completed:58d9cafd34ed92e3f13e5de80ac761c5747ad0e4f8e5986c34d3cab7982d0582:58d9cafd34ed92e3f13e5de80ac761c5747ad0e4f8e5986c34d3cab7982d0582": "The function `find_latest_completed` retrieves the most recent completed record for a specified task name from a database table. It queries the table where the task name matches and the status is 'completed', ordering results by completion time and creation time in descending order to find the latest entry. The returned record includes parsed JSON data for the `extra_data` field if present. If no matching record is found, it returns `None`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:get:07793019629aed1abaeef6ceed7280ec37eaeec83aab404758aec0d9d109a1cf:07793019629aed1abaeef6ceed7280ec37eaeec83aab404758aec0d9d109a1cf": "Retrieves a specific background task log record from the database by its ID. Returns the record as a dictionary, with the `extra_data` field parsed from JSON if present. If no record is found, returns `None`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:get:1dc8adc95ce610c61ad7d9dca9b7983a82be4865b440510b6b2e5c2ddacb11d4:1dc8adc95ce610c61ad7d9dca9b7983a82be4865b440510b6b2e5c2ddacb11d4": "Retrieves a document from the database by its ID and returns it as a dictionary, or None if not found. The document data is decoded from a database row using the `_decode_document_row` method.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:get:38c8cc2c5665a4c884adbcdf5700c2ce4dee29a89eb4e96f2e9c35590e84e406:38c8cc2c5665a4c884adbcdf5700c2ce4dee29a89eb4e96f2e9c35590e84e406": "Retrieves a project record from the database by its ID and returns it as a dictionary, or None if not found. Uses a SQL query to select all columns from the `projects` table where the `id` matches the provided `project_id`. The resulting row is converted to a dictionary using the `_row_to_dict` method.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:get:437f79eef7ac268bb3b9c953f73a2c5794143f69228de53eb193a41aff2c928e:437f79eef7ac268bb3b9c953f73a2c5794143f69228de53eb193a41aff2c928e": "Retrieves a single document record from the `ingest_documents` table by its ID, returning the decoded document data as a dictionary or None if not found.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:get:4be3175c0ab6ed6cff716a62de3182ec481a0ccb2209e5ca695e37d30904488b:4be3175c0ab6ed6cff716a62de3182ec481a0ccb2209e5ca695e37d30904488b": "Retrieves a chat entry from the database by its ID and returns it as a dictionary, or None if not found. The retrieved data is decoded using the `_decode_chat_row` method.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:get:6e8dcba24e7fb53b733ae54571cf3367f634df0794df82b021d7e190eeac061a:6e8dcba24e7fb53b733ae54571cf3367f634df0794df82b021d7e190eeac061a": "Retrieves a document from the database by its ID and returns it as a dictionary, or None if not found. The document data is decoded from the database row using the `_decode_document_row` method.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:get:730e47b2297810b3b21d635734713c856c66f7d8cd20098d74a970e530b4724d:730e47b2297810b3b21d635734713c856c66f7d8cd20098d74a970e530b4724d": "Retrieves a chat record by its ID from the database and returns it as a dictionary, or None if not found. Uses a SQL query to select all columns from the chats table where the ID matches the provided value, then decodes the resulting row into a dictionary format.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:get:85113c6b720dc25e88bb4be889d5483e7d27728e6d212b74b93139c978155709:85113c6b720dc25e88bb4be889d5483e7d27728e6d212b74b93139c978155709": "Retrieves a project record from the database by its ID and returns it as a dictionary, or None if not found. Uses a database connection to execute a SELECT query on the projects table and converts the result row to a dictionary using a helper method.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:get:a4bae9e8a8b1cf15f5f45da1c2d176aa5f50f777e37f0dc2cf9e3fa8ac679b9d:a4bae9e8a8b1cf15f5f45da1c2d176aa5f50f777e37f0dc2cf9e3fa8ac679b9d": "Retrieves a document from the database by its ID and returns it as a dictionary, or None if not found. The function executes a SQL query to select all columns from the documents table where the ID matches the provided value, then decodes the resulting row into a dictionary format using a helper method.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:get:d2c2373109392565bea56e0abe5df88e2f5ce0b325aa4eae651506f0c023c9af:d2c2373109392565bea56e0abe5df88e2f5ce0b325aa4eae651506f0c023c9af": "Retrieves a single background task log record by its ID from the database table. Returns a dictionary representation of the record, with JSON-formatted extra_data field parsed into a Python object if present. Returns None if no record is found matching the provided task_id.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:get_citation:1499908680ce5d89e1de7dc2061c31b3817506be168f982eb22609606ae05781:1499908680ce5d89e1de7dc2061c31b3817506be168f982eb22609606ae05781": "Retrieves a citation record from the database by its ID and returns it as a dictionary. If no record is found, returns None.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:get_citation:2b214541f42ec900ba7189e2b3a30604095588925ac5b395dc4845527e3e39b8:2b214541f42ec900ba7189e2b3a30604095588925ac5b395dc4845527e3e39b8": "Retrieves a citation record from the database by its ID and returns it as a dictionary, or None if not found.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:get_file_version:131d65a3fee9f984304a217dc72e07a2933b81c4f50c401bd50d01f27eb59273:131d65a3fee9f984304a217dc72e07a2933b81c4f50c401bd50d01f27eb59273": "Retrieves a specific file version from the database by its ID and returns it as a dictionary. If no matching record is found, returns None.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:get_file_version:f5e7a332ec25051e39609017e94f28bd57eacd359f97f199359b66e2a70f379e:f5e7a332ec25051e39609017e94f28bd57eacd359f97f199359b66e2a70f379e": "Retrieves a file version record from the database by its ID and returns it as a dictionary, or None if not found.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:get_latest_by_path:5863ccc3d718c0e42dc0227f3d43471dd2b12b955d80c583b4caec98710bf51c:5863ccc3d718c0e42dc0227f3d43471dd2b12b955d80c583b4caec98710bf51c": "Retrieves the latest version of a document entry from the `ingest_documents` table based on the specified file path. The path is normalized to its absolute form, and the query fetches the most recent entry by `version`, returning it as a decoded dictionary or `None` if no matching record is found.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:get_latest_by_path:a04291bc82dfce99fb45c68741a1a89eaebf3ad55b32bf86d52c60132bdf051f:a04291bc82dfce99fb45c68741a1a89eaebf3ad55b32bf86d52c60132bdf051f": "Retrieves the most recent ingest document record for a specified file path, returning the decoded document data or None if no matching record is found. The function normalizes the input path to its absolute form, queries the database for records matching the path with the highest version number, and decodes the resulting row into a dictionary format.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:get_query_scope:6b407c1ddf8083fcb64ac959ad403ba517bff16f7951bd5ce805e7ccadeda226:6b407c1ddf8083fcb64ac959ad403ba517bff16f7951bd5ce805e7ccadeda226": "The function `get_query_scope` retrieves the query scope associated with a specific chat identified by `chat_id`. It first fetches the chat object using the `get` method of the repository. If the chat does not exist, it returns `None`. If the chat exists, it extracts the `query_scope` field from the chat object. The function validates that the `query_scope` is a dictionary; if not, it returns `None`. The purpose of this function is to provide access to the query scope configuration for a given chat, ensuring type safety by confirming the returned value is a dictionary.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:get_query_scope:8ee2b91a699e986e3b565854d7688f3c1d6dc014f84cbc5c78b92818a5ccf252:8ee2b91a699e986e3b565854d7688f3c1d6dc014f84cbc5c78b92818a5ccf252": "Returns the query scope dictionary for a given chat ID, or None if the chat does not exist or the query scope is not a dictionary.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:get_reasoning_summary:4e4f2ab57bf035bfa22a45a07e33e19085dbddc277dc73c785e062ffb3768a20:4e4f2ab57bf035bfa22a45a07e33e19085dbddc277dc73c785e062ffb3768a20": "Retrieves a reasoning summary from the database by its ID and returns it as a dictionary, or None if not found.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:get_reasoning_summary:d0fc7220bbceb2bc33bfbf8e54856e6370d686097a6bb151e736b500f352e337:d0fc7220bbceb2bc33bfbf8e54856e6370d686097a6bb151e736b500f352e337": "Retrieves a reasoning summary from the database by its ID and returns it as a dictionary, or None if not found.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:get_tag:7c581846d460ca2487e1309b15e1bf86bf3458f4748a06f095808ae5f7cdd819:7c581846d460ca2487e1309b15e1bf86bf3458f4748a06f095808ae5f7cdd819": "Retrieves a tag from the database by its ID and returns it as a dictionary, or None if not found.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:get_tag:e49b1644a2970bfb2dda7f76785683ca64099d1e4abdcb1b58c1e57666a4cdf7:e49b1644a2970bfb2dda7f76785683ca64099d1e4abdcb1b58c1e57666a4cdf7": "Retrieves a single tag from the database by its ID and returns it as a dictionary, or None if not found.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:import_database:08b5d998c2e8b995b146d56cf6f61371e9ae35b1cb9ac137b3b227c6fa9e5340:08b5d998c2e8b995b146d56cf6f61371e9ae35b1cb9ac137b3b227c6fa9e5340": "Imports a database from the specified source path, replacing the current database while ensuring schema compatibility. Validates that the source database exists and that its schema version is compatible with the supported version. Copies the source database to a staging location, checks its schema version, and replaces the current database with the staging file if compatible. Finally, initializes the database manager with the new database and returns the path to the imported database.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:import_database:3506d8e2c609eb3adb5d336ca0a0cd80334532b3be7ca5d767f730c24f3073d9:3506d8e2c609eb3adb5d336ca0a0cd80334532b3be7ca5d767f730c24f3073d9": "The `import_database` function replaces the current database file with a specified source database file, ensuring schema compatibility. It validates the existence of the source file, closes the current database connection, copies the source database to a staging location, checks the schema version of the staging database against the supported version, raises an error if the schema is too new, and finally replaces the current database file with the staging file after reinitializing the database manager. The function returns the path of the newly imported database.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:initialize:6a40503312a72c8aba08d6072a64e2911215bf9f63954013eb7bde7af63d829e:6a40503312a72c8aba08d6072a64e2911215bf9f63954013eb7bde7af63d829e": "Initializes the database schema by applying migrations if required. Establishes a connection and uses a transaction to ensure atomicity. Retrieves the current schema version and compares it to the expected version. If the version is zero, installs the base schema. If the version is less than the expected version, applies the necessary migrations. Raises a DatabaseError if the database schema version is newer than the application supports or if a database error occurs during initialization.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:initialize:7020c69e2e98cb8830bc9871e8892d133ce3b285889d1ab51bc41845b582170d:7020c69e2e98cb8830bc9871e8892d133ce3b285889d1ab51bc41845b582170d": "The `initialize` method bootstraps the database schema by ensuring it is up-to-date with the application's required schema version. It retrieves the current schema version, validates it against the expected version, and applies necessary migrations if the schema is outdated. If the schema is new, it installs the base schema. The operation is wrapped in a transaction to ensure atomicity. If the database version exceeds the supported version, it raises a `DatabaseError`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:list:ea0f8a2a41e370fb48c1f7c30866a44e21b8d9a98aa4f7223304bd2c9623abbe:ea0f8a2a41e370fb48c1f7c30866a44e21b8d9a98aa4f7223304bd2c9623abbe": "Returns a list of all projects from the database, ordered by creation date in ascending order. Each project is represented as a dictionary containing its attributes. Projects are retrieved through a database query and converted from row format to dictionary format using a helper method.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:list:f5eb08e980e1ebc9eb339622d15bcce360895c315c05fd068f55d930217a56da:f5eb08e980e1ebc9eb339622d15bcce360895c315c05fd068f55d930217a56da": "The function `list` retrieves all project records from the database, ordered by their creation date in ascending order. It executes a SQL query to select all columns from the `projects` table, converts each resulting row into a dictionary using a helper method `_row_to_dict`, and returns a list of these dictionaries. The function filters out any null rows before processing.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:list_all:9291de2043793f995c25215b530a279f3bec4d108abd76d0aa09c76b85a0e152:9291de2043793f995c25215b530a279f3bec4d108abd76d0aa09c76b85a0e152": "Returns a list of all ingest document records from the database, sorted by creation date in ascending order. Each record is decoded from its database representation into a dictionary format.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:list_all:d8ebbb9466b2d3788b2e0c2bb6dad227ccdd291acc2b22290d4b3c90a9622d8a:d8ebbb9466b2d3788b2e0c2bb6dad227ccdd291acc2b22290d4b3c90a9622d8a": "The function `list_all` retrieves all records from the `ingest_documents` table in the database, ordered by creation date in ascending order. It fetches all rows, decodes each row into a document dictionary using `_decode_document_row`, and filters out any None or invalid records. The result is a list of dictionaries representing the ingested documents.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:list_citations:1598af7593ddaf4a7a8019b5814fd71b0cebc9b8cfc0864760c5a455bcfac434:1598af7593ddaf4a7a8019b5814fd71b0cebc9b8cfc0864760c5a455bcfac434": "The function `list_citations` retrieves all citation records associated with a specified chat ID from the database. It executes a SQL query to select rows from the `citations` table where the `chat_id` matches the provided value, ordering the results by `created_at` in ascending order. Each retrieved row is converted to a dictionary using the helper method `_row_to_dict`, and the resulting list of dictionaries is returned. The function filters out any None values from the query results before processing.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:list_citations:7c81d7469580c040fe7e35ae5d2fd6fbe090a7ad14127b5be2f3004c04a0d114:7c81d7469580c040fe7e35ae5d2fd6fbe090a7ad14127b5be2f3004c04a0d114": "Returns a list of citation dictionaries associated with the specified chat ID, ordered by creation date in ascending order. Retrieves data from the citations table using the provided chat ID as a filter. Each citation row is converted to a dictionary format before being included in the returned list. Returns an empty list if no citations are found for the given chat ID.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:list_completed:91c7651c808951b7dab7297e63cb695c60fc49d1382bafd12e187d990cebaf61:91c7651c808951b7dab7297e63cb695c60fc49d1382bafd12e187d990cebaf61": "The function `list_completed` retrieves all completed background tasks from the database that match a specified task name. It queries the repository's table, filtering for records where the `task_name` matches the input and the `status` is 'completed'. The results are ordered by `completed_at` in descending order, with null values last, followed by `created_at` in descending order. Each retrieved row is converted into a dictionary using `_row_to_dict`, and if the record contains `extra_data`, it is parsed from JSON format. The function returns a list of these processed records.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:list_completed:c3c03cd656dcec52b24db751656234601813ab908c921c9ce61726afa8e85f95:c3c03cd656dcec52b24db751656234601813ab908c921c9ce61726afa8e85f95": "Returns a list of completed task records for a specified task name, ordered by completion time and creation time in descending order. Each record includes parsed JSON data from the extra_data field if present.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:list_file_versions:88fef4225e21099e21e01ffbc7c071f70341ed0f014c23f9218172742db43436:88fef4225e21099e21e01ffbc7c071f70341ed0f014c23f9218172742db43436": "The function `list_file_versions` retrieves all versions of a specified document from the database, ordered by version number in ascending order. It takes a `document_id` as input and returns a list of dictionaries, where each dictionary represents a row from the `file_versions` table corresponding to the given document ID. Each dictionary is constructed using the `_row_to_dict` method, which converts a database row into a dictionary format. The function filters out any null rows before returning the results.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:list_file_versions:cb8ca0a2001b11c9f972eb12239e545c873aab3f85ffb0567bbc7c888149c304:cb8ca0a2001b11c9f972eb12239e545c873aab3f85ffb0567bbc7c888149c304": "Returns a list of dictionaries representing all file versions associated with a given document ID, ordered by version number in ascending order. Each dictionary contains the column names and values from the corresponding database row.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:list_for_folder:371698cbcff5dd7cabec99a5882d690dfef528214541d2df31a606fc7fb91e65:371698cbcff5dd7cabec99a5882d690dfef528214541d2df31a606fc7fb91e65": "The function `list_for_folder` retrieves a list of documents or items within a specified folder path for a given project. It accepts a project ID, a folder path (either as a string or Path object), and an optional recursive flag to determine whether to include items in subfolders. The function delegates the actual listing operation to `self.list_for_scope`, passing the project ID, folder path, and recursive setting as arguments. It returns a list of dictionaries containing document or item details.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:list_for_folder:d3dff5af067508f74356efc8b58c0b16424bef2843a602374a811d4845232c28:d3dff5af067508f74356efc8b58c0b16424bef2843a602374a811d4845232c28": "Returns a list of documents located within a specified folder path for a given project. The function supports recursive listing of documents within subfolders and accepts either a string or Path object for the folder path. The results are returned as a list of dictionaries containing document information.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:list_for_project:35e1d77bdd6331f01716cd6a47dafb60a1d5d78d434f5ae4b537c4eda94a0289:35e1d77bdd6331f01716cd6a47dafb60a1d5d78d434f5ae4b537c4eda94a0289": "Returns a list of decoded chat records for a given project ID, ordered by creation date in ascending order. Retrieves all matching records from the chats table and filters out any None values from the decoded results.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:list_for_project:423d7aa71ad80f99e961f8ee57d612dce8d03270ee97385693083671caeb2c48:423d7aa71ad80f99e961f8ee57d612dce8d03270ee97385693083671caeb2c48": "Returns a list of decoded document records for a given project ID, ordered by creation date in ascending order. Retrieves all documents from the database where the project ID matches the provided value, decodes each row using `_decode_document_row`, and filters out any None or empty records from the result.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:list_for_project:78fb98ab692e0f02e992899b0d596b414061753c5ef9420f50e022f6036bab7b:78fb98ab692e0f02e992899b0d596b414061753c5ef9420f50e022f6036bab7b": "Returns a list of decoded chat records associated with a specified project ID, ordered by creation date in ascending order. Each chat record is retrieved from the database using a SELECT query filtered by `project_id`, and then decoded using the `_decode_chat_row` method. Empty or invalid records are excluded from the final result.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:list_for_project:a27984aa33b3db0a08a9b16aedb9f2991251b46cf3f18dfa50b4d2492e67a0ac:a27984aa33b3db0a08a9b16aedb9f2991251b46cf3f18dfa50b4d2492e67a0ac": "Returns a list of decoded document records associated with a given project ID, ordered by creation date in ascending order. Each record is retrieved from the database using a SQL query that filters documents based on the specified project ID. The method applies a decoding function to each database row and includes only non-null results in the final output list.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:list_for_scope:2748b9bf288445a1547040e4d78956e402bae52f30536212da2a10f81b587c99:2748b9bf288445a1547040e4d78956e402bae52f30536212da2a10f81b587c99": "The function `list_for_scope` retrieves a list of documents from the database that match specified criteria within a given project. It supports filtering by tags and folder path, with an option to perform recursive folder matching. The results are ordered by creation date in ascending order. The function constructs a SQL query dynamically based on provided parameters, including joins for tag-based filtering and appropriate WHERE clauses for folder and tag conditions. It returns a list of decoded document records that match the query results.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:list_for_scope:ae3733e184a99466ae20ec062a0c798e4cdbd9fd38b2adc086748d88012b55b9:ae3733e184a99466ae20ec062a0c798e4cdbd9fd38b2adc086748d88012b55b9": "The function `list_for_scope` retrieves a list of documents from the database based on specified filtering criteria. It accepts parameters to scope the results by project ID, optional tags, folder path, and recursion settings. The function constructs a dynamic SQL query that joins the `documents` table with `tag_links` if tag-based filtering is applied, and includes conditions for folder paths, either exact matches or recursive patterns. It supports grouping and having clauses to ensure all specified tags are matched when filtering by tags. The resulting rows are decoded into document records and returned as a list of dictionaries.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:list_for_tag:21154dd0ff3ba6be1b0c69d8da3001156a6f5bd0b454ad7ba7c110e98ccd2773:21154dd0ff3ba6be1b0c69d8da3001156a6f5bd0b454ad7ba7c110e98ccd2773": "Returns a list of documents filtered by a specific tag within a given project. The function retrieves documents that are associated with the specified tag ID and belong to the specified project ID. It delegates the actual filtering logic to the `list_for_scope` method, passing the project ID and a list containing only the specified tag ID as parameters. The result is a list of dictionaries representing the filtered documents.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:list_for_tag:9689f6f7d29412715f9355c0a489efc6e2d92f76d862698c227241853e0b1bcd:9689f6f7d29412715f9355c0a489efc6e2d92f76d862698c227241853e0b1bcd": "The function `list_for_tag` retrieves a list of items associated with a specific tag within a given project. It takes a `project_id` and a `tag_id` as parameters and returns a list of dictionaries containing item details. The implementation delegates the actual retrieval logic to the `list_for_scope` method, passing the `project_id` and a list containing the `tag_id` as the scope filter.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:list_incomplete:abbff7bdaa08c853894c17e87e40853ff571ee0bec38f367b7dc73bdadc4c277:abbff7bdaa08c853894c17e87e40853ff571ee0bec38f367b7dc73bdadc4c277": "Returns a list of dictionaries representing incomplete background task log entries from the database table. The entries have a status of 'queued', 'running', or 'paused', and are ordered by their creation time in ascending order. Each record includes parsed JSON data for the 'extra_data' field if present.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:list_incomplete:d2500bdd31462a79dbacfde62626e276dccc59d44f10837126b2e67b51c20e51:d2500bdd31462a79dbacfde62626e276dccc59d44f10837126b2e67b51c20e51": "The function `list_incomplete` retrieves all records from the repository's database table where the status is either 'queued', 'running', or 'paused'. It orders the results by creation time in ascending order. Each retrieved row is converted into a dictionary, and if the record contains extra data, it is parsed from JSON format. The function returns a list of these processed records.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:list_reasoning_summaries:348aeb2a3e47cf096cb6f5f80b0ed907d312e4b8e2955b70b9d51b5b9d87a4b9:348aeb2a3e47cf096cb6f5f80b0ed907d312e4b8e2955b70b9d51b5b9d87a4b9": "Returns a list of dictionaries containing reasoning summary records for a given chat ID, ordered by creation date in ascending order. Each dictionary represents a single reasoning summary entry from the database table `reasoning_summaries`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:list_reasoning_summaries:3637689a08f61a064836a265bbb42d017b83879c1ae0330dfa0c692d15acd3bd:3637689a08f61a064836a265bbb42d017b83879c1ae0330dfa0c692d15acd3bd": "The function `list_reasoning_summaries` retrieves all reasoning summaries associated with a specified chat ID from the database. It executes a SQL query to select rows from the `reasoning_summaries` table where the `chat_id` matches the provided value, ordering the results by `created_at` in ascending order. Each retrieved row is converted to a dictionary using the `_row_to_dict` helper method, and the function returns a list of these dictionaries, excluding any None values.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:list_tags_for_document:240f98467889fe9b37a98dcf9d5caae30051442371c2cd9738398806de9d8650:240f98467889fe9b37a98dcf9d5caae30051442371c2cd9738398806de9d8650": "Returns a list of tag dictionaries associated with a specified document ID, ordered by tag name. The function retrieves tags from the database by joining the `tags` table with the `tag_links` table, filtering by the provided document ID. Each tag is converted to a dictionary using the `_row_to_dict` helper method.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:list_tags_for_document:2f6dbaa6484c2f964f07b090e95aeef98b0c01047b34b624f8172a5318c7638f:2f6dbaa6484c2f964f07b090e95aeef98b0c01047b34b624f8172a5318c7638f": "Returns a list of tag dictionaries associated with the specified document ID, ordered by tag name. Retrieves tags through an inner join with the tag_links table to establish the relationship between tags and documents. Each tag dictionary is constructed from database rows using the repository's `_row_to_dict` method.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:list_tags_for_project:497ebae3f1acda6251e993e2bf3a14c5aacf12a5241a93f427f565ecf5dcc9d1:497ebae3f1acda6251e993e2bf3a14c5aacf12a5241a93f427f565ecf5dcc9d1": "The function `list_tags_for_project` retrieves all tags associated with a specified project from the database. It executes a SQL query to select all columns from the `tags` table where the `project_id` matches the provided argument, ordering the results by tag name in ascending order. Each retrieved row is converted into a dictionary using a helper method `_row_to_dict`, and the resulting list of dictionaries is returned. The function filters out any null rows before processing.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:list_tags_for_project:da0ba3e054b1e3df393d597225097de1d76f9eeb6e8cf31dfec5df38e92f56d8:da0ba3e054b1e3df393d597225097de1d76f9eeb6e8cf31dfec5df38e92f56d8": "Returns a list of tag dictionaries for a given project ID, ordered by tag name. Retrieves all tags from the database where the project ID matches the provided value, converts each database row to a dictionary using a helper method, and filters out any null rows.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:list_versions:1a60aa00116b60478d4361a15e6f5fc98892e768d88c219373f006ed9fc78b51:1a60aa00116b60478d4361a15e6f5fc98892e768d88c219373f006ed9fc78b51": "Returns a list of document versions for a given file path, ordered by version in descending order. The function queries the database for records matching the normalized absolute path and decodes each row into a dictionary representation, filtering out any None values.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:list_versions:b62cca68c1360d91c529927c6680e276933d110251eea621a184367838291c2a:b62cca68c1360d91c529927c6680e276933d110251eea621a184367838291c2a": "The function `list_versions` retrieves all versions of a document stored in the database, identified by its file path. It takes a file path as input, normalizes it to an absolute string, and queries the `ingest_documents` table for records matching that path. The results are ordered by version in descending order. Each retrieved row is decoded into a dictionary format using a helper method `_decode_document_row`, and only non-null records are included in the final list, which is returned as a list of dictionaries.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:refresh_tag_counts:2a0745b635043a10754bc1b181eaac153115293fbe4337fda06a89c9bf226f94:2a0745b635043a10754bc1b181eaac153115293fbe4337fda06a89c9bf226f94": "Updates the document count for tags in the database. If no project ID is provided, updates counts for all tags based on total linked documents. If a project ID is provided, updates counts only for tags within that project, considering only documents belonging to the specified project.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:refresh_tag_counts:ae84239d3c53314b0a741d775838996bf612777f9f8bb7740ff0274d68262d14:ae84239d3c53314b0a741d775838996bf612777f9f8bb7740ff0274d68262d14": "The `refresh_tag_counts` function updates the `document_count` field in the `tags` table to reflect the number of documents associated with each tag. If no `project_id` is provided, it updates counts for all tags across the database. If a `project_id` is specified, it updates counts only for tags within that project, considering only documents belonging to the specified project. The function uses SQL queries to calculate and assign the counts based on the relationships defined in the `tag_links` and `documents` tables.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:search:9e57cafd8c8df8a83ab22f9ff675951ce1bc3058c5bc9740f23b30a4651510c5:9e57cafd8c8df8a83ab22f9ff675951ce1bc3058c5bc9740f23b30a4651510c5": "The function `search` in the `IngestDocumentRepository` class performs a document search operation based on a provided query string. It accepts a query parameter of type `str` and an optional `limit` parameter of type `int` with a default value of 5. The function delegates the search functionality to the `search_chunks` method, passing along the query and limit parameters, and returns a list of dictionaries containing the search results. Each dictionary in the returned list represents a chunk of text that matches the query, along with associated metadata.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:search:c91be743e254dc766ceb53068e5256bf4bbf9901f9e59f5e03119a03a4b4dc84:c91be743e254dc766ceb53068e5256bf4bbf9901f9e59f5e03119a03a4b4dc84": "The function `search` in the `IngestDocumentRepository` class performs a search operation using the provided query string and returns a list of dictionaries containing search results. It accepts an optional `limit` parameter to control the number of results returned, defaulting to 5. The function delegates the actual search logic to the `search_chunks` method, passing along the query and limit parameters.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:search_chunks:1b7e989112f9f19246622662c1eee55b9e0f172d4b1631c787487ce232f8e437:1b7e989112f9f19246622662c1eee55b9e0f172d4b1631c787487ce232f8e437": "The function `search_chunks` performs a full-text search on indexed document chunks using a provided query string. It retrieves matching chunks with their associated document metadata, snippet highlights, and BM25 scores. The results are ordered by score and chunk index, limited by the specified number of matches. Each result includes the chunk data, document information, highlighted text, score, and file path. If no matches are found, it returns an empty list.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:search_chunks:c59dfec1d6e65d2c535af40d6e92a50ba236a0e2b083fb4246a7dd821cde3bc9:c59dfec1d6e65d2c535af40d6e92a50ba236a0e2b083fb4246a7dd821cde3bc9": "The function `search_chunks` retrieves indexed document chunks matching a given query, returning a list of dictionaries containing chunk details, associated document information, highlighted snippets, and relevance scores. It uses SQLite's full-text search capabilities to find matches, orders results by score and chunk index, and limits the output based on a specified number of results. The function joins indexed data with chunk text and metadata, and includes logic to fetch related document information for each matched chunk.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:set_query_scope:169cb3d7216cf5e8b7e3abc47a6d2f9eba4e99d9239d68b28502997d96ea6b31:169cb3d7216cf5e8b7e3abc47a6d2f9eba4e99d9239d68b28502997d96ea6b31": "The function `set_query_scope` updates the query scope for a specified chat session in the database. It accepts a chat ID and a scope dictionary (or None), serializes the scope to JSON, and stores it in the `chats` table under the `query_scope` column. The function uses a database transaction to ensure atomicity of the update operation. After updating, it retrieves and returns the updated chat record by calling the `get` method with the provided chat ID. If the scope is None, it stores a NULL value in the database.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:set_query_scope:dd0876769abdf8fb6971383b90a0885f71ed93b2c9f3509e1614221c395acf59:dd0876769abdf8fb6971383b90a0885f71ed93b2c9f3509e1614221c395acf59": "Updates the query scope for a specified chat and returns the updated chat object. The function serializes the provided scope dictionary to JSON format and stores it in the database under the `query_scope` column for the given chat ID. If the scope is None, it stores a NULL value. The function uses a database transaction to ensure data consistency and then retrieves and returns the updated chat record.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:store_version:0a1e0333a3db99b38a0a8971c9a2345a1be03b4b75ed9700f1baac8a6ee89a98:0a1e0333a3db99b38a0a8971c9a2345a1be03b4b75ed9700f1baac8a6ee89a98": "The `store_version` method stores a versioned representation of a parsed document into the database. It computes metadata, normalized text, and preview content from the input `ParsedDocument`, then inserts this data into the `ingest_documents` table with a new version number derived from existing entries for the same path. If prior versions exist, it removes their associated chunks and replaces them with new chunks based on the current document's text. The method returns the stored document record.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:store_version:de9a700369211a280b2cf16d4d3b28ff1fa8bbc9ab992dbf56b67a25c3341865:de9a700369211a280b2cf16d4d3b28ff1fa8bbc9ab992dbf56b67a25c3341865": "Stores a new version of a document in the repository, updating metadata, text, sections, and pages while managing versioning and associated chunks. It calculates the next version number based on existing versions, inserts the new document record with normalized text and preview, and handles cleanup of previous versions' chunks before inserting new ones. Returns the stored document's data.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:tag_document:9d62a62826865c3b129620e11abebc166997495ff64252d196ccd8a2ede343c5:9d62a62826865c3b129620e11abebc166997495ff64252d196ccd8a2ede343c5": "The function `tag_document` associates a document with a tag by inserting a record into the `tag_links` table. If the insertion is successful (indicated by `cursor.rowcount` being non-zero), it updates the `document_count` field in the `tags` table for the specified tag ID, incrementing it by one. The operation is performed within a database transaction to ensure consistency.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:tag_document:b1403edaddc7019ad341762277cda1ac89e37c573a32dc65462d16ba9fccbee2:b1403edaddc7019ad341762277cda1ac89e37c573a32dc65462d16ba9fccbee2": "The function `tag_document` associates a document with a tag by inserting a record into the `tag_links` table. If the insertion is successful (indicated by `cursor.rowcount`), it updates the `document_count` field in the `tags` table to reflect the addition of the document to the tag. The operation is executed within a database transaction to ensure data consistency.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:transaction:00eaf402bed61bb78aeb4512afa528b045c1e45f952873571f4bceabff1c9466:00eaf402bed61bb78aeb4512afa528b045c1e45f952873571f4bceabff1c9466": "This function provides a context manager for database transactions. It yields a database connection from the repository's database instance within a transactional context, ensuring that any operations performed on the yielded connection are part of a single atomic transaction that will be committed if successful or rolled back if an exception occurs.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:transaction:47166bbe95830c6c2581b2205cc9dbcb72a1cf1fb55d26097cd0ec17268adf0f:47166bbe95830c6c2581b2205cc9dbcb72a1cf1fb55d26097cd0ec17268adf0f": "This function provides a context manager for executing database operations within a transaction. It creates a database connection, yields the connection to the calling code, and ensures that all operations are wrapped in a transaction. If a database error occurs during the transaction, it raises a `DatabaseError` exception with the original error message. The function uses Python's context manager protocol to automatically handle transaction commit or rollback.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:transaction:544983be2f1f4f5698a1995c5e8daed60153d13b98e8d80064a4dc7268166462:544983be2f1f4f5698a1995c5e8daed60153d13b98e8d80064a4dc7268166462": "The function `transaction` provides a context manager for database transactions within the `BaseRepository` class. It yields a SQLite database connection obtained from `self.db.transaction()`, enabling operations to be executed within a transactional scope. The function is iterable, allowing it to be used in a `with` statement to ensure proper handling of database connections and transactions.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:transaction:5db37a83ede194ec8eada439c6b26da20fcf8a6750d9f94af2506e3d61035799:5db37a83ede194ec8eada439c6b26da20fcf8a6750d9f94af2506e3d61035799": "The function `transaction` is a context manager that facilitates database operations within a transactional scope. It establishes a database connection, yields the connection for use in a `with` block, and ensures that the transaction is committed if no exceptions occur. If a `sqlite3.DatabaseError` is raised during the operation, it is caught and re-raised as a `DatabaseError`. The function uses `Iterable[sqlite3.Connection]` to indicate that it yields a database connection object.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:untag_document:27ae38cb5062254b861ad8cc59b41ae9515f928cf89daa87880dd646a39d723b:27ae38cb5062254b861ad8cc59b41ae9515f928cf89daa87880dd646a39d723b": "Removes a tag from a document and decrements the tag's document count if the tag was successfully removed.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:untag_document:cb9d852542344aa23776155e027004ed32ceb4f0df3d40cf85265922d3bd0f9d:cb9d852542344aa23776155e027004ed32ceb4f0df3d40cf85265922d3bd0f9d": "The function `untag_document` removes the association between a specified document and tag in the repository. It performs the following actions within a database transaction:\n\n1. Deletes the record from the `tag_links` table where the `tag_id` and `document_id` match the provided values.\n2. If the deletion affects rows (i.e., the link existed), it updates the `tags` table to decrement the `document_count` for the specified tag, ensuring it does not go below zero.\n\nThis function is used to remove a tag from a document and adjust the tag's document count accordingly.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:update:199fa017550d2a00c21b460364dd5d7bc2244bea155e0b2bb72399419d480a6e:199fa017550d2a00c21b460364dd5d7bc2244bea155e0b2bb72399419d480a6e": "Updates fields of a document identified by `document_id` with the provided values and returns the updated document. If no fields are provided, retrieves and returns the document without modification. Handles normalization of file paths and folder paths, and serializes metadata to JSON format before updating. Uses a transaction to ensure atomicity of the update operation.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:update:36c969aac8b78014f71632c91a2f4eb20fbdd88bc0a12a7135624541e52e1c3c:36c969aac8b78014f71632c91a2f4eb20fbdd88bc0a12a7135624541e52e1c3c": "Updates a background task log entry with the provided status, message, extra data, or completion timestamp. Returns the updated task log as a dictionary, or None if no updates are specified. Uses a transaction to ensure atomicity of the update operation.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:update:49462b441aa07196b278f33079bda4935987086a6b941418e10097bd8947918c:49462b441aa07196b278f33079bda4935987086a6b941418e10097bd8947918c": "The `update` method in the `DocumentRepository` class modifies specified fields of a document identified by `document_id`. It accepts keyword arguments representing the fields to update and their new values. The method processes special fields such as `metadata` (converted to JSON) and `source_path` (normalized and used to derive `folder_path` if not provided). It constructs an SQL `UPDATE` statement to apply the changes and returns the updated document as a dictionary, or `None` if no fields are provided. The update is executed within a transactional context.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:update:5b21a7abfb7abf0d584ef4f2c7f368e41d2b1df43d4ef4ff1330205efcf32db9:5b21a7abfb7abf0d584ef4f2c7f368e41d2b1df43d4ef4ff1330205efcf32db9": "Updates project fields in the database and returns the updated project data.\n\nThis function modifies specific columns of a project record identified by its ID. It constructs an UPDATE SQL statement with the provided field names and values, then executes the update within a database transaction. The function returns the updated project data as a dictionary, or None if no fields are provided. If no fields are specified, it retrieves and returns the current project data without making any changes.\n\nParameters:\n\nReturns:",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:update:9bf92fa5c9ad544fffaf9101d8ad62e35dc5f3a3c0279bf1f099d39e79aaf2be:9bf92fa5c9ad544fffaf9101d8ad62e35dc5f3a3c0279bf1f099d39e79aaf2be": "The `update` method in the `BackgroundTaskLogRepository` class modifies specific fields of a background task record identified by `task_id`. It accepts optional parameters for `status`, `message`, `extra_data`, and `completed_at`, updating only those fields that are provided. The method constructs an SQL `UPDATE` statement dynamically based on the provided fields, and executes it within a transaction. If no fields are specified for update, the method retrieves and returns the current task record. The `extra_data` parameter is serialized to JSON before being stored. The method returns the updated task record as a dictionary, or `None` if the task is not found.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:update:b5e1ddd590d0d7cac9077d9c19c0ed9f778a2c312b10736576df7476675888a3:b5e1ddd590d0d7cac9077d9c19c0ed9f778a2c312b10736576df7476675888a3": "The `update` method in the `ProjectRepository` class updates specific fields of a project record in the database based on the provided `project_id`. It constructs an SQL `UPDATE` statement using the given fields and their values, and executes the update within a transactional context. If no fields are provided, it retrieves and returns the current project data. The method returns the updated project data as a dictionary or `None` if no fields are specified.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\__init__.py:f3dfd83e3a721edb81da2ca69569a47842ef80e23f89b88351f85db46dbd1863:f3dfd83e3a721edb81da2ca69569a47842ef80e23f89b88351f85db46dbd1863": "This module provides UI components for a DataMiner application. It exports four classes: AnswerView for displaying answers, EvidencePanel for showing evidence, MainWindow as the primary application window, and QuestionInputWidget for handling question input. The module serves as a centralized import point for all UI components used in the DataMiner application's graphical interface.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:2e231d170980a9f74dbe8b26016888f04c8d0db5076a377a06da3885a7419d97:2e231d170980a9f74dbe8b26016888f04c8d0db5076a377a06da3885a7419d97": "Defines widgets for displaying conversation turns with metadata and interactive elements. Includes a `TurnCardWidget` to render individual turns with question, answer, metadata, citations, and optional sections like reasoning and plan. Provides functionality for copying text, selecting citations, and adjusting layout density. An `AnswerView` widget manages a scrollable list of turn cards, supporting rendering multiple turns and highlighting citations across the view.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:AnswerView:09085b0e4f0d5de62facacb497f10747b1a1f9bb9c73beb5db6eaaf1ea6bb8ff:09085b0e4f0d5de62facacb497f10747b1a1f9bb9c73beb5db6eaaf1ea6bb8ff": "The `AnswerView` class is a PyQt6-based widget designed to display and manage conversation turns in a scrollable interface, using `TurnCardWidget` objects to render individual responses. It supports rendering, adding, clearing, and highlighting conversation turns, as well as updating their layout density and applying settings. The class maintains an internal list of cards and ensures the view scrolls to the latest content while handling citation activation events.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:AnswerView:__init__:66357358a17687a5a703a6ed41cb7c6a10ba2804c993e94f97c50ee6ed191e90:66357358a17687a5a703a6ed41cb7c6a10ba2804c993e94f97c50ee6ed191e90": "Initializes a scrollable container for displaying conversation turn cards with configurable density and settings synchronization. Configures layout margins, spacing, and widget resizing behavior. Sets up connections to update card display when specific settings change.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:AnswerView:_apply_settings_to_cards:4073ebdc6e26f086ad125838969cb8ac12c15c17f58e23cedfd9184db4c7a87b:4073ebdc6e26f086ad125838969cb8ac12c15c17f58e23cedfd9184db4c7a87b": "The function applies a set of settings to each card in a collection. It iterates through all cards stored in `self._cards` and calls the `apply_settings` method on each card, passing `self._settings` as an argument to configure them.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:AnswerView:_emit_citation:cbd1360dc758a344f060ac2e70f6603f70e3fc4310e2d0dd6c25837bbf246a63:cbd1360dc758a344f060ac2e70f6603f70e3fc4310e2d0dd6c25837bbf246a63": "This function emits a citation activated signal with parameters including a TurnCardWidget instance and an integer index.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:AnswerView:_scroll_to_bottom:5583e7ad60efa98ff33882a1f6dc12a74b315e323d42d160e9315f8b65dbcdd0:5583e7ad60efa98ff33882a1f6dc12a74b315e323d42d160e9315f8b65dbcdd0": "Function scrolls a vertical scrollbar to its bottom position by setting the scroll bar's value to its maximum value. The function retrieves the vertical scrollbar from the current object and checks if it exists before attempting to modify its value. If no vertical scrollbar exists, the function performs no action.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:AnswerView:add_turn:92b9acce4a132612b92460b2d1fa6a550a28d12919a48786f6cc24944c1bf79f:92b9acce4a132612b92460b2d1fa6a550a28d12919a48786f6cc24944c1bf79f": "Adds a new conversation turn to the interface by creating a turn card widget, inserting it into the layout, connecting its citation signal, setting initial citation selection and density, scrolling to the bottom, and returning the created card.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:AnswerView:cards:2023bc90fbedc595f4cfae9bcb89bfd3ba49f1c81536ae7d7cbd1b7b886f2f96:2023bc90fbedc595f4cfae9bcb89bfd3ba49f1c81536ae7d7cbd1b7b886f2f96": "Returns a list copy of the TurnCardWidget objects stored in the internal _cards collection.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:AnswerView:clear:9124a8bd507127d7795996551d2f94ee2f1819067a2266a27e18becf5ea42035:9124a8bd507127d7795996551d2f94ee2f1819067a2266a27e18becf5ea42035": "Function clears all cards from a collection by removing parent references and then emptying the collection.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:AnswerView:highlight_citation:273b609b6cfff69b600f14464135bdf61b8214bce694b42908560b3d797c1b4e:273b609b6cfff69b600f14464135bdf61b8214bce694b42908560b3d797c1b4e": "Function that manages citation highlighting across a collection of cards. Takes a card widget and an index value as parameters. Iterates through all cards in the instance's card collection. When the current card matches the provided card parameter, it calls the set_selected_citation method on that card with the provided index. For all other cards, it calls the set_selected_citation method with a None value. This effectively highlights only the specified citation in the specified card while clearing selection in all other cards.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:AnswerView:render_turns:9653e22fa1199e73541998eaec4f23b54e4e770f960036d66467613234ce24ba:9653e22fa1199e73541998eaec4f23b54e4e770f960036d66467613234ce24ba": "Function renders conversation turns by clearing existing content and adding each turn from an iterable of conversation turns.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:AnswerView:set_density:9924e38244b49be32d2f6695c2af213a89db2fba00c639c28c45793f09db5c5a:9924e38244b49be32d2f6695c2af213a89db2fba00c639c28c45793f09db5c5a": "Sets the density of the component to either \"compact\" or \"comfortable\" based on input, updating internal state and layout spacing accordingly. Updates all contained cards with the new density setting.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:AnswerView:to_plain_text:ce4de01da877405186eb07d430fef9975678b7227ce4f7b6d3cf650de54ade24:ce4de01da877405186eb07d430fef9975678b7227ce4f7b6d3cf650de54ade24": "This function converts a collection of cards into a plain text representation by joining their individual plain text outputs with double newlines.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:TurnCardWidget:__init__:f9730910822d31a0172c835e7830e76d4bde66b610ab16a4e68028604b42d899:f9730910822d31a0172c835e7830e76d4bde66b610ab16a4e68028604b42d899": "Initializes a widget for displaying conversation turn data with components for question, answer, metadata, citations, and structured reasoning sections. Configures layout, connects signals, and applies initial settings.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:TurnCardWidget:_apply_turn_data:1396b723daacac0cbb9b8f4185582d4d9b06324473def5ed8a46b2aad5b9a708:1396b723daacac0cbb9b8f4185582d4d9b06324473def5ed8a46b2aad5b9a708": "Function updates UI elements with data from a turn object, including timestamps, latency, token usage, reasoning bullets, plan items, step results, assumptions, assumption decisions, and self-check information. It formats and displays this data in various sections of the interface.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:TurnCardWidget:_copy_answer:0fda315afdb60f2cc6da4ae3dcff1d33c08a1720472ae6971ab6b22008569783:0fda315afdb60f2cc6da4ae3dcff1d33c08a1720472ae6971ab6b22008569783": "Copies the text content from an answer browser component to the system clipboard and displays a notification message indicating the copy operation was successful.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:TurnCardWidget:_copy_citations:4d2ec90891b0b3184b63e37cebca8c398633661c8d0890e26cf062145eb588d6:4d2ec90891b0b3184b63e37cebca8c398633661c8d0890e26cf062145eb588d6": "Copies the plain text content from a citations browser component to the system clipboard and displays a notification message indicating the copy operation was completed.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:TurnCardWidget:_create_section:5be5c818d9e6e10d8d66dd5b544c8616f9b2289ada6fa1c815d3075162b1b431:5be5c818d9e6e10d8d66dd5b544c8616f9b2289ada6fa1c815d3075162b1b431": "Creates a QFrame widget with a title label and content label, sets up layout with specified margins and spacing, configures title label with bold font styling, assigns object names for CSS styling, and populates the content using a helper method. Returns the configured frame widget.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:TurnCardWidget:_on_anchor_clicked:616c77baa18589230a8cd4b1f77fc66cb711ea38eacb668478430c5be13d8299:616c77baa18589230a8cd4b1f77fc66cb711ea38eacb668478430c5be13d8299": "Handles URL anchor clicks in a Qt application, specifically processing citation links by extracting an index from the URL target string and emitting signals to update citation selection and notify activation events.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:TurnCardWidget:_render_answer:cc2c5ffa37d2ef52b4e69b99307472be44ed4997e020d12f732673eca4fd9bb6:cc2c5ffa37d2ef52b4e69b99307472be44ed4997e020d12f732673eca4fd9bb6": "Function processes and displays an answer with citation links and highlighting in a browser widget. It escapes HTML special characters in the answer text, converts newlines to line breaks, and replaces citation placeholders with hyperlinks. Selected citations are highlighted with a background color. The formatted answer including embedded CSS styling is set into a browser component.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:TurnCardWidget:_render_citations:f838452bc4ff3861c29fb59fa4831b8e2bb9d3d0a7683501b555bc7f76d5aada:f838452bc4ff3861c29fb59fa4831b8e2bb9d3d0a7683501b555bc7f76d5aada": "Function renders citations for a turn into an HTML format within a browser widget. It handles different citation types, including strings and dictionaries, extracting relevant labels and formatting steps if present. Selected citations are highlighted with a background color. If no citations exist, it displays a default message. The rendered HTML is set to the browser widget.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:TurnCardWidget:_set_section_content:caf547504b260a729004f9c0b7d0f6dfedf65d667db3c81f023b9868b1b8ece1:caf547504b260a729004f9c0b7d0f6dfedf65d667db3c81f023b9868b1b8ece1": "Sets the content of a section's label widget with filtered text lines and controls the section's visibility based on whether content exists.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:TurnCardWidget:apply_settings:c87d39eeeeb649cf75d979677fb7f010679a51051471b40825e6fdab3c7b85eb:c87d39eeeeb649cf75d979677fb7f010679a51051471b40825e6fdab3c7b85eb": "Function configures visibility of conversation sections based on provided settings and turn data. Updates internal settings reference and modifies visibility of plan, step results, and assumptions sections according to specified conditions. Plan section visibility depends on settings flag and presence of turn plan. Step results section visibility depends on presence of turn step results. Assumptions section visibility depends on settings flag and either presence of turn assumptions or assumption decision.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:TurnCardWidget:f39b613f53e82c10f424487c1aa4f2985e3c6474c096f34d7a0b115f4604481b:f39b613f53e82c10f424487c1aa4f2985e3c6474c096f34d7a0b115f4604481b": "The `TurnCardWidget` class is a PyQt6-based UI component designed to display and manage conversation turn data within a document processing and question-answering application, including elements like questions, answers, metadata, and citations. It supports rendering formatted text, handling citation selection and copying, and adjusting visual density settings for better presentation. The widget also manages the visibility of various sections such as reasoning steps, plans, and assumptions based on configuration settings.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:TurnCardWidget:selected_citation:178afa9ca79ff28709cdff251cced236d6f6a00b5f8519420900830a06e5e76f:178afa9ca79ff28709cdff251cced236d6f6a00b5f8519420900830a06e5e76f": "Function that returns the value of the private attribute `_selected_citation`, which can be either an integer or None.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:TurnCardWidget:set_density:23b4396a8fef7cad1633543cbdf54783e5632c64be8489eb6123e8d9131eb8c0:23b4396a8fef7cad1633543cbdf54783e5632c64be8489eb6123e8d9131eb8c0": "Function sets the density of a layout to either \"compact\" or \"comfortable\" based on input string. Updates internal density state and adjusts margins, spacing, and layout parameters accordingly. Modifies content margins and spacing for main layout and actions row. Adjusts spacing within multiple section layouts based on density setting.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:TurnCardWidget:set_selected_citation:0f62ddfd8f02692757aa07b8915bf86669be10a8fce9c4e5587a34faa4fcfb63:0f62ddfd8f02692757aa07b8915bf86669be10a8fce9c4e5587a34faa4fcfb63": "Function sets the selected citation index, updates internal state, and triggers re-rendering of both answer and citations display.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:TurnCardWidget:to_plain_text:4ed0e7bf604ad839defb0954cefbb63922bc8c69098a59e224eb06d13437a57a:4ed0e7bf604ad839defb0954cefbb63922bc8c69098a59e224eb06d13437a57a": "Function that extracts text content from various UI components and combines them into a single plain text string. Retrieves text from question label, answer browser, metadata label, and citations browser. Additionally collects text from multiple sections containing reasoning, plan, step results, assumptions, and self-check information. Each section's title and content are concatenated with a colon separator when the section is visible and contains text. Returns the combined text with empty entries filtered out, joined by newline characters.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:__init__:00ccdd28a71c52ba350df03568ef23131d25f8f81a9a9e4184ca9d92665decf2:00ccdd28a71c52ba350df03568ef23131d25f8f81a9a9e4184ca9d92665decf2": "Initializes the `AnswerView` widget with provided conversation settings and progress service. Sets up a scrollable container with a vertical layout to hold turn cards, configures spacing and margins, and connects setting change signals to update displayed cards. The view is initialized with a \"comfortable\" density setting.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:__init__:4a51b30dac5bc59baefd5ca1af238588a5acae6342b82be517d06839804ba5cc:4a51b30dac5bc59baefd5ca1af238588a5acae6342b82be517d06839804ba5cc": "Initializes a `TurnCardWidget` instance for displaying conversation turn data. The widget includes components for showing the question, answer, metadata, and citations, along with sections for reasoning, plan, step results, assumptions, and self-check. It sets up layouts, connects signals, and applies initial data and settings. The widget is styled as a panel and supports copying answer and citation text.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:__init__:9b3ff2af7a28e337b5c3bb56d3c5372f70e80a285fe7794868fdb976f21ea632:9b3ff2af7a28e337b5c3bb56d3c5372f70e80a285fe7794868fdb976f21ea632": "Initializes a `TurnCardWidget` instance, setting up the UI components and layout for displaying conversation turn data. The widget includes labels for the question and metadata, a text browser for the answer, a text browser for citations, and collapsible sections for reasoning, plan, step results, assumptions, and self-check. It also adds copy buttons for the answer and citations. The widget is initialized with a conversation turn, settings, and a progress service, and applies initial data and settings.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:__init__:c90f269ab7fa67c2af63853f6909070d96d6e0c0ca111de1fac79da082b88d58:c90f269ab7fa67c2af63853f6909070d96d6e0c0ca111de1fac79da082b88d58": "Initializes the AnswerView widget with provided settings and progress service. Sets up a scroll area container with a vertical layout, configures spacing and margins, and establishes connections to apply setting changes to displayed cards. Initializes an empty list of turn cards and sets the initial display density to \"comfortable\".",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:_apply_settings_to_cards:4a670088a2a125f980bc37efc4bad91a3355525ed4460f6a42f581bf442cc983:4a670088a2a125f980bc37efc4bad91a3355525ed4460f6a42f581bf442cc983": "The function `_apply_settings_to_cards` iterates through all cards stored in `self._cards` and applies the current settings from `self._settings` to each card by calling the `apply_settings` method on the card. This ensures that each card reflects the latest configuration specified in the settings.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:_apply_settings_to_cards:fd4388fd603231fc29aa5d24c40566bdc25d001fbf137644eb13401bbcb24282:fd4388fd603231fc29aa5d24c40566bdc25d001fbf137644eb13401bbcb24282": "The function `_apply_settings_to_cards` iterates through all cards stored in `self._cards` and applies the current settings from `self._settings` to each card by calling the `apply_settings` method on individual cards.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:_apply_turn_data:8414f067f2d70f7f4d2f84a971300615af04da7d97d780d537f1538bf0be42c5:8414f067f2d70f7f4d2f84a971300615af04da7d97d780d537f1538bf0be42c5": "The function `_apply_turn_data` updates the UI of a `TurnCardWidget` with data from a `turn` object. It formats and displays metadata such as timestamps, latency, and token usage. It renders the answer and citations, populates sections for reasoning, plan, step results, assumptions, assumption decisions, and self-check results, applying appropriate formatting and structure to each section's content. The function handles optional fields and constructs multi-line text content for display in various UI labels and sections.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:_apply_turn_data:8fa1143722d2dcd6cb0b2e9d14671064d2ba2dfffab8a27eb0c78118bbbffd2e:8fa1143722d2dcd6cb0b2e9d14671064d2ba2dfffab8a27eb0c78118bbbffd2e": "The function `_apply_turn_data` updates the UI of the `TurnCardWidget` with data from a turn object. It formats and displays metadata such as timestamps, latency, and token usage. It renders the answer and citations, populates reasoning, plan, step results, and assumptions sections with formatted content, and handles special display logic for assumption decisions and self-check results. The function uses helper functions to format timestamps and token usage, and updates various UI labels and sections based on the turn's data.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:_copy_answer:8be030b1181c86a9396f2c0ee8aaa04d1af7d3bfe1a43fa84beeb973b69c4f61:8be030b1181c86a9396f2c0ee8aaa04d1af7d3bfe1a43fa84beeb973b69c4f61": "Copies the text from `self.answer_browser` to the system clipboard and displays a notification indicating the copy operation was successful.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:_copy_answer:e8230b8f0cc2186407bac6500dfa951e37024a912caabb358e0c0bf47cb48f33:e8230b8f0cc2186407bac6500dfa951e37024a912caabb358e0c0bf47cb48f33": "The function `_copy_answer` copies the text content of the `answer_browser` widget to the system clipboard and displays a notification indicating that the answer has been copied.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:_copy_citations:4962de48c07fcf81cde8f9ee2f1b71d17b88d153a8e544ac9ea2f2ab161c3923:4962de48c07fcf81cde8f9ee2f1b71d17b88d153a8e544ac9ea2f2ab161c3923": "Copies the plain text content of the `citations_browser` widget to the system clipboard and displays a notification indicating that the citations have been copied.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:_copy_citations:ff77ab7b1dd3451e112b7b6527028b7d32baf5d49e5f13ea4050acaf205ddf8c:ff77ab7b1dd3451e112b7b6527028b7d32baf5d49e5f13ea4050acaf205ddf8c": "The function `_copy_citations` copies the plain text content of `self.citations_browser` to the system clipboard using `QApplication.clipboard()`. It then displays a notification with the message \"Citations copied\" and an info level for 1500 milliseconds using `self._progress.notify()`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:_create_section:383430708240924c06e82d4720756c25ff1eb4b3086014f333825526c4a5bf34:383430708240924c06e82d4720756c25ff1eb4b3086014f333825526c4a5bf34": "Creates a styled section frame with a title and content area. The section includes a title label with bold styling and a content label that wraps text. The content is populated by calling `_set_section_content` with the provided lines. Returns the constructed `QFrame` object.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:_create_section:458832f83aaac34d6563944b3dee15bd34a7e0964fdeba060eedf03a3d94df0e:458832f83aaac34d6563944b3dee15bd34a7e0964fdeba060eedf03a3d94df0e": "Creates a styled section frame with a title and content area. The function generates a QFrame widget containing a title label and a content label, sets appropriate object names and styles, and populates the content based on provided lines. Returns the configured frame widget.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:_emit_citation:5f8d1ba76410165f35f038d4103824f8fec66765872bbd469152bff5de6084d1:5f8d1ba76410165f35f038d4103824f8fec66765872bbd469152bff5de6084d1": "Emits a signal indicating that a citation has been activated, passing the associated `TurnCardWidget` and the citation index as arguments.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:_emit_citation:aa8950b2360df3e54cbfea77a0939611d94dd8a8102986214448cce60337d0b8:aa8950b2360df3e54cbfea77a0939611d94dd8a8102986214448cce60337d0b8": "The function `_emit_citation` is a method of the `AnswerView` class that emits a signal named `citation_activated`. It takes two parameters: `card`, which is an instance of `TurnCardWidget`, and `index`, which is an integer. The method forwards these parameters as arguments when emitting the signal.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:_format_timestamp:6602d99a234c64d35bf81e34dfa0ce85c89c974e6320f5b0a0008484dd09af03:6602d99a234c64d35bf81e34dfa0ce85c89c974e6320f5b0a0008484dd09af03": "The function `_format_timestamp` takes a datetime object or None as input and returns a formatted string representation of the timestamp. If the input is None, it returns \"\u2014\". Otherwise, it formats the datetime object into a string with the pattern \"%Y-%m-%d %H:%M:%S\".",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:_format_token_usage:c277ad5d28c3a7f4594e116f387baee46871dcc802038194b20028cf96c9e020:c277ad5d28c3a7f4594e116f387baee46871dcc802038194b20028cf96c9e020": "The function `_format_token_usage` takes a dictionary of token usage data and formats it into a human-readable string. If the input is empty or None, it returns \"Tokens: \u2014\". Otherwise, it processes the dictionary to order specific keys (`prompt_tokens`, `completion_tokens`, `total_tokens`) first, then appends any additional keys in arbitrary order. Each key-value pair is formatted with spaces instead of underscores and title-cased for readability. The resulting parts are joined by commas.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:_on_anchor_clicked:29d6b29673aa04ab1ab1000026d6aff843b9a6a41571256e7ece54523b308ce2:29d6b29673aa04ab1ab1000026d6aff843b9a6a41571256e7ece54523b308ce2": "Handles clicks on anchor links within the widget. Extracts a citation index from URLs starting with \"cite-\" and notifies listeners of the activation.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:_on_anchor_clicked:e62e8afc8f7fcb966dfdc923c8a615f864acbf7612ac85b770d9a578b807694b:e62e8afc8f7fcb966dfdc923c8a615f864acbf7612ac85b770d9a578b807694b": "Handles clicks on citation anchors in the widget. Extracts the citation index from the URL, validates it, and emits signals to update the selected citation and notify of activation.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:_render_answer:318810ef72f7c319d2cf2aea05c1531ab8614c37ae069cbfb8be3ca1b3408350:318810ef72f7c319d2cf2aea05c1531ab8614c37ae069cbfb8be3ca1b3408350": "Renders the answer text for a turn card by escaping HTML, converting newlines to `<br/>` tags, and replacing citation placeholders with linked anchors. Selected citations are highlighted with a CSS class, and associated styling is applied to the rendered HTML in a browser component.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:_render_answer:bcf353b4afad3c5e053fda09e4882612f253673fd84f9cadbc99c96dcbe13e24:bcf353b4afad3c5e053fda09e4882612f253673fd84f9cadbc99c96dcbe13e24": "The function `_render_answer` processes and displays the answer content within the `TurnCardWidget`. It escapes HTML characters in the answer text and replaces newlines with `<br/>` tags. It then iterates through the citations associated with the turn, replacing citation placeholders (e.g., \"[1]\") with clickable HTML anchors. Selected citations are highlighted with a CSS class. Finally, it applies optional styling for selected citations and sets the processed HTML content to an answer browser component.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:_render_citations:538f23b0a01eac4814e78c6d46f827ecf0f74384a963b6c44c46c847411b3539:538f23b0a01eac4814e78c6d46f827ecf0f74384a963b6c44c46c847411b3539": "Renders HTML content for citations associated with a turn, displaying them as a numbered list with optional selection highlighting. If no citations exist, displays a placeholder message. Each citation is processed to extract a label based on its type (string or dictionary), with special handling for dictionaries containing step information. Selected citations are highlighted with a background color. The rendered HTML is set into a browser widget for display.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:_render_citations:b2fb6253c3866147c88c2e30f8daec9e5243383851d5b09308c781b0d99b01b7:b2fb6253c3866147c88c2e30f8daec9e5243383851d5b09308c781b0d99b01b7": "Renders citations for a turn in an HTML format within a browser widget. If no citations are present, displays a placeholder message. Otherwise, it iterates through the citations, formats each one based on its type (string or dictionary), and applies styling to the selected citation. The formatted HTML is then set in the `citations_browser` widget.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:_scroll_to_bottom:3d2cda0d5fd1216aaf7d7964213d119491b130c239ecda895d65f97ba2580e2d:3d2cda0d5fd1216aaf7d7964213d119491b130c239ecda895d65f97ba2580e2d": "The function `_scroll_to_bottom` scrolls the vertical scrollbar of the `AnswerView` to its maximum value, ensuring that the view is scrolled to the bottom position. It first retrieves the vertical scrollbar using `self.verticalScrollBar()`, and if a scrollbar exists (i.e., it is not None), it sets the scrollbar's value to its maximum, effectively scrolling to the bottom of the content.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:_scroll_to_bottom:8805b47749ecf22031ea6f01a1f0e179f75edc08834ee306561239335b1e2a20:8805b47749ecf22031ea6f01a1f0e179f75edc08834ee306561239335b1e2a20": "The function `_scroll_to_bottom` adjusts the vertical scroll bar of the `AnswerView` class to position the view at the bottommost visible content. It retrieves the vertical scroll bar instance and sets its value to the maximum possible position, ensuring that the latest content is displayed.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:_set_section_content:42b470da9c3c8fe8cd52e864497505a4a5e82de586339f76cbcae38a7963eb84:42b470da9c3c8fe8cd52e864497505a4a5e82de586339f76cbcae38a7963eb84": "Sets the content of a QLabel within a QFrame section based on provided lines of text. If the section contains a QLabel with the object name \"contentLabel\", it updates the label's text with the non-empty lines joined by newlines. The section is made visible if there are non-empty lines, otherwise it is hidden and the label is cleared.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:_set_section_content:53188188d28ce73044cc33db77e4b8efa997ad47a5bf2803675919debba6930a:53188188d28ce73044cc33db77e4b8efa997ad47a5bf2803675919debba6930a": "Sets the content of a section's label with filtered lines of text and controls the section's visibility based on whether content exists.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:add_turn:08b77fd188ad418a23267a61d7a779c3a79d8b168972d2899ba9ca1b01aa5d5c:08b77fd188ad418a23267a61d7a779c3a79d8b168972d2899ba9ca1b01aa5d5c": "The function `add_turn` creates a new `TurnCardWidget` instance using a provided `ConversationTurn`, settings, and progress tracker. It appends the created widget to an internal list of cards and inserts it into a layout just before the last element. The function connects the widget's `citation_activated` signal to a lambda that emits a citation event, sets the selected citation to `None`, configures the card's density based on a stored density setting or defaults to \"comfortable\", scrolls the view to the bottom, and returns the created card.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:add_turn:87e406f1ff6eeafebabcfbb6d908134cad2d263675040b52d067e823a3120d0e:87e406f1ff6eeafebabcfbb6d908134cad2d263675040b52d067e823a3120d0e": "Adds a new turn to the answer view by creating a TurnCardWidget, inserting it into the layout, connecting its citation signal, and scrolling to the bottom. Returns the created card widget.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:apply_settings:3df906cb4ae64be888a3d0f1823d25be86b601f515c18b7415e8f9177d29f28a:3df906cb4ae64be888a3d0f1823d25be86b601f515c18b7415e8f9177d29f28a": "The function `apply_settings` updates the widget's visibility settings based on the provided `ConversationSettings` object. It configures the visibility of three sections: the plan section, step results section, and assumptions section. The plan section is shown if the settings enable plan display and the turn has a plan. The step results section is shown if the turn has step results. The assumptions section is shown if the settings enable assumption display and the turn has either assumptions or an assumption decision.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:apply_settings:6481b7e3d6473cd27a341d06015714d6c5a704aef23cbb27b46234d64e2045c1:6481b7e3d6473cd27a341d06015714d6c5a704aef23cbb27b46234d64e2045c1": "The function `apply_settings` updates the widget's visibility based on the provided `ConversationSettings`. It adjusts the visibility of the plan section, step results section, and assumptions section according to the settings and the presence of associated data in the turn. Specifically, it shows or hides these sections depending on whether the corresponding settings are enabled and whether relevant content exists.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:cards:84cbfc1a24e480057f357fb8107ec7fc1ecf84710c854f7bc85e87871c845d3d:84cbfc1a24e480057f357fb8107ec7fc1ecf84710c854f7bc85e87871c845d3d": "Returns a list of `TurnCardWidget` objects stored in the internal `_cards` collection.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:cards:d09e6cc3a7472c4a6b06d2a9300aceb2692f4fd62da5bcd20bc837ce2eb5714a:d09e6cc3a7472c4a6b06d2a9300aceb2692f4fd62da5bcd20bc837ce2eb5714a": "Returns a list of TurnCardWidget objects contained in the `_cards` attribute.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:clear:2398e8b3e385a1f21801cd56defbe98a5b13bd667bba56773e4b647acdfe8ac7:2398e8b3e385a1f21801cd56defbe98a5b13bd667bba56773e4b647acdfe8ac7": "The `clear` method removes all cards from the `AnswerView` by setting their parent to `None` and then clears the internal list of cards.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:clear:9b92dc713c20c0e350438d5f0d9206b5990e101af578e985ac7e0ba5d6ca86b8:9b92dc713c20c0e350438d5f0d9206b5990e101af578e985ac7e0ba5d6ca86b8": "The `clear` method removes all cards from the `AnswerView` instance by setting each card's parent to `None` and then clearing the internal list of cards.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:highlight_citation:49c7d88feb83dee3487f0b84954d83e23c1a59373be43981bd85b2b4393eb32b:49c7d88feb83dee3487f0b84954d83e23c1a59373be43981bd85b2b4393eb32b": "The function `highlight_citation` updates the citation highlighting state for a set of `TurnCardWidget` objects. It iterates through all cards in `self._cards`, and if a card matches the provided `card` parameter, it sets the citation at the specified `index` as selected. For all other cards, it clears the selected citation index. The function does not return any value.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:highlight_citation:6824b4bda0fb14e5a51f1855da63ca47b4376610398537c52e733f5325c60bfe:6824b4bda0fb14e5a51f1855da63ca47b4376610398537c52e733f5325c60bfe": "Highlights a citation in the answer view by selecting the specified card and deselecting all others. Takes a card widget and an index as parameters, setting the selected citation index on the specified card while clearing it on all other cards in the collection.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:render_turns:66a35720c288ff4819f63d5324c19caae590bb152b530026c024c8c352be3fe8:66a35720c288ff4819f63d5324c19caae590bb152b530026c024c8c352be3fe8": "The `render_turns` method clears the current content and processes a sequence of conversation turns by adding each one to the view.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:render_turns:7d0046ea6a4a901d2ec572a8d2efd3614bfa605ffe930874129db360f50b0b0b:7d0046ea6a4a901d2ec572a8d2efd3614bfa605ffe930874129db360f50b0b0b": "The function `render_turns` clears the current content of the `AnswerView` and iterates through a collection of `ConversationTurn` objects, adding each turn to the view. It serves to update the display with a sequence of conversation turns.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:selected_citation:c0821660eb0464f9ab186e8c9dd3be686e2328b94039ab08867a9f6be10485ec:c0821660eb0464f9ab186e8c9dd3be686e2328b94039ab08867a9f6be10485ec": "The function `selected_citation` is a property method within the `TurnCardWidget` class that returns the value of the private attribute `_selected_citation`. This attribute likely holds an integer identifier or index related to a currently selected citation, or it may return `None` if no citation is selected. The method provides read-only access to the internal state of the widget regarding citation selection.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:selected_citation:e6d982daf9f1b4e0c29cafa08ec26244523d98d8e163a6fc3a09377373b02130:e6d982daf9f1b4e0c29cafa08ec26244523d98d8e163a6fc3a09377373b02130": "Returns the currently selected citation index, or None if no citation is selected.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:set_density:66bca2f1937b33dc666344db31cada8a76abfa23401a22f883fd3cfd37438bfc:66bca2f1937b33dc666344db31cada8a76abfa23401a22f883fd3cfd37438bfc": "Sets the density of the answer view layout and cards. Takes a density parameter that is normalized to either \"compact\" or \"comfortable\". If the density changes, updates the layout spacing and propagates the density setting to all contained cards. The spacing is set to 8 for compact density and 12 for comfortable density.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:set_density:9b4c2a70cdca8386b516c0799780de07ef7c5d408d511aa6ed91907d640df364:9b4c2a70cdca8386b516c0799780de07ef7c5d408d511aa6ed91907d640df364": "The `set_density` function configures the visual density of the `TurnCardWidget` by adjusting margins, spacing, and layout properties based on a specified density setting. It accepts a string input representing the desired density (\"compact\" or \"comfortable\") and normalizes it. If the density has changed, it updates internal layout parameters accordingly. For compact density, it applies smaller margins and spacing values; for comfortable density, larger values are used. The function modifies the widget's main layout, action row layout, and several section layouts to reflect the new density setting.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:set_density:d371f8afa3fc5d35032d6db40c4d450cbb6c27b85fce3c0941252f7545a80962:d371f8afa3fc5d35032d6db40c4d450cbb6c27b85fce3c0941252f7545a80962": "The `set_density` function configures the spacing and layout density of the `AnswerView` class. It accepts a string input representing the desired density (\"compact\" or \"comfortable\"), normalizes it to one of these two values, and updates the layout spacing accordingly. If the density changes, it adjusts the vertical spacing of the layout and propagates the density setting to all cards within the view.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:set_density:ff6bc1aa46f6bdf4c85bc809a09e27e0ac65804decccea797dd979992e2c79b0:ff6bc1aa46f6bdf4c85bc809a09e27e0ac65804decccea797dd979992e2c79b0": "Sets the density of the widget layout to either \"compact\" or \"comfortable\" based on the input string. Updates margin and spacing values accordingly for the main layout, actions row, and section layouts. Returns early if the density is already set to the specified value.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:set_selected_citation:7203afce226e6b7310be91879917972143143a2e92fe42ff5450cbfb80b6a20f:7203afce226e6b7310be91879917972143143a2e92fe42ff5450cbfb80b6a20f": "The function `set_selected_citation` updates the selected citation index in the `TurnCardWidget`. If the new index differs from the currently selected citation, it updates the internal `_selected_citation` attribute and triggers re-rendering of both the answer and citations through calls to `_render_answer()` and `_render_citations()`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:set_selected_citation:a185e8fb9dcd41552d313e3e942ac029ffc92d51ccdf6bab2592e4c1714dada6:a185e8fb9dcd41552d313e3e942ac029ffc92d51ccdf6bab2592e4c1714dada6": "Sets the selected citation index and triggers rendering updates for both the answer and citations.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:to_plain_text:77862ef18b5a7d75ddb0142c14cc7e468131946ec6e441b13499699e8ad6842b:77862ef18b5a7d75ddb0142c14cc7e468131946ec6e441b13499699e8ad6842b": "Returns a plain text representation of the widget's content by collecting text from various labels and browsers, including optional sections that are visible and contain content. The returned string concatenates all non-empty text parts separated by newline characters.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:to_plain_text:98e65b459d691a887101727c5427c4f382dd58e889f87739a16d14f92f3d6c08:98e65b459d691a887101727c5427c4f382dd58e889f87739a16d14f92f3d6c08": "Returns a string containing the plain text representation of all cards in the answer view, with each card's text separated by double newlines.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:to_plain_text:cb9a19582446ba49240df1f7c05923eb8f03eea4fa2153affa4a5337bb430482:cb9a19582446ba49240df1f7c05923eb8f03eea4fa2153affa4a5337bb430482": "The function `to_plain_text` returns a string that concatenates the plain text representations of all cards contained within `self._cards`, separating each with double newlines. Each card's `to_plain_text()` method is called to retrieve its text content.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:to_plain_text:f375e6aaca8756e4406cc8990fc7dc49cbec6f14b572fe9f010e3fb615efe80f:f375e6aaca8756e4406cc8990fc7dc49cbec6f14b572fe9f010e3fb615efe80f": "The function `to_plain_text` extracts and combines the text content from various UI elements within the `TurnCardWidget`. It collects text from labels, browsers, and sections, filtering out empty entries. The returned string consists of the question, answer, metadata, citations, and optional reasoning-related content, each separated by newlines.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:EvidencePanel:__init__:6911468caebbc60470337bc95d012b55f5ed2357840702721b57d14d5cf1588b:6911468caebbc60470337bc95d012b55f5ed2357840702721b57d14d5cf1588b": "Initializes a widget for displaying and managing evidence records. Sets up a vertical layout containing a conflict banner, a list widget for evidence items, a text browser for previews, and a metadata row with a reset scope button. Configures connections between the list widget and selection handler, and initializes internal state variables including record storage, scope suppression flag, and density setting. Displays an empty state message.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:EvidencePanel:_build_identifier:2df9a2dbee572e433e1a7a6c14c03fd12eb78c0118973bba4ececdfe43021783:2df9a2dbee572e433e1a7a6c14c03fd12eb78c0118973bba4ececdfe43021783": "Function that constructs an identifier from a citation object using specific key lookups and fallback behavior. Takes a citation parameter that can be a dictionary or string, and returns the first available value from predefined keys in the dictionary, or the stripped string if citation is a string, or the provided fallback value if none of the conditions are met.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:EvidencePanel:_empty_state:a1574259faee3407ba77360c47e312c1c3e73cafd7778cefcd7111a8a1872515:a1574259faee3407ba77360c47e312c1c3e73cafd7778cefcd7111a8a1872515": "Function clears preview display and metadata label, hides conflict banner, and updates reset button state.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:EvidencePanel:_handle_copy:a969cbd75b81b6fd7bf11f26ccb4829a7032b9c23543a417b193b450c0027cf2:a969cbd75b81b6fd7bf11f26ccb4829a7032b9c23543a417b193b450c0027cf2": "Function handles copying evidence record data to clipboard by extracting text content from a record, combining label, snippet, and metadata into a formatted string, and emitting a copy request signal with the combined payload.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:EvidencePanel:_handle_locate:d3d2e015c2ca78915c1c28d11d31892d0bf4f89719f08ed7f3e731573b9509d1:d3d2e015c2ca78915c1c28d11d31892d0bf4f89719f08ed7f3e731573b9509d1": "Function handles locating evidence records by setting the current row in a list widget and emitting a locate request signal with document and passage identifiers.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:EvidencePanel:_handle_open:d28251174d8a0319456218b91b116ed8fceb3e65096723b0893c32fc843972ce:d28251174d8a0319456218b91b116ed8fceb3e65096723b0893c32fc843972ce": "This function processes an evidence record opening request. It determines the list row position of a given list item, sets that item as current in the list if it exists, and then opens the associated evidence record. The function serves as a handler that manages both list selection and record opening operations in sequence.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:EvidencePanel:_normalize_citation:080f73a1995d85f987cc19df3da6d67dc0ea06b3e3a9ec943d1c57bf78e4cd0e:080f73a1995d85f987cc19df3da6d67dc0ea06b3e3a9ec943d1c57bf78e4cd0e": "Function processes a citation input to construct an `EvidenceRecord` object with normalized metadata, snippet, identifier, and related fields. It handles string and dictionary inputs, extracting and formatting information such as source, snippet, location details, steps, tags, conflict data, and document identifiers. The function applies HTML escaping to snippets and builds structured labels and metadata from the input citation. It supports various key names for similar fields and ensures proper type handling and fallbacks for missing or invalid data.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:EvidencePanel:_on_row_selected:e77f62772dbbf87e37f04c8f11c1a048f7d21f64ed4c65eb73d06faf4523263f:e77f62772dbbf87e37f04c8f11c1a048f7d21f64ed4c65eb73d06faf4523263f": "Handles row selection in a table by validating the row index, updating preview content, and emitting a signal with the selected record's identifier.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:EvidencePanel:_on_state_changed:680a6bfa9a75f8afd0f3c3bd94b336cebe4ddc8c21397d8a928b22534001acce:680a6bfa9a75f8afd0f3c3bd94b336cebe4ddc8c21397d8a928b22534001acce": "Function updates evidence record state and emits scope change signal when state changes occur. Takes an evidence record and new state as parameters, updates matching record in internal records list with copied version containing new state, and triggers scope change emission and reset button state update. Returns early if suppression flag is set.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:EvidencePanel:_open_record:14b4d84b537aa422a983611a7c784787fbd98eb7ad58f794606ca8dd82cfb142:14b4d84b537aa422a983611a7c784787fbd98eb7ad58f794606ca8dd82cfb142": "Opens a file URL in the default desktop application for the given evidence record. Skips processing if the record is None or has no path. Converts the record's path to a local file URL and launches it using the system's default handler.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:EvidencePanel:_plain_text:1a4d28e052548cb606c7d4d948cdb63eb424c71e3aa9b7988ab83e50293dc3b0:1a4d28e052548cb606c7d4d948cdb63eb424c71e3aa9b7988ab83e50293dc3b0": "Function that converts HTML content to plain text format. Takes an HTML snippet string as input, creates a QTextDocument object, sets the HTML content on the document, then extracts and returns the plain text representation with leading/trailing whitespace removed. Returns empty string when input is None or empty.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:EvidencePanel:_populate_list:af00c09342c97ac1582f84af6187259508a3d0abb827b91dbb65ca2e1efead65:af00c09342c97ac1582f84af6187259508a3d0abb827b91dbb65ca2e1efead65": "Function clears and repopulates a list with items based on records, connects signals from each item to handler methods, sets item size hints, and updates conflict banner and reset button state.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:EvidencePanel:_reset_scope_filters:5a28a76c5c989bf437cae5e7f55507a28f07964a7553a87b5f32ec9bfc4cb785:5a28a76c5c989bf437cae5e7f55507a28f07964a7553a87b5f32ec9bfc4cb785": "The function resets the scope when there are records with a state other than \"include\". It first checks if any record in `self._records` has a state that is not equal to \"include\". If all records have the \"include\" state, the function returns without taking any action. Otherwise, it calls `self.reset_scope()` to reset the scope.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:EvidencePanel:_set_conflict_banner:e8403cf66beda1c90610e6deaf24ba6c3b4b36bdcf34e7611c547d89e2947854:e8403cf66beda1c90610e6deaf24ba6c3b4b36bdcf34e7611c547d89e2947854": "Function sets a conflict banner with formatted messages or hides the banner when no conflicts exist. Takes a list of message strings, removes duplicates while preserving order, escapes HTML characters in each message, joins them with bullet points, and displays the result in a banner widget. If the message list is empty, the banner is hidden.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:EvidencePanel:_update_preview:700bffd0343d2c997404c0eef8fd1ac1f07c3d579e69928ff6f2a1a4c917de72:700bffd0343d2c997404c0eef8fd1ac1f07c3d579e69928ff6f2a1a4c917de72": "Function updates preview display with content from a specified record index, handling out-of-bounds cases by showing empty state. It constructs HTML content including snippet, metadata, conflict information, and tags, then sets the preview widget's HTML content and updates associated metadata label text. The function also manages reset button state based on current record data.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:EvidencePanel:_update_reset_button_state:f117f38a02e64ec7aa943c100e6f7e2f9bde95791d3419525db705e474e214a1:f117f38a02e64ec7aa943c100e6f7e2f9bde95791d3419525db705e474e214a1": "Function updates the enabled state of a reset button based on record states and existence of records.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:EvidencePanel:clear:bdf62072ce938750ab957d06e1a3b89cd5b278b0a6eed491ed9a92c180340186:bdf62072ce938750ab957d06e1a3b89cd5b278b0a6eed491ed9a92c180340186": "The function clears all records and list contents, resets the empty state, and updates the reset button state.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:EvidencePanel:current_scope:01e60cd87cde79ca7c9a180dc4a6268114ea05f08e4dbf4b2ddef1da6bca82f8:01e60cd87cde79ca7c9a180dc4a6268114ea05f08e4dbf4b2ddef1da6bca82f8": "Function that returns a dictionary containing two lists of identifiers from records with specific states. The dictionary has keys \"include\" and \"exclude\", mapping to lists of identifiers where the corresponding record state is \"include\" or \"exclude\" respectively.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:EvidencePanel:evidence_count:ed29e6435691f21d98cdff6a29897ae10b1e0daeefa22e457ced4f78d5316cfa:ed29e6435691f21d98cdff6a29897ae10b1e0daeefa22e457ced4f78d5316cfa": "The function returns the number of records in the instance's `_records` attribute by calculating its length.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:EvidencePanel:evidence_items:2e0a9acec88d2c21ccd88c8761f5809c220e83aed3e8f1db12f28fb4ad7c5c2e:2e0a9acec88d2c21ccd88c8761f5809c220e83aed3e8f1db12f28fb4ad7c5c2e": "Returns a list copy of the evidence records stored in the internal records collection.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:EvidencePanel:f95317e4ecdc18137beb2a5148cce14a0baaabed8ae76a7f4cb66eb581044682:f95317e4ecdc18137beb2a5148cce14a0baaabed8ae76a7f4cb66eb581044682": "The `EvidencePanel` class is a PyQt6-based widget designed to display and manage evidence records, such as citations or document snippets, within a desktop application for offline document processing and question-answering. It provides functionality for showing evidence items in a list, previewing selected records, handling user interactions like copying or locating evidence, and managing the inclusion or exclusion scope of records. The panel supports visual density adjustments, conflict banner display, and integrates with UI elements to reflect the state of evidence records and enable actions like resetting filters.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:EvidencePanel:reset_scope:3653c208b9a73b1b2363e1b4c24599172002651447806330dc6192097ddc7f86:3653c208b9a73b1b2363e1b4c24599172002651447806330dc6192097ddc7f86": "Function resets the scope state by updating all records and widgets to \"include\" status, emits scope change signal, and updates reset button state.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:EvidencePanel:select_index:0b793089a3ed5f0a3f060e6f57ce34c522b4515e004f8b2de5c2aa041d027ce2:0b793089a3ed5f0a3f060e6f57ce34c522b4515e004f8b2de5c2aa041d027ce2": "The function selects an item at a specified index in a list widget. It first validates that the index is within the valid range of the list's count, then sets the current row of the list widget to the provided index value. The function does nothing if the index is out of bounds.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:EvidencePanel:selected_index:bcd9ccd38baf555a2660242f6ca12528c08500b47b829e621b55000c59433373:bcd9ccd38baf555a2660242f6ca12528c08500b47b829e621b55000c59433373": "Returns the index of the currently selected item in a list widget, or None if no item is selected. The index is determined by the current row of the list widget, with negative values indicating no selection.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:EvidencePanel:selected_record:4a38a0c6a8b364ed7791f7c4d046949ed31c25beaf8dfde29f86a9efbd3b5846:4a38a0c6a8b364ed7791f7c4d046949ed31c25beaf8dfde29f86a9efbd3b5846": "Returns the evidence record at the currently selected index, or None if no index is selected or if the index is out of bounds.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:EvidencePanel:set_density:3724e18b8b16ebe03cfa782462df3e6cb7b1ac047a86e986e9586eca18f3270d:3724e18b8b16ebe03cfa782462df3e6cb7b1ac047a86e986e9586eca18f3270d": "Sets the density property for the object and updates related layout spacing and child widgets. Configures vertical layout spacing based on density value, with 6 pixels for \"compact\" and 8 pixels for other values. Applies the density setting to all evidence row widgets within the list.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:EvidencePanel:set_evidence:1ea01b0ddfbf1985c7b2436e7f2f389d0b31bfb2a21982b43fd8cd58847b0028:1ea01b0ddfbf1985c7b2436e7f2f389d0b31bfb2a21982b43fd8cd58847b0028": "Sets evidence citations for the current scope, normalizing and populating records while updating UI state. Processes citations through normalization, handles scope suppression during processing, updates preview and reset button states, and emits scope change signals when requested.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:EvidenceRecord:a0ad7919be079ce0cc2d851eeb8e891a543905659b2eb49a7d33c48e0fe5c624:a0ad7919be079ce0cc2d851eeb8e891a543905659b2eb49a7d33c48e0fe5c624": "The `EvidenceRecord` class represents a structured record of evidence within a document processing system, containing information such as content snippets, metadata, scores, and identifiers. It supports creating copies of itself with updated states while preserving all relevant attributes including tags, conflict details, and document references. The class is designed to maintain consistent evidence data during retrieval and reasoning processes within the offline AI application framework.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:EvidenceRecord:copy_with_state:062cfd518b6c78e63f211f2df18df26ea8c6a2dde46471ed797884d93241877f:062cfd518b6c78e63f211f2df18df26ea8c6a2dde46471ed797884d93241877f": "Creates a new EvidenceRecord instance with the same attributes as the current instance, but with a specified state value. The method copies all fields from the original record including identifier, label, snippet_html, metadata_text, path, raw content, score, step_badges, tags, conflict_summary, conflict_sources, document_id, and passage_id. The new instance maintains all original values except for the state field which is replaced with the provided state parameter. The method returns the newly created EvidenceRecord object with the updated state.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_EvidenceRow:__init__:0df9d5280e84fa6958723d476714d8b8735e5b226f0a85ede2bddaf5d6582cb7:0df9d5280e84fa6958723d476714d8b8735e5b226f0a85ede2bddaf5d6582cb7": "Initializes a widget for displaying evidence record information. Configures layout and UI elements including title, include/exclude toggles, badges, snippet, metadata, and action buttons. Sets up signal connections for toggle buttons and action triggers. Populates badge information and configures text display properties for snippet and metadata. Defines spacing and margins for the layout.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_EvidenceRow:_make_badge:858dd02d02782ca9dff240f7c55b3180c1c84dc690908bf893f1efb18ee9295f:858dd02d02782ca9dff240f7c55b3180c1c84dc690908bf893f1efb18ee9295f": "Creates a QLabel widget configured as a badge with specified text and kind property. The badge is initialized with the provided text and parent reference, assigned the object name \"evidenceBadge\", and has a custom property \"kind\" set to the provided value. Returns the configured badge label widget.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_EvidenceRow:_on_exclude_toggled:8f03b668e0cd625f5abaa56b1842b2c053d4eae96c01c239aa596159e734ad97:8f03b668e0cd625f5abaa56b1842b2c053d4eae96c01c239aa596159e734ad97": "Function handles toggle state changes for exclude functionality, updating internal record state and emitting state change signals.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_EvidenceRow:_on_include_toggled:e5c0410fb5d7c9bf665b76b374eace68f6383f1c26892f5f3ea897accfc6bb50:e5c0410fb5d7c9bf665b76b374eace68f6383f1c26892f5f3ea897accfc6bb50": "Function handles toggle state changes for an include button, updating record state and emitting state change signals. When toggled on, it ensures exclusion is disabled and sets state to \"include\". When toggled off, it sets state to \"neutral\" if exclusion is also off, otherwise to \"exclude\". Updates the record with new state and emits a state change signal.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_EvidenceRow:_populate_badges:1b50c63b208ef2cda9b4b46f17ccce8302ef22a65ea8f14d1083b0b2f3df9d74:1b50c63b208ef2cda9b4b46f17ccce8302ef22a65ea8f14d1083b0b2f3df9d74": "Function clears existing widgets from a layout row and populates it with badge widgets based on record data. It removes all current items from the badge row layout, then adds widgets for step badges, tag badges, score badge (if score exists), and conflict badge (if summary exists). Each badge is created using a helper method that accepts the badge content and type. A stretch spacer is added at the end of the layout.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_EvidenceRow:d886f038b8829cc1897e48e2efc11a620f7b055998833dda799b29cccd76389e:d886f038b8829cc1897e48e2efc11a620f7b055998833dda799b29cccd76389e": "The `_EvidenceRow` class defines a UI widget for displaying individual evidence items within a document retrieval system, incorporating interactive elements such as include/exclude toggles, badges, and action buttons. It manages the visual representation and state of each evidence entry, synchronizing UI components with underlying data and emitting signals for user interactions like copying, opening, or changing inclusion states. The class supports dynamic layout adjustments based on density settings and updates its display in response to changes in the associated evidence record.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_EvidenceRow:refresh:0b3952b72982539772b594c6a86c54f08e551b7cda42a3671ab008f6093f478d:0b3952b72982539772b594c6a86c54f08e551b7cda42a3671ab008f6093f478d": "Function updates UI elements with record data and enables/disables open button based on record path existence.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_EvidenceRow:set_density:226dc29083e4968591f12ed0a256df75974e519fbb3df2a69d61dbe9522f5cbb:226dc29083e4968591f12ed0a256df75974e519fbb3df2a69d61dbe9522f5cbb": "Function sets layout density configuration based on provided density string value. Updates internal layout margins and spacing parameters according to compact or standard density settings. Configures specific spacing values for badge row and actions row based on density setting. Modifies layout contents margins and spacing properties accordingly.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_EvidenceRow:set_state:c48db7be810e6fb5abe90831bce0f7ce1d00acd11f73e5fa8ca6c722ee719af6:c48db7be810e6fb5abe90831bce0f7ce1d00acd11f73e5fa8ca6c722ee719af6": "Sets the state of buttons and updates a record with the new state value. The buttons are temporarily disconnected from their signals during the update to prevent triggering events. The record is copied with the provided state parameter.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_SignalBlocker:5301fd0362ea653c703ffc91d8258087ca0c4583c452bc3f87da723f1daee3d7:5301fd0362ea653c703ffc91d8258087ca0c4583c452bc3f87da723f1daee3d7": "The `_SignalBlocker` class provides a context manager for temporarily blocking signals from a `QWidget`, allowing specific operations to proceed without signal interference. It stores the widget's original signal-blocking state before disabling signals and restores it upon exiting the context. The class facilitates controlled signal management during critical UI operations by implementing `__enter__` and `__exit__` methods.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_SignalBlocker:__enter__:dd981b4bea4fa99cd141121c1d31d8291703398f001a950dcebed6dc9be135e2:dd981b4bea4fa99cd141121c1d31d8291703398f001a950dcebed6dc9be135e2": "This function implements the context manager protocol's entry method. It temporarily disables signal handling for a widget by calling the blockSignals method with True parameter, storing the previous signal state in an instance variable for later restoration.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_SignalBlocker:__exit__:e4139b4631daa2d088afe12c922f08d47cb97a26824fc296cda5ff037a8cc21b:e4139b4631daa2d088afe12c922f08d47cb97a26824fc296cda5ff037a8cc21b": "This function implements the context manager exit protocol for a widget object. It restores the widget's signal blocking state to its previous condition by calling the blockSignals method with the stored previous state. The function accepts any exception arguments but ignores them, ensuring the widget's signal handling behavior is properly restored when leaving a context block.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_SignalBlocker:__init__:b14b8144190dc5335859a971c923a8753671f0ce58d4d56ac377c54108dcaa3c:b14b8144190dc5335859a971c923a8753671f0ce58d4d56ac377c54108dcaa3c": "Initializes the object with a QWidget instance and sets an internal flag to False.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:__enter__:488c6fdd41c06c5ee2902b92cf9990a23cb1034c045a1f81a6d3ab08d433bae4:488c6fdd41c06c5ee2902b92cf9990a23cb1034c045a1f81a6d3ab08d433bae4": "The `__enter__` method of the `_SignalBlocker` class enables context manager functionality. It blocks signals from the widget by calling `blockSignals(True)` and stores the previous signal-blocking state in `self._previous`. This allows temporary suppression of widget signals during specific operations, with the ability to restore the original signal state upon exiting the context.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:__enter__:57d8b22aa8f4476c0fa7ea621c76fa2e4f9cb3d8d0dd03e8144fd6f779629e86:57d8b22aa8f4476c0fa7ea621c76fa2e4f9cb3d8d0dd03e8144fd6f779629e86": "The `__enter__` method of the `_SignalBlocker` class enables signal blocking for a widget by calling `blockSignals(True)` on the widget and storing the previous signal blocking state in the `_previous` attribute. This method is typically used as part of a context manager to temporarily disable signal handling during widget modifications.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:__exit__:c4051cf6d8627abd5d2424eeea3a3fff0574457a74a11c5bd8dbd5137eef9f9c:c4051cf6d8627abd5d2424eeea3a3fff0574457a74a11c5bd8dbd5137eef9f9c": "The `__exit__` method of the `_SignalBlocker` class restores the signal blocking state of a widget. It takes an exception parameter (which is unused) and sets the widget's signal blocking to its previous state stored in `self._previous`. This method is typically used in a context manager to ensure that signal blocking is properly restored after a block of code has executed, regardless of whether an exception occurred.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:__exit__:db51a34009df8ab9813a9f700b31f7a157eafe323372cdffe9dfe7377a213a15:db51a34009df8ab9813a9f700b31f7a157eafe323372cdffe9dfe7377a213a15": "The `__exit__` method of the `_SignalBlocker` class restores the signal-blocking state of a widget. It takes an arbitrary number of exception arguments and sets the widget's signal blocking to its previous state, ensuring that signals are properly re-enabled after the block has been applied.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:__init__:1ac261e4e8dfc3fd0789dd0f4a14393574a9a95ec771f6ec51ff5d1c88898df3:1ac261e4e8dfc3fd0789dd0f4a14393574a9a95ec771f6ec51ff5d1c88898df3": "The `__init__` method initializes an `_EvidenceRow` widget, which represents a single evidence item in a user interface. It sets up the layout and components for displaying evidence metadata, including a title, snippet, and metadata text. The row includes interactive elements such as \"Include\" and \"Exclude\" toggles, badges, and action buttons (\"Copy\", \"Open\", \"Locate\"). The widget is configured with object names for styling and connects signals to handle user interactions. The layout uses `QVBoxLayout` and `QHBoxLayout` to organize components vertically and horizontally, ensuring proper spacing and alignment. The evidence record's data is used to populate labels and set button states, and the widget emits signals when actions like copying, opening, or locating are triggered.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:__init__:214fc9fad32fccef0a9c13f0922eaa255f8f0a2106da6f768075ccebf7d5eb6d:214fc9fad32fccef0a9c13f0922eaa255f8f0a2106da6f768075ccebf7d5eb6d": "The `__init__` method initializes a `_SignalBlocker` instance with a specified `QWidget` and sets an internal flag `_previous` to `False`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:__init__:787d4e26cb65e5025a6ec5dc874bd147293fecf5bd6832ccd412a3ccc2ac032e:787d4e26cb65e5025a6ec5dc874bd147293fecf5bd6832ccd412a3ccc2ac032e": "Initializes an `_EvidenceRow` widget for displaying evidence data. The constructor sets up the layout and UI elements including a title label, include/exclude toggles, badges, snippet text, metadata text, and action buttons (Copy, Open, Locate). It connects button signals to corresponding slots and configures the widget's appearance and behavior based on the provided `EvidenceRecord`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:__init__:97d2c603ffb5462ad96b99277dbfba676e86643c6b04ad57923846f8b1a55705:97d2c603ffb5462ad96b99277dbfba676e86643c6b04ad57923846f8b1a55705": "Initializes the `EvidencePanel` widget, setting up its internal state and UI components. The panel contains a list of evidence records, a preview area for selected items, and metadata display. It manages a list widget for evidence selection, a text browser for previews, and a banner for conflict notifications. The layout is configured with margins and spacing, and includes a reset scope button that is initially disabled. An empty state is set up at initialization.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:__init__:d67e9a85e72ab24ab0003fc1ccda0e1fa5ad92420f6d1c0da9b73f7a750a08ed:d67e9a85e72ab24ab0003fc1ccda0e1fa5ad92420f6d1c0da9b73f7a750a08ed": "Initializes the `EvidencePanel` widget, setting up its internal state and UI components. The panel consists of a list widget for displaying evidence records, a text browser for previewing selected evidence, and metadata display with a reset scope button. It also includes a conflict banner that is initially hidden. The layout is configured with margins and spacing, and connections are established for handling row selection in the list and resetting scope filters. An empty state is initialized for the panel.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:__init__:dca87d2df70a876574f7b3a3f17d161994891957677d53bb19220164c224a794:dca87d2df70a876574f7b3a3f17d161994891957677d53bb19220164c224a794": "The `__init__` method initializes a `_SignalBlocker` instance with a specified widget and sets the internal `_previous` attribute to `False`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_build_identifier:336c45e9cdfd206455d86f5d043dc55826d85023acc952b02d4b24be9809157b:336c45e9cdfd206455d86f5d043dc55826d85023acc952b02d4b24be9809157b": "The function `_build_identifier` constructs a string identifier from a `citation` parameter, which can be either a dictionary or a string. It extracts the identifier from specific keys (`id`, `document_id`, `source`, `path`, `file_path`) in the dictionary if present. If the citation is a non-empty string, it returns the stripped string. Otherwise, it returns a provided fallback string.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_build_identifier:6f7a36f635113e0e2a4d1a29d7b3c4a01d8c5a333f831355b2058a25440b1a96:6f7a36f635113e0e2a4d1a29d7b3c4a01d8c5a333f831355b2058a25440b1a96": "The function `_build_identifier` constructs a string identifier from a citation object. It accepts a citation parameter of any type and an optional fallback string. If the citation is a dictionary, it searches for specific keys (`id`, `document_id`, `source`, `path`, `file_path`) and returns the first non-empty value as a string. If the citation is a non-empty string, it returns the stripped string. If neither condition is met, it returns the provided fallback string.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_empty_state:84528bdd2a6532ec29de4336c96ae011481080de87e87feb019bcc7bf405225a:84528bdd2a6532ec29de4336c96ae011481080de87e87feb019bcc7bf405225a": "The function `_empty_state` configures the `EvidencePanel` to display an empty state. It sets the preview area to show \"No evidence available.\", updates the metadata label to indicate no evidence is selected, hides the conflict banner, and updates the reset button state.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_empty_state:f219b35cbe098b0bee12023f9038c0103648be7d3f8bc058e2ebd1cfa151a306:f219b35cbe098b0bee12023f9038c0103648be7d3f8bc058e2ebd1cfa151a306": "Sets the evidence panel to an empty state by displaying a \"No evidence available\" message in the preview, updating the metadata label to indicate no evidence is selected, hiding the conflict banner, and updating the reset button state.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_handle_copy:7f3c0d3c2fced1d18d3c906da5d98a9cc730404034b319e732f7002e12e832c5:7f3c0d3c2fced1d18d3c906da5d98a9cc730404034b319e732f7002e12e832c5": "Handles copying evidence data from a selected list item. Retrieves the row index of the clicked item, sets it as current, extracts text content from the evidence record (label, snippet, and metadata), filters out empty or whitespace-only parts, joins them with newlines, and emits a copy request signal with the formatted payload.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_handle_copy:939f916486e6e435ea09339df8cac818118c192e96465b93c48fda4f4141d533:939f916486e6e435ea09339df8cac818118c192e96465b93c48fda4f4141d533": "The function `_handle_copy` processes a copy request for an evidence item within the `EvidencePanel`. It identifies the row of the selected list item, sets it as current, and constructs a payload string from the evidence record's label, snippet (converted from HTML), and metadata. The resulting string is emitted through the `copy_requested` signal after stripping any leading or trailing whitespace.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_handle_locate:0440c434ecb905d0c8344dac0643ee62a56515db78c2a2cc27246e294a9e4941:0440c434ecb905d0c8344dac0643ee62a56515db78c2a2cc27246e294a9e4941": "Handles the locate action for an evidence record by setting the current row in the list and emitting a locate requested signal with document, path, and passage ID information.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_handle_locate:75a55466ca40f69a625b7f2817fad297a91378cc24893c8ab6bc27a9f4c5b2b7:75a55466ca40f69a625b7f2817fad297a91378cc24893c8ab6bc27a9f4c5b2b7": "The function `_handle_locate` processes a click event on an evidence item within the panel. It determines the row index of the clicked item in the list, sets the current row to that index, and emits a `locate_requested` signal with a payload containing the document ID, file path, and passage ID from the provided `EvidenceRecord`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_handle_open:3e05d490e9141cf4d17f53bf177118223396cba970fc5becb0c8a0abcca79bf2:3e05d490e9141cf4d17f53bf177118223396cba970fc5becb0c8a0abcca79bf2": "Handles the opening of an evidence record by setting the current row in the list widget to the row of the provided list item, and then opens the specified evidence record.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_handle_open:5ba67b4c9912eabfb530de7bf7589cc9984b36c6cddd8947d36fb9612c52bfb3:5ba67b4c9912eabfb530de7bf7589cc9984b36c6cddd8947d36fb9612c52bfb3": "The function `_handle_open` processes an evidence record by setting the current row in a list widget to the row of a given list item, and then opens the specified evidence record. It retrieves the row index of the item from the list, updates the list's current row if the index is valid, and calls `_open_record` with the provided evidence record.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_make_badge:30e616dfa408311979850924368889d671a12f70f47699551a4def8db893a616:30e616dfa408311979850924368889d671a12f70f47699551a4def8db893a616": "Creates a styled badge label with the specified text and kind property for use in evidence display.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_make_badge:3341216e39bc6d50fce9196242e914b7d78602461a8e7e50d94017f204e75926:3341216e39bc6d50fce9196242e914b7d78602461a8e7e50d94017f204e75926": "The function `_make_badge` creates and configures a `QLabel` widget to serve as a badge element. It takes a text string and a kind identifier as inputs, sets the label's object name to \"evidenceBadge\", assigns the kind as a property, and returns the configured label. This method is used within the `_EvidenceRow` class to generate badge widgets for displaying evidence-related information.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_normalize_citation:a5d18c82b6dffb9e3ecc2105a26a503f5e102683bcdc40246eaa83edb4a55541:a5d18c82b6dffb9e3ecc2105a26a503f5e102683bcdc40246eaa83edb4a55541": "Normalizes a citation into an `EvidenceRecord` object by extracting and formatting metadata, snippet content, location information, score, steps, tags, and conflict details from the input citation. The function handles citations provided as strings or dictionaries, with special processing for nested citation data, step identifiers, tag lists, and conflict information. It constructs a label, HTML-escaped snippet, and metadata string based on available fields, and returns a structured `EvidenceRecord` with all relevant extracted and processed data.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_normalize_citation:e5c134eb124abe090e1a2e2228f63eca467e8d2f54132ad2e392c141dfad7e18:e5c134eb124abe090e1a2e2228f63eca467e8d2f54132ad2e392c141dfad7e18": "The function `_normalize_citation` processes a citation object of varying types (string or dictionary) and converts it into an `EvidenceRecord` instance. It extracts and formats information such as label, snippet, metadata, path, score, steps, tags, conflict details, document ID, and passage ID. The function handles different input structures, normalizes data, escapes HTML content, and constructs a standardized record for use in evidence panels. It supports parsing of nested citation data, location details (page, section), step information, and conflict metadata. The output is an `EvidenceRecord` with fields populated based on the input citation's contents.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_on_exclude_toggled:06bdb52c3960da723caf8c156a63b71fdb87ba22353d230558914607f550e652:06bdb52c3960da723caf8c156a63b71fdb87ba22353d230558914607f550e652": "The function `_on_exclude_toggled` handles the toggle event for an exclude checkbox in an evidence row. When the exclude checkbox is checked, it unchecks the include button and sets the state to \"exclude\". When unchecked, it checks the current state of the include button and sets the state to either \"include\" or \"neutral\". It then updates the record with the new state and emits a state change signal.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_on_exclude_toggled:085e3be788e192a1cc53eb975e6331f5eed4e1aaa944c813bee018a71acad49d:085e3be788e192a1cc53eb975e6331f5eed4e1aaa944c813bee018a71acad49d": "The function `_on_exclude_toggled` handles the toggle event for an exclude checkbox within an evidence row. When the exclude checkbox is checked, it ensures the include checkbox is unchecked, sets the state to \"exclude\", and updates the record with this new state. If the exclude checkbox is unchecked, it checks the state of the include button to determine whether to set the state as \"include\" or \"neutral\". Finally, it emits a `state_changed` signal with the updated state.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_on_include_toggled:400d814f9bf9f1f114878d024511c60d8c483efcb2f0a5b1567cb9320c0cd062:400d814f9bf9f1f114878d024511c60d8c483efcb2f0a5b1567cb9320c0cd062": "The function `_on_include_toggled` handles the toggling of an include checkbox within an evidence row. When the checkbox is checked, it ensures the exclude button is unchecked, sets the state to \"include\", and updates the record with this state while emitting a state change signal. When unchecked, it sets the state to \"neutral\" if the exclude button is also unchecked, otherwise to \"exclude\", then updates the record and emits the state change signal.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_on_include_toggled:f653bd81452a62c8314f514749fd9acdb7236b39e9572808f26b6105bd4be9bf:f653bd81452a62c8314f514749fd9acdb7236b39e9572808f26b6105bd4be9bf": "The function `_on_include_toggled` handles the toggling of an include checkbox in an evidence row. When the checkbox is checked, it ensures the exclude button is unchecked, sets the state to \"include\", and updates the record and emits a state change signal. When unchecked, it sets the state to \"neutral\" if the exclude button is also unchecked, otherwise to \"exclude\". The record is updated with the new state, and a `state_changed` signal is emitted with the current state.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_on_row_selected:31cb32d91e25c0a16ea3412063b278a63023c4108e3f790094baec21f1cf41d6:31cb32d91e25c0a16ea3412063b278a63023c4108e3f790094baec21f1cf41d6": "Handles the selection of a row in the evidence panel by updating the preview, retrieving the selected record, and emitting a signal with the record's identifier. If the row index is invalid, displays an empty state instead.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_on_row_selected:e35ba9a2345177070344ee8830e75d28c1f08bd6d7340e3f64658da82e2faf1e:e35ba9a2345177070344ee8830e75d28c1f08bd6d7340e3f64658da82e2faf1e": "The function `_on_row_selected` is triggered when a row in the `EvidencePanel` is selected. It validates the row index against the length of `_records`, clears the panel if the index is invalid, and otherwise updates the preview for the selected row. It then emits an `evidence_selected` signal containing the selected row index and the record's identifier.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_on_state_changed:07fc937d9f100c19c18164d26a9c9cb3d3cfe81da24aea686ec902e5377815aa:07fc937d9f100c19c18164d26a9c9cb3d3cfe81da24aea686ec902e5377815aa": "The function `_on_state_changed` updates the state of an `EvidenceRecord` within the `EvidencePanel`. It iterates through the existing records to find a match based on the record's identifier and replaces it with a copy of the record having the new state. If the scope suppression is not active, it emits a signal indicating a change in the current scope's include and exclude filters, and updates the state of the reset button.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_on_state_changed:2e1cc19b5114294cac4b694189ea395bb9184debb2bbf391f0efe772bf4a9718:2e1cc19b5114294cac4b694189ea395bb9184debb2bbf391f0efe772bf4a9718": "Handles changes to the state of an evidence record within the panel. Updates the internal records list with a copy of the record containing the new state, emits a scope change signal if not suppressed, and updates the reset button state.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_open_record:6a21dbc6fc074c57737c9a2988a23da09b217b792333da7bdfa06a04228c89cb:6a21dbc6fc074c57737c9a2988a23da09b217b792333da7bdfa06a04228c89cb": "Opens the file specified by the given evidence record in the system's default application.\n\nThis method takes an EvidenceRecord object and opens its associated file using the system's default file handler. If the record is None or has no valid file path, the method returns without taking action. The file path is converted to a QUrl using QUrl.fromLocalFile() before being opened through QDesktopServices.openUrl().",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_open_record:8bc3fd2ec67a81d057ae9b3dd1e4780e97d183bad1fbbcd924e6c40346401098:8bc3fd2ec67a81d057ae9b3dd1e4780e97d183bad1fbbcd924e6c40346401098": "The function `_open_record` in the `EvidencePanel` class is designed to open a file specified by an `EvidenceRecord` object. It first checks if the record is valid and contains a file path. If the conditions are met, it constructs a local file URL using `QUrl.fromLocalFile` from the path in the record and opens the file using `QDesktopServices.openUrl`. If the record is None or lacks a path, the function returns without performing any action.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_plain_text:e25490f60ef4d920550a1ba5444a61741cc79132a8fcff46365bb0cbf7c6f6ff:e25490f60ef4d920550a1ba5444a61741cc79132a8fcff46365bb0cbf7c6f6ff": "Converts an HTML snippet to plain text by creating a QTextDocument, setting the HTML content, and extracting the plain text representation with leading/trailing whitespace removed.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_plain_text:f62da942d4a29507770e9a93b1652bbf10266f0fb3e172173ac92ca5cbde35f6:f62da942d4a29507770e9a93b1652bbf10266f0fb3e172173ac92ca5cbde35f6": "The function `_plain_text` takes an HTML-formatted string `snippet`, creates a `QTextDocument` object, sets the HTML content of the document to the provided snippet (or an empty string if `snippet` is falsy), and returns the plain text version of the document with leading and trailing whitespace removed.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_populate_badges:1d55f95b3146ab062839f3d69ccb3c1494b2bc2f968ecf2ca40ceb8f4bde4912:1d55f95b3146ab062839f3d69ccb3c1494b2bc2f968ecf2ca40ceb8f4bde4912": "The function `_populate_badges` clears existing badges from a layout and populates it with new badges based on the record's data. It removes all widgets from `_badge_row`, then adds badges for each step in `step_badges`, each tag in `tags`, a score badge if a score exists, and a conflict badge if there is a conflict summary. A stretch item is added at the end of the layout.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_populate_badges:a6a68015877fd7694c1be7e19194dc715a10501e69ed66b53c72da23e2cda2e7:a6a68015877fd7694c1be7e19194dc715a10501e69ed66b53c72da23e2cda2e7": "The function `_populate_badges` clears existing widgets from a layout row and repopulates it with badge widgets based on data from `self.record`. It iterates through step badges, tags, score, and conflict summary to create and add corresponding badge widgets to the layout. Each badge is created using the `_make_badge` method with appropriate types and tooltips where applicable. A stretch item is added at the end of the layout to provide spacing.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_populate_list:547e98414fddad0bc3b1b84abe9d71917cd7d75ff4f499b7b2c3e05f9526e3fd:547e98414fddad0bc3b1b84abe9d71917cd7d75ff4f499b7b2c3e05f9526e3fd": "The `_populate_list` method populates a list widget with evidence items derived from a collection of records. It clears the existing list, creates a custom row widget for each record, and connects signals from the widget to handler methods for state changes, copying, locating, and opening actions. Each widget is associated with its corresponding list item, and the item's size hint is set based on the widget's dimensions. If a record contains a conflict summary, it is collected and used to update a conflict banner. Finally, the method updates the state of a reset button.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_populate_list:8b3f79ba4109a54fea0ebcbfde5377e9b8fbe9113a66ae18806787d81e5f398e:8b3f79ba4109a54fea0ebcbfde5377e9b8fbe9113a66ae18806787d81e5f398e": "Populates the list widget with evidence items based on the records stored in `self._records`. For each record, it creates a `_EvidenceRow` widget, connects its signals to corresponding handler methods, sets the widget's density, and adds it to the list with an appropriate size hint. If a record has a conflict summary, it collects these messages and updates a conflict banner. Finally, it updates the state of the reset button.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_reset_scope_filters:6c49ee9ee491f29a33dfe1f0cc4a7d8a3277c5f9010ce86b35e9b6559b0b79b0:6c49ee9ee491f29a33dfe1f0cc4a7d8a3277c5f9010ce86b35e9b6559b0b79b0": "The function `_reset_scope_filters` checks if any records in `self._records` have a state other than \"include\". If all records are in \"include\" state, the function returns without taking action. Otherwise, it calls `self.reset_scope()` to reset the scope.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_reset_scope_filters:e4d1caeb016d3702aaa4110f4b0a7167e44d7354f1f907db450e337fcab03bc5:e4d1caeb016d3702aaa4110f4b0a7167e44d7354f1f907db450e337fcab03bc5": "The function `_reset_scope_filters` checks whether any records in `self._records` have a state other than \"include\". If all records are in the \"include\" state, the function returns without taking action. Otherwise, it calls `self.reset_scope()` to reset the scope of the evidence panel.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_set_conflict_banner:3093366ebd477de0acea3469ea5ff40b895a2f9207abdb66b335563f52883f8d:3093366ebd477de0acea3469ea5ff40b895a2f9207abdb66b335563f52883f8d": "The function `_set_conflict_banner` updates the visibility and content of a conflict banner UI element based on a list of conflict messages. If the list contains messages, it removes duplicates, escapes HTML characters in each message, joins them with \" \u2022 \", and displays the resulting string in the banner with a warning icon. If the list is empty, it hides the banner.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_set_conflict_banner:d278e0483c4866dddad3c668214bd38c06a85d20d9448c3b872f16b688908f8a:d278e0483c4866dddad3c668214bd38c06a85d20d9448c3b872f16b688908f8a": "Sets the conflict banner text and visibility based on a list of messages. If messages exist, deduplicates them, escapes HTML characters, joins them with \" \u2022 \", and displays the result in the banner with a warning icon. Makes the banner visible. If no messages exist, hides the banner.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_update_preview:1de5c3b2770a85d00b41eccc8a1b4516f9a6b58777587adbb35a2da579f98677:1de5c3b2770a85d00b41eccc8a1b4516f9a6b58777587adbb35a2da579f98677": "The function `_update_preview` updates the preview display in the `EvidencePanel` based on the selected record index. It retrieves the record at the specified index from `self._records`, constructs an HTML snippet containing the record's content, metadata, conflict summary, and tags, and sets this HTML in `self._preview`. If the index is out of range, it clears the preview by calling `self._empty_state()`. The function also updates the metadata label with the record's label and metadata text, and adjusts the reset button state.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_update_preview:a8ab3c8fa410cd25041167b1069bf65a9219ffb5e4354ed2af7dd14fab40335f:a8ab3c8fa410cd25041167b1069bf65a9219ffb5e4354ed2af7dd14fab40335f": "Updates the preview display for a given record index, showing snippet HTML, metadata, conflict summary, and tags. If the index is invalid, displays an empty state. Sets the preview HTML with styled content and updates the metadata label with the record's header information. Also updates the reset button state.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_update_reset_button_state:39ac19924b42e6baa9113dc3a2cd7e3da1e135a2999da3bfb66b2aecbb41fd1a:39ac19924b42e6baa9113dc3a2cd7e3da1e135a2999da3bfb66b2aecbb41fd1a": "The function `_update_reset_button_state` updates the enabled state of a reset button in the `EvidencePanel` class. It checks if the button exists, then determines whether any record in `self._records` has a state other than \"include\". If there are dirty records and the records list is not empty, the reset button is enabled; otherwise, it is disabled.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_update_reset_button_state:4c6b7a9603e89b674cf5feb5478fb30873d610b02021c9ecfa9ceba7e915ec8a:4c6b7a9603e89b674cf5feb5478fb30873d610b02021c9ecfa9ceba7e915ec8a": "Updates the enabled state of the reset scope button based on whether any records are not in the \"include\" state and whether records exist. The button is enabled only when there are dirty records and at least one record is present.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:clear:08fabea8c9b3ac252045ee3d2c9c27ab2345cb633cc3ba228025da220624a31b:08fabea8c9b3ac252045ee3d2c9c27ab2345cb633cc3ba228025da220624a31b": "The `clear` method in the `EvidencePanel` class resets the panel's state by clearing its internal records and list, updating the empty state display, and refreshing the reset button's enabled status.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:clear:751dd8ad045b5db883eb8fc5efcfe74c77f2315f7f1e11105f801ed676868992:751dd8ad045b5db883eb8fc5efcfe74c77f2315f7f1e11105f801ed676868992": "The `clear` method in the `EvidencePanel` class removes all records and list items from the panel. It clears the internal `_records` collection, clears the `_list` display, updates the panel's empty state representation, and refreshes the reset button's enabled state based on the cleared condition.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:copy_with_state:0cf5ea9f706265ef2f2f3e3a70a70276f986250bc74afbca40c217ae97998083:0cf5ea9f706265ef2f2f3e3a70a70276f986250bc74afbca40c217ae97998083": "The function `copy_with_state` creates a new instance of `EvidenceRecord` with the same attributes as the current instance, but with an updated `state` value. It copies all relevant fields including identifier, label, snippet HTML, metadata text, path, raw content, score, step badges, tags, conflict summary, conflict sources, document ID, and passage ID. The new instance is returned with the specified state.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:copy_with_state:b67f722914a68bac9f6c6d10b0ccf02b8a142bde2dfd43cb2bf32447cdfba288:b67f722914a68bac9f6c6d10b0ccf02b8a142bde2dfd43cb2bf32447cdfba288": "Creates a copy of the EvidenceRecord instance with an updated state value. Returns a new EvidenceRecord object initialized with the current instance's attributes except for the state, which is replaced with the provided state parameter. All mutable attributes such as step_badges, tags, and conflict_sources are copied as new lists to avoid shared references.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:current_scope:374f890775c0465d998277e3a6d257458c930bca4a908012dfa518346cd6d5cd:374f890775c0465d998277e3a6d257458c930bca4a908012dfa518346cd6d5cd": "Returns a dictionary containing the current scope of evidence records, with two keys: \"include\" and \"exclude\". Each key maps to a list of identifiers corresponding to records in the respective state. The function filters records from `self._records` based on their `state` attribute, collecting identifiers for records where state is \"include\" or \"exclude\".",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:current_scope:a01b95dd22c95bb03f55723a12c4ce223f22e27db6aeed482bc15c897ce3136d:a01b95dd22c95bb03f55723a12c4ce223f22e27db6aeed482bc15c897ce3136d": "The function `current_scope` returns a dictionary representing the current inclusion and exclusion scope of records within the `EvidencePanel`. It iterates through `self._records`, collecting identifiers of records marked with the state \"include\" into an `include` list and those marked with the state \"exclude\" into an `exclude` list. The function then returns a dictionary with these two lists under the keys \"include\" and \"exclude\", respectively.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:evidence_count:04c173a0fc68b16460bb17ca3f89f8d1f4b1665ac45cc4a323eae78e974a78eb:04c173a0fc68b16460bb17ca3f89f8d1f4b1665ac45cc4a323eae78e974a78eb": "Returns the number of evidence records in the panel.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:evidence_count:4475e899d405dd4d4564bb46dbdb912f67f9b4d31efc9f7492fa45e138e60701:4475e899d405dd4d4564bb46dbdb912f67f9b4d31efc9f7492fa45e138e60701": "The function `evidence_count` returns the number of records in the `EvidencePanel` instance by calculating the length of the `_records` attribute.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:evidence_items:621f2c517fd78b0ac3f2e0e45ebef98e0669085565db711d75db3c8ff9056f39:621f2c517fd78b0ac3f2e0e45ebef98e0669085565db711d75db3c8ff9056f39": "Returns a list of all evidence records contained in the panel.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:evidence_items:82e342ce04c940407f8752c58f2202449ef19152c575e232ab23e111b6f6bb26:82e342ce04c940407f8752c58f2202449ef19152c575e232ab23e111b6f6bb26": "The function `evidence_items` is a method of the `EvidencePanel` class that returns a list of `EvidenceRecord` objects. It retrieves and provides access to the internal collection of evidence records stored in `self._records`. The returned list is a copy of the records, ensuring that modifications to the returned list do not affect the original collection. This method allows external code to obtain and iterate over the evidence items contained within the panel.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:ff3621bdd188dee4b0f6d20d14ffd9aeae0061a2855bf61328ff6fb2c6d83124:merge0:c469885c7c80fd28fa941925a8bc9a58c29cb3324fb6bc7d136ce66bc03cde39": "This module implements a UI widget for managing evidence records within a citation system, featuring controls for setting inclusion/exclusion states, previewing source content, and handling scope filters. The widget displays evidence records in list format with actions such as copy, open, and locate, while providing visual indicators for record states, scores, tags, and conflicts. Evidence records are represented by a data class containing metadata, state, and identifiers, with the widget supporting both compact and comfortable display densities. The module includes methods for normalizing citation inputs into structured `EvidenceRecord` objects, extracting fields like labels, snippets, metadata, scores, tags, and conflict information from both string and dictionary formats. Supporting functions handle identifier generation, copying selected records to clipboard with formatted text, locating records in source documents, and opening associated files. Event handlers manage selection changes, state updates, and UI interactions including filter resets and preview updates, with utilities for HTML-to-plain text conversion, conflict banner display, and reset button state control based on record modifications. The widget maintains scope state that can be reset or emitted to update external components, and includes signal handling for user interactions such as changing record states or requesting actions on evidence items.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:ff3621bdd188dee4b0f6d20d14ffd9aeae0061a2855bf61328ff6fb2c6d83124:part0:b46267fc09d5b402b45aa816f18ab9a426a9f4b51acfa850b285f48d38c29fc6": "A module implementing a UI widget for displaying and managing evidence records within a citation system. The widget includes controls for setting the inclusion or exclusion state of individual records, previewing source content, and managing scope filters. Evidence records are represented by a data class containing metadata, state, and identifiers. The widget displays evidence in a list format with associated actions such as copy, open, and locate. It supports visual indicators for record states, scores, tags, and conflicts. A preview panel shows selected evidence details, and the widget maintains a scope state that can be reset or emitted to update external components. The UI includes compact and comfortable display densities, and handles signals for user interactions like changing record states or requesting actions on evidence items.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:ff3621bdd188dee4b0f6d20d14ffd9aeae0061a2855bf61328ff6fb2c6d83124:part1:80ec5d13a4688957688096f83bffebf38e87efc41b7705c0b423e3dbd00c9bb3": "The module defines methods for processing and managing citation data within an evidence-based interface. It includes logic to normalize citation inputs into structured `EvidenceRecord` objects, extracting fields such as labels, snippets, metadata, scores, tags, and conflict information. The normalization process handles both string and dictionary inputs, with special handling for nested structures and various possible field names.\n\nSupporting functions build identifiers from citation data, copy selected records to the clipboard with formatted text, locate records in their source documents, and open files associated with records. Event handlers manage selection changes, state updates, and UI interactions like resetting filters or updating previews. A preview update function formats and displays record content using HTML styling. Additional utilities include plain text conversion of HTML snippets, conflict banner display, and control of reset button states based on record modifications.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:refresh:571f890c12d0cf088bba63071aea725cfc1fece948425d52a362da4a5fa6bb3f:571f890c12d0cf088bba63071aea725cfc1fece948425d52a362da4a5fa6bb3f": "The `refresh` method updates the display contents of the evidence row based on the associated record. It sets the title label to the record's label, populates the snippet label with either the record's HTML snippet or a default \"No snippet provided\" message, displays the record's metadata text, enables or disables the open button depending on whether the record has a path, and updates the badges shown for the record.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:refresh:85ba4d01bb189bf89442412021fd721bba6e9137b917554837e7864b37e0607d:85ba4d01bb189bf89442412021fd721bba6e9137b917554837e7864b37e0607d": "The `refresh` method updates the display elements of the `_EvidenceRow` based on the data contained in `self.record`. It sets the title label to the record's label, populates the snippet label with either the record's HTML snippet or a default message if none is provided, displays the record's metadata text, enables or disables the open button depending on whether a file path is present, and calls `_populate_badges()` to update any badges associated with the evidence row.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:reset_scope:67bb197970d32a09f960ddbb86a5cbf6d2238e19b5c2e62dadf8ee29972abbe4:67bb197970d32a09f960ddbb86a5cbf6d2238e19b5c2e62dadf8ee29972abbe4": "The `reset_scope` function resets the scope of evidence records by updating their state to \"include\" and synchronizing the corresponding UI widgets. It temporarily suppresses scope updates during the process, iterates through the records to reset their state and update the associated UI elements, and then emits a signal indicating the scope change. Finally, it updates the state of the reset button.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:reset_scope:6eecfb487502a3ca2b3e617a0021fb8667937f40f1bb3bc0e0a8dcf11c219262:6eecfb487502a3ca2b3e617a0021fb8667937f40f1bb3bc0e0a8dcf11c219262": "The `reset_scope` function resets the scope of evidence records by setting all records to an \"include\" state. It temporarily suppresses scope updates during the process, iterates through all records to copy them with the \"include\" state, and updates corresponding UI widgets. After processing all records, it emits a scope change signal with the current include/exclude scope and updates the reset button state. The function ensures that scope change notifications are only sent once after all records have been processed, preventing multiple redundant emissions during the bulk update operation.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:select_index:a79ba613950a40015bbd5202ccbb04a150fc3ee4c04713a70443d22adfc0e218:a79ba613950a40015bbd5202ccbb04a150fc3ee4c04713a70443d22adfc0e218": "The function `select_index` sets the current selection in a list widget to the item at the specified index. It first validates that the index is within the valid range of the list's count, then uses the list widget's `setCurrentRow` method to update the selection. If the index is out of bounds, the selection remains unchanged.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:select_index:e2709f1881c8c0b47f7f6f044419263c3ee81645f33d86d45c4679288e10acae:e2709f1881c8c0b47f7f6f044419263c3ee81645f33d86d45c4679288e10acae": "Selects the item at the specified index in the list widget. If the index is valid (within the range of the list count), it sets the current row of the list to the given index.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:selected_index:45a50e44cafda499422e540b3e0f3aec76814cb342d32536c4271bb77053bae5:45a50e44cafda499422e540b3e0f3aec76814cb342d32536c4271bb77053bae5": "Returns the index of the currently selected item in the evidence list, or None if no item is selected. The index is determined by the current row of the internal list widget, with negative values converted to None.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:selected_index:b0f838e156d274714ecd10b6d24613d522553e1c55d90aaaab279405a6a12c24:b0f838e156d274714ecd10b6d24613d522553e1c55d90aaaab279405a6a12c24": "Returns the index of the currently selected item in the list, or `None` if no item is selected.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:selected_record:6cb135d5a077cf6831bacb23400cac97796c4dfdc83168e71b40a742b825b569:6cb135d5a077cf6831bacb23400cac97796c4dfdc83168e71b40a742b825b569": "Returns the evidence record at the currently selected index, or None if no index is selected or if the index is out of bounds.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:selected_record:94ea8db16ef66afa78f95817da7a6c8eaf11393b769d96a41c58371b2f83b111:94ea8db16ef66afa78f95817da7a6c8eaf11393b769d96a41c58371b2f83b111": "Returns the `EvidenceRecord` object at the currently selected index in the panel's records list. If no index is selected or if the index is out of range, returns `None`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:set_density:0c3fd1ec3dd1e98b4ae144a5556c545769efb5f6a403db77de2bafd80d59ae80:0c3fd1ec3dd1e98b4ae144a5556c545769efb5f6a403db77de2bafd80d59ae80": "Sets the density of the evidence row layout and adjusts margins and spacing accordingly. When density is \"compact\", uses reduced margins and spacing values; otherwise, uses default values. Updates the layout margins and spacing for the main layout, badge row, and actions row based on the compact setting.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:set_density:7d6b16d02af2c0160c910b21211ca77d4974981a0e9a21070431f5224d00ba18:7d6b16d02af2c0160c910b21211ca77d4974981a0e9a21070431f5224d00ba18": "The `set_density` function configures the spacing and density of elements within the `EvidencePanel`. It updates the internal `_density` attribute based on the provided string value (`\"compact\"` or otherwise). Depending on the density setting, it adjusts the vertical spacing of the panel's layout and propagates the density setting to each `_EvidenceRow` widget contained in the panel's list. The function ensures consistent visual density across all evidence rows and the overall layout.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:set_density:c3c1cbb89c874dc1cf76809f46cfe6c50b67d3b9878973ed668e7ab3ce6e5d22:c3c1cbb89c874dc1cf76809f46cfe6c50b67d3b9878973ed668e7ab3ce6e5d22": "Sets the density of the evidence panel and updates related layout and widget densities. The method adjusts the vertical spacing of the panel's layout based on the density parameter (\"compact\" uses spacing 6, otherwise 8). It then iterates through all items in the panel's list, retrieving each widget and calling its set_density method if it is an instance of _EvidenceRow. The density value is stored in the private attribute _density.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:set_density:e9fe007a31c1232fcbfdbead819c5b3b1bb7c22426dcbd8fb809fff5571e7c17:e9fe007a31c1232fcbfdbead819c5b3b1bb7c22426dcbd8fb809fff5571e7c17": "The `set_density` function configures the layout and spacing of the `_EvidenceRow` based on a specified density setting. When the density is set to \"compact\", it applies tighter margins and spacing values; otherwise, it uses looser spacing. The function updates the content margins of the main layout, the spacing between items in the main layout, and adjusts the spacing for badge and action rows accordingly.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:set_evidence:470c36e449a9b8a0b2b08a539cc31ab3a2738f4a51727afc1502554705b32894:470c36e449a9b8a0b2b08a539cc31ab3a2738f4a51727afc1502554705b32894": "The `set_evidence` method in the `EvidencePanel` class configures the panel's content based on a collection of citations. It processes each citation by normalizing it and assigns the normalized records to the panel. The method updates the list display, selects the first record if available, and refreshes the preview and reset button states. If the `emit_scope` flag is set to True, it emits a signal containing the current include and exclude scope values from the panel's scope. The method temporarily suppresses scope-related updates during processing to avoid interference.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:set_evidence:fbff773b9d6529e522bd4206b4f4c725495690946835e8362e3d6dba66351f29:fbff773b9d6529e522bd4206b4f4c725495690946835e8362e3d6dba66351f29": "Sets the evidence citations for the panel, normalizing each citation and updating the display. Processes citations with automatic indexing, updates the list view to show the first record or empty state, and emits a scope change signal if requested. The scope update is suppressed during processing to prevent interference with the citation handling.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:set_state:35cce718b80991ef8524698e9d1dae50309716f2948c919826b22efd1937e970:35cce718b80991ef8524698e9d1dae50309716f2948c919826b22efd1937e970": "Sets the state of the evidence row by updating the checkbox states and recording the new state. The function uses signal blockers to prevent signal handling during the UI updates, then calls `copy_with_state` on the record to create a new record with the specified state.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:set_state:540298eba5cb8099868198ccd0e256aa350c7a125d007ab9726141af5bd56cf1:540298eba5cb8099868198ccd0e256aa350c7a125d007ab9726141af5bd56cf1": "The function `set_state` updates the UI state of an evidence row by synchronizing the checkbox states of `include_button` and `exclude_button` based on the provided `state` string. It uses signal blockers to prevent signal handling during the update to avoid unintended side effects. After updating the UI, it calls `copy_with_state` on the underlying record to reflect the new state.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:6f14836369d7fe8f48f1b216d93e3aa27a246b6c9e1e6dcff16f39d13bda898c:merge0:1c1350520399546c44bfe26b2afa285dfa4966aed353f8900e8403fd02ffc470": "The module defines a desktop data mining application window with a three-panel split layout comprising a corpus selector tree, conversation display, and evidence viewer. It initializes services and managers for project session management, conversation state handling, and corpus ingestion workflows, including indexing folders and files, rescanning corpus roots, and tracking ingest job progress. The interface supports corpus management, exporting conversations, backup operations, and theme/density adjustments, with a health monitor for LMStudio client status. It includes toast notifications, keyboard shortcuts, and UI elements for managing retrieval scopes, document navigation, and conversation turns. The application handles project-specific storage paths, database snapshots, and session persistence, while integrating with document repositories and UI components such as tree widgets and dialog boxes. Features encompass user interaction handling, settings persistence, token usage processing, context-based question answering, and model configuration, alongside shutdown cleanup operations.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:6f14836369d7fe8f48f1b216d93e3aa27a246b6c9e1e6dcff16f39d13bda898c:part0:0354017779e79c039a0548fb834acb85f439e8d855d4d419f51fae5c6ed2ea82": "The module defines the main application window for a desktop data mining tool. It includes a toast notification widget for displaying transient messages. The main window initializes various services and managers, sets up menus, toolbars, and status bars, and handles project-related actions and UI elements. It manages conversation sessions, ingest jobs, and provides functionality for corpus management, exporting conversations, and backup operations. The interface supports theme toggling, density adjustments, and project switching. A health monitor tracks LMStudio client status periodically. The window includes actions for file operations, corpus management, and user interface customization.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:6f14836369d7fe8f48f1b216d93e3aa27a246b6c9e1e6dcff16f39d13bda898c:part1:a3e5f8d9f71330a9c27d70a59d54b084793fcfc940a6894ab67313bcb908c428": "The module defines a graphical user interface layout for an application with a three-panel split view. The central widget contains a horizontal splitter dividing the interface into left, center, and right panels. The left panel hosts a corpus selector tree and ingest controls including buttons to index folders and files, and rescan indexed folders. The center panel displays conversation content using an answer view and includes a question input widget with scope management. The right panel presents an evidence viewer with functionality for scope changes, evidence selection, and locating documents. Layouts are managed through Qt widgets and layouts, with settings persistence for splitter sizes and panel visibility. Keyboard shortcuts are implemented for focusing the corpus panel and copying chat text. Additional functions handle project state initialization, project selection updates, and managing document tree navigation based on paths or document IDs.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:6f14836369d7fe8f48f1b216d93e3aa27a246b6c9e1e6dcff16f39d13bda898c:part2:071b2c45c54b0e04c5d0802d14734caa670819c5bc35c0325e7783ef04173083": "Module implements project session management, conversation state handling, and corpus ingestion workflows. Includes functions for loading and saving conversation sessions with settings, managing retrieval scopes, updating UI elements based on session data, and processing file/folder indexing operations. Provides methods for adding files or folders to a corpus, rescanning existing corpus roots, tracking ingest job progress, and applying results from indexing operations. Handles user interface updates during ingestion processes including progress reporting, success notifications, and error handling. Manages project-specific storage paths and database snapshots for session persistence.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:6f14836369d7fe8f48f1b216d93e3aa27a246b6c9e1e6dcff16f39d13bda898c:part3:68ed0898942d149b406cdcfec74325146b3e726155afc8a71b2a2ca2d1e9ce4c": "The module defines methods for managing project documents and corpus views within a GUI application. It includes functions to synchronize document lists with known files, update the corpus tree structure, handle project renaming and deletion, manage backups and data purging, and export conversations or snippets. The methods interact with project services, document repositories, and UI components such as tree widgets and dialog boxes. Actions for rescanning corpus roots, revealing project storage, and showing toasts are also implemented. The functions handle various user interactions and maintain consistency between the application's internal state and external file systems.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:6f14836369d7fe8f48f1b216d93e3aa27a246b6c9e1e6dcff16f39d13bda898c:part4:bc14f1b8d9c5e5ed849471fb70fe0b51e65f51170a21472d40d74e9a00b3d52b": "The module defines methods for creating conversation controls, connecting services, handling user interactions, managing conversation turns, and preparing retrieval contexts. It includes functionality for updating UI elements based on settings changes, persisting conversation settings, and processing token usage from responses. The implementation supports features like reasoning verbosity, plan and assumption visibility, sources-only mode, and context-based question answering with retrieval scope management.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:6f14836369d7fe8f48f1b216d93e3aa27a246b6c9e1e6dcff16f39d13bda898c:part5:65249a7a35b65b932d2ffe931a72fefe3aed36c21d1d7cf1db2365737011cbb3": "The module defines methods for handling context payloads from records, managing evidence panels and citations, updating UI elements based on connection states, and managing application settings and themes. It includes functions for processing document snippets, updating retrieval scopes, handling user interactions with cards and evidence, and managing progress indicators. The code also implements logic for model configuration, answer length settings, health monitoring of LMStudio, and cleanup operations during application shutdown.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:8622f0f777258ae4cdd55fe68145bfc6a0c5c7472fe045743ff62a432552f735:merge0:f9ef60bd5f586e5ef794d22592fbcbd9c0ac55277873d6fda1ee728f21df941b": "The `MainWindow` class implements the primary graphical user interface for a document processing and question-answering desktop application, utilizing Qt widgets and signals/slots for event handling. It manages project lifecycle operations including creation, opening, and saving to SQLite databases, while supporting corpus management through folder crawling, file rescanning, and document ingestion with tag assignment. The interface features a tabbed structure for project and corpus root management, a search input area, and an evidence panel for displaying results, alongside a menu bar with file operations and view options. It integrates with LMStudio client for AI interactions, handles conversation history tracking, and supports settings configuration including theme preferences and answer length controls. The class implements backup and restore functionality, manages asynchronous operations via progress tracking and ingest services, and provides full CRUD capabilities on projects with support for context-aware question submission and citation processing. UI updates are coordinated through signal-slot connections for menu actions, tab switching, search execution, and status reporting, incorporating responsive design elements and proper spacing alignment.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:8622f0f777258ae4cdd55fe68145bfc6a0c5c7472fe045743ff62a432552f735:part0:703a000f969b6821419029046b7a4e9da3f89d01e9949b075489f5bbf684d4e0": "The `MainWindow` class defines the primary graphical user interface for the document processing and question-answering desktop application. It initializes the main window with a title, size, and central widget layout. The class sets up the UI components including a menu bar with file operations (new project, open project, save, import corpus, export results) and view options (toggle sidebar). It creates a tabbed interface for managing projects and corpus roots, along with a search input area and evidence panel for displaying document results. The window includes status bar elements for showing processing states and progress indicators. The class handles user interactions through signal-slot connections for menu actions, tab switching, search execution, and UI updates. It manages project lifecycle operations such as creating new projects, opening existing ones, and saving project data to SQLite databases. The interface supports corpus management with folder crawling and file rescanning capabilities, document ingestion with tag assignment, and conversation history tracking. The class integrates with LMStudio client for AI interactions and implements backup/restore functionality for project data. It provides a structured layout using Qt's widget system with proper spacing, alignment, and responsive design elements.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:8622f0f777258ae4cdd55fe68145bfc6a0c5c7472fe045743ff62a432552f735:part1:462ea8685aa366dea347b987b1e11a3ee7e437507bb8bc8aa4f97561f9eb9d6b": "This class defines a main application window (`MainWindow`) for a data mining tool, integrating UI components with backend services for project management, document ingestion, search, and language model interaction.\n\n### Key Features:",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:8622f0f777258ae4cdd55fe68145bfc6a0c5c7472fe045743ff62a432552f735:part2:480f81839de1f3f8779e9e12fa9a9e90f51a4ca8c8174caf1bd0ae7d6c7fc83f": "This file defines a `MainWindow` class that implements a graphical user interface for managing projects, corpus ingestion, conversation settings, and data export functionalities. It integrates with various services such as project management, ingest, progress tracking, backup, and export to provide a complete application workflow.\n\nKey components include:\n\nThe class uses Qt widgets and signals/slots for event handling, integrates with a settings service for UI customization, and manages asynchronous operations through progress tracking and ingest services. It provides full CRUD operations on projects and supports document ingestion from file systems with filtering and synchronization capabilities.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:8622f0f777258ae4cdd55fe68145bfc6a0c5c7472fe045743ff62a432552f735:part3:0e9c0eed72f3dce5c5d3e10feee773ff4346dc37848c778c7cb8cb25a4656f8a": "The provided text describes various functions within a codebase, detailing their purposes and behaviors. Here's a factual summary of what each function implements:",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:8622f0f777258ae4cdd55fe68145bfc6a0c5c7472fe045743ff62a432552f735:part4:fc782b07d931ee9fe3aee49575a78a5c6f55aa16414629a0d41f2093d55c2081": "The `MainWindow` class manages the primary user interface for interacting with an LMStudio client, handling question submission, conversation history, retrieval scope, and UI updates including progress indicators, evidence panels, and theme settings. It orchestrates the flow of requests, processes context and citations, and ensures the UI reflects the current state of the application, such as connection status, model selection, and answer length preferences. The class also supports project management, settings configuration, and cleanup operations during application shutdown.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:__init__:3347992bea2dff934b229687199edaffba04e000b579e4ea908561e206c30a42:3347992bea2dff934b229687199edaffba04e000b579e4ea908561e206c30a42": "Initializes a class instance with multiple service dependencies and sets up window components, UI elements, and connections. Configures conversation and search services, manages project sessions and ingest jobs, and starts timers for handling updates and health monitoring. Applies settings for theme, font scale, and model configuration. Establishes connections between services and UI components, and initializes project state.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_add_files_to_corpus:11824cf4eb6fedd09f2ff58650d193662f31116db802fff7eabaff568494e8c1:11824cf4eb6fedd09f2ff58650d193662f31116db802fff7eabaff568494e8c1": "Function accepts a boolean parameter and adds selected files to a corpus by queuing them for indexing. It retrieves the active project, opens a file dialog to select files based on a filter specification, and then queues the selected files for ingestion with specified include patterns. If an exception occurs during queuing, it displays a critical message box with the error. Otherwise, it registers the ingestion job with a description and root directory, and shows a toast notification indicating that files have been queued for indexing.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_add_folder_to_corpus:cc1b9d5b1fd1c6cff69511f113821053e8f48cd1026473925b254ac73c535124:cc1b9d5b1fd1c6cff69511f113821053e8f48cd1026473925b254ac73c535124": "Function adds a selected folder to the corpus by queuing a crawl job, updating project roots, and showing a notification.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_apply_conversation_settings_snapshot:d128e8a35a3151fc070b3e76b9b022f122702906115745affaad7b8558620570:d128e8a35a3151fc070b3e76b9b022f122702906115745affaad7b8558620570": "Function processes a snapshot dictionary to update conversation settings including reasoning verbosity, plan display, assumption display, sources-only mode, answer length, and model name. It resolves string values to enum types where applicable and applies changes only when values differ from current settings. The function updates corresponding attributes on the conversation settings object and configures an LM Studio client with the specified model.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_apply_density:6395d33a1cbef179ea91f2c55ff82c1a151ca23e998684c0a830c3093369c31f:6395d33a1cbef179ea91f2c55ff82c1a151ca23e998684c0a830c3093369c31f": "Function applies density settings to UI components based on provided or default density value. Sets spacing for layouts in a splitter widget, and updates density settings for answer view, evidence panel, and question input components.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_apply_font_scale:1a9d0fbeae0c36a9a631afdabc7a25507a8d80bcf6e3dea000cf2cfc944e8167:1a9d0fbeae0c36a9a631afdabc7a25507a8d80bcf6e3dea000cf2cfc944e8167": "Function that applies a font scale setting using a settings service. Takes a scale parameter and calls the settings service to apply the font scaling adjustment.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_apply_ingest_results:34a2a9be0f20c9870535cc9b064b392f90f6255a67b77a6149947561cf4715d4:34a2a9be0f20c9870535cc9b064b392f90f6255a67b77a6149947561cf4715d4": "Function processes ingest results by synchronizing documents with known files, refreshing corpus view and actions, and creating a database snapshot for a project. It extracts project ID from job information, validates it as an integer, and retrieves summary data from payload. Using the known files and removed items from the summary, it synchronizes documents and updates corpus state. It attempts to export a database snapshot for the project, logging exceptions if the export fails. If successful, it stores the snapshot path in project sessions.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_apply_splitter_preferences:e53f403e4036eee9701c1ac7b32c5f33e6cf151c9e25a79a5ac523e2c03deb7e:e53f403e4036eee9701c1ac7b32c5f33e6cf151c9e25a79a5ac523e2c03deb7e": "Function configures splitter widget sizes and panel visibility based on saved settings. It sets three-panel splitter sizes if valid size values exist, then updates corpus and evidence panel visibility states. The function also synchronizes corresponding toggle actions with their respective panel visibility settings while temporarily blocking signal handling to prevent recursive updates.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_apply_theme:3848bdbc50115bbe9c0aa51c0342092176d7d73b77125bfc0d5d5188cedb8908:3848bdbc50115bbe9c0aa51c0342092176d7d73b77125bfc0d5d5188cedb8908": "Function applies a specified theme by calling the settings service and displays a notification toast with the theme name.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_ask_question:6347876de0ecfcdc608236d582a4a27723f8e2f577b3cb784c41e3278f2078aa:6347876de0ecfcdc608236d582a4a27723f8e2f577b3cb784c41e3278f2078aa": "Function handles sending a question in a chat interface, managing connection states, updating UI elements, and processing responses from an LMStudio service. It tracks timing, token usage, and turn history while notifying users of progress or errors. The function distinguishes between actions triggered by scope changes and direct question submissions.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_build_default_export_path:1456947f1e9c7f1f540994848d36dbada0f0681033f9fb1549ebf2cf9ba1410e:1456947f1e9c7f1f540994848d36dbada0f0681033f9fb1549ebf2cf9ba1410e": "Function that constructs a file path for exporting project data. Takes a file suffix as input and returns a string representing the full export path. Uses the active project's name to create a URL-safe slug by converting non-alphanumeric characters to hyphens, then removes empty segments from the slug. Retrieves the project's storage location or falls back to a default storage root. Combines the base storage path with the slug and suffix to form the complete export file path.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_build_extra_request_options:7a8d4897601ed13210e39298523262298f0e325717bb483d541ee8b34db5df16:7a8d4897601ed13210e39298523262298f0e325717bb483d541ee8b34db5df16": "Function builds and returns a dictionary containing retrieval configuration options based on provided parameters. The function constructs a retrieval object with query, include, exclude, and documents fields when corresponding values are present. It uses the current retrieval scope's include and exclude lists if available, and incorporates an optional question string and retrieval documents list. The resulting dictionary contains a retrieval key only when at least one retrieval parameter is provided.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_build_step_context_provider:41bfa23c51c539b6cc4618b7457a05c817435a4490cd871d4ca8ec50b60aaf09:41bfa23c51c539b6cc4618b7457a05c817435a4490cd871d4ca8ec50b60aaf09": "Function defines a method that constructs and returns a callable for generating step context batches. The returned function takes a plan item, step index, and total steps as input and produces an iterable of context batches. It combines a normalized question with a step prompt to form a query, retrieves context records using a search service, and organizes them into batches based on chunk size. Each batch contains snippets and documents derived from the retrieved records. The method handles cases where no project is active by returning an empty iterable. Context records are filtered by include and exclude identifiers, and limited by a specified count.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_chunk_records:6a2e9b5e74a817d906295b1476f226034fbf201077dc910f775ecd313d862e8c:6a2e9b5e74a817d906295b1476f226034fbf201077dc910f775ecd313d862e8c": "Function that takes an iterable of dictionaries and a chunk size, then yields lists of dictionaries with the specified maximum length. Processes input records sequentially, accumulating them into chunks of the defined size, and emits each complete chunk as a list. If the final chunk contains fewer records than the specified size, it is still yielded as the last result.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_configure_question_settings_menu:4764e0a7e3b442bde07d9b1b215d9649de7ae32cc25cf0c25931e8c09c7d32ee:4764e0a7e3b442bde07d9b1b215d9649de7ae32cc25cf0c25931e8c09c7d32ee": "Creates a context menu for configuring question response settings with answer length presets and model selection options. The menu includes a submenu for selecting answer length from predefined presets, with the currently active setting checked. It also provides an option to set the model name. The menu is attached to a question input widget and synchronizes the current answer length state.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_connect_services:5e63fc86d8619ec14fd32f61d2d3b5b285593144ae3dde09fa338434c2a18342:5e63fc86d8619ec14fd32f61d2d3b5b285593144ae3dde09fa338434c2a18342": "Function establishes signal connections between various service and settings objects with corresponding handler methods in the class instance. Connects theme, font scale, and density change signals from settings service to theme application handlers. Connects progress start, update, and finish signals from progress service to progress tracking handlers. Connects toast request signal from progress service to toast display handler. Connects conversation settings change signals to persistence and response handlers.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_context_payload_from_records:703c8d4aa22b08a9f264fb128cb2c69842fd948e97f3cb0e53573b7d6d3a82cb:703c8d4aa22b08a9f264fb128cb2c69842fd948e97f3cb0e53573b7d6d3a82cb": "Function processes an iterable of records to generate formatted text snippets and structured document payloads. Each record is parsed to extract context text, document metadata, and chunk information. The function constructs a header for each snippet using optional step index, document title, and identifier. It builds a list of formatted snippet strings and a corresponding list of document payload dictionaries containing identifiers, text, project ID, and various metadata fields from the input records. Fields such as score, path, document ID, chunk details, and ingest information are included in the payload when present. The function returns a tuple of the snippets list and the retrieval documents list.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_copy_chat_text:4fedc0aa69bc3a0b810bf6b93d618dbbafef66613551988ac50d7b729ba3fac6:4fedc0aa69bc3a0b810bf6b93d618dbbafef66613551988ac50d7b729ba3fac6": "Function copies the plain text content from an answer view to the system clipboard and displays a notification indicating the conversation has been copied.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_create_actions:3a22f2345ca70816345c5534b580d7ca3d05d155427eee2d70178f6531c0d710:3a22f2345ca70816345c5534b580d7ca3d05d155427eee2d70178f6531c0d710": "Creates a set of actions for a graphical user interface, assigning each a label and connecting it to a corresponding handler method. Actions are initialized with text labels and triggered signals connected to specific methods. Some export-related actions are initially disabled. A rescan corpus action is also created and disabled.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_create_backup:c9b3336ac5508bd7055b1261d8d9ea91bf2623a48906c378a36517345cf7f258:c9b3336ac5508bd7055b1261d8d9ea91bf2623a48906c378a36517345cf7f258": "Creates a backup of data by prompting the user to select a destination path, then invokes a backup service to generate the backup file at the specified location. Displays a success message upon completion or an error dialog if the operation fails.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_create_conversation_controls:d397ece687faa81f4147e6ec4a1ae24d39db7812a82868531e27e810d9aacca0:d397ece687faa81f4147e6ec4a1ae24d39db7812a82868531e27e810d9aacca0": "Creates a frame containing controls for conversation settings, including a reasoning verbosity dropdown, checkboxes for showing plan and assumptions, and a sources-only mode toggle. The frame uses a horizontal layout with specified spacing and margins. Dropdown options are populated from a ReasoningVerbosity enumeration. Connections are established between widget signals and corresponding handler methods, as well as synchronization methods for updating widget states based on settings changes.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_create_layout:cd13d6f30961b37695b055b8b086c17f1cc12ffa1db8a18996ff6c912d2642d7:cd13d6f30961b37695b055b8b086c17f1cc12ffa1db8a18996ff6c912d2642d7": "Creates a main window layout with a horizontal splitter containing three panels: a left corpus panel with controls and a tree widget, a center chat panel with an answer view, conversation controls, and a question input, and a right evidence panel. Configures layout properties, connects signals, sets object names for styling, and establishes keyboard shortcuts.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_create_menus_and_toolbar:8fa136abf07eca315425767631c22190d933c70036ca0605c08bcc3aac17bb6a:8fa136abf07eca315425767631c22190d933c70036ca0605c08bcc3aac17bb6a": "Creates a menu bar with File, Help, and View menus. The File menu includes actions for project management, corpus operations, and exporting data. The View menu contains options to toggle panels and adjust density settings. A toolbar is also created with common actions and a project selection combo box.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_create_status_bar:26176513c4f45df9ab4c2997d3de4a91b768f8078759988f4abd675ad697edc7:26176513c4f45df9ab4c2997d3de4a91b768f8078759988f4abd675ad697edc7": "Creates a status bar with a project label and progress bar. The status bar is added to the main window, with the project label displayed permanently and the progress bar shown only when needed. The progress bar has a maximum width of 200 pixels.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_delete_current_project:fdb7b87f43b41c9038f86e71a8038aac78af5dc6041cf0fb6d678560394ea427:fdb7b87f43b41c9038f86e71a8038aac78af5dc6041cf0fb6d678560394ea427": "Function deletes the currently active project after confirming with the user and replacing it with an alternative project. It shows informational message if no alternative projects exist. It prompts user for confirmation before deletion. It stores the current project session, sets a replacement project as active, deletes the original project, removes its session data, and displays a toast notification.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_drain_ingest_updates:25902d631c6096bad948277f860d62bd02e9262e9a19a4a181460ac6aaffc7ad:25902d631c6096bad948277f860d62bd02e9262e9a19a4a181460ac6aaffc7ad": "Function processes all available ingest updates from a queue by retrieving them without waiting and handling each one until the queue is empty.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_enqueue_ingest_update:e7d55d0b7f14311f37d6cb8856517bb16f374fcfc3eca7bed9e7d0a0316a0bf6:e7d55d0b7f14311f37d6cb8856517bb16f374fcfc3eca7bed9e7d0a0316a0bf6": "Function that adds a tuple containing a job identifier and payload data to an internal queue for ingest updates.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_export_conversation_html:37b4b05a4a3d121d24d59e482a8b8a3f9d87164716b110295162489f949cff24:37b4b05a4a3d121d24d59e482a8b8a3f9d87164716b110295162489f949cff24": "Function exports conversation data to an HTML file with user interaction for file selection and error handling. Displays information message when no conversation exists. Uses default path building and project metadata for export naming. Shows success toast notification upon completion. Handles exceptions during export process with critical error messaging.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_export_conversation_markdown:f47dc154423ec61e2987586ca3cd54603a2070af52235891661106337b175a6a:f47dc154423ec61e2987586ca3cd54603a2070af52235891661106337b175a6a": "Function exports conversation turns to a Markdown file with project metadata. Displays information message when no conversation exists. Uses file dialog for destination selection with default path based on project name. Shows success toast notification upon completion. Handles export exceptions with critical error message.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_export_selected_snippet:538dd4a504f2712e5148710d1263e099464d039519480fbc8b3c2c8ff514d404:538dd4a504f2712e5148710d1263e099464d039519480fbc8b3c2c8ff514d404": "Function exports the currently selected evidence snippet to a text file. It retrieves the selected record from an evidence panel, validates that a record exists, and prompts the user to select a destination path using a file dialog. If no path is selected, the function returns early. The function prepares a payload containing the snippet's label, HTML content, and metadata text, then invokes an export service to write this data to the specified file. In case of export failure, it displays an error message to the user. On successful export, it shows a notification toast indicating completion.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_extract_token_usage:e9afb1692de4c5f98c73cc813e8adead1333f674f79ec874e145104cb4cd079f:e9afb1692de4c5f98c73cc813e8adead1333f674f79ec874e145104cb4cd079f": "Function extracts token usage information from a conversation turn's raw response. It retrieves the \"usage\" field from the response dictionary, validates that it is a dictionary, and attempts to convert all its values to integers. The function returns a dictionary mapping usage keys to their integer values, or None if no valid usage data is found.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_focus_corpus:b4fd955aeea128c57630808f8344b5b10fdb652da05bd719dca76309c67cdd52:b4fd955aeea128c57630808f8344b5b10fdb652da05bd719dca76309c67cdd52": "Sets keyboard focus on the corpus tree widget.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_focus_tree_by_path:65e3e5e11e0ee189ca914c63313207398e3dcfacef4a686e254cd59d6552b227:65e3e5e11e0ee189ca914c63313207398e3dcfacef4a686e254cd59d6552b227": "Function navigates a tree structure to find and focus on a specific item based on a file path. It searches through tree items recursively, comparing item tooltips (which contain paths) with the target path. When found, it expands all parent items of the matching item, sets it as current, and scrolls to its position in the tree view. The search starts from the root level of the tree and returns immediately upon finding the first match.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_handle_ask:f393b52fc0be8ac07a7dbb38a3e0b62be463b7e1dccc1f37037df9340daa3003:f393b52fc0be8ac07a7dbb38a3e0b62be463b7e1dccc1f37037df9340daa3003": "Function processes user input text for question handling, checking for empty input and connection state. When connected, it marks input as busy and initiates question processing. When disconnected, it updates prerequisites and shows an error notification about LMStudio unavailability.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_handle_ingest_update:1f44893c5b247df8a11f4dce6d45e13f8c4a831fc0f92f3020729565f5d24e34:1f44893c5b247df8a11f4dce6d45e13f8c4a831fc0f92f3020729565f5d24e34": "Handles updates to ingest jobs based on job ID and payload status, updating progress or finishing tasks. Processes job completion, cancellation, or failure states, applying results and showing notifications accordingly. Removes completed jobs from tracking.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_ingest_file_filter_spec:745741e72a1411772df34c16b1ff8a56749fc6d09ba38537a6296640758dba4b:745741e72a1411772df34c16b1ff8a56749fc6d09ba38537a6296640758dba4b": "The function constructs a file filter specification string for document ingestion. It joins include patterns with spaces, then formats them into a string that defines a filter for \"Documents\" followed by all files, suitable for file dialog interfaces.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_ingest_include_patterns:5874666da9d4bfb8145e673c4a63a12e6d807c0e1a6431cbb052798983c1cc10:5874666da9d4bfb8145e673c4a63a12e6d807c0e1a6431cbb052798983c1cc10": "Returns a list of supported include patterns by converting the SUPPORTED_PATTERNS constant to a list.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_initialise_project_state:2c1338f9b49464313d23bac16d75385f75697e6797bfdb74f1cf814dfb728b42:2c1338f9b49464313d23bac16d75385f75697e6797bfdb74f1cf814dfb728b42": "Function initializes project state by refreshing the project selector, retrieving the active project, and loading its session data.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_load_project_session:5fe94b7fadef1cf2a1a10d7de322acfe2d83e3544cc0a2845c65af2a23400ce0:5fe94b7fadef1cf2a1a10d7de322acfe2d83e3544cc0a2845c65af2a23400ce0": "Function loads and initializes project session data, including conversation turns, retrieval scope, and UI elements. It retrieves session information from cached sessions or loads from service, updates internal state with conversation settings and turns, renders UI components, manages evidence display, and refreshes corpus views. The function handles session initialization, turn management, scope configuration, and UI synchronization for conversation history and evidence presentation.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_on_active_project_changed:75b88dba2cb96d0fea042606bec3828961c7c311b6d9d96dedcaed4e502bd65e:75b88dba2cb96d0fea042606bec3828961c7c311b6d9d96dedcaed4e502bd65e": "Function handles project change by refreshing the project selector, initializing a new search service with project data, and loading the project session.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_on_answer_length_action_triggered:88fbfb719795655b81a9db88e3ef7bfb6accc88c534e8a8f30244153f8fd5d38:88fbfb719795655b81a9db88e3ef7bfb6accc88c534e8a8f30244153f8fd5d38": "Handles the triggering of an answer length action by retrieving a preset value from the action data and applying it to conversation settings if the preset is of the correct type.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_on_answer_length_changed:5b8241c6c7f4d07e0376d9c8a98e77890af84cb7058e0cebccb2be26b473b650:5b8241c6c7f4d07e0376d9c8a98e77890af84cb7058e0cebccb2be26b473b650": "Function handles changes to answer length preset by updating the question input component, synchronizing related actions, and persisting conversation settings.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_on_card_citation:a86de22da4301935ecb97a8b8981156a06525349f963cc55896f616c43a113e6:a86de22da4301935ecb97a8b8981156a06525349f963cc55896f616c43a113e6": "Function handles card citation events by updating the active card, setting evidence in the panel, storing the current retrieval scope, highlighting the citation in the answer view, and selecting the corresponding index in the evidence panel.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_on_connection_state_changed:4ef8b6f79500f6a8aed12bc7ad6cc2717c69587e6d5dca2b2d5d97b3180e54b7:4ef8b6f79500f6a8aed12bc7ad6cc2717c69587e6d5dca2b2d5d97b3180e54b7": "Handles connection state changes by updating the question input component, displaying appropriate status messages in the status bar based on the connection state, and refreshing question prerequisites.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_on_copy_evidence_snippet:13db123fa69f91df9d443eb3b9a5d46cd8ca3bfdec75cda7b69fc11f054986d6:13db123fa69f91df9d443eb3b9a5d46cd8ca3bfdec75cda7b69fc11f054986d6": "Function copies a text snippet to the system clipboard and displays a notification. Takes a string parameter, sets it as clipboard content using QApplication, and shows an info-level notification through progress service with 1800ms duration. Returns nothing.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_on_density_action_triggered:45dbf69b331ccec6c1e77c4bdbab2324a409a28de0721db3828a77ad5afd1f18:45dbf69b331ccec6c1e77c4bdbab2324a409a28de0721db3828a77ad5afd1f18": "Handles density action triggering by retrieving the action's data, checking if it's a string, and applying the density setting through the settings service and density application method.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_on_evidence_locate_requested:0b3fd51b7f1cf910d2549157288793e76bb4409a7b68aa7bf08ce303d10b955c:0b3fd51b7f1cf910d2549157288793e76bb4409a7b68aa7bf08ce303d10b955c": "Function handles evidence location requests by first attempting to select a document in the tree using a document ID from the payload. If that fails or is not provided, it attempts to focus the tree by a file path from the payload.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_on_evidence_scope_changed:b73803b775d0b37a7da163528578071b67cd9e1c35b66f49184337af522a1363:b73803b775d0b37a7da163528578071b67cd9e1c35b66f49184337af522a1363": "Function processes changes to evidence retrieval scope by updating the current scope configuration, refreshing the session with the new scope, updating scope indicators, and re-asking the last question if one exists.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_on_evidence_selected:13db34e35d0ea033ede6f8b19960f5c5578ee51ee71838fbc74c15c855e8002d:13db34e35d0ea033ede6f8b19960f5c5578ee51ee71838fbc74c15c855e8002d": "The function handles evidence selection by highlighting a citation in the answer view and enabling or disabling an export action based on whether a valid index is provided.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_on_model_changed:4fde67b8d3055b4959178337138909ba93dde21837f8656b7f6e865eac07ccc1:4fde67b8d3055b4959178337138909ba93dde21837f8656b7f6e865eac07ccc1": "Function processes model name changes by cleaning the input string, configuring a language model client with the cleaned name, updating a question input component with the model name, and persisting conversation settings.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_on_progress_finished:4bc4e12941931fd99174f6dead7a94e43216a8bddc421142005f7301008b4ed4:4bc4e12941931fd99174f6dead7a94e43216a8bddc421142005f7301008b4ed4": "Function handles completion of a progress update by displaying an optional message in the status bar for 3 seconds and hiding the progress bar.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_on_progress_started:d4413b5c8ac399b7548617469d7f9887abfedda35db1cc298e33efad696fd35b:d4413b5c8ac399b7548617469d7f9887abfedda35db1cc298e33efad696fd35b": "Function configures and displays a progress bar based on progress update information. It sets the progress bar's format message, range, and initial value according to the update parameters, then makes the progress bar visible.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_on_progress_updated:c7c24742cfe46c640bd256c8a18ef322094eed80f1e74e1838ccd9dd8e419f0c:c7c24742cfe46c640bd256c8a18ef322094eed80f1e74e1838ccd9dd8e419f0c": "Function updates a progress bar based on progress update information. Sets the progress bar format to a message string if provided. Configures the progress bar as indeterminate when specified, otherwise sets it to a determinate range of 0-100 percent with the corresponding value clamped between 0 and 100.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_on_project_combo_changed:3ae341093596b6b56652f4be95d12c3e1f54dcd8738e18eedf0fb36d45d638d4:3ae341093596b6b56652f4be95d12c3e1f54dcd8738e18eedf0fb36d45d638d4": "Function handles project selection changes by retrieving the selected project ID from a combo box, validating it as an integer, checking if it differs from the currently active project, storing the current session state, and then setting the newly selected project as active through the project service.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_on_projects_changed:6bbe2b95e1d1c55265cc648836cbb88bf416d6afcac669666a130986a0f12007:6bbe2b95e1d1c55265cc648836cbb88bf416d6afcac669666a130986a0f12007": "This function handles project change events by triggering a project selector refresh. It accepts a list of ProjectRecord objects as input and calls a refresh method on the project selector component. The function does not return any value.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_on_reasoning_verbosity_changed:64ad765e43ecad741d9bd17b2a85c0e0143975eb74f2e4f448ec7146e738630b:64ad765e43ecad741d9bd17b2a85c0e0143975eb74f2e4f448ec7146e738630b": "Function that handles changes to reasoning verbosity setting. Takes a combo box index parameter, retrieves the associated data object, and if it's of type ReasoningVerbosity, updates the conversation settings with the new verbosity level.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_on_scope_chip_cleared:c9f7235e71f0fe44d9909f0604e62d91957a31b82b15247a72e4362384712c11:c9f7235e71f0fe44d9909f0604e62d91957a31b82b15247a72e4362384712c11": "Function clears the current retrieval scope when no values are present, updates the session with the empty scope, resets the evidence panel scope, updates the scope chip display, and re-asks the last question with the updated scope.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_on_sources_only_toggled:cd1268cce9e1478c492adbfa5d9bc4551b7f6b5dd5322f82b39945de20b9ee53:cd1268cce9e1478c492adbfa5d9bc4551b7f6b5dd5322f82b39945de20b9ee53": "Function that handles toggling of sources-only mode setting. Takes a boolean parameter indicating whether the mode should be enabled or disabled, and updates the conversation settings accordingly.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_open_help:a629734da10b3684277260b53fa8890bb8664f02cf7a8d5c25faaca19be755c5:a629734da10b3684277260b53fa8890bb8664f02cf7a8d5c25faaca19be755c5": "Displays an information message box with help text instructing users to visit documentation for assistance.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_open_settings:797aff196cd6631fb01f0dc6240ad9c224b1e4b64440c2f212fbf978a7f85307:797aff196cd6631fb01f0dc6240ad9c224b1e4b64440c2f212fbf978a7f85307": "This function displays an information message box with the title \"Settings\" and the message \"Settings dialog coming soon.\" It takes no parameters beyond the instance reference and returns no value. The implementation uses the QMessageBox.information method to show the dialog.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_persist_conversation_settings:6d48de248c9aa1c7148e90d88ed63f9ad1919d7ede450508fb0f59958aaf1d6d:6d48de248c9aa1c7148e90d88ed63f9ad1919d7ede450508fb0f59958aaf1d6d": "Function that saves conversation settings by creating a snapshot, updating the session with the snapshot data, and persisting the snapshot to the project service.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_populate_corpus_tree:384a698506196a25c2f94d976493df95ec2fdc16df18790894344d6b4e59a69a:384a698506196a25c2f94d976493df95ec2fdc16df18790894344d6b4e59a69a": "Function populates a tree structure with corpus data nodes and documents. Takes a parent tree item and a dictionary node containing children and documents. Recursively processes child nodes, creating tree items with names and optional path tooltips. Adds document items with titles derived from source paths or document data, including document IDs as user role data. Builds hierarchical tree representation of corpus structure.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_prepare_retrieval_context:1c9ad82548f80e630e5ce94467eb33eb3ebd0d81cf01fa2e59ea72dbaded6e0c:1c9ad82548f80e630e5ce94467eb33eb3ebd0d81cf01fa2e59ea72dbaded6e0c": "Function prepares retrieval context for a given question by collecting context records and converting them into a payload format. It handles empty questions and project ID retrieval errors by returning empty lists. The function uses current retrieval scope settings to filter records and returns a tuple containing a list of strings and a list of dictionaries.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_project_label_text:492bcd0d51658baebc24d0fd98526bd6c6da49ac845af88220643bb369acbc10:492bcd0d51658baebc24d0fd98526bd6c6da49ac845af88220643bb369acbc10": "Function that retrieves the version number of the DataMiner package and returns a formatted string containing \"DataMiner v\" followed by the version number. If the package is not found, it returns \"DataMiner v0.0.0\".",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_prompt_model_name:9b5f37a9670e7751b163423cd37d4158913f6a464ba372144a7d21b04e77c05a:9b5f37a9670e7751b163423cd37d4158913f6a464ba372144a7d21b04e77c05a": "Displays a dialog box to input a model name, retrieves the user's input, and updates the conversation settings with the provided model identifier if the input is valid.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_prompt_new_project:d51d2850f99f127f5d4b8d63d4bed188b76e16a43f2047426e33953b24d8d4b4:d51d2850f99f127f5d4b8d63d4bed188b76e16a43f2047426e33953b24d8d4b4": "Creates a new project by prompting the user for a name, validating the input, creating the project through the project service, and displaying a confirmation message.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_prompt_rename_project:5a9a713ff3ca46fe8c3533d5a7100e254aa9acc999af599b4034bb83ea1949eb:5a9a713ff3ca46fe8c3533d5a7100e254aa9acc999af599b4034bb83ea1949eb": "Function prompts user for new project name, validates input, renames the active project if valid, and displays confirmation toast notification.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_purge_project_data:4daa572ca4675b638b148af63d88272fc585d69514939dec9abf36dae43460c9:4daa572ca4675b638b148af63d88272fc585d69514939dec9abf36dae43460c9": "Function clears project data including indexed information, chats, and cached assets after user confirmation. It resets conversation state, clears UI elements, disables export actions, updates session state, shows a notification, and refreshes the corpus view.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_refresh_corpus_view:4c04c54ae3ed5b258fca7bc2c04bfcf82329bc3e6894ada4465f54d6d788d366:4c04c54ae3ed5b258fca7bc2c04bfcf82329bc3e6894ada4465f54d6d788d366": "Function refreshes the corpus view in a user interface by clearing the current tree, retrieving project documents, and populating the tree with document hierarchy data. It handles cases where no documents exist or when project access fails. The function constructs a root item for the tree based on project metadata and adds child items recursively. It also updates UI state based on document availability and connection status.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_refresh_project_selector:0b3749a629042edb566646e6fe7169b9585ecd09a3ae25189029c31ae6d4c9a8:0b3749a629042edb566646e6fe7169b9585ecd09a3ae25189029c31ae6d4c9a8": "Function refreshes a project selection combo box with project list from service, preserves current selection, and updates delete action enabled state based on project count.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_register_ingest_job:32df5c5d633645b6ba8bfa82345ab576a67e6da6434ac759b7df0375eea045d0:32df5c5d633645b6ba8bfa82345ab576a67e6da6434ac759b7df0375eea045d0": "Function registers an ingest job with provided parameters and initializes its progress tracking.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_rescan_corpus:15fcfb4be6f71e32295fdce950a17e534d83fb56fcf767660ff348f20e285d20:15fcfb4be6f71e32295fdce950a17e534d83fb56fcf767660ff348f20e285d20": "Function rescans corpus roots within the active project, queuing ingest jobs for each root with specified include patterns. It displays information messages when no folders are available for rescan and warning messages for individual rescan failures. Successful queue operations register ingest jobs with descriptions and root information. A toast notification indicates the number of queued rescans.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_restore_backup:dbafccd68038c34354d0551cd2f2a81f9200f05de0de3702ffec037c19af707b:dbafccd68038c34354d0551cd2f2a81f9200f05de0de3702ffec037c19af707b": "Function retrieves a backup file path from user selection, clears existing project sessions, attempts to restore the selected backup, displays error message if restoration fails, and shows success notification upon completion.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_restore_splitter_sizes:4c932e124b4179e587561b1493cb5521597ce0d3dbee664891bcf08c1565447d:4c932e124b4179e587561b1493cb5521597ce0d3dbee664891bcf08c1565447d": "Function restores splitter widget sizes from saved settings or defaults. Retrieves previously saved splitter dimensions from instance attributes, falls back to configured default sizes if none exist, and applies the sizes to a splitter widget after validating the presence of the widget and correct number of size values. Sizes are adjusted to ensure minimum value of 80 pixels.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_reveal_project_storage:ae799d4a3b4b83dce4602b3a02ecb11f452fd87faac42af417635a1788f0b5c2:ae799d4a3b4b83dce4602b3a02ecb11f452fd87faac42af417635a1788f0b5c2": "Function reveals the storage directory for the active project by creating the directory path if it doesn't exist and opening it in the system's default file explorer.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_select_document_in_tree:ed6040b8a75a0e23bc4d514a034ff7d994be78925096b5022efdceea94e56939:ed6040b8a75a0e23bc4d514a034ff7d994be78925096b5022efdceea94e56939": "Function navigates a tree structure to find and select a document by its ID. It recursively searches through tree items, expands parent nodes when the document is found, sets the item as current, scrolls to its position, and returns a boolean indicating success or failure of the operation.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_set_lmstudio_status:78c2e3ab2571e0448734756ad5645142283ecbb5929910cdfb7d648e0a4b55de:78c2e3ab2571e0448734756ad5645142283ecbb5929910cdfb7d648e0a4b55de": "Sets the connection state of a question input component based on LMStudio health status. When healthy is True, clears any error message. When healthy is False, sets an error message indicating the health probe failed. Updates the connection state with a ConnectionState object containing the health status and optional message.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_set_panel_visibility:7e251f5a6a9372032061888d5d60edf72ccf8df2439ea4c4b5e8d04a0061de0b:7e251f5a6a9372032061888d5d60edf72ccf8df2439ea4c4b5e8d04a0061de0b": "Function sets the visibility of a panel widget at a specified index within a splitter container. It takes an integer index and boolean visibility flag as parameters. The function retrieves the widget from the splitter at the given index, checks if it exists, and then sets its visibility state. When making a widget visible, it explicitly calls show(), and when hiding, it calls hide(). The function operates on a widget stored in the instance's _splitter attribute.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_setup_window:bf4c5b96d70a1fa08c6b505d51b857a60b8da3cb5d889fd55226a744a63cbea3:bf4c5b96d70a1fa08c6b505d51b857a60b8da3cb5d889fd55226a744a63cbea3": "Configures the main application window with a fixed title and size. Sets the window title to \"DataMiner\" and resizes the window to 1280 pixels wide by 800 pixels tall.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_show_toast:2c0b062d5f0c6d9f18026922ca5f8d3b9dae2bd402bb36a9cb5cca581f4fff88:2c0b062d5f0c6d9f18026922ca5f8d3b9dae2bd402bb36a9cb5cca581f4fff88": "Displays a toast notification with the specified message, level, and duration by calling the underlying toast show_message method.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_snapshot_conversation_settings:267c07d1c6345a56c6454b15fc8c01c12ee6c5b58972dcccbac983a054852493:267c07d1c6345a56c6454b15fc8c01c12ee6c5b58972dcccbac983a054852493": "Function that captures and returns a dictionary containing conversation settings values, including reasoning verbosity level, plan visibility, assumption visibility, sources-only mode flag, answer length setting, and model name.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_store_active_project_session:0852672fcb186cd2860f6aa0adc016a6dccda83e03881a7b88aadb83baece993:0852672fcb186cd2860f6aa0adc016a6dccda83e03881a7b88aadb83baece993": "Stores the current project session state by capturing conversation settings and updating the session with turns, retrieval scope, last question, and settings. Saves the conversation settings to the project service.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_store_splitter_sizes:73ae20b6ca448e2afd1b9aab0f7c6447eb39cfaa060830cd7ae69c06fd851535:73ae20b6ca448e2afd1b9aab0f7c6447eb39cfaa060830cd7ae69c06fd851535": "Function stores splitter sizes when a splitter is present and has exactly three size values, but only if at least one size is greater than zero. The function retrieves sizes from the splitter, validates the count is three, checks that at least one size is positive, then saves the sizes to both an instance variable and a settings service.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_sync_answer_length_actions:93ff4f8755f71689e8f91ce6a7f1b2caef35952110061288f45cf3bdf1e98711:93ff4f8755f71689e8f91ce6a7f1b2caef35952110061288f45cf3bdf1e98711": "Function synchronizes answer length action states based on a given preset value. It retrieves a length action group from the instance, and if present, iterates through its actions. For each action containing AnswerLength data, it checks if the action's data matches the provided preset and updates the action's checked state accordingly.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_sync_assumptions_checkbox:7c86d4fb20c3a5df2b21602f2ab30bac6d152407ffa9ecbc61acbec89aeb84ef:7c86d4fb20c3a5df2b21602f2ab30bac6d152407ffa9ecbc61acbec89aeb84ef": "Function that synchronizes the checked state of a checkbox widget. Takes a boolean parameter indicating the desired state, and if the checkbox's current state differs from the desired state, it updates the checkbox while temporarily blocking signal handling to prevent recursive signal processing.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_sync_documents_with_known_files:5d207b3ce18dd4253cbabe1fe2aeaf9bb634719e08e979ec7e5547baa3fac418:5d207b3ce18dd4253cbabe1fe2aeaf9bb634719e08e979ec7e5547baa3fac418": "Function synchronizes document records in a project with a set of known file paths, creating new documents for missing files and updating existing ones with metadata. It also removes documents corresponding to file paths that are no longer present. The function processes file paths by normalizing them to absolute paths, compares current document records against the provided file list, and performs create, update, or delete operations on the document repository based on differences.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_sync_plan_checkbox:77ceef874f7f2649084652258872fb635d5954b6d0b6e5164a7a8b5c5573edea:77ceef874f7f2649084652258872fb635d5954b6d0b6e5164a7a8b5c5573edea": "Function that synchronizes a checkbox state by checking if it differs from the target enabled state, and updates it accordingly while temporarily blocking signal handling to prevent recursive triggers.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_sync_reasoning_combo:85618918b3808f59968eca0702d3e66b4ddf9dbf6198249d25844e6269975f64:85618918b3808f59968eca0702d3e66b4ddf9dbf6198249d25844e6269975f64": "Function synchronizes a combo box widget with a specified reasoning verbosity level by finding the corresponding index, updating the selection if needed, and temporarily blocking signal handling during the update.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_sync_sources_checkbox:8d7feafbeb867bbdf3d47d0ae5751912389c05f7b2889f9214d942680dfb01bc:8d7feafbeb867bbdf3d47d0ae5751912389c05f7b2889f9214d942680dfb01bc": "Function that synchronizes a checkbox state to a specified boolean value, temporarily blocking signal handling during the update to prevent recursive signal processing.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_toggle_corpus_panel:d1d88fb04212987b0aa342ec511bf73d3f2ed44639178fb6d6585892acaa7eaa:d1d88fb04212987b0aa342ec511bf73d3f2ed44639178fb6d6585892acaa7eaa": "Function that shows or hides a corpus panel based on a visibility flag. When making the panel visible, it updates settings to show the panel, sets the panel visibility to true, and restores previous splitter sizes. When hiding the panel, it stores current splitter sizes, sets the panel visibility to false, and updates settings to hide the panel.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_toggle_evidence_panel:4f0af59d0d91a5143a01eb73b4e6671ba364984bdd0525cf08dc2d293b8b3117:4f0af59d0d91a5143a01eb73b4e6671ba364984bdd0525cf08dc2d293b8b3117": "Function that shows or hides an evidence panel by managing panel visibility, storing and restoring splitter sizes, and updating settings. Takes a boolean parameter indicating whether to show (True) or hide (False) the panel. When showing, it enables the panel and restores previous splitter positions. When hiding, it saves current splitter positions before hiding the panel.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_update_corpus_actions:0c947ef4134cef94fc54f42dcab842d83aaa5c90e4062475d583e00812690c10:0c947ef4134cef94fc54f42dcab842d83aaa5c90e4062475d583e00812690c10": "Function updates corpus actions based on project state and corpus roots availability. Retrieves active project ID from project service, handles runtime errors by disabling actions, lists corpus roots for the project, and enables or disables rescan actions based on whether corpus roots exist.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_update_evidence_panel:55079b386360d93a61db702fbb476d77610c7f63a6b1c0a8f7e02e7ca12337f1:55079b386360d93a61db702fbb476d77610c7f63a6b1c0a8f7e02e7ca12337f1": "Function updates the evidence panel based on conversation turn citations, manages retrieval scope, session updates, and UI element states. Handles clearing evidence when no citations exist, sets evidence and scope when citations are present, updates session with current scope, enables/disables export action based on evidence count, and refreshes scope chip display. Also triggers citation highlighting in answer view.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_update_export_actions:efcc086e5eee5b284e6bad0a706e36ad96a460f6d14fb9f97adbf1b309fcc8a7:efcc086e5eee5b284e6bad0a706e36ad96a460f6d14fb9f97adbf1b309fcc8a7": "The function updates the enabled state of export actions based on whether turns are present. It checks if turns exist and enables or disables both markdown and HTML export actions accordingly.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_update_lmstudio_status:eee128dd3039f97858ec2a8d338bcb7287e588e42a28a17ceaf06f0171d6d15e:eee128dd3039f97858ec2a8d338bcb7287e588e42a28a17ceaf06f0171d6d15e": "Function that updates LMStudio status by performing a health check in a separate thread and setting the status message based on the result.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_update_question_prerequisites:e4628c57e6669c33cb54f4e4b6129dd6a317bb38d19250b887b0e86a22125820:e4628c57e6669c33cb54f4e4b6129dd6a317bb38d19250b887b0e86a22125820": "Function updates the prerequisite status for question input based on connection state and document presence. Sets prerequisites as met or not met along with an optional message depending on whether the connection is established and whether documents are available.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_update_scope_chip:f7213e1da25df1e7659dce8631b37a6519f8dfcc73d1835bc85bc86b6c64b1fb:f7213e1da25df1e7659dce8631b37a6519f8dfcc73d1835bc85bc86b6c64b1fb": "Updates a scope chip component with inclusion and exclusion count values derived from the current retrieval scope configuration. Retrieves the counts of include and exclude items from the _current_retrieval_scope dictionary, then passes these counts to an update_scope_chip method of the question_input object. The function does not return any value.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:_update_session:932247fe3bcf2dc145e7aee583ffdd4d171c89cc69f383a78eb5627c39d6c04f:932247fe3bcf2dc145e7aee583ffdd4d171c89cc69f383a78eb5627c39d6c04f": "Function updates session data for a specified project ID with provided fields. Creates a new session dictionary if one doesn't exist for the project ID. Uses default project ID from active project service if none provided. Accepts any keyword arguments to update session fields. Modifies session dictionary in place. Does not return any value.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:closeEvent:bd2eafbc14a53360a8f87381eca7b579756bb4a37180a2f90846abb3dc40a4cb:bd2eafbc14a53360a8f87381eca7b579756bb4a37180a2f90846abb3dc40a4cb": "Function handles application shutdown by stopping timers, unsubscribing from connections, and persisting state information before calling parent close event.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:ToastWidget:__init__:8530df7346c44044884d47b3a74210956199601e3a27c6683937f83c92191961:8530df7346c44044884d47b3a74210956199601e3a27c6683937f83c92191961": "Initializes a tooltip window with frameless appearance and translucent background. Sets up a label widget and horizontal layout with specified margins. Configures a property animation for window opacity with easing curve.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:ToastWidget:_fade_out:7c7839318596cfdafff4df56f868118b17b894bc1ce143faf73b15f2dd94d9e6:7c7839318596cfdafff4df56f868118b17b894bc1ce143faf73b15f2dd94d9e6": "Function stops an animation, sets up a fade-out transition from fully opaque to fully transparent, disconnects any existing finished signal handler for hide method, connects the hide method to the animation's finished signal, and starts the animation.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:ToastWidget:cbc694c9400f50d0842712a2d7791d1f5780e28569a26e14b2dfe55c5f24c969:cbc694c9400f50d0842712a2d7791d1f5780e28569a26e14b2dfe55c5f24c969": "The `ToastWidget` class implements a frameless, translucent tooltip window for displaying styled messages. It supports showing messages with optional duration and visual styling based on message level (error, warning, or info), positioning itself in the top-right corner of its parent widget. The widget fades in and out using property animations to provide visual feedback for user notifications.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:ToastWidget:show_message:0f4c438772d6c207a43e4b3898fdbae1b2dbf57c1f9ce6ce051ebbb74f15b4da:0f4c438772d6c207a43e4b3898fdbae1b2dbf57c1f9ce6ce051ebbb74f15b4da": "Displays a message with specified level and duration, updating the widget's appearance and positioning. Changes background and text colors based on message level, shows the message with animation, and schedules automatic fading out.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:__init__:1903b81ef1a4c6276562af0bf30cf140871ad1cf12652987e7e660a418707d27:1903b81ef1a4c6276562af0bf30cf140871ad1cf12652987e7e660a418707d27": "Initializes the `MainWindow` class with various service dependencies and sets up the application's window, UI components, and internal state. It configures services for settings, progress tracking, language model interaction, project management, document ingestion, search, and export. The constructor initializes UI elements such as menus, toolbar, status bar, and layout, and connects signals for project changes and ingest updates. It also sets up a timer for handling ingest updates and optionally monitors the health of the LMStudio client.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:__init__:22b38e48390f072e94b256fe95d76268cf7d903f9782951b74459d68811cb4ee:22b38e48390f072e94b256fe95d76268cf7d903f9782951b74459d68811cb4ee": "Initializes a `ToastWidget` instance as a tooltip window with a frameless, translucent background. Sets up a layout containing a label for displaying text and configures a property animation for window opacity transitions. The widget is initialized with a specific object name and window flags to ensure it appears as a non-modal tooltip.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:__init__:4438ab842a05ff3d081cb0ca05a1b844c589b95295bb80bcee37e18ef06797ba:4438ab842a05ff3d081cb0ca05a1b844c589b95295bb80bcee37e18ef06797ba": "Initializes a ToastWidget instance with a frameless tooltip window, translucent background, and animation support. Sets up a horizontal layout with a label for content display and configures a property animation for window opacity transitions.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:__init__:bd8a4bf26d1f2071aebdfd38f604aefc03912e064449d47568a46b7cfacc818a:bd8a4bf26d1f2071aebdfd38f604aefc03912e064449d47568a46b7cfacc818a": "Initializes the main window of the application, setting up services, UI components, and connections. It configures the window layout, creates actions, menus, and status bar, initializes conversation and search services, sets up timers for ingest updates and health monitoring, and connects various signals and slots for managing project changes, ingest updates, and UI state. The constructor also applies theme and font scaling settings, initializes project state, and configures question input settings.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_add_files_to_corpus:1759e440087b783a5e38d119944cff009f5e9ae515cc7de6927ff6bc7ed27a78:1759e440087b783a5e38d119944cff009f5e9ae515cc7de6927ff6bc7ed27a78": "The function `_add_files_to_corpus` allows the user to select files for indexing into the active project's corpus. It retrieves the active project, displays a file dialog to choose files based on a specified filter, and queues the selected files for ingestion using the ingest service. If no files are selected or an error occurs during queuing, it shows an appropriate error message. Upon successful queuing, it registers the ingestion job with a description and root directory, and displays a notification indicating that the files have been queued for indexing.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_add_files_to_corpus:71eac4bf6560d46ea321dd04c7b58ff7e63ea7f05a930746e8a60b812e44218f:71eac4bf6560d46ea321dd04c7b58ff7e63ea7f05a930746e8a60b812e44218f": "Adds selected files to the corpus by queuing them for indexing. Displays a file dialog to select files, validates the selection, and initiates the indexing process through the ingest service. Handles exceptions during job queuing and shows appropriate error messages. Registers the indexing job with metadata including project ID, file count, and root directory. Displays a toast notification confirming the files have been queued for indexing.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_add_folder_to_corpus:4a5676afb85233eb9d4005345481e08a3439d5fc310ee4894df3da791ea6ddc8:4a5676afb85233eb9d4005345481e08a3439d5fc310ee4894df3da791ea6ddc8": "The function `_add_folder_to_corpus` prompts the user to select a folder for indexing, queues the folder crawl using the ingest service, registers the job, updates the project's corpus roots, and displays a notification. It handles exceptions during the queuing process by showing an error message. The function integrates with the project and ingest services to manage corpus ingestion and updates the UI accordingly.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_add_folder_to_corpus:6d3a1d2a8579b5312e406df80b1bfb72928f36e31f7044c41ce8e3f2b6d3fbaf:6d3a1d2a8579b5312e406df80b1bfb72928f36e31f7044c41ce8e3f2b6d3fbaf": "Adds a selected folder to the corpus for indexing. Prompts the user to select a folder, queues the folder crawl using the ingest service, registers the indexing job, updates the project's corpus roots, and shows a notification toast. Handles exceptions during the queueing process by displaying an error message.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_apply_conversation_settings_snapshot:925ab5066fe1473e254b63fc077cb7cd488054cb64f78f9722bf7b91380cbd9c:925ab5066fe1473e254b63fc077cb7cd488054cb64f78f9722bf7b91380cbd9c": "Applies conversation settings from a snapshot dictionary, updating various configuration options such as reasoning verbosity, plan visibility, assumption visibility, sources-only mode, answer length, and model name. The function processes string representations of enumerated types, converts them to their respective enum values, and updates the conversation settings only if the new values differ from the current ones. It also configures the LMStudio client with the specified model name.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_apply_conversation_settings_snapshot:c737d2e29d22e0f6534cbd4a7ca4a784c35b61441b7a77a83146b18317d8a53c:c737d2e29d22e0f6534cbd4a7ca4a784c35b61441b7a77a83146b18317d8a53c": "The function `_apply_conversation_settings_snapshot` updates conversation settings based on a provided snapshot dictionary. It processes parameters such as reasoning verbosity, plan visibility, assumption visibility, sources-only mode, answer length, and model name. For each parameter, it resolves the value to the appropriate enumerated type if necessary, and applies the setting only if it differs from the current configuration. The function also configures the LMStudio client with the specified model name if provided.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_apply_density:4e7893e487daba2e110d9e7511a9f71f6741ffe51a159d63da34b90f8bc998ed:4e7893e487daba2e110d9e7511a9f71f6741ffe51a159d63da34b90f8bc998ed": "The function `_apply_density` adjusts the spacing and layout density of UI components in the `MainWindow` based on a specified density mode. It retrieves the density setting from the provided argument or falls back to a default value from the settings service. Depending on whether the mode is \"compact\" or another value (defaulting to \"comfortable\"), it sets the spacing for layouts within the splitter widgets to either 8 or 12 pixels. It also applies the density mode to the answer view, evidence panel, and question input components.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_apply_density:fd9611a38c8ea55b8a98afb6d9ad270545ee285b13d9a0c258d9c3a21dccef27:fd9611a38c8ea55b8a98afb6d9ad270545ee285b13d9a0c258d9c3a21dccef27": "The function `_apply_density` adjusts the spacing and density of UI elements in the main window based on a specified density mode. It retrieves the density setting from the provided parameter or falls back to a default value from the settings service. Depending on whether the mode is \"compact\" or another value, it sets the spacing for layouts within a splitter widget. It then applies the density mode to the answer view, evidence panel, and question input components.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_apply_font_scale:5591eec9a03acaf7c730627aebb2406cf705a9c18ce5eae2448134a8d998a7f2:5591eec9a03acaf7c730627aebb2406cf705a9c18ce5eae2448134a8d998a7f2": "The function `_apply_font_scale` is a method of the `MainWindow` class that applies a font scale adjustment by calling the `apply_font_scale()` method from the `settings_service` instance. It takes a single parameter `_scale` of type `float`, which is intended to define the scaling factor for fonts, although the parameter is not used within the function body. The method does not return any value.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_apply_font_scale:cfa53087b7406824008a08ab293b7f23fe3c0c458d0ecf10a369e5a7c0807458:cfa53087b7406824008a08ab293b7f23fe3c0c458d0ecf10a369e5a7c0807458": "The function `_apply_font_scale` takes a scaling factor as input and applies this font scale setting through the `settings_service` object. It does not return any value.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_apply_ingest_results:95a12e8452ee53c9bfaeb87919f48e9b56f17d98bc0b15272d59d87fee576fc3:95a12e8452ee53c9bfaeb87919f48e9b56f17d98bc0b15272d59d87fee576fc3": "The function `_apply_ingest_results` processes the results of a document ingestion job. It retrieves the project ID from the job information and, if valid, extracts summary data including known files and removed items. It synchronizes the document list with the known files and updates the corpus view and actions. It attempts to export a database snapshot for the project and stores the snapshot path in the project sessions if successful. If the export fails, it logs the exception.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_apply_ingest_results:cdc35320216b60a1b7536a76e80c667f30a60ef8b340c177a79bbf0c09c82c16:cdc35320216b60a1b7536a76e80c667f30a60ef8b340c177a79bbf0c09c82c16": "Applies ingest results by synchronizing documents with known files, refreshing the corpus view and actions, and exporting a database snapshot for the project. Handles cases where project ID is invalid or database snapshot export fails.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_apply_splitter_preferences:b0dd75a5c0aff817246b8d7da06e08560c1c9516156138df79caf9fc0ef160e4:b0dd75a5c0aff817246b8d7da06e08560c1c9516156138df79caf9fc0ef160e4": "The function `_apply_splitter_preferences` configures the splitter layout and panel visibility based on saved settings. It adjusts the sizes of the splitter panes, ensures minimum size constraints, and updates the visibility of the corpus and evidence panels. Additionally, it synchronizes the state of corresponding toggle actions in the user interface with the current settings, temporarily blocking signal handling to prevent recursive updates.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_apply_splitter_preferences:c80c87d0242b71ec238c7687f8d052db300aba23f003e913525ef106f936cd05:c80c87d0242b71ec238c7687f8d052db300aba23f003e913525ef106f936cd05": "Applies splitter size preferences and panel visibility settings from the settings service to the main window's splitter and associated actions. Configures the splitter sizes if valid sizes are present, and updates the visibility of corpus and evidence panels based on saved preferences. Also synchronizes the corresponding toggle actions with the current panel visibility states, temporarily blocking signal handling during updates.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_apply_theme:0462537699ab43a111d893faf599c42590b8df8d825acd457ad3139775552bfb:0462537699ab43a111d893faf599c42590b8df8d825acd457ad3139775552bfb": "The function `_apply_theme` applies a specified theme by calling the `apply_theme()` method from the `settings_service` and displays a toast message indicating the theme change.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_apply_theme:8b744a2311e76eb7fe7ddc6a2775f229696854e7afd9e46aa5e335757ace7429:8b744a2311e76eb7fe7ddc6a2775f229696854e7afd9e46aa5e335757ace7429": "The function `_apply_theme` applies a specified theme by calling the settings service to update the theme configuration and displays a toast notification indicating the theme change. The toast shows the theme name with capitalization applied to the first letter of each word and remains visible for 1500 milliseconds.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_ask_question:4e4cf678841fe6b07d176522a775881a84c66de4de98bf272d754f3de9f759fb:4e4cf678841fe6b07d176522a775881a84c66de4de98bf272d754f3de9f759fb": "The function `_ask_question` handles the process of submitting a user question to an AI language model via the `conversation_manager`. It first checks if the question is valid and if the LMStudio connection is available. If not, it notifies the user of the issue and returns early. If the connection is active, it updates the session state, sets the UI to busy, and initiates a progress indicator.\n\nThe function builds context and extra options for the request, then calls `conversation_manager.ask` to send the question. If an `LMStudioError` occurs during the request, it handles the error by notifying the user, updating the UI, and returning early.\n\nUpon successful submission, it records timing information, token usage, and appends the turn to the conversation history. It updates the UI with the new answer card, evidence panel, and export actions. Finally, it completes the progress indicator and updates the UI state to reflect the completed question submission.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_ask_question:68a449258330173dc557baaf18eaaa3f6520a8d312b4a8c8e93ceba02a4eef4b:68a449258330173dc557baaf18eaaa3f6520a8d312b4a8c8e93ceba02a4eef4b": "The function `_ask_question` handles submitting a user question to a conversation manager, managing the UI state during the process, and updating the conversation history with the response. It checks for valid input and connection state, updates session data, displays progress, and processes the response from the conversation manager. If an error occurs during the request, it notifies the user and updates the UI accordingly. Upon successful submission, it records timing and token usage information, adds the turn to the view, and updates related panels and actions.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_build_default_export_path:1770f0284e4d6b8588c5833ae8275123e376a4323f33d6831db487c0aaf67ec5:1770f0284e4d6b8588c5833ae8275123e376a4323f33d6831db487c0aaf67ec5": "The function `_build_default_export_path` constructs a file path for exporting data related to the active project. It retrieves the active project, sanitizes its name to create a URL-safe slug, and uses the project's storage location or the default storage root to determine the base directory. The resulting path combines the base directory, the sanitized project name (with a specified suffix), and returns it as a string.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_build_default_export_path:5df149d6911c0b724055d75a6578298c67a775ada0856b22eaa85851685be048:5df149d6911c0b724055d75a6578298c67a775ada0856b22eaa85851685be048": "Constructs a default export file path using the active project's name and a specified suffix. The method sanitizes the project name to create a URL-safe slug, retrieves the project's storage location, and combines it with the slug and suffix to form the complete path. If no storage location is found, it uses the storage root directory instead.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_build_extra_request_options:0b4576f06b89f1890a7a03af5acdb7ab0cd793ad3385a909c9ad6de344ba4819:0b4576f06b89f1890a7a03af5acdb7ab0cd793ad3385a909c9ad6de344ba4819": "Builds and returns a dictionary of extra request options for retrieval, based on the current retrieval scope and provided parameters. The function constructs a retrieval configuration containing query terms, included/excluded items from the scope, and optional documents, then wraps this in a \"retrieval\" key within the returned options dictionary. Returns an empty dictionary if no retrieval configuration is constructed.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_build_extra_request_options:ffb16ff2c26dd0464e50ba57b2ba9ac9d6f85e227041a89b2d7bb29db2756266:ffb16ff2c26dd0464e50ba57b2ba9ac9d6f85e227041a89b2d7bb29db2756266": "The function `_build_extra_request_options` constructs and returns a dictionary of options for use in a request, based on the current retrieval scope and provided parameters. It initializes an empty dictionary `options`, retrieves include and exclude filters from the current retrieval scope, and populates a `retrieval` sub-dictionary with query text, inclusion criteria, exclusion criteria, and document references if they are provided. The resulting `retrieval` dictionary is then added to `options` under the key `\"retrieval\"` only if it contains any data. The function supports optional parameters for a question string and a list of retrieval documents.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_build_step_context_provider:b1292d5ac7e6715aefa496f32fc4130c5b67f74cd8c6d816744936d9ebc32aeb:b1292d5ac7e6715aefa496f32fc4130c5b67f74cd8c6d816744936d9ebc32aeb": "Builds a context provider function that generates StepContextBatch objects for a given plan item and step index, using search results based on a combined query of the normalized question and step prompt. The provider filters records by include/exclude identifiers from the current retrieval scope, chunks the records, and constructs context batches with snippets and documents derived from the records. Returns an empty list if no active project is available.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_build_step_context_provider:e3295e8e3192ae46482b1386c31697f624f611ff8337a96deeee7298d2d2124e:e3295e8e3192ae46482b1386c31697f624f611ff8337a96deeee7298d2d2124e": "The function `_build_step_context_provider` constructs and returns a callable that generates context batches for a given plan item during a step in a process. It takes a question string as input and prepares a provider function that, when invoked with a `PlanItem`, step index, and total steps, retrieves relevant context records using the search service. The retrieved records are then chunked and formatted into `StepContextBatch` objects, which contain snippets and document references. The provider uses a normalized version of the input question combined with the plan item's description to perform the search, and it respects inclusion and exclusion scopes defined in `_current_retrieval_scope`. If no active project is found, it returns an empty iterable.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_chunk_records:6170397ff9a16444f2b5241f68790206d9722a4f468579c0fa47ea4419dbd000:6170397ff9a16444f2b5241f68790206d9722a4f468579c0fa47ea4419dbd000": "The function `_chunk_records` takes an iterable of dictionaries (`records`) and a chunk size (`chunk_size`) as input. It processes the records sequentially, grouping them into sublists (chunks) of the specified size. Each yielded chunk is a list of dictionaries from the input iterable. If the total number of records is not evenly divisible by the chunk size, the final chunk will contain the remaining records. This function is useful for processing large datasets in fixed-size batches.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_chunk_records:be5b69450f741461106c563ae199ee950872f39e679c9428009ef776eeb0cca9:be5b69450f741461106c563ae199ee950872f39e679c9428009ef776eeb0cca9": "The function `_chunk_records` takes an iterable of dictionaries and a chunk size, then yields lists of dictionaries where each list contains at most the specified number of records. It processes the input records sequentially, accumulating them into chunks of the defined size, and yields each complete chunk as it reaches the size limit. Any remaining records that don't fill a complete chunk are yielded as the final, potentially smaller chunk.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_configure_question_settings_menu:5ed296a6ed408214a09e3a853a86bb2ec409fd009c2a1582c720531b79556673:5ed296a6ed408214a09e3a853a86bb2ec409fd009c2a1582c720531b79556673": "Configures a question settings menu with options for answer length presets and model selection. Creates a submenu for answer length with exclusive radio button options based on AnswerLength enum values, sets the current answer length as checked, connects the length selection to a handler, adds a model setting action, and associates the menu with the question input widget.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_configure_question_settings_menu:e340910c8d6cbb873b51969baf99b9b92251bfe0d9003125b9a256286ae4d7db:e340910c8d6cbb873b51969baf99b9b92251bfe0d9003125b9a256286ae4d7db": "The function `_configure_question_settings_menu` creates a context menu for configuring response settings within the application's question input widget. It adds options for selecting the answer length from predefined presets (using an `AnswerLength` enum) and a separate action to set the model. The menu is associated with the question input field, and the current answer length setting is synchronized with the UI actions. The menu includes a checkable action group for exclusive selection of answer length presets, and connects the selection to a handler function for updating the setting. A separator is added before the model selection action, which triggers a method to prompt the user for a model name. Finally, it synchronizes the UI state with the current conversation settings.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_connect_services:c5fc386171faa7e1f9d6ec074f1a0d1de46fdd07d52895a318517a4c2dbc4769:c5fc386171faa7e1f9d6ec074f1a0d1de46fdd07d52895a318517a4c2dbc4769": "The function `_connect_services` establishes signal-slot connections between various service objects and corresponding handler methods within the `MainWindow` class. It links theme, font scale, and density changes from the `settings_service` to UI update functions. Additionally, it connects progress-related signals from `progress_service` to handlers for progress updates and toast notifications. The function also connects changes in conversation settings\u2014such as reasoning verbosity, plan visibility, assumption visibility, sources-only mode, answer length, and model selection\u2014to their respective event handlers and persistence mechanisms.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_connect_services:fa29f0845fe384c947d7565a3d4822273e3e6f9f9a699ad8d044580c9865174d:fa29f0845fe384c947d7565a3d4822273e3e6f9f9a699ad8d044580c9865174d": "Connects various signals from service and settings objects to their corresponding handler methods within the main window. Specifically binds theme, font scale, and density change events to UI update functions; progress tracking events to progress display handlers; toast notification requests to display functions; and conversation settings changes to persistence and update handlers.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_context_payload_from_records:05b3b902a35d4729d09b71e30e7a861ff694535262ecbf7dd7ab9b1a36252488:05b3b902a35d4729d09b71e30e7a861ff694535262ecbf7dd7ab9b1a36252488": "The function `_context_payload_from_records` processes an iterable of record dictionaries to generate two outputs: a list of formatted text snippets and a list of document payloads. Each record is expected to contain information about a document, chunk, and context text. The function extracts and formats the title, identifiers, and other metadata from the document and chunk data, constructs a header for each snippet, and appends the context text. It also builds a structured payload dictionary for each record with fields such as ID, source, score, path, and various chunk-related offsets. The `step_index` parameter is used to prefix the snippet headers when provided. If no valid context text is found in a record, it is skipped. The function returns a tuple containing the list of formatted snippets and the list of document payloads.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_context_payload_from_records:349ce56e3e36d00994c41e1dc1772fceaabc70dcde40511ef526638a3e8ecd9d:349ce56e3e36d00994c41e1dc1772fceaabc70dcde40511ef526638a3e8ecd9d": "The function `_context_payload_from_records` processes an iterable of record dictionaries to generate two outputs: a list of formatted text snippets and a list of document payloads. Each record is expected to contain information about a document, chunk, and context text. The function extracts and formats metadata such as title, source path, identifiers, and scoring information. It constructs snippet headers with optional step prefixes and combines them with context text. The resulting snippets are plain-text representations, while the payloads are structured dictionaries containing detailed metadata for each retrieved document chunk, including offsets, scores, and identifiers. The function handles missing or invalid data gracefully by providing default values or skipping entries.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_copy_chat_text:48e987314b2bf56e27403cfb8ef0a171bd6f72e5bc3f7b2b8cfb48ad7cceb17b:48e987314b2bf56e27403cfb8ef0a171bd6f72e5bc3f7b2b8cfb48ad7cceb17b": "Copies the plain text content from `self.answer_view` to the system clipboard and displays a notification indicating that the conversation has been copied.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_copy_chat_text:cfe2ab419979f8e4984f5b5b9cfe80ccd2629216c598974b4a43587128b763a9:cfe2ab419979f8e4984f5b5b9cfe80ccd2629216c598974b4a43587128b763a9": "The function `_copy_chat_text` copies the plain text content from `self.answer_view` to the system clipboard and displays a notification indicating that the conversation has been copied.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_create_actions:bcba4b2e6467f0b56bb9d0330e7a284fc7dbf06511c53e0fa8f3cdfd78f9a7f1:bcba4b2e6467f0b56bb9d0330e7a284fc7dbf06511c53e0fa8f3cdfd78f9a7f1": "The function `_create_actions` initializes and configures a set of `QAction` objects for the `MainWindow` class. These actions correspond to various user interface options such as opening settings, accessing help, toggling themes, managing projects (creating, renaming, deleting, revealing storage, and purging data), backing up and restoring project data, exporting conversations and snippets, and managing corpus content (adding folders/files and rescanning indexed folders). Each action is connected to a respective handler method, and some actions are initially disabled, such as those related to exporting and rescanning. The function sets up the foundational menu and toolbar actions for the application's functionality.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_create_actions:f2d4c7e9f8734e586f9b0cb35e662a4372bf3fafbd59394750e5d8690d3eb032:f2d4c7e9f8734e586f9b0cb35e662a4372bf3fafbd59394750e5d8690d3eb032": "Creates and configures a set of actions for the main window, including settings, help, theme toggling, project management (new, rename, delete, reveal storage, remove data), backup and restore operations, conversation export (Markdown, HTML), snippet export, and corpus management (add folders/files, rescan). Connects each action's triggered signal to its corresponding handler method. Disables several export and rescan actions by default.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_create_backup:8928c039f186d0b9fd22c082b0e0fe4b7c791cbd666decfc591d063b994ce395:8928c039f186d0b9fd22c082b0e0fe4b7c791cbd666decfc591d063b994ce395": "The function `_create_backup` initiates the creation of a backup archive for the application. It prompts the user to select a destination path using a file dialog, defaulting to a name based on the project's export path with a \"-backup.zip\" suffix. If no path is chosen, the function exits. It then attempts to create the backup at the specified location using the `backup_service.create_backup` method. If an exception occurs during the process, an error message is displayed to the user. On successful completion, a toast notification confirms the backup location.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_create_backup:b095fc1ce839451d298aa32b74fce71e5de3724d92dbcd2a6ca28a05cc6dd7eb:b095fc1ce839451d298aa32b74fce71e5de3724d92dbcd2a6ca28a05cc6dd7eb": "Creates a backup of the application data by prompting the user to select a destination file path, then invokes the backup service to generate the backup archive at the specified location. Displays an error message if the backup fails, and shows a success notification with the saved file path upon completion.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_create_conversation_controls:737147a2e0a2a07cea3ac2efc21f445abb5537438b3e32e68c2489410d2e17f1:737147a2e0a2a07cea3ac2efc21f445abb5537438b3e32e68c2489410d2e17f1": "Creates a frame containing controls for conversation settings, including a reasoning verbosity dropdown, plan and assumptions checkboxes, and a sources-only mode checkbox. The frame is laid out horizontally with spacing and margins set to zero. Connections are established between the UI elements and corresponding setter methods in `conversation_settings`, as well as synchronization signals that update the UI when settings change.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_create_conversation_controls:b4e2a068293e65e1678e17e6ba487fa2c10225dfa5a98b1b5089f073106a6bb2:b4e2a068293e65e1678e17e6ba487fa2c10225dfa5a98b1b5089f073106a6bb2": "Creates a frame containing controls for configuring conversation settings, including reasoning verbosity, plan visibility, assumption visibility, and sources-only mode. The frame includes a label and combo box for selecting reasoning verbosity levels, checkboxes for toggling plan and assumption visibility, and a checkbox for enabling sources-only mode. Connections are established between the controls and corresponding event handlers and settings properties to synchronize state changes.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_create_layout:98ede5e9d6502bfa9b342a899a46c9a619a7bd8083f5b09aef17e0938f1c8d8a:98ede5e9d6502bfa9b342a899a46c9a619a7bd8083f5b09aef17e0938f1c8d8a": "The `_create_layout` method defines the main user interface layout for the `MainWindow` class. It creates a horizontal splitter with three panels: a left corpus panel for document ingestion and selection, a center chat panel for conversation and question input, and a right evidence panel for displaying retrieved results. The corpus panel includes controls for indexing folders and files, rescanning indexed folders, and a tree widget for selecting documents. The chat panel contains an `AnswerView` for displaying AI responses, conversation controls, and a `QuestionInputWidget` for user queries. The evidence panel handles citation viewing and navigation. The layout uses splitters to manage panel resizing and applies styling through object names. Keyboard shortcuts are also set up for focusing the corpus panel and copying chat text.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_create_layout:a1ddc12d9cec4282a45808eadd40e5b87dd0efb8d98d7840c32fefe2fd679633:a1ddc12d9cec4282a45808eadd40e5b87dd0efb8d98d7840c32fefe2fd679633": "Creates the main window layout with three panels: corpus selector on the left, conversation in the center, and evidence viewer on the right. Sets up the splitter for resizing panels, configures controls for corpus management including indexing and rescan options, initializes the corpus tree widget, sets up the chat interface with answer view and question input, and connects signals for evidence panel interactions. Configures keyboard shortcuts for focusing corpus and copying chat text.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_create_menus_and_toolbar:7003eac5667c1da3472abef7a64ce932615a2d56269623ae0658152ad9a48283:7003eac5667c1da3472abef7a64ce932615a2d56269623ae0658152ad9a48283": "Creates the main window's menu bar, including File, Help, and View menus, along with a toolbar. The File menu contains actions for project management, corpus handling, and exporting data. The View menu includes options to toggle panels and adjust layout density. A toolbar is added with common actions and a project selection combo box.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_create_menus_and_toolbar:c7184a09ab360a9c10be2ead4d1ea45a30806615bd86a4324e3b4078afbff68f:c7184a09ab360a9c10be2ead4d1ea45a30806615bd86a4324e3b4078afbff68f": "The function `_create_menus_and_toolbar` creates the main menu bar and toolbar for the `MainWindow` class. It defines several menus including \"File\", \"Help\", and \"View\", and populates them with actions and submenus for project management, corpus handling, export options, backup and restore functionality, and UI customization. The \"File\" menu includes actions for managing projects, adding corpus items, rescanning the corpus, exporting content, and performing backup/restore operations. The \"View\" menu allows toggling of corpus and evidence panels, as well as setting the display density. A toolbar is also created with common actions and a project selection combo box.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_create_status_bar:c4ab464466d8109a71269c2b1094d3ffa4e208c9a29c3f044c7cb902e90bc449:c4ab464466d8109a71269c2b1094d3ffa4e208c9a29c3f044c7cb902e90bc449": "Creates and configures a status bar for the main window, including a project label and a progress bar. The progress bar is initially hidden and has a maximum width of 200 pixels. The project label displays text generated by the `_project_label_text()` method. The status bar is added to the main window using `setStatusBar()`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_create_status_bar:c913fc6fa2274afd6d9aa576cba57c8d1c4cc397934578e1c64a962bd172dc58:c913fc6fa2274afd6d9aa576cba57c8d1c4cc397934578e1c64a962bd172dc58": "Creates and configures a status bar for the main window with a project label and a progress bar. The status bar is initialized with a QLabel displaying project information, and a QProgressBar that is initially hidden and constrained to a maximum width of 200 pixels. The progress bar is added as a permanent widget to the status bar.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_delete_current_project:5f300ec432af9ac31f1f4f1fabe8491805c578d638765117f16159d3b6afb92b:5f300ec432af9ac31f1f4f1fabe8491805c578d638765117f16159d3b6afb92b": "Deletes the currently active project after confirming with the user and replacing it with an alternative project. If no alternative projects exist, informs the user to create another project first. Displays a confirmation dialog before deletion and shows a toast notification upon completion.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_delete_current_project:94b0496197ac7cd466d65cbc5cfab9287ad08ec7320421005b0e5f5439f4f2ad:94b0496197ac7cd466d65cbc5cfab9287ad08ec7320421005b0e5f5439f4f2ad": "The function `_delete_current_project` handles the deletion of the currently active project. It first retrieves the active project and identifies alternative projects available for selection. If no alternatives exist, it shows an information message prompting the user to create another project before deleting the current one. If alternatives are present, it displays a confirmation dialog asking the user to confirm the deletion of the active project. If the user confirms, the function stores the current project session, sets a replacement project as active, deletes the original project, removes its session data, and shows a toast notification indicating that the project has been deleted.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_drain_ingest_updates:0ab71a701a9f887d1383e7393a3e59c862ea4ef415dd615a96fcdb524c734039:0ab71a701a9f887d1383e7393a3e59c862ea4ef415dd615a96fcdb524c734039": "The function `_drain_ingest_updates` processes all available ingest updates from a queue. It continuously retrieves items from `self._ingest_updates` using `get_nowait()` until the queue is empty, then calls `_handle_ingest_update` for each retrieved item. The function does not block and handles any `queue.Empty` exception by breaking out of the loop when no more items are present.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_drain_ingest_updates:e2aac5e2c973a96061bdefdfce3e99286b7656c889b321faca0c3569edc71454:e2aac5e2c973a96061bdefdfce3e99286b7656c889b321faca0c3569edc71454": "Processes all available ingest updates from the queue by retrieving them using a non-blocking get operation and handling each update with the dedicated handler method. The function continues processing until the queue is empty, then exits.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_enqueue_ingest_update:38a8b26fb97a951b38e05d7314c7733370709ce5e45755f3d2e0d1789a1a9693:38a8b26fb97a951b38e05d7314c7733370709ce5e45755f3d2e0d1789a1a9693": "Enqueues an ingest update task containing a job ID and payload into the internal queue for processing.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_enqueue_ingest_update:dd38e0d8d559621fa870bf7a34d539831243917958da8ce5c6a658a8e71754e8:dd38e0d8d559621fa870bf7a34d539831243917958da8ce5c6a658a8e71754e8": "The function `_enqueue_ingest_update` adds an ingest update task to a queue. It takes a `job_id` and a `payload` dictionary as input parameters and places them into `self._ingest_updates`, which is expected to be a queue-like structure for managing ingest-related updates. The function does not return any value.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_export_conversation_html:004c1e949e657258c6cde04fc713849b7e4b470e17a74d8bb18b67c31d688e9f:004c1e949e657258c6cde04fc713849b7e4b470e17a74d8bb18b67c31d688e9f": "Exports the current conversation to an HTML file. Displays an error message if no conversation is available. Uses a file dialog to select the export location and handles exceptions during the export process. Shows a success notification upon completion.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_export_conversation_html:18a23a65bee5ff2f8e7ca6e97a35590d44b378e1c1d8bfda78d05341ead7a77d:18a23a65bee5ff2f8e7ca6e97a35590d44b378e1c1d8bfda78d05341ead7a77d": "Exports the current conversation to an HTML file. Displays an error message if no conversation is available. Uses a file dialog to prompt the user for a save location and calls the export service to generate the HTML file with the conversation data and project metadata. Shows a success toast notification upon completion. If the export fails, displays an error message.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_export_conversation_markdown:24ed2ec613fba1cd3e2e8476ca46c04a139f8094b17634570bda6c2afaee555f:24ed2ec613fba1cd3e2e8476ca46c04a139f8094b17634570bda6c2afaee555f": "Exports the current conversation to a Markdown file. Displays an error message if no conversation is available. Uses a file dialog to select the export location with a default path based on the active project. Shows a success toast notification upon completion. Handles exceptions during export by displaying an error message.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_export_conversation_markdown:db1cecc1d08b64229dd2b69f30a2c7f33cd0e018925b3c878e4d3051950ff266:db1cecc1d08b64229dd2b69f30a2c7f33cd0e018925b3c878e4d3051950ff266": "Exports the current conversation turns to a Markdown file. Displays an information message if no conversation is available. Uses a file dialog to select the export path with a default name based on the active project. Handles exceptions during export and shows a critical message if the export fails. On successful export, displays a toast notification.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_export_selected_snippet:6fbbf531abd6308bc7359e83b30f97c98bc0f528fa440847d663db2469b81a89:6fbbf531abd6308bc7359e83b30f97c98bc0f528fa440847d663db2469b81a89": "Exports the currently selected evidence snippet to a text file. Displays an error message if no snippet is selected, prompts the user for a save location with a default path, and handles export failures with a critical error dialog. On successful export, shows a toast notification.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_export_selected_snippet:acbb4c5015e400acc2e8d2c41a6bf56958d23164a4ddd50e601cfa2a641b0492:acbb4c5015e400acc2e8d2c41a6bf56958d23164a4ddd50e601cfa2a641b0492": "Exports the selected evidence snippet from the `_evidence_panel` to a text file. If no snippet is selected, it shows an information message. It prompts the user to choose a save location with a default path, prepares the snippet data including label, HTML content, and metadata, and uses `export_service` to write the data to the chosen file. If the export fails, it displays a critical error message. On successful export, it shows a toast notification.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_extract_token_usage:5478febaefc319bf8fc4705eabab7128b14b9eff03640f4a0cd6958381d12a45:5478febaefc319bf8fc4705eabab7128b14b9eff03640f4a0cd6958381d12a45": "Extracts token usage information from a conversation turn's raw response and returns a dictionary mapping usage keys to integer values, or None if no valid usage data is found.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_extract_token_usage:fcf446d2bbf04d9332acd1765c3f1a22aa61403f008784e30b6d9f50abc9df07:fcf446d2bbf04d9332acd1765c3f1a22aa61403f008784e30b6d9f50abc9df07": "The function `_extract_token_usage` extracts token usage information from a `ConversationTurn` object's raw response. It retrieves the `usage` dictionary from the response, validates its type, and attempts to convert all values to integers. The function returns a dictionary mapping usage keys to their integer values, or `None` if the input is invalid or no valid data is found.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_fade_out:45519af8402e00a315f5684a58bbd0aa35cf570922f4cfd31f6f650c09b10096:45519af8402e00a315f5684a58bbd0aa35cf570922f4cfd31f6f650c09b10096": "The `_fade_out` method initiates a fade-out animation for the toast widget. It stops any existing animation, configures a new animation to transition the widget's opacity from fully opaque (1.0) to fully transparent (0.0), disconnects any existing connection to the `hide` method from the animation's finished signal, connects the `hide` method to the animation's finished signal, and then starts the animation.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_fade_out:d3820655fc64bc0b14d5a33cd9abb3f1176fba8553a4dd5e4eeb51478e8216f9:d3820655fc64bc0b14d5a33cd9abb3f1176fba8553a4dd5e4eeb51478e8216f9": "The `_fade_out` method initiates a fade-out animation for the toast widget. It stops any ongoing animation, sets up a transition from full opacity (1.0) to transparent (0.0), disconnects any existing connection to the `hide` method from the animation's finished signal, connects the `hide` method to the finished signal, and starts the animation.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_focus_corpus:46dcf81713e4140e904ccc58de7e7c88741a26b9bac141dab3dcedd7784f5648:46dcf81713e4140e904ccc58de7e7c88741a26b9bac141dab3dcedd7784f5648": "Sets keyboard focus to the corpus tree widget within the main window.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_focus_corpus:6966a37480f78d8499189af2cf6be8c205ca3e06cc73c045bae854d6b0ad763e:6966a37480f78d8499189af2cf6be8c205ca3e06cc73c045bae854d6b0ad763e": "The function `_focus_corpus` sets the focus to the corpus tree widget within the main window.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_focus_tree_by_path:a83bc524a72a41f5eff9529c2ab4e0c42f2c447c8201b9a3a8e1b9c2086cd424:a83bc524a72a41f5eff9529c2ab4e0c42f2c447c8201b9a3a8e1b9c2086cd424": "The function `_focus_tree_by_path` navigates and focuses a specific item in a corpus tree structure based on a provided file path. It searches through the tree recursively, comparing each item's tooltip (which contains a file path) with the target path. When a match is found, it expands all parent items of the matching node, sets the node as the current item in the tree, and scrolls to its position. The function uses a helper nested function `visit` to perform the recursive traversal of the tree. If no matching path is found, the function returns without making changes.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_focus_tree_by_path:bcc5292f85387f7250d8d94c78fc7a25c5fa3dda43fdf9d3630c113e53958e37:bcc5292f85387f7250d8d94c78fc7a25c5fa3dda43fdf9d3630c113e53958e37": "The function `_focus_tree_by_path` searches for a tree item in `_corpus_tree` that corresponds to a given file path. It traverses the tree recursively, comparing each item's tooltip (assumed to contain a file path) with the target path. When a match is found, it expands all parent items of the matching item, selects it as the current item, and scrolls to its position in the tree view. The function returns immediately upon finding the first matching path.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_handle_ask:3b2ac0d98a3e19b7f6bc911ef2098bfe5193da16ff1fdfb4a32af90e8c2bd1ad:3b2ac0d98a3e19b7f6bc911ef2098bfe5193da16ff1fdfb4a32af90e8c2bd1ad": "Handles user input text by checking if it's empty, validating connection state to LMStudio, updating prerequisites if disconnected, showing error notifications, and processing the question if connected.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_handle_ask:fbcb80b18088c7cbf5838f9695209d0949b8cd3728dc6839c0dfda7882006b01:fbcb80b18088c7cbf5838f9695209d0949b8cd3728dc6839c0dfda7882006b01": "The function `_handle_ask` processes a user's question input by first checking if the input is empty and returning early if it is. It then checks the connection state of the conversation manager. If the system is not connected to LMStudio, it updates prerequisites, notifies the user of the connection issue, and returns. If connected, it marks the input as busy and proceeds to ask the question using the `_ask_question` method.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_handle_ingest_update:1515a31670adf8de635469432cd21eb95580a4e4ca3558725527011142f0c030:1515a31670adf8de635469432cd21eb95580a4e4ca3558725527011142f0c030": "Handles updates to an ongoing ingest job, updating progress, status, and results. It processes job information from `_ingest_jobs`, updates the UI via `progress_service`, and applies results or shows notifications based on the task's status (running, paused, completed, cancelled, failed). Removes the job from `_ingest_jobs` upon completion or failure.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_handle_ingest_update:59b151bb6f0253861584b290fb2c37ff94e3cb07a57f4201908ddd6c446777a7:59b151bb6f0253861584b290fb2c37ff94e3cb07a57f4201908ddd6c446777a7": "Handles updates to ingest jobs based on task status and progress. Updates progress UI, applies results on completion, and shows notifications for various outcomes including success, cancellation, or failure. Removes completed job from tracking.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_ingest_file_filter_spec:3f964e4745d63c07a61607fec7794ec5abb9b63f5de30d7d521f0abe50e143cf:3f964e4745d63c07a61607fec7794ec5abb9b63f5de30d7d521f0abe50e143cf": "Returns a string formatted as a file filter specification for document ingestion, combining included file patterns with a fallback to all files.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_ingest_file_filter_spec:dee8658454332d268ce637b99c01e3a67c9e44e165d0da2a110598734808ec85:dee8658454332d268ce637b99c01e3a67c9e44e165d0da2a110598734808ec85": "The function `_ingest_file_filter_spec` constructs a file filter string for document ingestion. It retrieves include patterns using `_ingest_include_patterns`, joins them into a single string, and formats them into a filter specification suitable for file dialogs. The resulting string defines a filter named \"Documents\" that includes files matching the specified patterns, followed by an \"All Files\" option.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_ingest_include_patterns:5010e5ed7e82d8fbf1ecbbd75ebbf535169528be12f0b5350a0a135f0d4f1d58:5010e5ed7e82d8fbf1ecbbd75ebbf535169528be12f0b5350a0a135f0d4f1d58": "The function `_ingest_include_patterns` returns a list of supported file patterns for document ingestion. It retrieves these patterns from the `SUPPORTED_PATTERNS` constant and converts them into a list. This list is used to determine which file types can be processed during corpus ingestion.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_ingest_include_patterns:c5daa05a0c9f2c1f27c1acc34fb56226a1421bfb4babd250f34c047f6afaea00:c5daa05a0c9f2c1f27c1acc34fb56226a1421bfb4babd250f34c047f6afaea00": "Returns a list of supported include patterns by converting the SUPPORTED_PATTERNS constant to a list.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_initialise_project_state:18bccc6de9fa3604a0601585cfa355583fd08ef7919f323c547b9d5593d2f328:18bccc6de9fa3604a0601585cfa355583fd08ef7919f323c547b9d5593d2f328": "Initializes the project state by refreshing the project selector, retrieving the active project, and loading its session data.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_initialise_project_state:28ad7f9774eacb98c8a80e0bde14022cd0beaefe515b5748266cf0f7b4e94356:28ad7f9774eacb98c8a80e0bde14022cd0beaefe515b5748266cf0f7b4e94356": "The function `_initialise_project_state` initializes the project state by refreshing the project selector and loading the session for the currently active project. It retrieves the active project using `self.project_service.active_project()` and then loads its session data using `self._load_project_session(active.id)`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_load_project_session:62fda7ae088918c0ad7eef4bb7a58502905dce7831d4213107984d883843671b:62fda7ae088918c0ad7eef4bb7a58502905dce7831d4213107984d883843671b": "Loads and applies project session data for a given project ID, initializing conversation turns, retrieval scope, and UI elements. Retrieves conversation settings, updates the conversation manager, renders turns in the answer view, sets up citation evidence display, and refreshes corpus-related UI components. Handles initialization of session data if no existing session is found for the project.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_load_project_session:b32eba99657840a355ce95f923612ce32d68bd569b0a0b2f5b9d676ea91c5eaa:b32eba99657840a355ce95f923612ce32d68bd569b0a0b2f5b9d676ea91c5eaa": "Loads and initializes a project session based on the provided project ID. Retrieves conversation settings, turns, and retrieval scope from the session, and updates the UI components including the answer view, evidence panel, and corpus actions. Restores the conversation context, applies settings, and refreshes related UI elements.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_on_active_project_changed:9e94b01964ee0871d01fc7d83143be1e658b9b04cf67ec91d5816aa368029785:9e94b01964ee0871d01fc7d83143be1e658b9b04cf67ec91d5816aa368029785": "The function `_on_active_project_changed` is triggered when the active project in the application is changed. It performs two main actions: first, it refreshes the project selector UI element by calling `_refresh_project_selector()`. Second, it initializes a new `SearchService` instance using components from the `project_service`, and then loads the session data associated with the newly selected project by calling `_load_project_session(project.id)`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_on_active_project_changed:a289f4bd81cf29569e83bdd6e01d5af8d1868f8d410cd7472def08ee883f8830:a289f4bd81cf29569e83bdd6e01d5af8d1868f8d410cd7472def08ee883f8830": "The function `_on_active_project_changed` is called when the active project in the main window is changed. It performs three key actions: first, it refreshes the project selector UI element; second, it creates a new `SearchService` instance using the project service's ingest, documents, and chats data; and third, it loads the session data associated with the newly selected project using its ID.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_on_answer_length_action_triggered:45f687cddddf4b4d3bb9d421418284b84e54fdb68b975522b8bd9822ed85ec96:45f687cddddf4b4d3bb9d421418284b84e54fdb68b975522b8bd9822ed85ec96": "The function `_on_answer_length_action_triggered` is a slot method that handles changes to the answer length setting in the user interface. It retrieves an `AnswerLength` preset from the triggered `QAction`, validates its type, and applies it to the current conversation settings. This allows users to select predefined answer length options, which are then used to configure the response length for AI-generated answers within the application's conversation context.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_on_answer_length_action_triggered:b741c024387b9221041bc912329599750672d7439db3425051b837c02caf6fa7:b741c024387b9221041bc912329599750672d7439db3425051b837c02caf6fa7": "Sets the answer length preset in conversation settings based on the data associated with the triggered action.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_on_answer_length_changed:addc9e46a7f25e5bb064577dbcf69c5b0cce5fc935b25d652b1d487a477343f2:addc9e46a7f25e5bb064577dbcf69c5b0cce5fc935b25d652b1d487a477343f2": "Handles changes to the answer length preset by updating the question input component, synchronizing the corresponding UI actions, and persisting the conversation settings.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_on_answer_length_changed:c196bc3d2769e028d9061692b653572099c941c8dc0ebf556fbac37536bbd735:c196bc3d2769e028d9061692b653572099c941c8dc0ebf556fbac37536bbd735": "The function `_on_answer_length_changed` updates the answer length setting in the question input field and synchronizes the corresponding UI actions. It also persists the updated conversation settings. The parameter `preset` is expected to be an instance of the `AnswerLength` enum, which determines the length of the AI-generated answers. The function ensures that the UI reflects the selected answer length and saves the configuration.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_on_card_citation:7712264b94805952c2353d18c08227bb51dd93c0887d32f4101d99275ff432cb:7712264b94805952c2353d18c08227bb51dd93c0887d32f4101d99275ff432cb": "The function `_on_card_citation` handles the event when a citation card is clicked within the user interface. It updates the active card, sets the evidence panel to display citations from the clicked card's turn, updates the current retrieval scope, highlights the corresponding citation in the answer view, and selects the associated index in the evidence panel.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_on_card_citation:ffd7e2b6823c2f5175b0e5b153b98edb2ba1da2cf63d0bdb535c22f4b4a400ee:ffd7e2b6823c2f5175b0e5b153b98edb2ba1da2cf63d0bdb535c22f4b4a400ee": "Handles card citation events by updating the active card, setting evidence in the panel, highlighting citations in the answer view, and selecting the corresponding index in the evidence panel.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_on_connection_state_changed:3fd4810ba9b88f15a4850892e591824abefe216839c0e5960fa488cad2cfbd8a:3fd4810ba9b88f15a4850892e591824abefe216839c0e5960fa488cad2cfbd8a": "The function `_on_connection_state_changed` updates the connection state in the user interface when the connection status changes. It sets the connection state in the question input widget, displays a message in the status bar based on whether a message is provided in the state or if the connection is unavailable, and updates the prerequisites for submitting questions.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_on_connection_state_changed:7f8277262136d26b56f83cee973a372c9fbec93fe5bb4b7953a62aee44593542:7f8277262136d26b56f83cee973a372c9fbec93fe5bb4b7953a62aee44593542": "The function `_on_connection_state_changed` updates the UI based on the connection state with LMStudio. It sets the connection state in the question input widget, displays a message in the status bar indicating the connection status or an unavailable message if not connected, and updates the prerequisites for asking questions.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_on_copy_evidence_snippet:4ee63c30f5bb9da312afebc8e123b0f9bae6f64341deaab6cae27dbfa2d7d559:4ee63c30f5bb9da312afebc8e123b0f9bae6f64341deaab6cae27dbfa2d7d559": "Copies a given evidence snippet to the system clipboard and displays a notification confirming the action.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_on_copy_evidence_snippet:e59668465fd5e0a08212657866c7f7011caed352a6dc3c0d99c88416394e3a23:e59668465fd5e0a08212657866c7f7011caed352a6dc3c0d99c88416394e3a23": "The function `_on_copy_evidence_snippet` copies a provided text snippet to the system clipboard and displays a notification indicating that the snippet has been copied. It first checks if the snippet is non-empty; if empty, it returns without performing any action. Otherwise, it sets the clipboard content using `QApplication.clipboard().setText()` and triggers a progress notification through `self.progress_service.notify()`. The notification message is \"Evidence snippet copied\", with an info level and a duration of 1800 milliseconds.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_on_density_action_triggered:7e0aaf50d5081834a191bb9db2f1c111fa5dcc70940f06ddb271bb0ffdb67a19:7e0aaf50d5081834a191bb9db2f1c111fa5dcc70940f06ddb271bb0ffdb67a19": "The function `_on_density_action_triggered` is a slot method that handles the triggering of a density-related action in the user interface. It retrieves a data value from the provided `QAction`, checks if the value is a string, and if so, sets the density setting using the `settings_service` and applies the density change by calling `_apply_density`. This function is typically connected to a menu or toolbar action that allows users to select a density option, which then updates both the application's settings and its visual representation.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_on_density_action_triggered:880c6bdef4047fb4a5b61ccc55c0b300758e09a7b1bcdc82323ea3404830896e:880c6bdef4047fb4a5b61ccc55c0b300758e09a7b1bcdc82323ea3404830896e": "Handles density action triggers by retrieving the action's data, checking if it's a string, and applying the density setting through the settings service and UI application methods.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_on_evidence_locate_requested:b4e2724074b87700bb1f67d5ccad83c6991aeb897089ba3e905c7e2a4b5a938f:b4e2724074b87700bb1f67d5ccad83c6991aeb897089ba3e905c7e2a4b5a938f": "Handles evidence location requests by attempting to select a document in the tree based on its ID, and if that fails, focusing the tree by file path.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_on_evidence_locate_requested:bcefa7b32c3ffdbbc7d1b6aa4d5093405733a81924a342eece7dedd622e242bd:bcefa7b32c3ffdbbc7d1b6aa4d5093405733a81924a342eece7dedd622e242bd": "Handles an evidence locate request by attempting to select a document in the tree based on its ID, and if that fails, focuses the tree by the specified file path.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_on_evidence_scope_changed:615a3843cafe3657e4e8624895189e544ded972ecf44c10293592b2945104821:615a3843cafe3657e4e8624895189e544ded972ecf44c10293592b2945104821": "Handles changes to the evidence scope by updating the current retrieval scope, refreshing the session with the new scope, updating the scope chip display, and re-asking the last question if it exists.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_on_evidence_scope_changed:97c1e9e0f5b0a998f19157b9b113910880f0407e1ad0c30d12c23cf903f8e7d9:97c1e9e0f5b0a998f19157b9b113910880f0407e1ad0c30d12c23cf903f8e7d9": "The function `_on_evidence_scope_changed` updates the current retrieval scope based on included and excluded tags, then updates the session with the new scope, refreshes the scope chip display, and re-asks the last question if one exists, ensuring the question is asked with the updated scope.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_on_evidence_selected:3306d17f5cbeecd1cd65be4f92232abf69e50df831296d508abbeb302c3f7486:3306d17f5cbeecd1cd65be4f92232abf69e50df831296d508abbeb302c3f7486": "The function `_on_evidence_selected` handles the selection of evidence by highlighting the corresponding citation in the answer view and enabling or disabling an export snippet action based on whether an evidence item was selected. It takes an index and identifier as parameters, checks if an active card exists, and performs the highlighting and action state update accordingly.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_on_evidence_selected:90ab67baa9ea90cfdec29538cf1fc346b2a8b61c9ad05447cc1ca4c68567c969:90ab67baa9ea90cfdec29538cf1fc346b2a8b61c9ad05447cc1ca4c68567c969": "The function `_on_evidence_selected` handles the event when a piece of evidence is selected in the user interface. It first checks if there is an active card; if not, it returns early. If an active card exists, it highlights the corresponding citation in the answer view based on the selected index and updates the export snippet action's enabled state depending on whether a valid index was selected.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_on_model_changed:095164c6fbf1b79889da32fae30d704115d319a49d5e9890a99c5ebd10124adc:095164c6fbf1b79889da32fae30d704115d319a49d5e9890a99c5ebd10124adc": "Handles changes to the model name by cleaning the input, updating the LMStudio client configuration, synchronizing the model name with the question input component, and persisting the updated conversation settings.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_on_model_changed:616c360009d8ab58b3c5871e21f7e6899e9b2790be44db31b13efc8d3647d6cd:616c360009d8ab58b3c5871e21f7e6899e9b2790be44db31b13efc8d3647d6cd": "The function `_on_model_changed` is triggered when the selected AI model is changed. It takes a model name as input, strips any leading or trailing whitespace, and if the resulting string is not empty, it updates the LMStudio client with the new model, sets the model name in the question input field, and persists the updated conversation settings.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_on_progress_finished:32c1e45d719a9b1b449de1e801174edf9d6ebade3b5040214928560cd6243869:32c1e45d719a9b1b449de1e801174edf9d6ebade3b5040214928560cd6243869": "The function `_on_progress_finished` handles the completion of a progress update by displaying an optional message in the status bar and hiding the progress bar. It checks if a message is present in the `update` object, shows it in the status bar for 3 seconds, and then makes the progress bar invisible.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_on_progress_finished:45dfe2fe8fe1a65f77dd2ec7b2d58d3403d382352fc8da62f2bf8c9f0916f879:45dfe2fe8fe1a65f77dd2ec7b2d58d3403d382352fc8da62f2bf8c9f0916f879": "The function `_on_progress_finished` handles the completion of a progress update by displaying an optional message in the status bar for 3 seconds and hiding the progress bar.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_on_progress_started:2f310fd1d6d451c12c44dcfb36ce10e8ad2ec9895ccd2459dca394c0e1c81249:2f310fd1d6d451c12c44dcfb36ce10e8ad2ec9895ccd2459dca394c0e1c81249": "The function `_on_progress_started` updates the progress bar UI element based on the provided `ProgressUpdate` object. It sets the progress bar's format to the message from the update, configures its range and value according to whether the progress is indeterminate or has a percentage, and ensures the progress bar is visible.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_on_progress_started:b652a97178168a95c8685b92b485cf9517c30b4b7830155e7e4f79110a5fd55b:b652a97178168a95c8685b92b485cf9517c30b4b7830155e7e4f79110a5fd55b": "Displays a progress bar with the specified message and updates its range and value based on the progress update. If the update indicates an indeterminate progress, the progress bar shows an indeterminate state; otherwise, it displays a determinate progress with a range of 0-100. The progress bar is made visible upon invocation.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_on_progress_updated:6c79f6ddb19baeb147ccb5bd9efe5abd28e6ce2459ca42635ac4dadef462763d:6c79f6ddb19baeb147ccb5bd9efe5abd28e6ce2459ca42635ac4dadef462763d": "Updates the progress bar display based on a ProgressUpdate object. Sets the progress bar format to the update message, configures the progress bar range as indeterminate or determinate based on the update flags, and sets the progress value within the valid range of 0-100.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_on_progress_updated:cbb335b9d03a8296c2053388cbd05cf5ee3898541b13838b1997fb942defef71:cbb335b9d03a8296c2053388cbd05cf5ee3898541b13838b1997fb942defef71": "The function `_on_progress_updated` updates the progress bar in the main window based on a `ProgressUpdate` object. It sets the progress bar's format to the message provided in the update, adjusts the range to indeterminate mode if specified, or sets a determinate range with a percentage value clamped between 0 and 100.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_on_project_combo_changed:a31f565ad01b2da34f2d0564ad790a5d19d1e545eed704279acf4d644e795de0:a31f565ad01b2da34f2d0564ad790a5d19d1e545eed704279acf4d644e795de0": "The function `_on_project_combo_changed` handles the event when the selected project in a combo box is changed. It retrieves the project ID from the combo box, checks if it's valid and different from the currently active project, and if so, stores the current session and updates the active project in the project service.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_on_project_combo_changed:d3f608c5d20ea829b07f96d0c60b49893c1d73a6dfd88e1936fb0d0fd0112888:d3f608c5d20ea829b07f96d0c60b49893c1d73a6dfd88e1936fb0d0fd0112888": "Handles the change event of a project selection combo box by updating the active project based on the selected index, storing the current session, and setting the new project if it differs from the currently active one.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_on_projects_changed:cb9cafbc0cbdb3a7817e524f2d5d8ce9788dc41aec5b80a6ee2f603de6439506:cb9cafbc0cbdb3a7817e524f2d5d8ce9788dc41aec5b80a6ee2f603de6439506": "The function `_on_projects_changed` is triggered when the list of projects is modified. It calls `_refresh_project_selector()` to update the project selection interface element.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_on_projects_changed:ecc9d5b27b14ddabaa903e14e2f6ff14e5360e2ad9cb986075f8f62854b2b3f8:ecc9d5b27b14ddabaa903e14e2f6ff14e5360e2ad9cb986075f8f62854b2b3f8": "The function `_on_projects_changed` is triggered when the list of projects is modified. It calls `_refresh_project_selector()` to update the project selection interface element.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_on_reasoning_verbosity_changed:cab79f0293c1568d1dbdebccc53754e837ee07158cb446555594821a8010982f:cab79f0293c1568d1dbdebccc53754e837ee07158cb446555594821a8010982f": "The function `_on_reasoning_verbosity_changed` handles changes to the reasoning verbosity setting in the user interface. It retrieves the selected verbosity level from a combo box, verifies that the selected data is of type `ReasoningVerbosity`, and updates the conversation settings with the new verbosity level.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_on_reasoning_verbosity_changed:fea68c000b070411252c8c33a0cab2cd3468ed9b4c78b040ce975f9581ed95b2:fea68c000b070411252c8c33a0cab2cd3468ed9b4c78b040ce975f9581ed95b2": "Handles changes to the reasoning verbosity setting in the UI. When the user selects a new verbosity level from the combo box, this function retrieves the associated `ReasoningVerbosity` enum value from the combo box data and updates the conversation settings with the selected verbosity level.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_on_scope_chip_cleared:3cde7f893a1d8eebd28322227f7c80336da42c7d646c5a8bdbee3f25aebcbfbf:3cde7f893a1d8eebd28322227f7c80336da42c7d646c5a8bdbee3f25aebcbfbf": "Clears the current retrieval scope and updates related components.\n\nThis function resets the `_current_retrieval_scope` to empty include/exclude lists when there are active scope values. It then updates the session with the new empty scope, resets the evidence panel's scope display, refreshes the scope chip UI element, and re-asks the last question if one exists, specifically noting that the action was triggered by a scope change.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_on_scope_chip_cleared:9df9befd3caed50a6d893c21f587896d3d44c44981f02871a8f65fb366279134:9df9befd3caed50a6d893c21f587896d3d44c44981f02871a8f65fb366279134": "The function `_on_scope_chip_cleared` clears the current retrieval scope when all scope values are empty. It resets the scope to default values, updates the session with the new scope, resets the evidence panel's scope, updates the scope chip display, and re-asks the last question if one exists, ensuring the UI and search context are synchronized.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_on_sources_only_toggled:1fcfdb3232bb17b0b7a1e704106204d4d7dd01a0d3e6348e22b757f99485bd88:1fcfdb3232bb17b0b7a1e704106204d4d7dd01a0d3e6348e22b757f99485bd88": "The function `_on_sources_only_toggled` is a slot method that responds to a toggle event, likely from a UI element such as a checkbox. When triggered, it updates the conversation settings to enable or disable \"sources only\" mode based on the boolean value provided. This mode likely restricts responses to only include information sourced from the document corpus, excluding general knowledge or inference. The method calls `set_sources_only_mode` on the `conversation_settings` object, passing the `enabled` state as an argument.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_on_sources_only_toggled:5ed6406e05e17ae11c2370bb8c2e138064b7c70ae286accf96976942c13c9989:5ed6406e05e17ae11c2370bb8c2e138064b7c70ae286accf96976942c13c9989": "Sets the sources-only mode in conversation settings based on the toggle state.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_open_help:029d349d49f63fdb0d37daf6d865c1383fa42346ee61e7124c57e20c125e8231:029d349d49f63fdb0d37daf6d865c1383fa42346ee61e7124c57e20c125e8231": "The function `_open_help` displays an information message box with the title \"Help\" and the message \"Visit the documentation for assistance.\" It is triggered from the `MainWindow` class and does not return any value.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_open_help:06c1e5405d8f26868acfb9ddce9b93ddd2a7a43110b7f51efa8d2ed9da70d91b:06c1e5405d8f26868acfb9ddce9b93ddd2a7a43110b7f51efa8d2ed9da70d91b": "Displays an information message box with help text directing users to documentation.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_open_settings:23c44bba700f855ed9f0513c97f695ac17d71b3b1a48772437e6538b71e902a0:23c44bba700f855ed9f0513c97f695ac17d71b3b1a48772437e6538b71e902a0": "The function `_open_settings` displays an information message box with the title \"Settings\" and the message \"Settings dialog coming soon.\" It is intended to be called when a user attempts to open the settings, but currently only shows a placeholder message indicating that the settings dialog functionality is not yet implemented. The function does not return any value.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_open_settings:d3a2e5cbe0d12976670a60a4d4a7c31dc80779fa9e8f47258385a8cebc5940dc:d3a2e5cbe0d12976670a60a4d4a7c31dc80779fa9e8f47258385a8cebc5940dc": "The function `_open_settings` is a method of the `MainWindow` class that displays an information message box with the title \"Settings\" and the message \"Settings dialog coming soon.\" This function currently serves as a placeholder for future implementation of a settings dialog.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_persist_conversation_settings:9da32ce1f6bb52b77f5b24d1cfec31e0052e7aa0f4205d9c7b256071eec26ce5:9da32ce1f6bb52b77f5b24d1cfec31e0052e7aa0f4205d9c7b256071eec26ce5": "Persists the current conversation settings by taking a snapshot, retrieving the active project ID, and updating both the session and project service with the captured settings.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_persist_conversation_settings:baae98f6e0aabdd1de9cb4c7fbfdbcd6e5648a160d024b6c85127f6c0d5e503f:baae98f6e0aabdd1de9cb4c7fbfdbcd6e5648a160d024b6c85127f6c0d5e503f": "The function `_persist_conversation_settings` saves the current conversation settings by taking a snapshot of the settings, retrieving the active project ID, updating the session with the snapshot, and then saving the conversation settings to the project service.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_populate_corpus_tree:125793b488d9ca9c996b5b9f0aeda5978a4dcd663ad50ff92c116ac2fb4e5afc:125793b488d9ca9c996b5b9f0aeda5978a4dcd663ad50ff92c116ac2fb4e5afc": "Populates a tree widget with corpus data recursively. For each child node in the input dictionary, creates a tree item with the node's name, sets its tooltip to the node's path if present, and recursively populates its children. For each document in the input dictionary, creates a tree item with the document's title (using the filename as fallback if no title is provided), sets its tooltip to the source path if present, and stores the document ID in the item's user role data.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_populate_corpus_tree:6cf99ed2b7f5314a9fc1414b3435ec0fc916769968944911429e872660a8136c:6cf99ed2b7f5314a9fc1414b3435ec0fc916769968944911429e872660a8136c": "The function `_populate_corpus_tree` recursively populates a `QTreeWidgetItem` hierarchy to represent the structure of a corpus. It processes nodes and documents from a dictionary structure, creating tree items for each child node and document. For each node, it sets the item's text to the node's name or \"(root)\" if no name is present, and adds a tooltip with the node's path if available. For documents, it uses the document's title or derives it from the source path if missing, defaulting to \"Untitled\" if neither is available. It also sets the document's ID as user data on the item for later retrieval. The function builds the tree by recursively calling itself on child nodes and adding both child nodes and documents as children of the current parent item.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_prepare_retrieval_context:306efc88510c9197433546d2035c96861c38466d0e3f97d1d85fcf0d0be62dde:306efc88510c9197433546d2035c96861c38466d0e3f97d1d85fcf0d0be62dde": "The function `_prepare_retrieval_context` prepares the context for a retrieval operation based on a given question. It first checks if the question is non-empty and retrieves the active project ID from the project service. If no project is active, it returns empty lists. It then determines the inclusion and exclusion identifiers from the current retrieval scope, defaulting to empty lists if not set. Using these parameters, it collects relevant context records through the search service. Finally, it processes these records into a payload format using `_context_payload_from_records` and returns the resulting list of context strings and associated metadata dictionaries.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_prepare_retrieval_context:7ae5e5d4b63ccc53fcbaccd89cc9f9c339375c1d1a5b84a6e33d73af84dad53d:7ae5e5d4b63ccc53fcbaccd89cc9f9c339375c1d1a5b84a6e33d73af84dad53d": "Prepares retrieval context for a given question by collecting relevant records and formatting them into payload components. Returns a tuple containing a list of context strings and a list of record dictionaries. Handles cases where the question is empty or when no active project is available by returning empty lists. Uses the current retrieval scope to filter included and excluded identifiers during record collection.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_project_label_text:acbeb123022388ab3a88ceed2c34bef713db2b7fbfc46ebf5f359b460a0d7350:acbeb123022388ab3a88ceed2c34bef713db2b7fbfc46ebf5f359b460a0d7350": "The function `_project_label_text` retrieves the version of the `DataMiner` package using `importlib.metadata.version`. If the package is not found, it defaults to version \"0.0.0\". It then returns a formatted string \"DataMiner v{version}\" representing the project's label text.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_project_label_text:ee6ab54627b54c5c78247973afa6762abaf86d19bdb334a856fd425bc094107b:ee6ab54627b54c5c78247973afa6762abaf86d19bdb334a856fd425bc094107b": "Returns a formatted string containing the application name \"DataMiner\" and its version number. Attempts to retrieve the version from the installed package metadata, falling back to \"0.0.0\" if the package is not found.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_prompt_model_name:1104e76912e32aa2bb88c303eeb8569756bdf6c981df7e43d295cfc5343d2d30:1104e76912e32aa2bb88c303eeb8569756bdf6c981df7e43d295cfc5343d2d30": "Displays a dialog to prompt the user for an LMStudio model identifier, retrieves the input, and updates the conversation settings with the provided model name if the input is valid.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_prompt_model_name:5d780bb6864257b7beb9e1c9834989c7fdc3c27f580dc55f2d4ac6e99b620c19:5d780bb6864257b7beb9e1c9834989c7fdc3c27f580dc55f2d4ac6e99b620c19": "The function `_prompt_model_name` displays a dialog box to allow the user to set or modify the LMStudio model identifier. It retrieves the current model name from `self.conversation_settings`, shows it in a text input dialog, and updates the settings with the new value if the user confirms the change. If the user cancels the dialog or provides an empty string, no changes are made.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_prompt_new_project:1d0f1bd5f5c8e09b47c9c69dd6ec0e69f73936367810d372b9e06a419202338f:1d0f1bd5f5c8e09b47c9c69dd6ec0e69f73936367810d372b9e06a419202338f": "The function `_prompt_new_project` displays a dialog box to the user for entering a new project name. If the user provides a valid, non-empty name, it creates a new project using the `project_service` and shows a toast notification confirming the creation of the project. If the user cancels or provides an empty name, the function returns without creating a project.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_prompt_new_project:3c808a32957a8cbc0023e0d49e1bd1bc73cb9d2d7352b02302ab58db0ab49006:3c808a32957a8cbc0023e0d49e1bd1bc73cb9d2d7352b02302ab58db0ab49006": "Creates a new project with a user-provided name through a dialog prompt. Displays a toast notification upon successful creation.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_prompt_rename_project:eac148eaa22598aa7834b3c4babd29a37d6fdad9d1f7d50e247bc5404a0f16b8:eac148eaa22598aa7834b3c4babd29a37d6fdad9d1f7d50e247bc5404a0f16b8": "Displays a dialog to rename the active project. Retrieves the current project name, prompts the user for a new name, and updates the project if the new name is valid and different from the current name. Shows a success message toast upon completion.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_prompt_rename_project:ee834042d39977de6bf4e8f287ad24e2bb3e0d5eab4b125b274759dd930945ef:ee834042d39977de6bf4e8f287ad24e2bb3e0d5eab4b125b274759dd930945ef": "The function `_prompt_rename_project` prompts the user to rename the active project through a dialog interface. It retrieves the current project name, displays it in an input dialog, and updates the project's name in the project service if the user provides a valid new name. A success message is shown via a toast notification if the renaming is completed.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_purge_project_data:d284eda5a31146a284663b565d1457a1ceef4d15071e1e28fd7bcd971d48e71e:d284eda5a31146a284663b565d1457a1ceef4d15071e1e28fd7bcd971d48e71e": "The function `_purge_project_data` removes indexed data, chats, and cached assets for the active project. It prompts the user with a confirmation dialog before proceeding. If confirmed, it clears project-related data including turns, conversation history, answer view, evidence panel, and resets session state. It also updates UI elements such as export actions, corpus view, and displays a confirmation toast message.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_purge_project_data:eb0bb3d2e1e5b45cecd7e67394adacb254a1c63bb5341411ee7acb8d187750af:eb0bb3d2e1e5b45cecd7e67394adacb254a1c63bb5341411ee7acb8d187750af": "The function `_purge_project_data` removes all indexed data, chat history, and cached assets associated with the currently active project. It prompts the user for confirmation via a message box before proceeding. If confirmed, it clears the project data using the project service, resets various UI components such as conversation turns, answer view, and evidence panel, and updates the session state. It also disables export actions, shows a confirmation toast message, and refreshes the corpus view and actions.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_refresh_corpus_view:61bc5e644c2ffd6dc82f8725dd0f5e51be2dca243a17e8fbb3475823fd45233d:61bc5e644c2ffd6dc82f8725dd0f5e51be2dca243a17e8fbb3475823fd45233d": "The `_refresh_corpus_view` method updates the corpus tree view in the main window. It clears the existing tree, retrieves documents for the active project, and populates the tree with document hierarchy information. If no documents exist, it displays a placeholder message. The method handles cases where no project is active by disabling the tree view. It constructs a root item for the tree based on the project's label path or name, adds the root item to the tree, and recursively populates the tree with document folders and files. Finally, it expands the root item and adjusts the column width to fit the content.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_refresh_corpus_view:a82d055483619cc1321f2b0a2a8ef902e8d141dfb66fcb75c715cd7efaee0143:a82d055483619cc1321f2b0a2a8ef902e8d141dfb66fcb75c715cd7efaee0143": "The function `_refresh_corpus_view` updates the corpus tree view in the main window. It clears the existing tree, retrieves documents for the active project, and populates the tree with a hierarchical folder structure if documents exist. If no documents are found, it displays a placeholder message and disables the tree. The root item of the tree is labeled based on the project's corpus path or name, and the tree is expanded with appropriate tooltips. Finally, it resizes the column to fit the contents and updates prerequisites for question answering based on the conversation manager's connection state.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_refresh_project_selector:0ef4078540ea2a4e54c9a940253b757b60f1ad0084c620fd85b2122a1aa16c3a:0ef4078540ea2a4e54c9a940253b757b60f1ad0084c620fd85b2122a1aa16c3a": "The function `_refresh_project_selector` updates the project selection dropdown in the main window UI. It retrieves the list of available projects from the project service, clears the current items in the combo box, and repopulates it with project names and IDs. It identifies the currently active project and sets it as the selected item in the dropdown. Signal blocking is used to prevent triggering events during the update. Finally, it enables or disables the delete project action based on whether more than one project exists.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_refresh_project_selector:ea335f4113b3d70eaa3363690ebe711857f1ece7e7775524b9fb39d193abd020:ea335f4113b3d70eaa3363690ebe711857f1ece7e7775524b9fb39d193abd020": "Refreshes the project selector combo box with the latest list of projects from the project service. Clears the current items, populates the combo box with project names and IDs, sets the currently active project as selected, and enables or disables the delete action based on whether more than one project exists. Temporarily blocks signal handling during updates to prevent unwanted events.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_register_ingest_job:a08026dd41dd4987eb140ad6da4e7fddc4ed1d8c059fa31161579dc72eda8838:a08026dd41dd4987eb140ad6da4e7fddc4ed1d8c059fa31161579dc72eda8838": "Registers an ingest job with the specified parameters and initializes its progress tracking. The job is stored in `_ingest_jobs` with a unique task ID derived from the job ID, and its progress is started using the `progress_service`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_register_ingest_job:a12e4800d08ac8a67ee8058c190238acfef21bb5e8d683d8d52419dd68f95ca7:a12e4800d08ac8a67ee8058c190238acfef21bb5e8d683d8d52419dd68f95ca7": "Registers an ingest job with the specified parameters, storing it in `_ingest_jobs` and initiating a progress tracking task with the `progress_service`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_rescan_corpus:0274f125bcdf2d9891b08296966ce2faf98163ecd38dba7589044197814c74b7:0274f125bcdf2d9891b08296966ce2faf98163ecd38dba7589044197814c74b7": "The function `_rescan_corpus` initiates a rescan of all indexed corpus roots within the active project. It retrieves the list of corpus roots associated with the project and checks if any exist. If no roots are found, it displays an information message to the user. For each root, it attempts to queue a rescan job using the ingest service, handling potential exceptions by showing a warning message. Each successfully queued job is registered with a descriptive label, and a toast notification is displayed indicating how many folders were queued for rescanning.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_rescan_corpus:2cb32562133542a38bbc2467a6be64dbdd60bfb20e4386060c7ba55a5993749b:2cb32562133542a38bbc2467a6be64dbdd60bfb20e4386060c7ba55a5993749b": "The function `_rescan_corpus` initiates a rescan of corpus folders within the active project. It retrieves the list of indexed corpus roots, displays an information message if none are available, and otherwise queues rescan jobs for each root using the ingest service. It handles exceptions during job queuing by showing warnings, and registers each successful job with a descriptive label. Finally, it shows a toast notification indicating how many folders were queued for rescanning.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_restore_backup:2fa5d6f250cd3fc9fa090a8c57303f408aab52e772d7098296ea1c9bea30c741:2fa5d6f250cd3fc9fa090a8c57303f408aab52e772d7098296ea1c9bea30c741": "The function `_restore_backup` displays a file dialog to select a backup file, clears existing project sessions, and attempts to restore the selected backup. If the operation fails, it shows an error message; otherwise, it displays a success notification.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_restore_backup:b3a4f48639232c89616852a01ae35de336af031afab7e923463f21315fb1975b:b3a4f48639232c89616852a01ae35de336af031afab7e923463f21315fb1975b": "The function `_restore_backup` provides a user interface element for restoring application data from a backup file. It opens a file dialog to allow the user to select a `.zip` archive, clears existing project sessions, and attempts to restore the backup using a `backup_service`. If the operation fails, it displays an error message; otherwise, it shows a success notification.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_restore_splitter_sizes:31175196f9a0e52c83303c688a956f7a6997497f721e19a950f668d78af675e0:31175196f9a0e52c83303c688a956f7a6997497f721e19a950f668d78af675e0": "The function `_restore_splitter_sizes` restores the splitter widget sizes from either a previously saved state or default settings. It retrieves the last known splitter sizes from the instance's attributes, falling back to settings if no saved sizes exist. If the splitter widget exists and valid size data is available, it applies the sizes to the splitter, ensuring each size is at least 80 pixels.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_restore_splitter_sizes:4de524461889fce2e12d752b94bf11d50898cc4632e95f1f81788c3e208a469c:4de524461889fce2e12d752b94bf11d50898cc4632e95f1f81788c3e208a469c": "Restores splitter widget sizes from saved settings or default values. Retrieves the last saved splitter sizes from the instance, falling back to settings service defaults if none exist. If a splitter widget exists and valid size data is available, it applies the sizes with a minimum size constraint of 80 pixels.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_reveal_project_storage:906f5fbe8d3eb1bed9c636814c1afeea3aea0f2ace2babdb20d0033ec7079961:906f5fbe8d3eb1bed9c636814c1afeea3aea0f2ace2babdb20d0033ec7079961": "The function `_reveal_project_storage` retrieves the storage path for the active project, ensures the directory exists by creating it if necessary, and then opens the directory in the system's default file explorer.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_reveal_project_storage:ae765b48245457037dd2b8c70aed4845f67a9f6e9c181b933b27ff378667e28a:ae765b48245457037dd2b8c70aed4845f67a9f6e9c181b933b27ff378667e28a": "The function `_reveal_project_storage` retrieves the storage path for the active project, ensures the directory exists by creating it if necessary, and then opens the directory in the system's file explorer.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_select_document_in_tree:3121647f6fe5bf7c51991ed2af8bae733d8ae0126f3f362308ea2790ff1d8b61:3121647f6fe5bf7c51991ed2af8bae733d8ae0126f3f362308ea2790ff1d8b61": "The function `_select_document_in_tree` searches for a document with a specified ID within a tree structure representing a corpus. It traverses the tree recursively, and when the document is found, it expands all parent nodes to ensure visibility, selects the document item, and scrolls to its position in the tree view. The function returns `True` if the document is found and selected, or `False` if not found.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_select_document_in_tree:cb3b935db73a9909d30634e484fd8a69f42c1229377ac9ee79c2fbc6158512ff:cb3b935db73a9909d30634e484fd8a69f42c1229377ac9ee79c2fbc6158512ff": "The function `_select_document_in_tree` locates a document within a corpus tree structure by its ID and selects it. It expands all parent items of the found document to ensure visibility, sets the document as the current item in the tree, and scrolls to its position. The function returns `True` if the document is found and selected, otherwise `False`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_set_lmstudio_status:4473d7a9d4da9f7d21803e0e3e59c7deea3b89e9be3f2c3d1bf75b0028213400:4473d7a9d4da9f7d21803e0e3e59c7deea3b89e9be3f2c3d1bf75b0028213400": "The function `_set_lmstudio_status` updates the connection state of the LMStudio client within the application's user interface. It accepts a boolean parameter `healthy` indicating the health status of the LMStudio service. If the service is not healthy, it sets an error message indicating that the health probe failed. The function then updates the connection state of the question input field using the `ConnectionState` class, which likely triggers a visual update in the GUI to reflect the connection status.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_set_lmstudio_status:6c3e5a88f06cbbf2ade1e7f17d991088c290136d0a3b78f51d4eb644fca1d3dd:6c3e5a88f06cbbf2ade1e7f17d991088c290136d0a3b78f51d4eb644fca1d3dd": "Sets the connection state of the question input based on LMStudio health status. If healthy is True, clears any error message. If healthy is False, sets an error message indicating that the LMStudio health probe failed.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_set_panel_visibility:201d3f2197a7f33617384955f0aef703701b1dc8d10a41d7160d1bfe92672408:201d3f2197a7f33617384955f0aef703701b1dc8d10a41d7160d1bfe92672408": "The function `_set_panel_visibility` controls the visibility of a widget within a splitter layout. It takes an index specifying which widget to modify and a boolean value indicating whether the widget should be visible. If the widget exists, it sets the widget's visibility based on the boolean value, calling `show()` if visible is True or `hide()` if False. If the widget does not exist, the function returns without taking action.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_set_panel_visibility:f47db77d18944497d0cd33f124bf8fbd757c4e7a7520d54993f539c6080a4891:f47db77d18944497d0cd33f124bf8fbd757c4e7a7520d54993f539c6080a4891": "Sets the visibility of a panel widget within a splitter at the specified index. If the widget exists, it is shown or hidden based on the visible parameter. The function first retrieves the widget from the splitter at the given index, checks if it exists, and then sets its visibility state using the standard Qt show() or hide() methods.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_setup_window:60040dcea6317700fcc5f48d495956b734c172876840c92f4b61583f3ace66d0:60040dcea6317700fcc5f48d495956b734c172876840c92f4b61583f3ace66d0": "The function `_setup_window` configures the main window properties for the `MainWindow` class. It sets the window title to \"DataMiner\" and resizes the window to 1280 pixels in width and 800 pixels in height.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_setup_window:681ac32206597409ed1a5d3b54cc8dca2523ee59b1e8fb7f56daf4300dd4c982:681ac32206597409ed1a5d3b54cc8dca2523ee59b1e8fb7f56daf4300dd4c982": "Sets up the main window title to \"DataMiner\" and resizes it to 1280x800 pixels.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_show_toast:0e972de8f4d32c3c8d588e2f7d20c73ed28a35aa9708fa2fbf0fb2f4d3ee4ae0:0e972de8f4d32c3c8d588e2f7d20c73ed28a35aa9708fa2fbf0fb2f4d3ee4ae0": "Displays a toast message with the specified content, level, and duration using the application's toast notification system.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_show_toast:f994c0cd5e192db3965719c3b34fcfaf5653f1525683db695fb5d9ce6b072646:f994c0cd5e192db3965719c3b34fcfaf5653f1525683db695fb5d9ce6b072646": "Displays a toast notification with the specified message, level, and duration using the window's toast handler.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_snapshot_conversation_settings:5e3e9acce91e5f3c7a3b029e2112ea9f2edf944833c209d3d523004e2188fd5c:5e3e9acce91e5f3c7a3b029e2112ea9f2edf944833c209d3d523004e2188fd5c": "The function `_snapshot_conversation_settings` returns a dictionary containing the current conversation settings. The dictionary includes the reasoning verbosity level, whether to show the plan and assumptions, whether sources-only mode is enabled, the answer length setting, and the selected model name. These values are extracted from the `conversation_settings` attribute of the `MainWindow` class.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_snapshot_conversation_settings:b697cd2e680e4208f4710e1da9bfc46437551b8b924ba64abd1e77c274cde200:b697cd2e680e4208f4710e1da9bfc46437551b8b924ba64abd1e77c274cde200": "Captures and returns the current conversation settings as a dictionary, including reasoning verbosity, plan visibility, assumption visibility, sources-only mode, answer length, and model name.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_store_active_project_session:4675fb84f280c382db5281f30021e5cba6d5b50f1ee2568eedc7c6a56fcbef0f:4675fb84f280c382db5281f30021e5cba6d5b50f1ee2568eedc7c6a56fcbef0f": "Stores the current conversation session state for the active project. Captures the conversation settings as a snapshot, then updates the session data with the current turns, retrieval scope, last question, and settings. Finally, saves the conversation settings to the project service.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_store_active_project_session:cece91fffd751969d663bab1d6cdf7baf82b8d729648fc389e361bb08999970b:cece91fffd751969d663bab1d6cdf7baf82b8d729648fc389e361bb08999970b": "Stores the current session state for the active project by capturing the conversation settings, turns, retrieval scope, and last question. It updates the session in the project service and saves the conversation settings.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_store_splitter_sizes:0ee673d32e3a06efdd36d48fe1ecc51c5b2af935e39ddf55021e10a7a668045f:0ee673d32e3a06efdd36d48fe1ecc51c5b2af935e39ddf55021e10a7a668045f": "Stores the current splitter sizes from the main window's splitter widget into the settings service, but only if the splitter exists, has exactly three sections, and at least one section has a positive size. The sizes are also cached locally in `_last_splitter_sizes`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_store_splitter_sizes:60e68b2e54403d8756a26cddfb98ced257f931d2e34b4007cde600be5847c015:60e68b2e54403d8756a26cddfb98ced257f931d2e34b4007cde600be5847c015": "Stores the current splitter sizes from the UI into the settings service, but only if the splitter exists, has three sections, and at least one section has a non-zero size. The sizes are also cached locally for potential future use.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_sync_answer_length_actions:293beac6a6decce44f7246d93fed1c9502b8faa938cb9ecc01c09fc59b563453:293beac6a6decce44f7246d93fed1c9502b8faa938cb9ecc01c09fc59b563453": "The function `_sync_answer_length_actions` synchronizes the checked state of actions within a QActionGroup based on the provided `AnswerLength` preset. It retrieves the action group using the attribute name `_length_action_group`, and if the group exists, it iterates through its actions. For each action with data of type `AnswerLength`, it sets the action's checked state to `True` if the action's data matches the provided preset, otherwise `False`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_sync_answer_length_actions:a8f663768905635bf1fb522b47e48357156c2429701a6125e99890a6ecae9465:a8f663768905635bf1fb522b47e48357156c2429701a6125e99890a6ecae9465": "Synchronizes the checked state of answer length actions based on the provided preset. Iterates through all actions in the length action group and sets the checked state to True for the action whose data matches the specified preset, False otherwise.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_sync_assumptions_checkbox:a05956167eeaacc3f2ace81a6482c59f0d243bf2372ae882ba1bf2d8df6158c6:a05956167eeaacc3f2ace81a6482c59f0d243bf2372ae882ba1bf2d8df6158c6": "The function `_sync_assumptions_checkbox` synchronizes the checked state of a checkbox widget (`_assumptions_checkbox`) with a provided boolean value (`enabled`). If the current checked state of the checkbox does not match the `enabled` value, it temporarily blocks signals from the checkbox, updates its checked state, and then re-enables signals. This ensures that the UI state reflects the desired enabled status without triggering any signal handlers during the update.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_sync_assumptions_checkbox:db775be81e3b8754ee57052f44d9489323ab36b6f903bb9c000460b810572078:db775be81e3b8754ee57052f44d9489323ab36b6f903bb9c000460b810572078": "Synchronizes the state of the assumptions checkbox to match the provided enabled value, preventing signal handling during the update.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_sync_documents_with_known_files:372a0686248c5027ba9c1f9df9ec20dda8eccfcfe54109e432840a956fc82bf3:372a0686248c5027ba9c1f9df9ec20dda8eccfcfe54109e432840a956fc82bf3": "Synchronizes project documents with a set of known files and removes documents for files no longer present.\n\nThe function takes a project ID, a collection of known files (which may be a dictionary mapping paths to metadata), and a collection of removed file paths. It ensures that the project's document repository reflects the current state of the known files by creating new documents for files not yet tracked, updating existing documents when file metadata changes, and deleting documents for files that have been removed.\n\nKey operations:",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_sync_documents_with_known_files:a8a06040071d5f1bbdf7500b9f314aa02724c40ee99e1377925bdb5b2bf4a58b:a8a06040071d5f1bbdf7500b9f314aa02724c40ee99e1377925bdb5b2bf4a58b": "The function `_sync_documents_with_known_files` synchronizes the list of documents stored in a project with a set of known files. It takes a project ID, a dictionary or structure of known files, and a list of removed file paths as inputs. The function first retrieves all existing documents for the project and maps them by their resolved source paths. It then processes the known files, creating new document entries for any files not already present in the project, and updates metadata for existing documents if changes are detected. Finally, it removes from the project any documents whose source paths are found in the list of removed files. The function ensures that the document repository stays aligned with the actual file system state by adding, updating, or deleting document records as needed.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_sync_plan_checkbox:4d2f115b0bcce12b98449f5e8b5bb869a526e1c47178b1e01c8272c9f18e97f9:4d2f115b0bcce12b98449f5e8b5bb869a526e1c47178b1e01c8272c9f18e97f9": "The function `_sync_plan_checkbox` synchronizes the checked state of a checkbox widget (`_plan_checkbox`) with a provided boolean value. If the current checked state of the checkbox does not match the provided value, it temporarily blocks signals from the checkbox, updates its checked state, and then re-enables signals. This ensures that the checkbox state is updated without triggering any associated signal handlers during the update process.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_sync_plan_checkbox:53d30989fda10a086a36664dc346d58ed792ff0cec54f217e26ffd41afb8a273:53d30989fda10a086a36664dc346d58ed792ff0cec54f217e26ffd41afb8a273": "Sets the checked state of `_plan_checkbox` to the specified `enabled` value, temporarily blocking signal handling to prevent recursive signal emission during the update.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_sync_reasoning_combo:151c4e6131dd18c54e024a1f42cdd6f8ef4f7b7fc3b3f5b49d458456db68a361:151c4e6131dd18c54e024a1f42cdd6f8ef4f7b7fc3b3f5b49d458456db68a361": "The function `_sync_reasoning_combo` synchronizes the current selection of a combo box (`_verbosity_combo`) with a given `ReasoningVerbosity` value. It first finds the index of the data corresponding to the verbosity level. If the index is valid and differs from the currently selected index, it temporarily blocks signals from the combo box, updates the current index to match the verbosity level, and then re-enables signal handling. This ensures the UI reflects the provided verbosity setting without triggering unintended events.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_sync_reasoning_combo:e6c540dcf4cafeb1ef46d60f5d83a7be100c362717d81e840d774e518ca71aa8:e6c540dcf4cafeb1ef46d60f5d83a7be100c362717d81e840d774e518ca71aa8": "This function synchronizes a reasoning verbosity combo box to match a given verbosity level. It searches for the corresponding data item in the combo box, and if found and different from the current selection, updates the combo box while temporarily blocking signals to prevent event handling during the update.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_sync_sources_checkbox:38aecb49f43ff5c9402dfc0317f08d6a020dd5adfc76966efbf022888f0fa642:38aecb49f43ff5c9402dfc0317f08d6a020dd5adfc76966efbf022888f0fa642": "The function `_sync_sources_checkbox` synchronizes the checked state of a checkbox named `_sources_only_checkbox`. It takes a boolean parameter `enabled` and updates the checkbox state to match this value. If the checkbox's current state already matches the desired state, no changes are made. The function temporarily blocks signals during the update to prevent triggering any connected signal handlers.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_sync_sources_checkbox:66505681521965b3c25515495c871ad1ee104533c6626d2da3dc936301448ec8:66505681521965b3c25515495c871ad1ee104533c6626d2da3dc936301448ec8": "The function `_sync_sources_checkbox` synchronizes the checked state of the `_sources_only_checkbox` widget to a specified boolean value. If the current state of the checkbox does not match the provided `enabled` value, it temporarily blocks signals to prevent signal handling during the state change, updates the checkbox state, and then re-enables signal handling.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_toggle_corpus_panel:acb1b143885aac507594d5ab9a8fcba5432abe491b5b8dd528e392cdcc92fbfe:acb1b143885aac507594d5ab9a8fcba5432abe491b5b8dd528e392cdcc92fbfe": "The function `_toggle_corpus_panel` controls the visibility of the corpus panel in the main window. When `visible` is `True`, it updates the settings to show the corpus panel, makes the panel visible, and restores previous splitter sizes. When `visible` is `False`, it stores the current splitter sizes, hides the panel, and updates the settings to hide the corpus panel.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_toggle_corpus_panel:baef4e316879694744ce66a18a3df0558a3c9fd212b1b1b3714ce4828ca59e77:baef4e316879694744ce66a18a3df0558a3c9fd212b1b1b3714ce4828ca59e77": "Toggles the visibility of the corpus panel based on the `visible` parameter. When setting the panel to visible, it updates the settings to show the corpus panel, makes the panel visible, and restores previous splitter sizes. When hiding the panel, it stores the current splitter sizes, hides the panel, and updates the settings to hide the corpus panel.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_toggle_evidence_panel:39b231caa962937295fc46edfeb81489256a5852eca354c9503624a55b0927d2:39b231caa962937295fc46edfeb81489256a5852eca354c9503624a55b0927d2": "The function `_toggle_evidence_panel` controls the visibility of an evidence panel within the application's user interface. When `visible` is True, it enables the panel by updating the settings to show the evidence panel, making the panel visible, and restoring previous splitter sizes. When `visible` is False, it disables the panel by storing the current splitter sizes, hiding the panel, and updating the settings to hide the evidence panel. The function interacts with `settings_service` to persist the visibility preference and uses helper methods `_set_panel_visibility` and `_restore_splitter_sizes` or `_store_splitter_sizes` to manage the UI state.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_toggle_evidence_panel:bb76dfcb49459a6e0dfe0b1f5a285ae2094bcf29812457e449aab560aca2c5ba:bb76dfcb49459a6e0dfe0b1f5a285ae2094bcf29812457e449aab560aca2c5ba": "Toggles the visibility of the evidence panel in the main window. When setting the panel to visible, it updates the settings to show the evidence panel, makes the panel visible, and restores previous splitter sizes. When hiding the panel, it stores the current splitter sizes, hides the panel, and updates the settings to hide the evidence panel. The panel is identified by index 2 in the panel hierarchy.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_update_corpus_actions:3aecada8f1618d173da0c81062e45beb06dae986946cf46d5590ee6a97fa7ac5:3aecada8f1618d173da0c81062e45beb06dae986946cf46d5590ee6a97fa7ac5": "Updates the enabled state of corpus-related actions based on whether corpus roots exist for the active project. Disables the rescan corpus action and button if no corpus roots are found or if there's no active project, otherwise enables them.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_update_corpus_actions:ffec21b26c3161c1f230c42a80886b1aa80bd18201babd591584f7238e989633:ffec21b26c3161c1f230c42a80886b1aa80bd18201babd591584f7238e989633": "The function `_update_corpus_actions` updates the enabled state of corpus-related actions and buttons based on whether there are corpus roots associated with the active project. It first attempts to retrieve the active project ID from the project service. If a `RuntimeError` occurs, it disables both the \"rescan corpus\" action and the rescan button (if it exists). If the project ID is successfully retrieved, it lists the corpus roots for that project and enables the \"rescan corpus\" action and the rescan button only if there are existing corpus roots.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_update_evidence_panel:bc9a87e7e234fd1e10d9f35ebf198084a976bb023be7633751ea6dd99eea01c7:bc9a87e7e234fd1e10d9f35ebf198084a976bb023be7633751ea6dd99eea01c7": "Updates the evidence panel based on conversation turn citations and manages related UI state.\n\nClears the evidence panel and resets retrieval scope when no citations are present. Otherwise, populates the evidence panel with citations, updates the current retrieval scope from the panel, refreshes the session with the new scope, enables or disables the export snippet action based on evidence count, updates the scope chip display, and highlights citations in the answer view.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_update_evidence_panel:d8946acc96e7e6ff94bc5e3e956e3f6c3a7ef1da83a78cfce7a31f450c76d390:d8946acc96e7e6ff94bc5e3e956e3f6c3a7ef1da83a78cfce7a31f450c76d390": "The function `_update_evidence_panel` updates the evidence panel in the user interface based on the citations present in a given `ConversationTurn`. If no citations are found, it clears the evidence panel, resets the retrieval scope, and disables the export snippet action. If citations exist, it populates the evidence panel with the citations, updates the current retrieval scope from the panel, refreshes the session with this scope, enables or disables the export snippet action based on the number of evidences, updates the scope chip display, and highlights the citation in the answer view.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_update_export_actions:02482bb37d25a7113429f84c01d451c533fd67d192825c435c0ca228a7fca6d4:02482bb37d25a7113429f84c01d451c533fd67d192825c435c0ca228a7fca6d4": "The function `_update_export_actions` enables or disables the markdown and HTML export actions in the main window based on whether there are conversation turns available. If there are turns, the export actions are enabled; otherwise, they are disabled.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_update_export_actions:8037b83a1f8d242f8153347520af41183acb9145847e277c88e2e9fcad3c3ddc:8037b83a1f8d242f8153347520af41183acb9145847e277c88e2e9fcad3c3ddc": "The function `_update_export_actions` enables or disables the markdown and HTML export actions based on whether the window has turns available. If turns exist, both export actions are enabled; otherwise, they are disabled.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_update_lmstudio_status:2eac479f29036b946f73f2708c82076c8afeef371b2f1db362647c15722a56c5:2eac479f29036b946f73f2708c82076c8afeef371b2f1db362647c15722a56c5": "The function `_update_lmstudio_status` checks the health status of the LMStudio client if the health monitor is enabled. If the monitor is disabled, it sets a warning message in the question input field. Otherwise, it initiates a background thread to perform a health check on the LMStudio client and updates the UI with the result using a Qt timer.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_update_lmstudio_status:80a0bdbaff0efc7fe0431df31729665e139dd91810eae57e638cee29171f6277:80a0bdbaff0efc7fe0431df31729665e139dd91810eae57e638cee29171f6277": "Updates the LMStudio status message based on health check results. If health monitoring is disabled, displays a warning message. Otherwise, performs a background health check and updates the UI with the result.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_update_question_prerequisites:8a8064f22da5a5102acced61c571a37c14202fa1e69a74b1318e7303de1ea8d4:8a8064f22da5a5102acced61c571a37c14202fa1e69a74b1318e7303de1ea8d4": "The function `_update_question_prerequisites` updates the state of the question input widget based on the connection status and document availability. It checks if the LMStudio is connected and if at least one document has been indexed. If the connection is unavailable, it sets an appropriate error message. If the connection is valid but no documents are present, it disables the question input and shows a message prompting the user to index at least one document. The function ultimately calls `set_prerequisites_met` on the `question_input` widget to reflect the current state and associated message.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_update_question_prerequisites:ac8068a64072f34c8a2022ae2823dcb1aeac73a1e02e799dde1eedd2e1ebd90c:ac8068a64072f34c8a2022ae2823dcb1aeac73a1e02e799dde1eedd2e1ebd90c": "Updates the question input prerequisites based on the connection state and document availability. Sets the input as enabled or disabled with an optional error message depending on whether the connection is established and documents are indexed.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_update_scope_chip:acc04dc33fdd19d309c814a856f9117f57442c69355c83023cc49efdd5ab11aa:acc04dc33fdd19d309c814a856f9117f57442c69355c83023cc49efdd5ab11aa": "Updates the scope chip display with the count of included and excluded items from the current retrieval scope.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_update_scope_chip:ecf0cef2bd03f02ab3baa5db08d0023d76caca5335ba96ae7e72cf41c33a83d6:ecf0cef2bd03f02ab3baa5db08d0023d76caca5335ba96ae7e72cf41c33a83d6": "The function `_update_scope_chip` updates the scope chip in the question input UI element. It retrieves the counts of included and excluded items from the current retrieval scope and passes these counts to the `update_scope_chip` method of the `question_input` widget. This likely reflects the number of documents or tags that are explicitly included or excluded from a search or retrieval operation.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_update_session:44aab6c1ddfc3fc709bc698331e3efedd85332073094a16d091283c50b3ac96c:44aab6c1ddfc3fc709bc698331e3efedd85332073094a16d091283c50b3ac96c": "Updates or creates a session dictionary for a specified project ID with provided fields. If no project ID is given, uses the currently active project ID. The session data is stored in `_project_sessions` dictionary keyed by project ID, with the fields parameter updating or adding entries to the session dictionary.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_update_session:47f8f199a9b210f1636af06dca45af93488b49deee1d1f3d4b2f3dba592392f5:47f8f199a9b210f1636af06dca45af93488b49deee1d1f3d4b2f3dba592392f5": "The function `_update_session` updates or initializes a session dictionary for a specified project ID. If no project ID is provided, it uses the currently active project ID from the project service. It retrieves or creates a session dictionary associated with the project ID and updates it with the provided key-value pairs from `fields`. The session dictionaries are stored in `_project_sessions`, which maps project IDs to their respective session data.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:closeEvent:358c616e1a32bea57c3f1ca66bd195666a2164467767a2091659e5b466af519e:358c616e1a32bea57c3f1ca66bd195666a2164467767a2091659e5b466af519e": "The `closeEvent` function handles the window closing process for the `MainWindow` class. It performs cleanup operations including stopping health and ingest timers, unsubscribing from connection and ingest events, and storing splitter sizes and active project session data. The function ensures that all resources are properly released and state is persisted before the application window is closed, then delegates to the parent class's close event handler.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:closeEvent:fa9586296c5e358233a7e2b75d975305711961fb0b2a5acb208661e4f9c6ccce:fa9586296c5e358233a7e2b75d975305711961fb0b2a5acb208661e4f9c6ccce": "The `closeEvent` method handles cleanup operations when the main window is closed. It stops health and ingest timers if they exist, unsubscribes from connection and ingest events if the unsubscribe functions are callable, stores splitter sizes and active project session data, and then calls the parent class's close event handler.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:provider:82cb312751d07215cb735d1d70d9b171fb38a57d81e36cd4416faa30328708c8:82cb312751d07215cb735d1d70d9b171fb38a57d81e36cd4416faa30328708c8": "The function `provider` generates a list of `StepContextBatch` objects based on a `PlanItem`, step index, and total steps. It constructs a combined query from a normalized input and the plan item's description, then retrieves context records using a search service. These records are chunked and processed into batches containing snippets and documents, which are returned as a list of `StepContextBatch` objects.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:provider:afde23b4bf853c124dd6d21aaee89ef86dce34d8e49d70a24069ed162717b554:afde23b4bf853c124dd6d21aaee89ef86dce34d8e49d70a24069ed162717b554": "The function `provider` takes a `PlanItem`, step index, and total steps as input, and returns a list of `StepContextBatch` objects. It constructs a combined query from a normalized prompt and the plan item's description, then retrieves context records using a search service. The retrieved records are chunked and processed into batches of context data, which are returned as `StepContextBatch` objects containing snippets and documents.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:show_message:35de7fed59376565606af21ef9f52f3802a1029f884fafe23045d917363829ff:35de7fed59376565606af21ef9f52f3802a1029f884fafe23045d917363829ff": "Displays a styled message in the toast widget with optional duration and visual styling based on message level (error, warning, or info). The message is positioned in the top-right corner of its parent widget, fades in, and then fades out after the specified duration.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:show_message:7c349c89716962695edbbffa86adb49be2ea033583614839f7dfc1b122abf146:7c349c89716962695edbbffa86adb49be2ea033583614839f7dfc1b122abf146": "Displays a toast message with specified content, level, and duration. Configures the widget's appearance based on the message level (error, warning, or info), positions the widget in the parent's top-right corner, animates its fade-in, and schedules a fade-out after the specified duration.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:visit:5b8ce1f821fb216d99de9fa8920923fe94e21e475698e7db85984c2e18cde3a4:5b8ce1f821fb216d99de9fa8920923fe94e21e475698e7db85984c2e18cde3a4": "The function `visit` is a recursive method that traverses a `QTreeWidgetItem` hierarchy to locate a specific item based on a matching path. It checks the tooltip of each item to extract a path, compares it with a target path, and if a match is found, expands all parent items and selects the matching item in a tree view. The function returns `True` if the target item is found and processed, otherwise `False`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:visit:7670814ddabb7868772a745f4e12af6ea807d07b9bcfe86eae3c09c59e1eebd0:7670814ddabb7868772a745f4e12af6ea807d07b9bcfe86eae3c09c59e1eebd0": "This function recursively searches through a QTreeWidgetItem hierarchy to find a specific target path. When the target path is located, it expands all parent items, selects the matching item in the tree, and scrolls to its position. The function returns True if the target is found and processed, otherwise False. It handles potential exceptions when converting the tooltip text to a Path object.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:visit:acb9649e22f02851be459b0a662b60438d92b20d4f846687bc4eae55ee0eb63d:acb9649e22f02851be459b0a662b60438d92b20d4f846687bc4eae55ee0eb63d": "This function recursively searches through a QTreeWidgetItem hierarchy to find an item matching a specific document ID. When found, it expands all parent items to ensure the item is visible, selects it in the tree view, and scrolls to its position. The function returns True if the item is found and processed, False otherwise.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:visit:e575de1364a01834e67c934f66d594c9f9ca6d1c581b521a6aebff6ac4b827da:e575de1364a01834e67c934f66d594c9f9ca6d1c581b521a6aebff6ac4b827da": "The function `visit` is a recursive method that searches through a `QTreeWidgetItem` hierarchy to find a specific item based on a matching `document_id`. When the item is found, it expands all parent items in the tree, selects the item, and scrolls to its position. The function returns `True` if the item is found and processed, otherwise `False`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:worker:e2f11abd7d455b016cad13b6253a10f3aecf24ac6665998a8ab30082673e514c:e2f11abd7d455b016cad13b6253a10f3aecf24ac6665998a8ab30082673e514c": "The `worker` function performs a health check on the LMStudio client and updates the status UI element with the result. It is designed to run asynchronously, using `QTimer.singleShot` to schedule the status update without blocking the main thread. The function retrieves the health status of the LMStudio client and passes it to `_set_lmstudio_status` for UI rendering.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:worker:efa26ae0b31ba08d81391820824479abc9ec8421dd42b3bc797c596a5d8d5cdf:efa26ae0b31ba08d81391820824479abc9ec8421dd42b3bc797c596a5d8d5cdf": "The `worker` function performs a health check on the LMStudio client and updates the status display asynchronously. It calls the `health_check` method on `self.lmstudio_client`, then uses `QTimer.singleShot` to schedule the `_set_lmstudio_status` method with the health check result as an argument, ensuring the UI update occurs in the main thread.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:6c8abc5db6aa543f71024fcd582119076b2d55a5fc788202944ebbe990469db8:6c8abc5db6aa543f71024fcd582119076b2d55a5fc788202944ebbe990469db8": "The module defines a reusable widget for handling chat question input in a PyQt6-based application. The widget includes a text editor with history navigation support, scope filtering indicators, status messages, and control buttons for submitting questions, clearing input, and accessing settings. It manages user input, tracks conversation history, and integrates with connection and prerequisite states to enable or disable interactions. The widget supports compact and regular display modes, and updates its interface based on model settings and connection status.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:QuestionInputWidget:8ed6be3f1dca587f55224a6c402dfce7b7721a1206199bfae4133cb1b09e1ae6:8ed6be3f1dca587f55224a6c402dfce7b7721a1206199bfae4133cb1b09e1ae6": "The `QuestionInputWidget` class provides a user interface component for entering questions in a document processing application, managing input history, and coordinating with AI model settings and connection status. It handles text input, button states, and UI updates related to question submission, prerequisites, and system connectivity. The widget supports features like history navigation, busy state management, and dynamic updates to reflect current model and answer length settings.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:QuestionInputWidget:__init__:dea9842b086fc05c39772531b57a4a17ae2af894979e455ed769db8d324cfc00:dea9842b086fc05c39772531b57a4a17ae2af894979e455ed769db8d324cfc00": "Initializes a widget for question input with editor, scope button, status indicators, and action buttons. Configures layout, connections, and initial state for text editing and user interaction. Sets up history management, status display, and settings menu integration. Defines UI elements for sending questions, clearing input, and managing scope. Establishes signal-slot connections for editor actions and button interactions. Initializes internal state variables for tracking history, status, and settings. Configures visual styling and layout constraints for the widget's components.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:QuestionInputWidget:_apply_history:6681d071a3e8aa372d9dd416cf81553a75bdb04f5c031787f458c77168d81bbf:6681d071a3e8aa372d9dd416cf81553a75bdb04f5c031787f458c77168d81bbf": "Applies the current history index to update the text display. When the history index is valid, sets the text to the value at that index in the history list. When the history index is invalid, clears the editor content.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:QuestionInputWidget:_recall_next:f857bb140e6e6d091591e27396417014857deb732d99c044dac4990fb7542138:f857bb140e6e6d091591e27396417014857deb732d99c044dac4990fb7542138": "The function advances the history index to recall the next item in a sequence. It checks if history exists, increments the index position, ensures it doesn't exceed the history length, and applies the recalled item.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:QuestionInputWidget:_recall_previous:3a0a90c810fe9fc46cdccb698401323991c54759eac4ea5be87e71e9143d2f46:3a0a90c810fe9fc46cdccb698401323991c54759eac4ea5be87e71e9143d2f46": "Function that navigates backward through a history list by decrementing an index and applying the previous entry.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:QuestionInputWidget:_remember_entry:e35d47628eddfcfb4041bc78700d6b89dd37943954477fbb4587b3c53c716ada:e35d47628eddfcfb4041bc78700d6b89dd37943954477fbb4587b3c53c716ada": "Function that manages command history by adding new entries while avoiding duplicates and updating the current index position.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:QuestionInputWidget:_set_status_pill:d7bc4cfadf691e6ba4612ff66cd93b4fbcd6b62416958f2bd26c49d785e99f9d:d7bc4cfadf691e6ba4612ff66cd93b4fbcd6b62416958f2bd26c49d785e99f9d": "Function sets the status pill widget text, visibility, tooltip, and styling properties based on provided parameters. It processes input text by stripping whitespace, updates the widget's text content, controls its visibility, configures tooltip text, assigns a state property, and refreshes the widget's visual style. The function handles cases where input text may be None or non-string values by converting them to empty strings. The state parameter defaults to \"info\" when not provided. The widget's style is refreshed after property updates to ensure visual consistency.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:QuestionInputWidget:_trigger_ask:71b6d789f39c4f461abd655c9172bfe19f13b361e5a4343c0e6b4d8bc298aea2:71b6d789f39c4f461abd655c9172bfe19f13b361e5a4343c0e6b4d8bc298aea2": "Function that handles triggering an ask request when certain conditions are met. It checks if the system is not busy, if there is text present, and if prerequisites are satisfied. When all conditions are true, it stores the text, clears the editor, and emits an ask request signal with the text content.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:QuestionInputWidget:_update_button_state:5561593c8d5d11337fa7f6455f4ab801ac695e1625c89181d1cd643d2660fbff:5561593c8d5d11337fa7f6455f4ab801ac695e1625c89181d1cd643d2660fbff": "Function updates the enabled state of a button based on text presence, prerequisite conditions, and busy status. Sets tooltip message when prerequisites are not met.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:QuestionInputWidget:_update_settings_summary:46a7dede519cd7495d3ab3646bf72e054fe1c2d1b8d99f9dbc651f3ce8322dd0:46a7dede519cd7495d3ab3646bf72e054fe1c2d1b8d99f9dbc651f3ce8322dd0": "Updates a settings button text with a formatted summary combining a model name and answer length label.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:QuestionInputWidget:clear:f7c7c3f2a374dda28803331f01270f86a077f0614cfb120a430c174b22c19974:f7c7c3f2a374dda28803331f01270f86a077f0614cfb120a430c174b22c19974": "Clears the editor content, resets the history index to the end of the history list, updates the button state based on the new history position, and emits a cleared signal.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:QuestionInputWidget:set_answer_length:af71c756f886de8cb3ccdcb5b64b96b7343fe7a90bbc628afb29c3cd947cf42a:af71c756f886de8cb3ccdcb5b64b96b7343fe7a90bbc628afb29c3cd947cf42a": "Function that updates an answer length setting and triggers a summary update when the setting changes. Takes a preset value of type AnswerLength, validates its type, checks if it differs from the current setting, and updates the internal state if needed. Calls a summary update method after any successful change.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:QuestionInputWidget:set_busy:f341b91c6660bd44a1c0d30bd033db1820daee34995304ad992734e6ff8e39e2:f341b91c6660bd44a1c0d30bd033db1820daee34995304ad992734e6ff8e39e2": "Function sets the busy state of an editor interface, updating read-only status, enable states of editor and clear button, and button state updates.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:QuestionInputWidget:set_connection_state:ca290e821a42cd35502d001c4107b62160d0ff2fcfacf97b143fd380b834e971:ca290e821a42cd35502d001c4107b62160d0ff2fcfacf97b143fd380b834e971": "Function sets the connection status display based on provided connection state. Takes a ConnectionState object and updates the status pill with appropriate label, severity, and tooltip depending on whether the connection is established or not. When connected, displays \"LMStudio Connected\" with success styling. When disconnected, shows either the provided error message or default offline message with error or warning styling.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:QuestionInputWidget:set_density:749cbc4eb279f11f57fa693e659244d235b883af8783d9a96122ece7cb5ff9a5:749cbc4eb279f11f57fa693e659244d235b883af8783d9a96122ece7cb5ff9a5": "Function sets layout density by adjusting spacing and margins based on compact or expanded mode. Takes a density parameter string, converts it to lowercase, and applies different spacing values (4 for compact, 8 for expanded) and margin values (0 for compact, 4 for expanded). Updates both the main layout and specific row layouts with corresponding spacing values.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:QuestionInputWidget:set_model_name:f048111c395d0bd06eb63c5b0eecb6d5f3130443eaf7171a101540c585038ff7:f048111c395d0bd06eb63c5b0eecb6d5f3130443eaf7171a101540c585038ff7": "Function sets a model name after cleaning and validation, updating internal state and summary when the name changes.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:QuestionInputWidget:set_prerequisites_met:0fb1065d3abd04a38feccf18feb88af6ee976c178ba4940396bf170306b1cd20:0fb1065d3abd04a38feccf18feb88af6ee976c178ba4940396bf170306b1cd20": "Function sets prerequisites status and updates UI label visibility and content based on provided boolean flag and optional message. When prerequisites are met or no message is provided, the status label is hidden. Otherwise, the message is processed to fit within a fixed width using middle elision and displayed in the label. The button state is updated after processing.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:QuestionInputWidget:set_settings_menu:52f3a6c0c4cf25e3f5b0512113ca7ca19090609a26d2447ce4b3a5a23059fc39:52f3a6c0c4cf25e3f5b0512113ca7ca19090609a26d2447ce4b3a5a23059fc39": "Sets a settings menu for the interface, updates the associated button to display the menu, and enables or disables the button based on whether a menu is provided.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:QuestionInputWidget:set_status_message:c8568c2e8f91189b638ecf3290e3d9f63bc42d4f940d7cf030b640d870c427c0:c8568c2e8f91189b638ecf3290e3d9f63bc42d4f940d7cf030b640d870c427c0": "Function that sets a status message with a specified text and level, normalizing the level to determine the appropriate visual state. The function maps input levels to predefined states: \"warning\" for warning or warn, \"error\" for error or danger, \"connected\" for success or ok, and defaults to \"info\". It then calls an internal method to display the status with the determined state.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:QuestionInputWidget:set_text:80acb16b2c717fc6ae6d1d6248d9a6f88c5d0017678b31b8277bd228719c8fcd:80acb16b2c717fc6ae6d1d6248d9a6f88c5d0017678b31b8277bd228719c8fcd": "Sets the text content of an editor widget and positions the cursor at the end of the text. Updates the state of associated buttons after the text change.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:QuestionInputWidget:text:185a24d558d9cc5e83439575a9237ae57dd1b448535a4c93bb3e82edf6a33fe3:185a24d558d9cc5e83439575a9237ae57dd1b448535a4c93bb3e82edf6a33fe3": "The function returns the plain text content from an editor component, with leading and trailing whitespace removed.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:QuestionInputWidget:update_scope_chip:7b8a2b3da77e1d703069bddb2e24eb9a3ab4c5fc651085956d69c8dd283342cf:7b8a2b3da77e1d703069bddb2e24eb9a3ab4c5fc651085956d69c8dd283342cf": "Function updates a scope button's display based on include and exclude counts. Hides the button when both counts are zero or less. Otherwise, constructs a label showing positive and negative counts separated by a dot, sets the button text and tooltip, and makes the button visible.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:_HistoryTextEdit:e16d2f7f211d89226be133e9ea59ac36c0ac48fa469db06fc55052dfd50f48db:e16d2f7f211d89226be133e9ea59ac36c0ac48fa469db06fc55052dfd50f48db": "The `_HistoryTextEdit` class extends QTextEdit to provide specialized keyboard navigation for submitting queries and browsing command history. It emits signals for submitting requests with Ctrl+Enter and navigating history with Up/Down arrows, while delegating other key events to the parent class. The class supports interactive user input within a document processing and retrieval interface.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:_HistoryTextEdit:keyPressEvent:f24902d41966100fdbe1a7b0ffded63106e90db3077b96888b70c17d88ff2264:f24902d41966100fdbe1a7b0ffded63106e90db3077b96888b70c17d88ff2264": "Handles keyboard input events for a text input widget. Processes specific key combinations to emit signals for submitting text, navigating command history, and allows default handling for other inputs. Accepts Ctrl+Enter to submit, Up arrow at text start to request previous history item, and Down arrow at text end to request next history item.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:__init__:9cb053dc7600f600c8d7b56df75a0b206770f076b72773b463c1503c9b9f4c06:9cb053dc7600f600c8d7b56df75a0b206770f076b72773b463c1503c9b9f4c06": "Initializes the `QuestionInputWidget` class, setting up the user interface components and connections for question input, history navigation, and button controls. The widget includes a text editor for input, scope and status indicators, settings and ask buttons, and manages input history and UI state. It configures layout, connects signals to slots for handling user interactions, and initializes internal state variables such as history, model name, and answer length. The widget is designed to integrate with a larger application for document processing and question-answering using local AI models.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:__init__:d9f131421cca874ed04557684858ca4623ccb7c51bec1d461cb16b8651281494:d9f131421cca874ed04557684858ca4623ccb7c51bec1d461cb16b8651281494": "Initializes the `QuestionInputWidget` with a layout, editor, scope button, status label, and control buttons. Sets up signal connections for text changes, submission, and history navigation. Configures UI elements including a text editor, scope indicator, status display, settings button, and ask/clear buttons. Initializes internal state variables such as history, model name, and answer length.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:_apply_history:4f6e19047b08ee689cb5659ac27271e479c288ec1ed574a524366b13da7116c1:4f6e19047b08ee689cb5659ac27271e479c288ec1ed574a524366b13da7116c1": "Applies the current history index to update the widget's text content. If the history index is valid, sets the text to the corresponding history entry; otherwise, clears the editor content.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:_apply_history:c73295b776b85bb520eacabbe3644b3696e0b6c665f8ac84c2b509adc08e5f9e:c73295b776b85bb520eacabbe3644b3696e0b6c665f8ac84c2b509adc08e5f9e": "The function `_apply_history` updates the text in the widget's editor based on the current index in the history list. If the index is valid, it sets the editor's text to the value at that index in the history; otherwise, it clears the editor.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:_recall_next:bf37fbfe40f23cbfd87cf4e4b6115cf30459c5d22d73a3c26f8af7e48aed6d5e:bf37fbfe40f23cbfd87cf4e4b6115cf30459c5d22d73a3c26f8af7e48aed6d5e": "The function `_recall_next` navigates forward through a history of inputs within the `QuestionInputWidget`. It increments the current history index and applies the corresponding historical input, if available. If the history is empty, the function returns without action.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:_recall_next:de2c1b7d87b3f02f19c578bf983762edba237f00d2222dfc12b52345d303694d:de2c1b7d87b3f02f19c578bf983762edba237f00d2222dfc12b52345d303694d": "The function `_recall_next` navigates forward through the history of question inputs within the `QuestionInputWidget`. It increments the current history index and applies the next item from the history, if available. If the history is empty, the function returns without action. The history index is capped at the length of the history to prevent exceeding its bounds.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:_recall_previous:0e537c92ec1c95cf49820a1e398e847b1927325286f53f6d2d067e6a55c7a754:0e537c92ec1c95cf49820a1e398e847b1927325286f53f6d2d067e6a55c7a754": "The function `_recall_previous` navigates backward through a history of inputs within the `QuestionInputWidget`. If the history is empty, it returns immediately without action. Otherwise, it decrements the current history index (ensuring it does not go below zero) and applies the selected historical input.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:_recall_previous:fdc1750ad45e71ef906dce394f5907e390b0fadd69e3ee3b6b06344bed6b12de:fdc1750ad45e71ef906dce394f5907e390b0fadd69e3ee3b6b06344bed6b12de": "The function `_recall_previous` navigates backward through the history of questions within the `QuestionInputWidget`. It decrements the current history index and applies the previous question from the history, if available. If the history is empty, the function returns without performing any action.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:_remember_entry:57c633e4189df4ab51ff3cf9515123f2ecbd349597161774fc3e012ef2e7f763:57c633e4189df4ab51ff3cf9515123f2ecbd349597161774fc3e012ef2e7f763": "The function `_remember_entry` stores a given text string in the widget's history list, appending it only if it is non-empty and not already the last entry. It then updates the history index to point to the end of the history list. This implements functionality for tracking input history, likely for use in a text input field with navigation through previous entries.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:_remember_entry:8b419b54625de65e8876629b6fdc4421d81c9ccc61d3d7bc2e91cbcb0c1dc62e:8b419b54625de65e8876629b6fdc4421d81c9ccc61d3d7bc2e91cbcb0c1dc62e": "The function `_remember_entry` stores a given text string in the widget's history list, but only if the text is non-empty and not a duplicate of the last entry. It then updates the history index to point to the end of the history list.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:_set_status_pill:2987a1dc2061405b174ceef76209610ea0989e64d2b38af58884dd5e576cab65:2987a1dc2061405b174ceef76209610ea0989e64d2b38af58884dd5e576cab65": "The function `_set_status_pill` updates the display and properties of a status indicator widget (`status_pill`) within the `QuestionInputWidget` class. It sets the text content, visibility, tooltip, and CSS state property of the widget based on provided parameters. The text is stripped of leading/trailing whitespace if it is a string. The widget's style is refreshed to apply any visual changes associated with the new state.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:_set_status_pill:3c425ea0e90fdf08bf44027bd351b748c8ec1278eac6ba3b59e387a536562145:3c425ea0e90fdf08bf44027bd351b748c8ec1278eac6ba3b59e387a536562145": "Sets the status pill widget's text, visibility, tooltip, and CSS state property. The text is stripped of whitespace if it is a string. The widget is made visible if the display text is non-empty. The tooltip is set to the provided value or an empty string if None. The CSS state property is set to the provided state or \"info\" if None. Finally, the widget's style is refreshed by unpolling and repolishing it.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:_trigger_ask:6f76889d0b067caede9be3573c5492570b7157d94769b7080794a5c50a923260:6f76889d0b067caede9be3573c5492570b7157d94769b7080794a5c50a923260": "The function `_trigger_ask` handles the logic for triggering an ask request in the `QuestionInputWidget`. It first checks if the widget is busy, and if so, returns without taking action. If the text input is empty or prerequisites are not met, it also returns. Otherwise, it stores the current text entry, clears the editor, and emits the `ask_requested` signal with the text content.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:_trigger_ask:eac8dc4df6776ce7584aaf8421c2ae48a6a1429fdf7812973505870582b92584:eac8dc4df6776ce7584aaf8421c2ae48a6a1429fdf7812973505870582b92584": "The function `_trigger_ask` is responsible for initiating a question-answering request within the `QuestionInputWidget` class. It first checks if the widget is not in a busy state, if the input text is present, and if all prerequisites are met. If these conditions are satisfied, it stores the entered text, clears the input field, and emits a signal `ask_requested` with the text as an argument to notify other components of the new question.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:_update_button_state:072895c8945fa776206cbe6b4a85261acbe2bd22cd6f2767422655221d018562:072895c8945fa776206cbe6b4a85261acbe2bd22cd6f2767422655221d018562": "Updates the state of the ask button based on text content, prerequisite conditions, and busy status. Enables or disables the button accordingly and sets tooltip messages to indicate the reason for disabled state.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:_update_button_state:c63b7d83a5d5feba74a2171af9aeb71fe4f007fdd63c20a371a4472432cac304:c63b7d83a5d5feba74a2171af9aeb71fe4f007fdd63c20a371a4472432cac304": "The function `_update_button_state` updates the enabled state and tooltip of the `ask_button` based on the current state of the widget. It enables the button only if there is text in the input, prerequisites are met, and the widget is not busy. If prerequisites are not met, it sets the button's tooltip to a status message; otherwise, it clears the tooltip.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:_update_settings_summary:7d3f863d67b49f788b2dfebbe3029e899c3ed52c09801254eb3f8d5a4cfe4a12:7d3f863d67b49f788b2dfebbe3029e899c3ed52c09801254eb3f8d5a4cfe4a12": "Updates the settings button text to display a summary combining the model name and answer length label.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:_update_settings_summary:b05ac71e797c8b6a27f0dfa6cc075487ba782d8e6dcd7cd17527c7820afeadad:b05ac71e797c8b6a27f0dfa6cc075487ba782d8e6dcd7cd17527c7820afeadad": "Updates the text of `settings_button` to display a summary combining the current model name and answer length setting. The answer length value is converted to title case for display.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:clear:2a5bddde77025f7d1f80365dcf1c62c0bdeea6a96d866b9906b03fd107a11b6a:2a5bddde77025f7d1f80365dcf1c62c0bdeea6a96d866b9906b03fd107a11b6a": "The `clear` method clears the content of the editor, resets the history index to the end of the history list, updates the state of buttons based on the new history index, and emits a `cleared` signal.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:clear:f5d03deb8a142eceaa824794532132fd8a1254b66e81f4475575d8d75e30e41e:f5d03deb8a142eceaa824794532132fd8a1254b66e81f4475575d8d75e30e41e": "Clears the editor content, resets the history index to the end of the history list, updates the button state based on the new history index, and emits a cleared signal.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:keyPressEvent:1dfb8768e3ce9f5e395e73e5ad8d3d62d20a8b03b11bd76fc6e1b3c6231d8703:1dfb8768e3ce9f5e395e73e5ad8d3d62d20a8b03b11bd76fc6e1b3c6231d8703": "The `keyPressEvent` method handles specific keyboard interactions within the `_HistoryTextEdit` widget. It emits signals based on key combinations: pressing Ctrl+Enter triggers a submit request, while pressing the Up arrow at the start of the text emits a signal for navigating to the previous item in history, and pressing the Down arrow at the end of the text emits a signal for navigating to the next item in history. For all other key events, it delegates handling to the parent class.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:keyPressEvent:e433ec1342bd5a13aad43498b21a4d7449c63d837c6e3db55ab01bbe428bc361:e433ec1342bd5a13aad43498b21a4d7449c63d837c6e3db55ab01bbe428bc361": "The `keyPressEvent` method handles keyboard input for the `_HistoryTextEdit` class. It processes specific key combinations to trigger custom signals:\n\n\nFor all other key presses, it calls the parent class's `keyPressEvent` method to handle them normally.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:set_answer_length:a8895c326a9a6f4aec2082b1f165a478c1f2aa436ea0b805052955c951ea5413:a8895c326a9a6f4aec2082b1f165a478c1f2aa436ea0b805052955c951ea5413": "Sets the answer length preset for the question input widget. Updates the internal answer length attribute and refreshes the settings summary when a valid AnswerLength enum value is provided and differs from the current setting.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:set_answer_length:bfe0c30282b04ecf9e918065e86cea20226ef9d77f5d612a7f1e53dc1e9499ed:bfe0c30282b04ecf9e918065e86cea20226ef9d77f5d612a7f1e53dc1e9499ed": "The function `set_answer_length` updates the answer length preset for the question input widget. It accepts an argument of type `AnswerLength`, validates its type, and checks if the new value differs from the current setting. If both conditions are met, it updates the internal `_answer_length` attribute and triggers an update to the settings summary by calling `_update_settings_summary()`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:set_busy:1a76f257d72ca13f62def6f97de6db76fd409452320ff607db64440366dfac82:1a76f257d72ca13f62def6f97de6db76fd409452320ff607db64440366dfac82": "Sets the widget's busy state, which controls whether input is enabled and updates related UI elements. When busy is True, the editor becomes read-only and disabled, and the clear button is disabled. When False, the editor and clear button are re-enabled. The update button state is also refreshed.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:set_busy:98edf232872ddf44cce2da10578175328ac3175060fa68b508b39fa087124668:98edf232872ddf44cce2da10578175328ac3175060fa68b508b39fa087124668": "The `set_busy` method updates the widget's state to reflect whether it is busy. It sets the `_busy` attribute, makes the editor read-only and non-editable when busy, disables the clear button, and updates the state of the update button.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:set_connection_state:35552eb319461cb72664dd3135dde6937f26decf419143f6986186e9e33bdc99:35552eb319461cb72664dd3135dde6937f26decf419143f6986186e9e33bdc99": "The function `set_connection_state` updates the connection status display of the `QuestionInputWidget` based on the provided `ConnectionState` object. If the connection is established, it sets the status pill to \"LMStudio Connected\" with a connected state and displays the associated message or defaults to \"Connected to LMStudio\". If the connection is not established, it sets the status pill to either \"error\" or \"warning\" state depending on whether a message is provided, displaying the message or defaulting to \"LMStudio Offline\" or \"LMStudio is not responding.\" The function uses the `_set_status_pill` method to render the visual status indicator with appropriate label, severity, and tooltip.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:set_connection_state:f51d7bc9d37a22824e4661b130d693c4439034b7c05b9d748624d049c4965ff6:f51d7bc9d37a22824e4661b130d693c4439034b7c05b9d748624d049c4965ff6": "Sets the connection status display based on the provided ConnectionState object. If connected, shows a \"connected\" status with a tooltip indicating the connection. If not connected, displays either an \"error\" or \"warning\" status depending on whether an error message is provided, using the message or default text for both the label and tooltip.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:set_density:0bdcea77af19ddf54e248c0296869503806312c22ec03f484c1eafb27cf3c49f:0bdcea77af19ddf54e248c0296869503806312c22ec03f484c1eafb27cf3c49f": "Sets the visual density of the widget layout based on the provided density string. When density is \"compact\", reduces spacing and margins; otherwise uses default spacing and margins. Updates both the main layout and specific child layouts with the calculated spacing and margin values.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:set_density:5de8d0ae7b966fc69c085d1a99efa3e52bdd1dcc19295b8628b109ea39ee52c2:5de8d0ae7b966fc69c085d1a99efa3e52bdd1dcc19295b8628b109ea39ee52c2": "The function `set_density` adjusts the spacing and margins of the widget's layout and related sub-rows based on the specified density mode. When the mode is set to \"compact\", it applies smaller spacing and no margins; otherwise, it uses larger spacing and margins. The function modifies the vertical layout's spacing and content margins, as well as the spacing for `_top_row` and `_buttons_row`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:set_model_name:423d531c92bb1742af1f90cc0b8ca5ccc07b360d04b137c96ed92be3d1785cc8:423d531c92bb1742af1f90cc0b8ca5ccc07b360d04b137c96ed92be3d1785cc8": "The function `set_model_name` updates the model name stored in the instance, but only if the new name is different from the current one. It cleanses the input by stripping whitespace and ensures the update occurs only when necessary. After updating the model name, it triggers a summary update for the settings.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:set_model_name:dcd19a5d9f4f2ff08c62fa22ff11bb2480aac54ea710f8b6f1c5bc04990e84ab:dcd19a5d9f4f2ff08c62fa22ff11bb2480aac54ea710f8b6f1c5bc04990e84ab": "Sets the model name for the question input widget. Takes a string input, strips whitespace, and updates the internal model name if it differs from the current value. Triggers an update to the settings summary afterward.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:set_prerequisites_met:83241436f9f3dc7603c52d7f959c6c4e0f8603e09f2823d1eda634043d976988:83241436f9f3dc7603c52d7f959c6c4e0f8603e09f2823d1eda634043d976988": "Sets the prerequisite status and updates the display message. Updates the visibility of the status label based on whether prerequisites are met or if a message is provided. Elides the displayed message if it exceeds 320 pixels in width. Finally, updates the button state.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:set_prerequisites_met:f173399ae46c07188f62ea790532c4ba2acb5f9077651f46d990235cd6805619:f173399ae46c07188f62ea790532c4ba2acb5f9077651f46d990235cd6805619": "The function `set_prerequisites_met` updates the widget's internal state to reflect whether prerequisites for question input are satisfied. It sets a boolean flag `_prerequisites_met` and stores an optional status message `_status_message`. If prerequisites are met or no message is provided, the status label is hidden. Otherwise, the message is displayed, truncated if necessary to fit within a specified width, and the label is made visible. Finally, it updates the state of the input button based on the updated prerequisites.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:set_settings_menu:57adaff323192119441d4c500afd6238153c8a153c01a812cecd8dcd1de16243:57adaff323192119441d4c500afd6238153c8a153c01a812cecd8dcd1de16243": "The function `set_settings_menu` assigns a provided `QMenu` object to the internal `_settings_menu` attribute of the `QuestionInputWidget` class. It also associates this menu with the `settings_button` widget, enabling the button only if the provided menu is not `None`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:set_settings_menu:ef4f969365d5dec2e2442a7477c3c6b3e813a5e932dbe0f19ff18a539e2ff2c8:ef4f969365d5dec2e2442a7477c3c6b3e813a5e932dbe0f19ff18a539e2ff2c8": "Sets the settings menu for the widget, updates the associated button's menu and enabled state based on whether a menu is provided.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:set_status_message:59ac4e27abae36b239579179c3a58abfc64b57695dc29de802a015ef3d6c40a4:59ac4e27abae36b239579179c3a58abfc64b57695dc29de802a015ef3d6c40a4": "The function `set_status_message` updates the status message displayed in the user interface with the provided text and assigns it a visual state based on the specified level. It normalizes the input level to one of four predefined states: \"info\", \"warning\", \"error\", or \"connected\". The function maps \"warning\" and \"warn\" to \"warning\", \"error\" and \"danger\" to \"error\", and \"success\" and \"ok\" to \"connected\". All other inputs default to \"info\". Finally, it calls `_set_status_pill` with the text and the determined state to update the UI.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:set_status_message:a6b0f6c7ad2a9307c6438b12adbb00261b04e0cb22c04441f92116519d460754:a6b0f6c7ad2a9307c6438b12adbb00261b04e0cb22c04441f92116519d460754": "Sets a status message with the specified text and level on the widget. The level parameter determines the visual state of the status pill, mapping \"warning\" or \"warn\" to \"warning\", \"error\" or \"danger\" to \"error\", \"success\" or \"ok\" to \"connected\", and defaulting to \"info\". The actual display is handled by the private method `_set_status_pill`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:set_text:42ae7b4c6a880e7917f65cc32d54be052f9bd0060c3f2fb52ee4e91b1245511a:42ae7b4c6a880e7917f65cc32d54be052f9bd0060c3f2fb52ee4e91b1245511a": "Sets the text content of the editor widget to the specified string, positions the cursor at the end of the text, and updates the state of associated buttons.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:set_text:76ac2ed5f742d798b9b1efc12f3695c8f6ea36540a47103fda6f2b77b1655400:76ac2ed5f742d798b9b1efc12f3695c8f6ea36540a47103fda6f2b77b1655400": "Sets the plain text content of the editor to the provided string, positions the cursor at the end of the text, and updates the state of associated buttons.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:text:802105d982a7be2c78f70f75bbcf6175b31351e5e734d98289a11b99faa767df:802105d982a7be2c78f70f75bbcf6175b31351e5e734d98289a11b99faa767df": "Returns the plain text content from the editor widget with leading and trailing whitespace removed.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:text:936a56052540183493f43c561fbfd9fa046ea57e00364ced958bbaf007a280e4:936a56052540183493f43c561fbfd9fa046ea57e00364ced958bbaf007a280e4": "The function `text` retrieves the plain text content from the `self.editor` widget, strips any leading or trailing whitespace, and returns the resulting string.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:update_scope_chip:118d5cc7ebf5aacf2a24ea135654aa2296e27a7b0bbdec504a1f08ba6b4e0b0e:118d5cc7ebf5aacf2a24ea135654aa2296e27a7b0bbdec504a1f08ba6b4e0b0e": "Updates the scope chip display on the widget based on include and exclude counts. If both counts are zero or less, the scope button is hidden with a tooltip indicating the entire corpus is included. Otherwise, it constructs a label showing the counts of included and excluded items, updates the button text and tooltip, and makes the button visible.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:update_scope_chip:7f188d596eabf28698d20115409c55c7de7da31dc94e1dc19c10ca48f69af134:7f188d596eabf28698d20115409c55c7de7da31dc94e1dc19c10ca48f69af134": "Updates the scope chip display on the widget based on include and exclude counts. Shows a button with a label indicating the current scope filter, formatted as \"Scope +N \u00b7 -M\" where N is the include count and M is the exclude count. If both counts are zero or less, hides the button and sets a tooltip indicating the entire corpus scope. Otherwise, displays the button with the formatted label and a tooltip to clear scope filters.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_dynamic_planning.py:1c223c24a7f50506aec30514c2b23b2d3598f334235dd9e89622f5ef23fce617:1c223c24a7f50506aec30514c2b23b2d3598f334235dd9e89622f5ef23fce617": "Module defines a stub client for testing chat interactions and includes tests for conversation management with dynamic plans. The stub client simulates chat responses with deterministic outputs and captures request data. Tests verify plan execution, citation handling, and reasoning artifacts when citations are absent. A context provider supplies evidence for steps in the conversation.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_dynamic_planning.py:EmptyCitationClient:a6c2a300985bf8e445308cd0b931fd34ae58cfdf853f9aacd33904008e0ca0fc:a6c2a300985bf8e445308cd0b931fd34ae58cfdf853f9aacd33904008e0ca0fc": "The `EmptyCitationClient` class is a placeholder implementation that simulates chat interactions by recording input messages and options into an internal list of requests. It returns empty `ChatMessage` objects with no content, citations, or reasoning, effectively serving as a dummy client for testing or demonstration purposes. The class implements a method marked to ignore type overrides, indicating it extends or replaces functionality from a parent class.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_dynamic_planning.py:EmptyCitationClient:chat:d3e18717c642430f8f06d84487abfb3b73dfda60dfbd1f624711f47dedbc802c:d3e18717c642430f8f06d84487abfb3b73dfda60dfbd1f624711f47dedbc802c": "The function implements a chat method that accepts messages, a preset parameter, and optional extra options. It appends a dictionary containing the messages and options to an internal requests list. The method returns a ChatMessage object initialized with empty content, empty citations list, None reasoning, and a raw response structure containing an empty choices list.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_dynamic_planning.py:StubLMStudioClient:8ece2e59a2d201e4e360f5416b8d3217a2b9e0d171a5d41eecc9e1922884213a:8ece2e59a2d201e4e360f5416b8d3217a2b9e0d171a5d41eecc9e1922884213a": "The `StubLMStudioClient` class is a placeholder implementation of an LMStudio client that simulates AI interactions for testing purposes. It provides methods to check health status and simulate chat responses, returning predefined outputs without actual model inference. The class stores request data internally and generates mock responses with placeholder content and citations based on the request sequence.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_dynamic_planning.py:StubLMStudioClient:__init__:6495ca9e37b745b3a9ac00403959201c0cdf83c8ed2c8b304ecfeee76d4ed3e7:6495ca9e37b745b3a9ac00403959201c0cdf83c8ed2c8b304ecfeee76d4ed3e7": "Initializes an instance with an empty list to store request dictionaries.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_dynamic_planning.py:StubLMStudioClient:chat:548fddc77cda0bd1fbcc89944aabed7caf18eb5c7d50a4f6d3a2a34841a1ebc3:548fddc77cda0bd1fbcc89944aabed7caf18eb5c7d50a4f6d3a2a34841a1ebc3": "Function defines a chat method that processes messages and returns a ChatMessage object with generated content, citations, and empty reasoning and raw response fields. The method tracks request index, stores message and option data, and constructs placeholder citation information with incremental identifiers.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_dynamic_planning.py:StubLMStudioClient:health_check:458a4ee8f332dcb752ddca07103f0696381658a3ac3a4a31f4f8faf04bd7ce9a:458a4ee8f332dcb752ddca07103f0696381658a3ac3a4a31f4f8faf04bd7ce9a": "The function implements a health check method that always returns a boolean value of True. It is defined with a self parameter, indicating it is intended to be part of a class, and has no additional logic or conditions beyond returning the constant True value.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_dynamic_planning.py:__init__:2339d3ab735016dcc09e8f97ba266a96b76ef7f7f97d7474123a5703c6a46c9f:2339d3ab735016dcc09e8f97ba266a96b76ef7f7f97d7474123a5703c6a46c9f": "Initializes an instance of `StubLMStudioClient` with an empty list to store requests.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_dynamic_planning.py:__init__:91c2571f839e8c7dd60243bda4ab139fb49d06ae7d874d5fa305aa4f1377da88:91c2571f839e8c7dd60243bda4ab139fb49d06ae7d874d5fa305aa4f1377da88": "Initializes a new instance of the StubLMStudioClient class with an empty list to store requests.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_dynamic_planning.py:_provider_for_steps:277857a95589c101d4fd2ebd9588bb1e4ca7ca1ebbd404f5bee4a9f8d1c5cdbb:277857a95589c101d4fd2ebd9588bb1e4ca7ca1ebbd404f5bee4a9f8d1c5cdbb": "The function `_provider_for_steps` takes a list of strings as input and returns an iterable of `StepContextBatch` objects. For each string in the input list, it creates a `StepContextBatch` instance containing the string as both a snippet and a document entry. Each document entry is structured with an ID (derived from the lowercase version of the string with spaces replaced by hyphens), a source field set to the original string, and a text field also set to the original string. The function collects all these `StepContextBatch` instances into a list and returns it.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_dynamic_planning.py:chat:5475b29bd60fae94b2b9a7d2224b9b926e8fb91d1e8982e6336e7acf7beaaaad:5475b29bd60fae94b2b9a7d2224b9b926e8fb91d1e8982e6336e7acf7beaaaad": "The `chat` method in the `StubLMStudioClient` class simulates a chat interaction by generating a placeholder response. It takes a list of messages, a preset, and optional extra options, then appends the messages and options to an internal requests list. The method returns a `ChatMessage` object containing placeholder content, a single citation entry with an ID, source, and snippet, and no reasoning or raw response data. The content string includes a step number based on the request index, and the citation reflects the same step number for identification.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_dynamic_planning.py:chat:7dee27f2725565a95c26bbd3992507fe2c41f874982f002f47801aa610aa2742:7dee27f2725565a95c26bbd3992507fe2c41f874982f002f47801aa610aa2742": "The function `chat` is a method of the `EmptyCitationClient` class that simulates a chat interaction by appending the input messages and options to an internal list of requests. It returns an empty `ChatMessage` object with no content, citations, or reasoning, and an empty raw response. The function is marked as ignoring type overrides, indicating it implements a method from a parent class with a different signature.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_dynamic_planning.py:chat:f28bc00df228a571642899cbcf49d1154aa217569e97dfcdaaf806f746044b04:f28bc00df228a571642899cbcf49d1154aa217569e97dfcdaaf806f746044b04": "The `chat` method in the `StubLMStudioClient` class simulates a chat response by creating a dummy message. It takes a list of messages, a preset parameter, and optional extra options. The method appends the input messages and options to an internal requests list, then returns a `ChatMessage` object with placeholder content indicating the step number, a single citation entry with dummy document details, and empty reasoning and raw response fields.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_dynamic_planning.py:health_check:0b2920705e45e3b35e123523c9007623e0543300ca9e6b3806be013b85246e10:0b2920705e45e3b35e123523c9007623e0543300ca9e6b3806be013b85246e10": "The `health_check` method of the `StubLMStudioClient` class always returns `True`, indicating a successful health status. This implementation is a stub that does not perform any actual health verification.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_dynamic_planning.py:health_check:a9430773baecb36092d33cd86fcfb861964545137b38b720d84856a6b556096c:a9430773baecb36092d33cd86fcfb861964545137b38b720d84856a6b556096c": "The `health_check` method in the `StubLMStudioClient` class always returns `True`, indicating a successful health status. This implementation provides a stub response and does not perform any actual health verification.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_dynamic_planning.py:provider:51d34ee52f402e25d05f97620997912a0af64a2de35cf9a39cd7f812778fb153:51d34ee52f402e25d05f97620997912a0af64a2de35cf9a39cd7f812778fb153": "The function `provider` takes three parameters: `_item`, `step_index`, and `_total`, and returns an iterable of `StepContextBatch`. It calls `_provider_for_steps` with a list containing a single string element `\"Evidence {step_index}\"`, where `step_index` is formatted into the string. The purpose of this function appears to be generating a batch of step contexts for a specific evidence step in a multi-step process.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_dynamic_planning.py:provider:e347a6f68a6f165b3a0ac086138744664a0d180544aebed043463afaa17061d4:e347a6f68a6f165b3a0ac086138744664a0d180544aebed043463afaa17061d4": "The function `provider` takes three parameters: `_item`, `step_index`, and `_total`, and returns an iterable of `StepContextBatch`. It invokes `_provider_for_steps` with a list containing a single string element formatted as `\"Context {step_index}\"`, where `step_index` is inserted into the string. The function serves as a wrapper that prepares a context batch for a specific step based on the provided index.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_dynamic_planning.py:test_conversation_manager_executes_dynamic_plan:2a55cf0c8d57cd03de82202adce8b480964c0aa6c3249c30768928e070f5bb16:2a55cf0c8d57cd03de82202adce8b480964c0aa6c3249c30768928e070f5bb16": "The function `test_conversation_manager_executes_dynamic_plan` tests the execution of a dynamic plan within a `ConversationManager`. It initializes a `StubLMStudioClient` and a `ConversationManager` instance, then defines a context provider that generates step contexts. The test calls the `ask` method on the manager with a query and the defined provider, expecting two requests to be made to the client and two step results to be generated. It verifies that all steps in the plan are marked as \"done\", that the answer contains specific content (\"Step 1 finding\" and \"[1]\"), and that there are two citations in the response, with the first citation referencing step 1. Additionally, it checks that the first step result has the correct citation index.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_dynamic_planning.py:test_dynamic_plan_notes_missing_citations:6d6f1d31ee7c8b83fb8554dc7b49161941620ccd533004270304dcbfe869d2d1:6d6f1d31ee7c8b83fb8554dc7b49161941620ccd533004270304dcbfe869d2d1": "The function `test_dynamic_plan_notes_missing_citations` defines a unit test that verifies the behavior of a conversation manager when processing a query with a context provider that returns no citations. It creates a stub client, `EmptyCitationClient`, which simulates an LMStudio client response with empty citations. A `ConversationManager` is initialized with this client, and a context provider function supplies step contexts. The test then executes a query through the manager and asserts that:\n\n1. Two step results are generated.\n2. Reasoning artifacts are present.\n3. The assumptions in the reasoning artifacts contain the text \"No citations\".\n4. All step results have empty citation indexes.\n\nThis validates how the system handles cases where no citations are provided during dynamic plan execution.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_export_and_backup.py:7f09fd9c803671f6428cc771103c9d122686ec59e5e9553bb3f4de4800dad4b2:7f09fd9c803671f6428cc771103c9d122686ec59e5e9553bb3f4de4800dad4b2": "Module defines test functions for export, project lifecycle, and backup services. Tests verify export functionality includes reasoning and citations in markdown and HTML formats. Tests cover project creation, setting, loading, and deletion with conversation settings. Tests validate backup and restore operations preserve audit trail and cached data. Uses mocked environment and temporary paths for isolation.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_export_and_backup.py:build_project_service:b6773c4aaf57f3fc6d363dfbf0bc4880f19551b4760cddeb26f978e9467645fb:b6773c4aaf57f3fc6d363dfbf0bc4880f19551b4760cddeb26f978e9467645fb": "Creates and returns a `ProjectService` instance configured with a specified temporary storage path and a configuration manager initialized for the \"DataMinerTest\" application with a \"projects.json\" filename. The service is set up to manage project-related data within the provided temporary directory structure.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_export_and_backup.py:test_backup_restore_persists_audit_trail:e6ad3ee9eea3c5d85da2a80ff3b8e5ff2e907662303c0bc3b0b4874851aabccd:e6ad3ee9eea3c5d85da2a80ff3b8e5ff2e907662303c0bc3b0b4874851aabccd": "The function `test_backup_restore_persists_audit_trail` tests that a backup and restore operation preserves the audit trail of background tasks and cached data. It sets up a temporary project environment, creates a background task log and cached data, generates a backup, simulates deletion of the log and storage directory, restores from the backup, and verifies that the task log status is preserved and the cached data is restored. The test ensures data integrity during backup and restore processes for project-related tasks and cache files.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_export_and_backup.py:test_export_service_includes_reasoning_and_citations:b81cc0c8e41d7c2fa2fa91a1b8a45abfdc8ffa8d5eaaeaeef3cf2c5bea452e40:b81cc0c8e41d7c2fa2fa91a1b8a45abfdc8ffa8d5eaaeaeef3cf2c5bea452e40": "The function `test_export_service_includes_reasoning_and_citations` tests the export functionality of the `ExportService` class. It creates a `ReasoningArtifacts` object containing structured reasoning data such as summary bullets, plan items, assumptions, and self-check results. A `ConversationTurn` is then constructed with a question, answer, citations, and the reasoning artifacts. The test verifies that the `conversation_to_markdown` method correctly includes reasoning and citation information in the output, checking for the presence of specific strings like \"Reasoning\", \"Doc A\", \"Plan\", and \"Token Usage\". Similarly, it checks that the `conversation_to_html` method generates HTML with expected elements such as \"Turn 1\", \"Doc A\", \"Reasoning\", and \"Self-check\". The test ensures that both markdown and HTML export formats properly incorporate reasoning artifacts and citations.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_export_and_backup.py:test_project_service_lifecycle_and_settings:de1013dee1109b5372f5655d56524bcfef9779229adb0c75f33b339412d911b7:de1013dee1109b5372f5655d56524bcfef9779229adb0c75f33b339412d911b7": "The function `test_project_service_lifecycle_and_settings` tests the lifecycle and settings management of a project service. It verifies creating, activating, and deleting projects, as well as saving and loading conversation settings for each project. The test ensures that settings are correctly associated with specific projects, checks the existence of project storage paths, and confirms that deleted projects are removed from the project list. The test uses a temporary path for configuration and cleans up by shutting down the service.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_ingest_service.py:0de57f188766f3c6ba2f85cc522604ccc56c6f9cc8f25cbf4563a7bbbc93fb6c:0de57f188766f3c6ba2f85cc522604ccc56c6f9cc8f25cbf4563a7bbbc93fb6c": "This module defines a set of tests for an ingest service that processes files and directories, tracking progress and managing document storage. Tests cover folder crawling with inclusion and exclusion patterns, recursive directory traversal, document repository population, rescan functionality detecting file changes, job pausing and resuming, job cancellation with rollback, OCR detection for PDFs, and job persistence across service restarts. Each test uses a temporary database manager and verifies various aspects of job execution, status updates, and data integrity. The tests utilize fixtures for database setup and helper functions to wait for job completion or specific statuses.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_ingest_service.py:_collect_known_files:c7767fcf51e2fa24cfcbba3518476c01cadae9258e39d2af74c5937ce3537990:c7767fcf51e2fa24cfcbba3518476c01cadae9258e39d2af74c5937ce3537990": "The function `_collect_known_files` extracts a dictionary of known files from a given record. It retrieves the `extra_data` field from the input dictionary, defaults to an empty dictionary if `extra_data` is missing or None, and then navigates through the nested structure to obtain the `known_files` dictionary located under `summary`. If any level in this path is missing, it returns an empty dictionary.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_ingest_service.py:_wait_for_status:5ee8673cb1ae76e3f7b63604d3e95ee1fdad9d424a3a0d07fe14d75c1de277ee:5ee8673cb1ae76e3f7b63604d3e95ee1fdad9d424a3a0d07fe14d75c1de277ee": "The function `_wait_for_status` waits for a specified job in an ingest service to reach a given status within a timeout period. It repeatedly checks the job's status at 50ms intervals until the desired status is achieved or the timeout expires. If the status is not reached within the timeout, it raises an assertion failure using `pytest.fail`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_ingest_service.py:db_manager:9d316e8d0b7b0e9c67e7b2bd03bf926c8deac1b62b3804e8303c92dabe49135b:9d316e8d0b7b0e9c67e7b2bd03bf926c8deac1b62b3804e8303c92dabe49135b": "The function `db_manager` creates and yields a `DatabaseManager` instance configured with a specified SQLite database path. It initializes the database manager, yields it for use, and ensures it is closed after use. The database path is constructed from a provided temporary directory path, and the manager is initialized before being yielded. The function operates as a generator, providing a context-like interface for managing the database lifecycle.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_ingest_service.py:on_update:1e11744d331107b04bcc89feb88e4159b02e655e957c59fa3ae772c24c498f36:1e11744d331107b04bcc89feb88e4159b02e655e957c59fa3ae772c24c498f36": "The function `on_update` handles updates for a background job by checking if the job's status is \"RUNNING\". If so, it retrieves the progress information from the payload. If the progress indicates that at least one item has been processed and a `paused` event is not already set, it sets the `paused` event and pauses the job using `service_one.pause_job`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_ingest_service.py:on_update:7c4a1dafb4c1512220de48f4c95be172589eb787563cb9922cfa32353f4f8b36:7c4a1dafb4c1512220de48f4c95be172589eb787563cb9922cfa32353f4f8b36": "The function `on_update` accepts a job identifier and a payload dictionary, extracting the status from the payload if it is a dictionary, and appends a tuple of the job ID and extracted status to a list named `updates`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_ingest_service.py:on_update:c45dc1e338805d0bb5b0dc2f9b8290c494bc5538771c8fd84adbab3127953471:c45dc1e338805d0bb5b0dc2f9b8290c494bc5538771c8fd84adbab3127953471": "The function `on_update` handles updates for a background job, specifically checking if the job's status is \"RUNNING\". If so, it examines the progress data within the payload. When the progress indicates that at least one item has been processed and a pause trigger is not already set, it sets the pause trigger and pauses the corresponding job using a service method.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_ingest_service.py:on_update:f2c364eb32bd10d7a812c91cb485e6acd207f0c4839c53adf0a705f1d8840331:f2c364eb32bd10d7a812c91cb485e6acd207f0c4839c53adf0a705f1d8840331": "The function `on_update` handles updates for a background job by checking if the job's status is \"RUNNING\". If so, it retrieves the progress information from the payload. When the progress indicates that at least one item has been processed and a cancellation flag (`cancel_triggered`) is not already set, it sets the cancellation flag and cancels the job using the provided job ID.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_ingest_service.py:test_cancel_rolls_back_partial_progress:252cd413d5f5d87f3abee328aa8f89fea4557286c95926ed8bc27c71069c035f:252cd413d5f5d87f3abee328aa8f89fea4557286c95926ed8bc27c71069c035f": "This function tests the cancellation behavior of a document ingestion job, ensuring that partial progress is rolled back correctly when the job is canceled. It creates a temporary directory with three text files, initiates a folder crawl using `IngestService`, and monitors the job's progress. Upon detecting that at least one file has been processed, it cancels the job. The test verifies that the job status is updated to `CANCELLED`, and that the summary data indicates rolled-back progress and an empty set of known files, confirming that the cancellation mechanism properly reverts partial changes. Finally, it shuts down the service.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_ingest_service.py:test_completed_job_populates_document_repository:92f2ba9933d887299ff2ebd7dc49707a58591058ac83f7d1b62eba90b0b9c79a:92f2ba9933d887299ff2ebd7dc49707a58591058ac83f7d1b62eba90b0b9c79a": "This function tests the completion of a document ingestion job and verifies that it correctly populates the document repository. It creates a temporary project directory with a text file, queues a folder crawl job to index the file, and confirms the job completes successfully. It then checks that the document is properly added to the repository with correct metadata, including file size and source path. The test also verifies that the document can be removed from the repository by queuing a removal job and confirming the document is no longer present. Finally, it shuts down the service.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_ingest_service.py:test_folder_crawl_recurses_into_subdirectories:d0839e4841600a9c99337e1902e40b36341c57dd3ae2c5fc8f766bfd264324cb:d0839e4841600a9c99337e1902e40b36341c57dd3ae2c5fc8f766bfd264324cb": "The function tests that a folder crawl operation recursively processes subdirectories. It creates a temporary directory structure with a nested subdirectory and file, then initiates a folder crawl using the `IngestService` to scan the root directory for files matching the pattern \"*.txt\". After confirming the crawl completes successfully, it verifies that the nested file's path is included in the list of known files reported by the crawl job. Finally, it shuts down the service.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_ingest_service.py:test_folder_crawl_tracks_progress_and_summary:968129271768d6a86e3304fb2c83024b45a5b3c2d2d8a7cba5a7bea149cdc78b:968129271768d6a86e3304fb2c83024b45a5b3c2d2d8a7cba5a7bea149cdc78b": "This function tests the folder crawling functionality of an `IngestService` by verifying that it correctly tracks progress and summary information when processing files in a directory. It creates a temporary directory with multiple files, including ones that should be included or excluded based on specified patterns. The test ensures that the service properly handles the job lifecycle, updates progress status, and stores processed document metadata in the database. It validates that only the expected file is processed, checks the stored document preview and OCR status, and confirms that the job completes successfully with appropriate progress tracking.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_ingest_service.py:test_pause_and_resume_persists_progress:6ec1f87c5ec848599831da874d70f63dcaab6c5002b8d14c3f8417b1587b41c4:6ec1f87c5ec848599831da874d70f63dcaab6c5002b8d14c3f8417b1587b41c4": "The function `test_pause_and_resume_persists_progress` tests the ability of the `IngestService` to pause and resume a document ingestion job while preserving its progress. It creates a temporary directory with five text files, initiates a folder crawl job using the service, and monitors the job's status via a callback. When the job reaches a certain processing stage, it pauses the job and verifies that the job state is correctly saved, including the position in the file list. After resuming the job, it waits for completion and asserts that all files are processed successfully. Finally, it shuts down the service. The test ensures that progress is maintained across pause and resume operations.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_ingest_service.py:test_pdf_without_text_flags_ocr:21c42b595e4828ae6a16c8ace6b6b7633a675a9577db7ba28812637b9261611f:21c42b595e4828ae6a16c8ace6b6b7633a675a9577db7ba28812637b9261611f": "The function `test_pdf_without_text_flags_ocr` tests the document ingestion service's handling of a PDF file that contains no text and requires OCR processing. It creates a blank PDF using the `fitz` library, queues the file for ingestion via `IngestService`, and verifies that the service correctly identifies the need for OCR. The test confirms that the document is processed, marked with an OCR flag, and stored with relevant metadata indicating OCR necessity and a message describing the OCR requirement. The service is shut down after the test.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_ingest_service.py:test_rescan_detects_changes_and_removals:1137ae96688d4a5027eca0e409378967e88f75505735d32561bfd65724b1cc71:1137ae96688d4a5027eca0e409378967e88f75505735d32561bfd65724b1cc71": "This function tests the ability of the `IngestService` to detect changes and removals during a rescan operation. It sets up a temporary directory with two initial files, queues a folder crawl to index them, and verifies the initial state. It then modifies one file, removes another, and adds a new file. A rescan is queued and completed, after which it asserts that the rescan correctly identifies the modified and added files, and records the removal of the deleted file. It also confirms that the database reflects these changes by checking the presence or absence of document records for each file. Finally, it shuts down the service.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_ingest_service.py:test_resume_after_restart:b976f0aa9201eb1f0ce1ef349622162f459a7900671da13d505d3a68887886f8:b976f0aa9201eb1f0ce1ef349622162f459a7900671da13d505d3a68887886f8": "The function `test_resume_after_restart` tests the ability to pause and resume a document ingestion job across service restarts. It creates a temporary directory with four text files, queues a folder crawl using an `IngestService`, and pauses the job once processing begins. After shutting down the first service and creating a new one, it verifies that the job remains in a paused state. The function then resumes the job in the new service, waits for completion, and asserts that all four files were successfully processed.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_lmstudio_integration.py:Handler:5a400c54ed46ce105ce643e39a4e3f2451090deea57dd869e849df07274990a1:5a400c54ed46ce105ce643e39a4e3f2451090deea57dd869e849df07274990a1": "The `Handler` class is an HTTP request handler that processes GET and POST requests, responding with JSON data based on the requested path or payload. It manages application state through a shared `state` dictionary, supporting health checks and request/response handling for an API interface. The class includes a placeholder `log_message` method designed to suppress logging during testing.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_lmstudio_integration.py:Handler:do_GET:039322118817a909787ca3c5de473a8e021996033077de2f0b5f457577ebf3b9:039322118817a909787ca3c5de473a8e021996033077de2f0b5f457577ebf3b9": "Handles HTTP GET requests by checking if the requested path is \"/v1/health\". If so, it responds with a status code and JSON body retrieved from a global state dictionary. For all other paths, it returns a 404 status.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_lmstudio_integration.py:Handler:do_POST:76443a77a4c6c3c7f35a41f9ae0366370b8be6bd0945a4ce4084d46b5382bf12:76443a77a4c6c3c7f35a41f9ae0366370b8be6bd0945a4ce4084d46b5382bf12": "Handles POST requests by reading and parsing the request body, managing request and response state, generating a response based on stored data or a template, and sending back a JSON-formatted HTTP response with appropriate status code and headers.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_lmstudio_integration.py:Handler:log_message:36ba00465f6a6cecbacfcba6b834cb179e77a3b2f258632aa565c351b48cba88:36ba00465f6a6cecbacfcba6b834cb179e77a3b2f258632aa565c351b48cba88": "This function defines a method that suppresses default request logging during testing scenarios. It accepts a format string and variable arguments for message formatting, but does not implement any logging functionality. The docstring indicates the purpose is to silence logging during tests. The function signature includes type hints for the format parameter and args, with noqa comments disabling specific linting warnings.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_lmstudio_integration.py:_Response:0891185188e3dba3687431388d929f54ac4943fbf5f3cb466b378de11f27f491:0891185188e3dba3687431388d929f54ac4943fbf5f3cb466b378de11f27f491": "The `_Response` class is a context manager that encapsulates an HTTP-like response body, initialized with a default chat response encoded in UTF-8. It supports use in `with` statements and provides methods to retrieve the response code (`getcode`) and raw content (`read`). The class is designed to handle response data in a structured way, returning a status code of 200 and the serialized body content.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_lmstudio_integration.py:_Response:__enter__:afc075e419c5ba8a9e61b6883c9719d2808b94e60cac824fb49e64afa07c8173:afc075e419c5ba8a9e61b6883c9719d2808b94e60cac824fb49e64afa07c8173": "This function defines the entry point for a context manager protocol, returning the instance itself when entering a with statement block.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_lmstudio_integration.py:_Response:__exit__:56997047acb745b4984ea74aa78ed2f8ec2760b6ca7386e22dd4e5c98ac4abcd:56997047acb745b4984ea74aa78ed2f8ec2760b6ca7386e22dd4e5c98ac4abcd": "This function defines the exit behavior for a context manager. It accepts four parameters including exception information and returns a boolean value. The implementation always returns False, indicating that exceptions should not be suppressed when exiting the context.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_lmstudio_integration.py:_Response:__init__:53e8dfb5a87c66028b93eddfa10465d8ec4c637e4f1333994e4e4dead3cc4f78:53e8dfb5a87c66028b93eddfa10465d8ec4c637e4f1333994e4e4dead3cc4f78": "Initializes an object with a UTF-8 encoded JSON body containing a default chat response structure.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_lmstudio_integration.py:_Response:getcode:cc82c589111f16de45bacc22b1be5446b5393acfdee05ce3edc47cb80b7bbdfe:cc82c589111f16de45bacc22b1be5446b5393acfdee05ce3edc47cb80b7bbdfe": "The function defines a method that returns the integer value 200.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_lmstudio_integration.py:_Response:read:cb151bc967c34e041cb8866823af90ec759cd5cdf0ef83c5a49965f7031d3125:cb151bc967c34e041cb8866823af90ec759cd5cdf0ef83c5a49965f7031d3125": "The function defines a method that returns the contents of an object's `_body` attribute as bytes. The method takes no parameters beyond `self` and directly returns the value stored in the instance variable `_body`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_lmstudio_integration.py:__enter__:5a51389730000842b9b82003c744114c6889ad45f4c2aee1d590b81fbf3b0146:5a51389730000842b9b82003c744114c6889ad45f4c2aee1d590b81fbf3b0146": "The `__enter__` method defines the entry point for a context manager protocol, returning the instance of the `_Response` class when used in a `with` statement.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_lmstudio_integration.py:__exit__:db2bac465e91caaee8fb2fb8fd09e9778638d955d73031cfbec0c971972eab10:db2bac465e91caaee8fb2fb8fd09e9778638d955d73031cfbec0c971972eab10": "The `__exit__` method is defined within the `_Response` class. It is a special method that controls the behavior of the object when used in a context manager (e.g., with a `with` statement). This implementation simply returns `False`, indicating that any exception raised within the context should not be suppressed. The method takes three parameters: `exc_type`, `exc`, and `tb`, which represent the exception type, exception value, and traceback, respectively.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_lmstudio_integration.py:__init__:cfcf9a5ef547f86e4040c5534ab7285df7af0c5a0b506b173080ede6cba34f63:cfcf9a5ef547f86e4040c5534ab7285df7af0c5a0b506b173080ede6cba34f63": "Initializes the `_Response` object with a default chat response body encoded in UTF-8. The response body is constructed using `_default_chat_response` and serialized to JSON format.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_lmstudio_integration.py:_clarifying_response:7a34169034e7adc5262811e87aa5ef2ba705cc67d4f590de31466db3300f462f:7a34169034e7adc5262811e87aa5ef2ba705cc67d4f590de31466db3300f462f": "The function `_clarifying_response` generates a modified chat response payload intended to prompt the user for clarification. It begins by creating a default chat response using `_default_chat_response`, then enhances the response metadata with reasoning information that includes assumptions and self-check flags. The assumptions section indicates the need for a clarifying question about the timeframe of analysis, while the self-check section marks the response as failed due to missing contextual information. If the payload specifies a \"sources only\" response mode, it updates the message content to reflect this mode. The function returns the modified base response structure.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_lmstudio_integration.py:_default_chat_response:b9484daa08510ae87ab6c46facf0bfc41e3b848c0763f876ac20760df5a2f75c:b9484daa08510ae87ab6c46facf0bfc41e3b848c0763f876ac20760df5a2f75c": "The function `_default_chat_response` generates a mock chat completion response based on input payload data. It extracts the most recent message as a question, determines reasoning options such as verbosity and plan inclusion, and constructs metadata including summary bullets, a plan, assumptions, and self-check results. The content of the response is derived from the question with special handling for a \"sources only\" response mode. The function returns a dictionary formatted as a chat completion object, including message content, citations, reasoning metadata, and usage statistics.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_lmstudio_integration.py:_fake_urlopen:623dc9b3ca071eefd83108acf4d95aed9c5ba23ade0ed4acbe1ee9f414ed990f:623dc9b3ca071eefd83108acf4d95aed9c5ba23ade0ed4acbe1ee9f414ed990f": "The function `_fake_urlopen` is a mock implementation of a URL opening function that captures the request object and returns a fake response. It validates that no positional arguments or timeout keyword arguments are passed, raising assertions if they are present. The captured request is stored in a global or enclosing scope variable `captured[\"request\"]`, and the function always returns an instance of `_Response()`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_lmstudio_integration.py:_make_handler:b3d8213da0616de85af61a1caa670523fa04ac887f4e5e283bab7da60d34e222:b3d8213da0616de85af61a1caa670523fa04ac887f4e5e283bab7da60d34e222": "The function `_make_handler` defines and returns a subclass of `BaseHTTPRequestHandler` for handling HTTP requests. The handler supports GET and POST methods. A GET request to `/v1/health` responds with a JSON payload containing health status and body, configurable via the `state` dictionary. All other GET requests return a 404 status. A POST request reads the request body, appends it to a list of requests stored in `state`, and processes the next response from a list of responses also stored in `state`. If no responses are available, it uses a response template or a default chat response function to generate a response. The handler sends back the status code and JSON-encoded body of the response. The `log_message` method is overridden to suppress logging during tests.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_lmstudio_integration.py:_raise_timeout:2ebce4b4f0818c7ef275085463728bd38341f91b78465e15a9784670bb552aca:2ebce4b4f0818c7ef275085463728bd38341f91b78465e15a9784670bb552aca": "The function `_raise_timeout` is a local helper that increments a call counter and raises a timeout error. It takes a request object and optional arguments, updates a nonlocal variable `calls`, and raises a `URLError` with a `socket.timeout` exception indicating a \"timed out\" condition.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_lmstudio_integration.py:b642d96c49bd07d6137a679054fd0072a6051e830302f6d21e910988bdcef314:b642d96c49bd07d6137a679054fd0072a6051e830302f6d21e910988bdcef314": "This module defines tests and supporting utilities for an LMStudio client and conversation manager. It includes a default chat response generator, HTTP server handling for mocking LMStudio endpoints, and various test cases covering successful interactions, reasoning verbosity controls, streaming behavior, timeout handling, connection failure recovery, and response mode behaviors such as sources-only mode. The tests validate parsing of structured content, request formatting, and the management of conversation state including context window handling and connection status updates.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_lmstudio_integration.py:do_GET:b1c1eb999e54eeec45076680408baa273b95721ab3284e1e9f8693c242beab54:b1c1eb999e54eeec45076680408baa273b95721ab3284e1e9f8693c242beab54": "The function `do_GET` handles HTTP GET requests to the server. If the requested path is `/v1/health`, it responds with a status code and JSON body retrieved from the `state` dictionary, defaulting to a 200 status and `{\"status\": \"ok\"}` body. For all other paths, it sends a 404 Not Found response. The function adheres to the `BaseHTTPRequestHandler` interface and encodes the JSON response in UTF-8 before writing it to the output stream.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_lmstudio_integration.py:do_POST:4270349af42b832f682e6674e9927fcd4bdad5aa77f03c2dba5c87a2fa9e53e8:4270349af42b832f682e6674e9927fcd4bdad5aa77f03c2dba5c87a2fa9e53e8": "The `do_POST` method handles HTTP POST requests by reading the request body, parsing it as JSON, and storing the payload in the `requests` list within the `state` dictionary. It retrieves or generates a response from the `responses` list or using a template function, then sends back a JSON-formatted HTTP response with the appropriate status code and content type. If the response body is not already in bytes, it is serialized to JSON before being written to the response.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_lmstudio_integration.py:getcode:32e461bc24ce2f87c38d49b3357e189fa5bdca38a36107ea6e3dbd0e865b0226:32e461bc24ce2f87c38d49b3357e189fa5bdca38a36107ea6e3dbd0e865b0226": "The function `getcode` is a method of the class `_Response` that returns the integer value `200`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_lmstudio_integration.py:lmstudio_server:82a3fd6b825af761242fe54392be421773823e13930567854409b42ed5e2a245:82a3fd6b825af761242fe54392be421773823e13930567854409b42ed5e2a245": "The function `lmstudio_server` creates and starts a threaded HTTP server for handling requests, returning the server's state and base URL. It initializes a state dictionary with request and response tracking, health status, and a handler function. A `ThreadingHTTPServer` is instantiated on a random port, and a daemon thread is started to run the server. The function yields the server state and its base URL, ensuring the server shuts down and the thread joins upon completion.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_lmstudio_integration.py:log_message:6922ba393da73b277cc829aa6eea3dc814d604ded7ec35874962732454795c07:6922ba393da73b277cc829aa6eea3dc814d604ded7ec35874962732454795c07": "The function `log_message` is defined within the `Handler` class. It accepts a format string and a variable number of arguments, and is intended to silence default request logging during testing. The function does not perform any logging itself, as indicated by its docstring, which states it suppresses logging during tests. The function signature and implementation suggest it is a placeholder or override for logging behavior in test environments.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_lmstudio_integration.py:read:b353573e74c517f2f6236a4e8d761d87de2f98bbe4aafbd78034f5c5912118a8:b353573e74c517f2f6236a4e8d761d87de2f98bbe4aafbd78034f5c5912118a8": "The `read` method of the `_Response` class returns the raw byte content stored in the `_body` attribute of the instance.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_lmstudio_integration.py:test_conversation_manager_handles_failures_and_recovers:e25925d9070be8dc711a3646a9425af89d4a49225be3467f58ceaa1afe289eb0:e25925d9070be8dc711a3646a9425af89d4a49225be3467f58ceaa1afe289eb0": "The function `test_conversation_manager_handles_failures_and_recovers` tests the behavior of a `ConversationManager` in handling connection failures and recovering from them. It uses an `LMStudioClient` with a mocked server response to simulate various error conditions, including temporary and persistent service unavailability. The test verifies that the manager properly retries failed requests, raises appropriate exceptions when retries are exhausted, and correctly updates its connection state. After restoring service health, it confirms that the manager can resume operations and maintains the conversation context within the specified window. The test also ensures that the correct number of messages are preserved in the context and that the manager's `can_ask()` method accurately reflects its ability to process new questions.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_lmstudio_integration.py:test_conversation_manager_populates_retrieval_query:ba060e091c84fc1f3bab7f2efd4e47aa85ca8767e9f56b9423e49c65b95d384d:ba060e091c84fc1f3bab7f2efd4e47aa85ca8767e9f56b9423e49c65b95d384d": "The function tests that the `ConversationManager` correctly populates the retrieval query when processing a user request. It verifies that the `ask` method includes the provided retrieval options, such as a query and document inclusion list, in the payload sent to the LMStudio client. The test ensures that the query is properly transferred from the `extra_options` parameter into the request payload under the `retrieval` key, and confirms that the original `extra` dictionary remains unchanged.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_lmstudio_integration.py:test_lmstudio_client_allows_stream_override:d358a211513c5854ad16009f959a6676e5bdd9c43b85c2ca490a7cd051481bd7:d358a211513c5854ad16009f959a6676e5bdd9c43b85c2ca490a7cd051481bd7": "The function tests that the LMStudioClient correctly handles a stream override option when making a chat request. It creates an LMStudioClient instance using a provided server URL, sends a chat request with `stream` set to `True` in `extra_options`, and verifies that the resulting request object in the server state has the `stream` parameter explicitly set to `True`. The test ensures that the client properly forwards the stream configuration to the underlying API call.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_lmstudio_integration.py:test_lmstudio_client_and_conversation_manager_success:d3236f3b680721443fa2f1ea98ff0f19da0e1c157fea426ff264ae3e10f92b24:d3236f3b680721443fa2f1ea98ff0f19da0e1c157fea426ff264ae3e10f92b24": "This function tests the integration of an LMStudio client with a conversation manager to verify successful connection and response handling. It initializes a client and manager, checks the connection state, and asserts that the connection is established. It then sends a query using the `ask` method, validating the structure and content of the response, including the answer prefix, citations, response mode, reasoning artifacts, plan, assumptions, and self-check results. The test also verifies that the request payload sent to the server includes correct model, token limits, reasoning settings, and message structure, confirming proper interaction with the LMStudio server.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_lmstudio_integration.py:test_lmstudio_client_disables_streaming_by_default:f314415ec54238e6d62d45c326f0dfd32b353e4a863eb25bebebcd8c00ee79a4:f314415ec54238e6d62d45c326f0dfd32b353e4a863eb25bebebcd8c00ee79a4": "The function tests that the LMStudioClient disables streaming by default when making a chat request. It creates an LMStudioClient instance with a provided base URL, sends a chat request with a simple user message, and then verifies that the first request in the state's requests list has the \"stream\" parameter set to False. The test uses a mock server state to capture the request parameters and ensure the default behavior of the client.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_lmstudio_integration.py:test_lmstudio_client_does_not_set_timeout:60a6c012726bc14f9e692e420e417f493df020b7a2f5c3efd615a70444d7fe6a:60a6c012726bc14f9e692e420e417f493df020b7a2f5c3efd615a70444d7fe6a": "This function tests that the `LMStudioClient` does not pass a timeout argument when making HTTP requests. It patches the `urlopen` function to capture and validate the request, ensuring no timeout is set. The test verifies the client's behavior by asserting that the request is captured and that no timeout is included in the call.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_lmstudio_integration.py:test_lmstudio_client_parses_structured_content:6d31d01ca66afc2e511689fab85776a0508e36946b81fb60a4b15b81cb768e2b:6d31d01ca66afc2e511689fab85776a0508e36946b81fb60a4b15b81cb768e2b": "The function `test_lmstudio_client_parses_structured_content` tests the parsing of structured content by the `LMStudioClient`. It defines a sample response structure containing a message with both plain text and typed text components, along with citation metadata. The test verifies that the `_parse_chat_response` method correctly concatenates the text components into a single content string and extracts the citations. The assertion confirms that the parsed message content matches the expected concatenated string and that the citations are accurately preserved.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_lmstudio_integration.py:test_lmstudio_client_reports_timeout_without_deadline:d5a7ff1b683ca37704c7347021b21dae8a2b2b61edca24910cc04adf166dd53b:d5a7ff1b683ca37704c7347021b21dae8a2b2b61edca24910cc04adf166dd53b": "This function tests the behavior of the `LMStudioClient` when a timeout occurs during a chat request and no deadline is set. It patches the `urlopen` function from the `request` module to raise a `socket.timeout` exception, simulating a network timeout. The test verifies that the `LMStudioClient` properly raises an `LMStudioConnectionError` with a message containing \"timed out\" when the patched `urlopen` function is called. It also ensures that the `urlopen` function is called exactly once during the test execution.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_lmstudio_integration.py:test_reasoning_verbosity_controls_request_and_artifacts:ccdc2ef4475d25439b43aa9318cf62e066da5430ff96e16c3935f37c8ed7e84a:ccdc2ef4475d25439b43aa9318cf62e066da5430ff96e16c3935f37c8ed7e84a": "The function `test_reasoning_verbosity_controls_request_and_artifacts` tests the behavior of reasoning verbosity controls in a conversation manager integrated with an LMStudio client. It verifies that when asking questions with different verbosity settings (`MINIMAL` and `EXTENDED`), the corresponding request payloads include the correct verbosity levels and plan inclusion flags. Additionally, it checks that the resulting conversation turns contain appropriate reasoning bullets and plan entries based on the specified verbosity level. The test ensures that minimal verbosity excludes the plan and uses concise reasoning, while extended verbosity includes a detailed plan and more extensive reasoning.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_lmstudio_integration.py:test_sources_only_mode_tracks_clarification_and_self_check:90510166b5332eedfe6b429fc6a66a88a1a494cdee04764b3eb865ec13298bbd:90510166b5332eedfe6b429fc6a66a88a1a494cdee04764b3eb865ec13298bbd": "This function tests the behavior of the system when operating in \"sources only\" mode, specifically verifying that clarification requests and self-check flags are properly tracked and returned in the conversation turn. It mocks a response from an LMStudio client that includes reasoning metadata with assumptions and self-check information, then asserts that the conversation manager correctly processes and exposes these details in the resulting turn object. The test ensures that when a clarifying question is needed due to ambiguous input, and when a self-check fails because of missing information, both are accurately reflected in the output.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_parser_file_types.py:8ebd315b02894143bf7371812c2bd2d27cff6328347e31f62cedbe0f189e5595:8ebd315b02894143bf7371812c2bd2d27cff6328347e31f62cedbe0f189e5595": "Test function that verifies file parsing functionality for different code and markup file types. Tests HTML, Python, MATLAB, and C++ files with specific content patterns. For each file type, creates a temporary file with sample content, parses it using the parse_file function, and validates that the parsed text contains the first line of the original content and that the encoding metadata matches UTF-8. Uses pytest-style testing with parameterized file extensions and content samples.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_parser_file_types.py:test_parse_file_supports_code_and_markup:35dc62a444d3bfa6069f07bc604efad21cecc09aae555e8f567f042e4755b545:35dc62a444d3bfa6069f07bc604efad21cecc09aae555e8f567f042e4755b545": "The function `test_parse_file_supports_code_and_markup` tests the ability of the `parse_file` function to correctly process and extract text from files with specific code and markup file extensions. It creates temporary files with sample content for HTML, Python, MATLAB, and C++ formats, then verifies that the parsed output contains the expected first line of the original content and that the encoding metadata is correctly identified as UTF-8. The test ensures support for various programming and markup languages within the document parsing system.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_preview_service.py:1f6ccd9913be3d779c718a0395156bac3f76aa705aa33fcc4cf581183e3bf6ce:1f6ccd9913be3d779c718a0395156bac3f76aa705aa33fcc4cf581183e3bf6ce": "Defines a test case for preview functionality that verifies term highlighting in document passages. Creates a temporary database and file, stores parsed document content, and checks that search terms are properly marked within the document text. Includes assertions for highlighted text, page retrieval, and search result formatting. Uses fixtures for database management and temporary file handling.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_preview_service.py:db_manager:33680f549d5566fbb4b997dea088cc40667b575ff5460f4c4f76eb709caba1d2:33680f549d5566fbb4b997dea088cc40667b575ff5460f4c4f76eb709caba1d2": "The function `db_manager` is a generator that creates and manages a `DatabaseManager` instance for a specified temporary path. It constructs the database file path by appending \"preview.db\" to the provided `tmp_path`, initializes the database manager, and yields it for use. After the generator's execution completes, it ensures the database manager is properly closed.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_preview_service.py:test_preview_highlights_terms:5c411a7bf2e17603ef75e51e5ad1ab49a3c9bb783869cd9e2b087eb269e5c3eb:5c411a7bf2e17603ef75e51e5ad1ab49a3c9bb783869cd9e2b087eb269e5c3eb": "The function `test_preview_highlights_terms` tests the preview and highlighting functionality of a document ingestion and retrieval system. It creates a sample text file, parses it, and stores the document version in a database using `IngestDocumentRepository`. It then uses `PreviewService` to retrieve highlighted passages containing the term \"gamma\" and verifies that the term is wrapped in `<mark>` tags within the snippet. The test also checks that the retrieved passage corresponds to page 1 or has no page specified, and confirms that the full text of the first page contains \"Alpha\". Finally, it performs a search for \"gamma\" using the repository and asserts that the search results include a highlighted version of the term wrapped in `<mark>` tags.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_project_service.py:InMemoryConfig:9c910f2685ac676471cd382f132d77515f0f619762bff3fb1a1ab2fde0f1ca74:9c910f2685ac676471cd382f132d77515f0f619762bff3fb1a1ab2fde0f1ca74": "The `InMemoryConfig` class provides a configuration management solution that stores settings in memory using a dictionary. It supports loading configuration data as a deep copy to prevent external modifications from affecting the internal state, and it saves data by replacing its internal representation with a deep copy of the provided dictionary. The class ensures data integrity during both load and save operations by using JSON serialization to create independent copies of the configuration structure.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_project_service.py:InMemoryConfig:__init__:75085ebd81a023e1ed7860f467b3de5ca04912e8dbf1b225ea24ba9584c160ac:75085ebd81a023e1ed7860f467b3de5ca04912e8dbf1b225ea24ba9584c160ac": "Initializes an instance with a private dictionary attribute to store key-value pairs where keys are strings and values can be any object type.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_project_service.py:InMemoryConfig:load:c921956cc557e24e14f46f79e25065711c0437df5492e4141951e06124659d7d:c921956cc557e24e14f46f79e25065711c0437df5492e4141951e06124659d7d": "The function loads and returns a dictionary representation of the object's data by serializing it to JSON format and then deserializing it back into a Python dictionary.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_project_service.py:InMemoryConfig:save:813f1db885aea098e6dc9dc32694770e260a1389af679a83e39b6b1a7edee663:813f1db885aea098e6dc9dc32694770e260a1389af679a83e39b6b1a7edee663": "The function accepts a dictionary of data and stores a JSON-serialized copy of it in the instance's `_data` attribute. The input dictionary is first converted to a JSON string representation, then parsed back into a Python object, effectively creating a deep copy of the original dictionary. The function does not return any value.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_project_service.py:__init__:5601ecdb51b51f558d1f64092c8070ae9e268076f56de4d9119a8e141feeb168:5601ecdb51b51f558d1f64092c8070ae9e268076f56de4d9119a8e141feeb168": "Initializes an instance of `InMemoryConfig` with an empty dictionary to store configuration data.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_project_service.py:__init__:967d61d7c34f652925616e011e23c0c40a6f65ce06e9b575c066910c2a5a5aa3:967d61d7c34f652925616e011e23c0c40a6f65ce06e9b575c066910c2a5a5aa3": "Initializes an empty configuration storage dictionary.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_project_service.py:b61d33245fcec0eb139d5e14d81a6378714a26c055c2d24c2127dd6374f33ab3:b61d33245fcec0eb139d5e14d81a6378714a26c055c2d24c2127dd6374f33ab3": "Defines a test case for managing corpus roots within a project service. The test uses an in-memory configuration manager and verifies operations such as adding, listing, removing, and clearing corpus roots. It also checks the creation and existence of storage paths and database snapshots associated with the project. The test ensures no duplicate entries are added and that proper cleanup occurs.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_project_service.py:load:ad0f212d74b50050f46e387108eef21c99779b05b28c87d97be35a60ced721e3:ad0f212d74b50050f46e387108eef21c99779b05b28c87d97be35a60ced721e3": "The `load` method in the `InMemoryConfig` class returns a deep copy of the configuration data stored in `self._data`. It serializes the data to JSON format and then deserializes it back into a Python dictionary, ensuring that the returned dictionary is independent of the original internal data structure.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_project_service.py:load:c42ddbe1597bab2f4b80104874eb55dcb3600d22f640a0df70b228cc84327438:c42ddbe1597bab2f4b80104874eb55dcb3600d22f640a0df70b228cc84327438": "The `load` method in the `InMemoryConfig` class returns a dictionary representation of the configuration data. It creates a deep copy of `self._data` by first serializing it to JSON and then deserializing it back to a Python object, ensuring that the returned dictionary is independent of the internal data structure.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_project_service.py:save:960fa93cec7f16f3949529a801f1e3dd123fea623985da6446cb8d9689485649:960fa93cec7f16f3949529a801f1e3dd123fea623985da6446cb8d9689485649": "The `save` method in the `InMemoryConfig` class updates the instance's configuration data by replacing the existing `_data` attribute with a deep copy of the provided `data` dictionary. The method serializes the input dictionary to JSON and then deserializes it back into a Python object, ensuring that the internal representation is independent of the original data structure. This approach prevents external modifications to the passed-in dictionary from affecting the configuration state.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_project_service.py:save:b18dbafc1539e04b5aaaef632147554cec97f376f285a8be884b8680ca68e2bb:b18dbafc1539e04b5aaaef632147554cec97f376f285a8be884b8680ca68e2bb": "The `save` method in the `InMemoryConfig` class updates the instance's internal data storage with the provided dictionary. It performs a deep copy of the input data by first serializing it to JSON and then deserializing it back into a Python object, ensuring that modifications to the original data structure do not affect the stored data.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_project_service.py:test_corpus_root_management:ae2f44134b562973adbd4ac8b8534f9735fb110413ed0509ed77a607bf8d6e9d:ae2f44134b562973adbd4ac8b8534f9735fb110413ed0509ed77a607bf8d6e9d": "The function `test_corpus_root_management` tests the management of corpus roots within a project, verifying operations such as adding, listing, removing, and clearing corpus roots. It ensures that duplicate roots are not added, and that the project storage path is correctly resolved and exists. The test also confirms that attempting to retrieve project storage for a project without roots raises a `RuntimeError`, and that exporting a database snapshot returns `None` when no roots are present. The function uses an in-memory configuration and a `ProjectService` instance to perform these operations, asserting expected behaviors and paths throughout the process. Finally, it ensures proper cleanup by shutting down the service.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_retrieval_index.py:4b2294541165fbfd8e7cf0f0191f603198f064811ee6b314c927ec63d99b60a8:4b2294541165fbfd8e7cf0f0191f603198f064811ee6b314c927ec63d99b60a8": "Module defines tests for retrieval index functionality including multi-source retrieval with conflict detection, scope-based filtering, and duplicate suppression. Tests use passage objects with embeddings, metadata, and time-based filtering. Functions validate search results based on document IDs, citation details, and conflict identification. The module includes assertions to verify correct behavior of retrieval operations under various conditions.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_retrieval_index.py:_vec:e5550a07c7a85123145395f041cac64d13df3f5a912358623cc56eb52d979e03:e5550a07c7a85123145395f041cac64d13df3f5a912358623cc56eb52d979e03": "The function `_vec` takes a variable number of floating-point arguments and returns them as a tuple of floats. It serves as a utility for converting input values into an immutable tuple format.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_retrieval_index.py:test_duplicate_passages_are_suppressed:b8ea2d9c1b2a6f3592c8d4f113c7d983a04bd4f46c696f524c14b09b0214d8a3:b8ea2d9c1b2a6f3592c8d4f113c7d983a04bd4f46c696f524c14b09b0214d8a3": "The function `test_duplicate_passages_are_suppressed` tests that duplicate passages with identical text content are suppressed during a search operation in a `RetrievalIndex`. It creates two passages with the same text and different IDs, adds them to the index, and then performs a search. The test verifies that only one of the duplicate passages is returned in the search results, ensuring that duplicates are filtered out based on their content.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_retrieval_index.py:test_multi_source_retrieval_with_conflict_detection:0adccbac4e01746828b2ccfba60c88fe6e009ea6578b11e609bcd0213963f8e9:0adccbac4e01746828b2ccfba60c88fe6e009ea6578b11e609bcd0213963f8e9": "The function `test_multi_source_retrieval_with_conflict_detection` tests the retrieval of passages from a `RetrievalIndex` based on semantic similarity while detecting conflicts between sources. It creates three passages with distinct embeddings and metadata, adds them to the index, and performs a search for passages similar to a given vector. The test verifies that the top results include specific document IDs and checks that conflict detection identifies a passage with opposing stance metadata. The function ensures that the retrieval system correctly handles multi-source data and detects conflicting information based on semantic similarity and metadata attributes.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_retrieval_index.py:test_scope_filters_trim_results:da2b733dc01348dca00ff79f32cfc53fb85d6e3bd6ed5ce6751a8fc3ece37a40:da2b733dc01348dca00ff79f32cfc53fb85d6e3bd6ed5ce6751a8fc3ece37a40": "The function `test_scope_filters_trim_results` tests the filtering capabilities of a `RetrievalIndex` by verifying that search results are correctly trimmed based on a specified `RetrievalScope`. It creates a retrieval index with three passages, each having different attributes such as folder path, creation time, language, and tags. A `RetrievalScope` is defined to include only passages within a specific folder, time range, and language. The function performs a search using this scope and asserts that only the passage matching all criteria (\"scoped\") is returned in the results.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_search_service.py:_store_ingest_document:1cae0fa892fea33681c077df52741737218454c85f1a7af24505e208c52a9cd8:1cae0fa892fea33681c077df52741737218454c85f1a7af24505e208c52a9cd8": "Stores a parsed document version in the repository using the provided path and text content. The document is stored without checksum, size, mtime, or ctime metadata.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_search_service.py:c0c7666f8cabfc38eac9f63b5d9e14721bc11ba15d2f7423b652dfce4936d6f2:c0c7666f8cabfc38eac9f63b5d9e14721bc11ba15d2f7423b652dfce4936d6f2": "Defines fixtures and tests for search and document hierarchy functionality within a document management system. Includes setup for database connections, repositories, and ingestion handling. Tests cover document searching with scope and highlighting, relaxed query term matching, context snippet collection with metadata inclusion, and hierarchical document organization with tagging and folder structures.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_search_service.py:chat_repo:5303d6368055e024956a63fdc7de8cea232a8ae953ea547a275fc4f7a3edde25:5303d6368055e024956a63fdc7de8cea232a8ae953ea547a275fc4f7a3edde25": "The function `chat_repo` takes a `DatabaseManager` instance as input and returns a `ChatRepository` object initialized with that database manager. It serves as a factory function for creating chat repository instances tied to a specific database connection.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_search_service.py:database:88ffe6888a140ed221178f16d96694cf362bb0060d50c2f7b4ad68251e58776f:88ffe6888a140ed221178f16d96694cf362bb0060d50c2f7b4ad68251e58776f": "The function `database` is a generator that creates and manages a `DatabaseManager` instance for a specified temporary path. It constructs the database file path using the provided `tmp_path`, initializes the database manager, yields the initialized manager, and ensures the manager is closed after use. The function is designed to provide a context-managed database connection within a temporary directory.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_search_service.py:document_repo:ce5116e1162b741fb02c55649e6a66f3ab638b898d9e13246ff8f3d803185499:ce5116e1162b741fb02c55649e6a66f3ab638b898d9e13246ff8f3d803185499": "The function `document_repo` creates and returns a `DocumentRepository` instance initialized with a provided `DatabaseManager` object. It serves as a factory function for generating document repository instances tied to a specific database interface.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_search_service.py:ingest_repo:b1756694181ef1aaa013538692b92d5c86ae3482d648fc8b2cc2bedd397f1bae:b1756694181ef1aaa013538692b92d5c86ae3482d648fc8b2cc2bedd397f1bae": "The function `ingest_repo` creates and returns an instance of `IngestDocumentRepository`, initialized with a provided `DatabaseManager` object. This repository is responsible for managing document ingestion operations within the application's database context.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_search_service.py:project_repo:e46a77b075ffbb3d5464032b7b7261a5dddafcd33b07c759d51dcfbcd2a6e225:e46a77b075ffbb3d5464032b7b7261a5dddafcd33b07c759d51dcfbcd2a6e225": "The function `project_repo` takes a `DatabaseManager` instance as input and returns a `ProjectRepository` object initialized with that database manager. It serves as a factory function for creating project repository instances tied to a specific database connection.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_search_service.py:test_collect_context_records_includes_metadata:9f0be57c4fca5afab83e2307fa531310e417772511f9058d34d1c29b70ab88d9:9f0be57c4fca5afab83e2307fa531310e417772511f9058d34d1c29b70ab88d9": "The function `test_collect_context_records_includes_metadata` tests the `collect_context_records` method of the `SearchService` class. It verifies that when searching for a term within a document, the resulting context records include expected metadata. The test creates a temporary project and document, stores an ingest document, and then calls `collect_context_records` with a search query. It asserts that the returned records are not empty, that the first record contains the correct document ID, that the context includes the search term, and that the chunk ID is present.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_search_service.py:test_context_snippets_relax_query_terms:e2a28994715df8fec3d031a11c7509bbbb689cb00985e2cccc9fa5f641b6f238:e2a28994715df8fec3d031a11c7509bbbb689cb00985e2cccc9fa5f641b6f238": "The function `test_context_snippets_relax_query_terms` tests the ability of the `SearchService` to retrieve relevant context snippets when querying with relaxed terms. It sets up a temporary project and document containing content about \"DataMiner Architecture\", then uses the search service to find snippets related to the query \"What does the DataMiner system include for its architecture?\". The test verifies that at least one of the retrieved snippets contains the term \"DataMiner\".",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_search_service.py:test_document_hierarchy_service:63178d9dc886dee1b174e7d11b652113250627a8f56f0b80058e26cc17dbd925:63178d9dc886dee1b174e7d11b652113250627a8f56f0b80058e26cc17dbd925": "The function `test_document_hierarchy_service` tests the functionality of the `DocumentHierarchyService` class by creating a hierarchical file structure and associating documents with tags. It verifies that the service correctly builds a folder tree, assigns documents to their respective folders, and retrieves document views with associated tags. The test ensures proper handling of nested directories, document tagging, and scoped document listing based on tags. The function uses temporary paths and repositories to simulate a project environment and validate the behavior of the document hierarchy service.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_search_service.py:test_search_service_scope_and_highlight:7507135538c407f642bc287f9bc7b11265dbee54aeeff5ebb23c586b6c96659f:7507135538c407f642bc287f9bc7b11265dbee54aeeff5ebb23c586b6c96659f": "This function tests the search service's ability to filter documents by scope and highlight search terms. It sets up a project with two tagged documents, ingests their content, and performs searches with specific tag and folder constraints. The test verifies that search results are correctly filtered by tags, highlights the searched term in the results, and maintains search scope across follow-up queries. It also checks that context snippets can be retrieved for specific documents.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_storage.py:4fe681e02fc35b6d266168548e5cf0eb44fd9d563a9e6771fb92e13725d3263f:4fe681e02fc35b6d266168548e5cf0eb44fd9d563a9e6771fb92e13725d3263f": "This module defines tests for repository classes that manage project, document, chat, and ingest data within a database. It includes fixtures to set up and tear down database connections and repositories, and tests cover basic CRUD operations, cascading deletes, data isolation between projects, tag management with counts, and searching of document chunks. The tests verify correct behavior of the storage layer including file versioning, tagging, citations, reasoning summaries, and scope-based queries.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_storage.py:chat_repo:5303d6368055e024956a63fdc7de8cea232a8ae953ea547a275fc4f7a3edde25:5303d6368055e024956a63fdc7de8cea232a8ae953ea547a275fc4f7a3edde25": "The function `chat_repo` takes a `DatabaseManager` instance as input and returns a `ChatRepository` object initialized with that database manager. It serves as a factory function for creating chat repository instances tied to a specific database connection.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_storage.py:database:88ffe6888a140ed221178f16d96694cf362bb0060d50c2f7b4ad68251e58776f:88ffe6888a140ed221178f16d96694cf362bb0060d50c2f7b4ad68251e58776f": "The function `database` is a generator that creates and manages a `DatabaseManager` instance for a specified temporary path. It constructs the database file path using the provided `tmp_path`, initializes the database manager, yields the initialized manager, and ensures the database connection is closed after use. The function is designed to provide a context-managed database interface within a temporary directory.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_storage.py:document_repo:ce5116e1162b741fb02c55649e6a66f3ab638b898d9e13246ff8f3d803185499:ce5116e1162b741fb02c55649e6a66f3ab638b898d9e13246ff8f3d803185499": "The function `document_repo` takes a `DatabaseManager` instance as input and returns a `DocumentRepository` object initialized with that database manager. This function serves as a factory for creating `DocumentRepository` instances, which are likely responsible for managing document-related operations within the application's data layer.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_storage.py:ingest_repo:b1756694181ef1aaa013538692b92d5c86ae3482d648fc8b2cc2bedd397f1bae:b1756694181ef1aaa013538692b92d5c86ae3482d648fc8b2cc2bedd397f1bae": "The function `ingest_repo` creates and returns an instance of `IngestDocumentRepository`, initialized with a provided `DatabaseManager` object. This repository is responsible for managing document ingestion operations within the application's database context.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_storage.py:project_repo:e46a77b075ffbb3d5464032b7b7261a5dddafcd33b07c759d51dcfbcd2a6e225:e46a77b075ffbb3d5464032b7b7261a5dddafcd33b07c759d51dcfbcd2a6e225": "The function `project_repo` takes a `DatabaseManager` instance as input and returns a `ProjectRepository` object initialized with that database manager. This function serves as a factory for creating `ProjectRepository` instances, which are likely responsible for managing project-related data operations through the provided database interface.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_storage.py:test_document_crud_and_cascade:dd16977826a734af8a215a60b1f930e6cf1b2214bf05b29d0a53350f6182ae48:dd16977826a734af8a215a60b1f930e6cf1b2214bf05b29d0a53350f6182ae48": "The function `test_document_crud_and_cascade` tests the creation, modification, and deletion of documents and related entities within a project, ensuring proper cascading behavior when a project is deleted. It creates a project, document, file version, tag, chat, citation, and reasoning summary. It verifies that these entities are correctly associated and that deleting the project results in the removal of all related data including documents, versions, chats, citations, and summaries. The test also confirms that the underlying file remains intact after deletion.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_storage.py:test_ingest_chunk_storage:190247abe290598b77866cfb26d2f50bd732aef743c63e83b14c078a0b782828:190247abe290598b77866cfb26d2f50bd732aef743c63e83b14c078a0b782828": "The function `test_ingest_chunk_storage` tests the document ingestion and chunk storage functionality. It creates a temporary text file with sample content, parses the content into a `ParsedDocument`, and stores it using an `IngestDocumentRepository`. It then searches for chunks containing the term \"gamma\" and verifies that matching chunks are returned. The test also confirms that at least one chunk is stored in the database table `ingest_document_chunks`.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_storage.py:test_project_crud:3b13461cd33c8ed40810ed9ebd956f0615ede2eaa8a1ad8874d5d4e36411dcb5:3b13461cd33c8ed40810ed9ebd956f0615ede2eaa8a1ad8874d5d4e36411dcb5": "The function `test_project_crud` tests the basic CRUD (Create, Read, Update, Delete) operations on a project repository. It creates a project with the name \"Project Alpha\" and verifies its creation. It then retrieves the project and checks that the retrieved data matches the original. The function updates the project's name to \"Renamed\" and confirms the update. It lists all projects and ensures only one exists. Finally, it deletes the project and verifies that the project is no longer retrievable.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_storage.py:test_project_isolation:711ae0f247a23dd77bfed9c0b0b2620c5c61e8edb844275033f29845ef4337b6:711ae0f247a23dd77bfed9c0b0b2620c5c61e8edb844275033f29845ef4337b6": "The function `test_project_isolation` verifies that projects within the repository system are properly isolated from one another. It creates two distinct projects, \"Project A\" and \"Project B\", and associates each with a unique document. The test confirms that each project's documents can be retrieved correctly using its respective project ID. It then deletes \"Project A\" and ensures that the document belonging to \"Project B\" remains accessible, validating that deletion of one project does not affect another project's data.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_storage.py:test_tag_counts_and_scope_queries:3f23e3214908b7bdb7a804771c8001e8e6965720a79aa6c4151cb224a7331679:3f23e3214908b7bdb7a804771c8001e8e6965720a79aa6c4151cb224a7331679": "The function `test_tag_counts_and_scope_queries` tests the tagging and scoping functionality within a document repository. It creates a project and a document, then associates the document with two tags: \"focus\" and \"aux\". It verifies that tag counts are correctly updated when documents are tagged and untagged. The test also ensures that documents can be retrieved by tag or folder scope, and confirms that tag counts are properly decremented when a document is deleted. The function validates the behavior of tag-based queries and scope filtering in the document repository.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_ui_main_window.py:2b2afe9611fcd5b5479f97f2ecc05d9f72b02c9be9b5571f41d2780d8a15b3b7:2b2afe9611fcd5b5479f97f2ecc05d9f72b02c9be9b5571f41d2780d8a15b3b7": "This module defines UI tests for the DataMiner main window, using PyQt6 for the interface and pytest for testing. It includes fixtures for setting up a Qt application instance and test-specific services such as settings, project, and progress management. Tests cover the layout and behavior of the main window's splitter, ingest file patterns, theme and font persistence, submission flow with reasoning verbosity controls, evidence panel interactions including requerying and previewing, and opening files in system applications. A dummy LMStudio client is used to simulate AI responses during testing. The tests validate UI elements, service interactions, and user workflows within the application's graphical interface.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_ui_main_window.py:DummyLMStudioClient:27ec08f434f94990a72cebf4586d1fb16fcbeea44050e10ad329599403b10e17:27ec08f434f94990a72cebf4586d1fb16fcbeea44050e10ad329599403b10e17": "The `DummyLMStudioClient` class is a placeholder implementation for an LMStudio client that simulates language model interactions without requiring actual network calls or external dependencies. It tracks messages, options, and call counts while providing a mock response containing reasoning steps, assumptions, self-check results, and citations. The class includes methods to check health status and simulate chat interactions, returning deterministic outputs for testing and development purposes.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_ui_main_window.py:DummyLMStudioClient:__init__:937fc49971a2b85173e7b310f9bfe8c698ded29cda995b7f324cc572fa40fb1a:937fc49971a2b85173e7b310f9bfe8c698ded29cda995b7f324cc572fa40fb1a": "Initializes instance attributes for tracking message history, options, call count, and the most recent question. Sets up an empty list for storing recent messages, a None value for options, a call counter starting at zero, and a None value for the last question.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_ui_main_window.py:DummyLMStudioClient:chat:b8f4859e834a121da31c5293a15319c6eb23471b849cdffdf28fbc91299e5b2e:b8f4859e834a121da31c5293a15319c6eb23471b849cdffdf28fbc91299e5b2e": "Function implements a chat method that processes messages and returns a structured response with reasoning, citations, and metadata. It tracks message history and call count, extracts the last message content, and constructs a deterministic response with formatted citations and reasoning steps. The response includes parsed document references, summary bullets, action plans, assumptions, and self-check results. The method returns a ChatMessage object containing the response content, citation data, reasoning information, and raw API response details.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_ui_main_window.py:DummyLMStudioClient:health_check:458a4ee8f332dcb752ddca07103f0696381658a3ac3a4a31f4f8faf04bd7ce9a:458a4ee8f332dcb752ddca07103f0696381658a3ac3a4a31f4f8faf04bd7ce9a": "The function implements a health check method that always returns a boolean value of True. It is defined with a self parameter, indicating it is intended to be part of a class, and follows the typical signature for health check operations in system monitoring or service validation contexts. The implementation provides a stub or placeholder behavior that currently does not perform any actual health verification checks.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_ui_main_window.py:__init__:19afa49e5f3cbf4d5e33aec9921d785e8280b2fc044d4f1a7ec50b85d417dcff:19afa49e5f3cbf4d5e33aec9921d785e8280b2fc044d4f1a7ec50b85d417dcff": "Initializes the `DummyLMStudioClient` instance with attributes to track messages, options, call count, and the last question.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_ui_main_window.py:__init__:390d4b35031b75300e2057a9849334ce3c8a986f5c5ba48fed1a55e47e019e0f:390d4b35031b75300e2057a9849334ce3c8a986f5c5ba48fed1a55e47e019e0f": "Initializes a new instance of the `DummyLMStudioClient` class with default values for tracking messages, options, call count, and questions.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_ui_main_window.py:build_settings_service:fbfbe340f9f8d7b8a556d00834932d2e4fd85ee87d67dd1597a4c9fa2cc5d757:fbfbe340f9f8d7b8a556d00834932d2e4fd85ee87d67dd1597a4c9fa2cc5d757": "Creates and returns a `SettingsService` instance configured with a temporary path for XDG configuration home, using a `ConfigManager` initialized with the application name \"DataMinerTest\" and configuration file \"ui.json\".",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_ui_main_window.py:chat:44b4bf31032d8005efd7ee42e044d46a77fe26faffa291e607845a8892be6aac:44b4bf31032d8005efd7ee42e044d46a77fe26faffa291e607845a8892be6aac": "The `chat` method of the `DummyLMStudioClient` class simulates a chat interaction by storing the input messages and options, incrementing an internal call counter, and returning a structured `ChatMessage` object. It extracts the last message's content if available, constructs mock reasoning and citation data, and formats a raw response containing these elements. The method returns a `ChatMessage` with the response content, citations, reasoning, and the raw response structure.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_ui_main_window.py:chat:902a1cd73643379cc980b7a2dc331765b71c3331a47dc4b542bb5f869bb900aa:902a1cd73643379cc980b7a2dc331765b71c3331a47dc4b542bb5f869bb900aa": "The `chat` method of the `DummyLMStudioClient` class simulates a language model interaction by returning a predefined response. It stores the input messages and options, increments an internal call counter, and extracts the last message's content as the question. The method constructs a mock response containing reasoning steps, assumptions, self-check results, and citations. These elements are included in the returned `ChatMessage` object along with the deterministic answer content, metadata, and token usage statistics.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_ui_main_window.py:fake_open:febceb2e78f9dc3517070e56e316aa43525bdb04c15528918b965bab22eddd09:febceb2e78f9dc3517070e56e316aa43525bdb04c15528918b965bab22eddd09": "The function `fake_open` takes a `QUrl` object as input and assigns it to a dictionary key `\"url\"` within a variable named `called`. It then returns `True`. This function appears to be a mock implementation used for testing purposes, likely to simulate opening a URL while recording the URL that was \"opened\" for verification in tests.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_ui_main_window.py:health_check:80bc0aa458ee542b41559b3bc47c882d9af8aa6328373f639d0cf44819d9be99:80bc0aa458ee542b41559b3bc47c882d9af8aa6328373f639d0cf44819d9be99": "The `health_check` method of the `DummyLMStudioClient` class always returns `True`, indicating a successful health status. This implementation does not perform any actual health checking logic and simply provides a placeholder return value.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_ui_main_window.py:health_check:b0aeef5e61159d5616454331356114678ca0e7868d4a24ea05e5bd10a203419c:b0aeef5e61159d5616454331356114678ca0e7868d4a24ea05e5bd10a203419c": "The `health_check` method of the `DummyLMStudioClient` class always returns `True`, indicating a successful health status. This implementation is a placeholder that does not perform any actual health verification.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_ui_main_window.py:project_service:0e3ca26a9199794d75f4887d5f73e7c08a0ce3f304345805de8728d80f4153ac:0e3ca26a9199794d75f4887d5f73e7c08a0ce3f304345805de8728d80f4153ac": "Creates and yields a `ProjectService` instance configured with a temporary path for storage and configuration. Sets the `XDG_CONFIG_HOME` environment variable to the provided temporary path, initializes a `ConfigManager` with a test application name and projects file, and constructs the `ProjectService` using the temporary storage root and configuration manager. Yields the service for use in tests, then shuts down the service after the test completes.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_ui_main_window.py:qt_app:bf6cd74ab74ebe42fc6a0eda0a69933adab7f7014f5c051e65df340cdb4bc29e:bf6cd74ab74ebe42fc6a0eda0a69933adab7f7014f5c051e65df340cdb4bc29e": "The function `qt_app` returns the existing QApplication instance if one already exists, or creates a new QApplication instance if none exists. It ensures that only one QApplication instance is active within the application lifecycle.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_ui_main_window.py:test_evidence_open_in_system_app:1186823733e09568b656086b7430369d529602ccd98cce9c0c8ba062b315aad8:1186823733e09568b656086b7430369d529602ccd98cce9c0c8ba062b315aad8": "The function `test_evidence_open_in_system_app` tests the behavior of opening a document from an evidence panel within a main application window. It sets up a test environment with a dummy LMStudio client, a progress service, and a project service. A question is submitted to trigger the display of evidence, and then simulates clicking an \"open\" button on the first evidence item. The test verifies that the system attempts to open the correct local file path (`/tmp/doc_a.txt`) using `QDesktopServices.openUrl`. The function patches `QDesktopServices.openUrl` to capture the URL being opened and asserts that it matches the expected file path. Finally, the main window is closed.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_ui_main_window.py:test_evidence_scope_requery_and_preview:cdb9ac28f5707537c1bfaf817cc8df1b8a1d10ef5ca9013ffe3f7d8fa111c667:cdb9ac28f5707537c1bfaf817cc8df1b8a1d10ef5ca9013ffe3f7d8fa111c667": "This function tests the behavior of evidence scope requerying and preview functionality within a document processing application. It sets up a test environment with a dummy language model client, initializes a main window with associated services, and simulates user interactions such as asking a question, selecting evidence, and excluding documents from retrieval. The test verifies that the client is called a specific number of times, checks the evidence panel's state and content, ensures citations are correctly handled, and confirms that document exclusion and inclusion parameters are properly passed to the retrieval options when a document is excluded. Finally, it closes the application window.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_ui_main_window.py:test_main_window_ingest_patterns_match_parsers:3d75236c0e9b104ed5544889464123a835e06d4c55e92c1369400384e4ecbea0:3d75236c0e9b104ed5544889464123a835e06d4c55e92c1369400384e4ecbea0": "The function `test_main_window_ingest_patterns_match_parsers` tests that the main window's ingest include patterns and file filter specification match the supported patterns. It creates a `MainWindow` instance with mocked services, retrieves the ingest patterns and filter specification, and asserts that they align with `SUPPORTED_PATTERNS`. The window is closed after the test executes.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_ui_main_window.py:test_main_window_splitter_layout:cfb5dbbbb01e7e99154c49fde51e41184634b1aa9df4afb4b9fa2eb595802b68:cfb5dbbbb01e7e99154c49fde51e41184634b1aa9df4afb4b9fa2eb595802b68": "This function tests the layout and initial state of the main application window's splitter component. It creates a `MainWindow` instance with specified services and verifies that the window contains a `QSplitter` with three child widgets, checks that the splitter's size distribution meets certain conditions, and ensures that specific buttons are present and in the expected state. The test confirms the splitter layout and button states after the window is initialized and resized.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_ui_main_window.py:test_settings_persist_theme_and_font:a7deae3b196c44d73d9842afac54b6a3c847adc2706aba801fcfa14d647cf843:a7deae3b196c44d73d9842afac54b6a3c847adc2706aba801fcfa14d647cf843": "The function tests that theme and font scale settings are persisted between service instances. It creates a settings service, sets the theme to \"dark\" and font scale to 1.5, then rebuilds the service from the same temporary path. It verifies that the reloaded service maintains the previously set theme and font scale values, ensuring proper persistence of user preferences.",
  "C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_ui_main_window.py:test_submission_flow_and_controls:4ae031c85026ec0d54a7e5e56471b34211015ea58b76ff67fb2cbf0b6873e780:4ae031c85026ec0d54a7e5e56471b34211015ea58b76ff67fb2cbf0b6873e780": "The function `test_submission_flow_and_controls` tests the end-to-end behavior of a question-answering interface within a document processing application. It simulates user interactions with the main window, including submitting questions, toggling UI controls for reasoning sections, adjusting verbosity settings, and enabling sources-only responses. The test verifies that the application correctly displays answer cards with associated metadata, citations, reasoning sections, and plan/assumption visibility based on user settings. It also checks clipboard functionality for copying answers, citations, and conversation history. The test uses a dummy language model client to simulate AI responses and ensures that request options are properly configured according to UI selections. Finally, it confirms the application's ability to manage multiple query submissions and handle window closure.",
  "PROJECT:eca3b8fb569d4645179d994477c514a63ffa46fe584456c8242fbb74e12f7bc0:eca3b8fb569d4645179d994477c514a63ffa46fe584456c8242fbb74e12f7bc0": "This project is a document ingestion and retrieval system that supports parsing various file types including DOCX, PDF, Markdown, and text files. It provides services for ingesting documents into a project, managing document hierarchies, indexing content for search, and retrieving relevant passages based on queries. The system includes functionality for handling background tasks such as folder crawling and file rescanning, along with features for managing conversation contexts and exporting results. It also supports backup and restore operations, configuration management, and integrates with an LMStudio client for language model interactions. The application offers a user interface for managing projects, corpus roots, and viewing search results with evidence panels and conversation history.",
  "README:741935f4d45015659bfabf346ccea656cfa230c7560a17bc8dabba0677c36d4b:741935f4d45015659bfabf346ccea656cfa230c7560a17bc8dabba0677c36d4b": "This repository provides a desktop application scaffold for offline document processing and question-answering using local AI models, with support for corpus ingestion, retrieval, and user interface rendering. It defines a structured project layout using Python, PyQt6 for the GUI, and SQLite for local data storage, ensuring all functionality operates without network dependencies. The application supports loading documents from folders or files, organizing content through tags and search, and generating AI responses with citations, while offering advanced RAG capabilities and reasoning features.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\__main__.py:main:ca1c5b38e1307d46f87b89b0096277538b6a32fdffc958a71f95815ed5e7f999:2f6c32c5d7475fad743af7b0224ca5abe952627b75e0760dc2c81d05dd8328f2": "The `main` function initializes and starts the PyQt6 desktop application for offline document processing and question-answering. It sets up logging, creates a QApplication instance, and initializes various service objects including settings, progress tracking, LMStudio client, project management, document ingestion, hierarchy handling, export capabilities, and backup functions. A main window is instantiated with these services and displayed. The application enters the Qt event loop, and upon termination, ensures that background services are shut down gracefully before exiting.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\config.py:ConfigManager:bc02c98199433c8f0192f37b8aa27cc44ddc73c196ebcc04f7d4607caad87c1c:a31f092d1a8a9c12392714a9cc7813ac59a49dee243e5b1d62cc7c6b8105ba46": "The `ConfigManager` class manages loading and saving user configuration settings in either JSON or INI format. It initializes with an application name, configuration format, and file name, determining the appropriate file path using a user configuration directory. The class provides methods to load configuration into a dictionary, save a dictionary to disk, and update the stored configuration with new data, handling both JSON and INI formats appropriately.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\config.py:__init__:ce4c6b41d8b0f24e987724553f3d0cdb28e7c2c6f39867c7cd0b46e9628c9d17:4c9bcd8c9f9f3506d629168c655332268e855c0b279aad8ffc44bbb67c2a07d0": "Initializes a `ConfigManager` instance with the specified application name, configuration format, and filename. Sets the configuration directory and path based on the provided parameters, ensuring the format is either 'json' or 'ini'. Raises a `ValueError` if an invalid format is provided. Uses default filenames for JSON and INI formats if none is specified.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\config.py:__repr__:3c83289364465fe3bc99516248812c2085d40a3b7095da9b45e305082d8cde59:8ff7db0679a2c20156bd6f595d4693fa958f945fece7dfcd4dc05bc37b4a2219": "The `__repr__` method provides a string representation of the `ConfigManager` instance for debugging purposes. It returns a formatted string that includes the application name, configuration format, and configuration file path, using the instance's attributes `app_name`, `format`, and `config_path`.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\config.py:get_user_config_dir:2cff0d9d1e31fc3e8721a7d98944bf6cadc410c9993d5ce2c038317227264a57:c74d33e8b05c2eb329e288026cfab7e2c3c55b9f5da413576300e85d85ae2ff4": "The function `get_user_config_dir` returns the path to a configuration directory for the current user, creating it if it does not exist. On Windows, the directory is located under the `%APPDATA%` environment variable; on other platforms, it uses the XDG base directory specification or defaults to `~/.config`. The function ensures the directory is created with all necessary parent directories using `mkdir(parents=True, exist_ok=True)`.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\config.py:load:cd2a4eb6d6f27e2be8dd6d9130c5440e85f253938ce321cbc3a6a9e1b187f4d3:ca3519146383210126afddb7b642b991abf9333850e50719b42e7e37d06e7b39": "The `load` method of the `ConfigManager` class reads configuration data from a specified file path and returns it as a dictionary. If the configuration file does not exist, it returns an empty dictionary. The method supports both JSON and INI formats. For JSON files, it uses `json.load()` to parse the file. For INI files, it utilizes `ConfigParser` to read sections and their key-value pairs, organizing them into a nested dictionary structure where each section becomes a key mapping to another dictionary of its items.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\config.py:save:3898533f94dcc25ade723d2b4b4352707fbf791d7e63f50a25083162591108dd:c0d8af5efa2fee08e13b1272eb5528c5959095f2422c950ffd4ebfe4788a3326": "The `save` function persists configuration data to disk in either JSON or INI format, depending on the instance's format setting. For JSON, it writes the data with indentation and sorted keys. For INI, it validates that each section's values are mappings and then writes them using a `ConfigParser`. The function raises a `ValueError` if INI sections contain non-mapping values.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\config.py:update:0c8b080f40e6b52323bac2cc77a05dc274b49d99dc7b03832ab4a744f35a6ca5:66e58352f4a85799a32107e0a07f1ea4f34205710ff16ca3f50e9a9ca998d5f8": "The `update` method in the `ConfigManager` class merges provided configuration data into the existing configuration. It first loads the current configuration, then updates it based on the specified format (JSON or INI). For JSON, it performs a direct update of the loaded dictionary with the new data. For INI format, it ensures that each section's values are mappings and updates them accordingly, raising errors if the structure is invalid. After applying the updates, it saves the modified configuration and returns the updated configuration as a dictionary.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\parsers\\__init__.py:DocumentSection:4449fff5edc76232e34b7ba58ce68af9d4b3acf5632d7dcc7d596c6b57c63abf:6bb8fcc31fa37e902131061dd175d6b75230a85b164eff9a6b604d42ba78e2a8": "The `DocumentSection` class represents a hierarchical section from a document, containing attributes for title, content, level, and page number. It includes a `to_dict` method that converts the instance into a dictionary format using `asdict`. The class is designed to structure document sections with optional hierarchical level and page information.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\parsers\\__init__.py:PageContent:d8b08228566632ff2e8ed81de14ae8ae206f602fe75f864faa8adca766fc286f:6a00e8e766bc7c5b8441043317a8017e59528169163f144eb66d5351d653fb71": "The `PageContent` class represents a single logical page with attributes for page number and text content. It includes a `to_dict()` method that converts the instance into a dictionary format using `asdict()`. The class serves as a data structure for organizing page-related information.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\parsers\\__init__.py:ParsedDocument:b4a31fbb19a5e91780b0145bf6223754505af7d04962bbff8c8abc0d0aeb775c:0c4bba858de67531416aea184dcac192267f1fc8d14055e89b69753582514bdd": "The `ParsedDocument` class represents a normalized document structure containing text, metadata, sections, and page content, with optional OCR flags. It provides a `to_json` method to serialize the document's structured data into a JSON string format. The class uses fields for sections, pages, OCR status, and OCR hint, with default empty lists and false OCR status.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\parsers\\__init__.py:ParserError:9f196a8959fd31dd4a3c606b49ef954e94504785e8b70cd5010a8b926a08ef62:c09ec74f9ecacde066ea46454a41a161c982942e7b427eeade990192a2c248be": "The code defines a custom exception class named `ParserError` that inherits from `RuntimeError`. This exception is intended to be raised when a parser encounters a document it cannot process. The class serves as a specialized error type for parser-related failures within the application.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\parsers\\__init__.py:parse_file:3dfda691da34ad7e9b8647ebd9cdb9fbb3e27ea7b3f9b52c44cbbcae087f8e1f:8410b0fc108b4427dd6a1eee27085bd55ebed6cdaea47106e129b0d312eaae50": "The function `parse_file` takes a file path as input and returns a `ParsedDocument` instance. It resolves the path, checks for its existence, determines the file's suffix, and uses a corresponding parser from a global dictionary `_PARSERS` based on the suffix. If the file does not exist or the file type is unsupported, it raises a `ParserError`.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\parsers\\__init__.py:register_parser:e67098acd832f487fdd2568415b2e9c2112f9f7326e692c226ed49366e47a297:6d3ce169cdbdc2f59166ff0b9e263404e5197f873e14439e19dd1cbcf816aa2c": "Registers a parser for the specified file suffixes. Each suffix in the iterable is mapped to the provided parser in a global dictionary `_PARSERS`, with suffixes converted to lowercase for consistent lookup.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\parsers\\__init__.py:to_dict:605efe19dd4ff71822f04cbbcd8a759b81f14e7b0fa75d7c60d159c92656417c:85c04b1d1e4bce0374e6991667d352e273424c428d1dc50c13d7d730b7d49fed": "The `to_dict` method of the `DocumentSection` class serializes the instance into a dictionary format using the `asdict` function from the `dataclasses` module. This enables easy conversion of the object's data for storage or transmission purposes.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\parsers\\__init__.py:to_dict:e295b31889c2641a2dd15d12abd1a294fdcfe834c2d4510e62ca794246f20c75:44a63fbdb4eece11a2c5ea00cca68d8229bddcf8e4a098e55a1db2c739e4cb0d": "The `to_dict` method in the `PageContent` class serializes the object's fields into a dictionary format using the `asdict` function. This enables easy data handling and exchange by converting the structured content of a page into a dictionary representation.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\parsers\\__init__.py:to_json:28fd11a4eaa48896cbd45c0b52371946b47a8b1eac7ca77f0c02a9867351d08e:71d8f9266003943433f53ea2f8593f339b7979775863c352ccd8b84a6fd52310": "The `to_json` method of the `ParsedDocument` class serializes the document's structured data into a JSON-formatted string. It constructs a dictionary containing the document's metadata, sections (converted to dictionaries), pages (converted to dictionaries), and OCR-related flags (`needs_ocr` and `ocr_hint`). This dictionary is then converted to a JSON string using `json.dumps` for storage or transmission purposes.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\parsers\\docx_parser.py:parse_docx:5fa9b481df9a0acd0f2bef99b3d99f89cfb7d25773b94bc167e6d1156eccd046:8b89158efa8b3e62dd37482198db3d0dc35b6bd5ebdd5e34a84192e401ca938e": "The function `parse_docx` extracts content from a Microsoft Word (.docx) document, returning a `ParsedDocument` object that includes the document's text, metadata, sections (with titles and levels derived from heading styles), and page content. It uses the `python-docx` library to read the document, processes paragraphs to identify headings and body text, organizes content into sections based on heading levels, and collects all text into a combined string. Empty sections are removed to ensure compact output. The function also extracts core document properties and counts the number of paragraphs for metadata. If `python-docx` is not installed, it raises a `ParserError`.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\parsers\\markdown_parser.py:parse_markdown:763f53ba423424bf3cd51892e4e7128f540ddf2b02781a042acd83887151573c:3f228b428c04b41690ad202417475bb786ab0646a53708184b58e53117781d41": "The function `parse_markdown` reads a Markdown file from a given path and parses its content into structured sections based on heading levels. It processes each line of the file, identifying headings using a regular expression and organizing subsequent lines into sections accordingly. Sections without content or title are filtered out. The function returns a `ParsedDocument` object containing the combined text, metadata including the format and number of headings, a list of document sections, and page content derived from the file's body.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\parsers\\pdf_parser.py:_to_datetime:e0f6d5e2c338d53c468b4537fcf7c6f87f96063fd6e4fd9224e0e112ac3e7b7f:f618268b9d97eec4bc759f526d886540a57cc86f4d61c4f37cdf6fe29565b525": "The function `_to_datetime` normalizes PyMuPDF metadata values into ISO 8601 format. It accepts a value of any type and processes datetime objects or strings formatted as \"D:YYYYMMDDHHmmSS\" into UTC-aware ISO format timestamps. If the input is already a datetime object, it ensures timezone awareness and converts to UTC. For string inputs, it attempts to parse the date using the expected format and returns an ISO-formatted string. In case of parsing errors or invalid inputs, it returns the original value or None.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\parsers\\pdf_parser.py:parse_pdf:60d9a5228929bb42cce0f58f2ba2be550b2bf7fec74820a5a75658e40d82eb4d:ec897d5eefde8cc048e4b21f4dab67eeb9a1d3b143a7db869c59883e881fe8a4": "The function `parse_pdf` extracts textual content from a PDF file located at the specified path using PyMuPDF. It returns a `ParsedDocument` object containing the combined text, metadata, document sections, page content, and flags indicating whether OCR is needed. The function handles potential import errors and file reading errors, and normalizes datetime fields in the metadata. Each page's text is collected, and if no text is found on any page, an OCR hint is included in the result. The PDF document is properly closed after processing.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\parsers\\text_parser.py:parse_text:975be45e3a86ff6ef6687c07676c2ddf8c3b264292eb252ed0bc939a2d3af86e:e6104e2151db4dd02c9973fbf495a9281a396c8025f08490292b807c4c3facca": "The function `parse_text` reads a plain-text file from a given path and attempts to detect its encoding. It first tries to decode the file using UTF-8. If that fails with a `UnicodeDecodeError`, it uses the `chardet` library to detect the encoding, falling back to UTF-8 if detection fails. The decoded text is then structured into a `ParsedDocument` object, which includes metadata about the encoding, a single section containing the full text, and a single page also containing the full text.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\preview.py:PreviewService:f38582e430c2fce5b93f5d18fde8ca59d777b9a8e048bde0b9b558374c2aa2ee:8a1ca39372d21f84517b36bc3e22c5e70778782603edcfa0028e327681a413b1": "The `PreviewService` class provides functionality to retrieve highlighted text snippets and specific pages from stored documents. It supports generating previews with emphasized terms and finding the page containing specified search terms. The class interacts with a database through a document repository to fetch and process document data, including handling text normalization, snippet generation, and page retrieval.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\preview.py:__init__:e46252639f84beb3ebb498b0f918524674b80e3526bcbd575ca0c2ae1e26b865:84c16caadf376355d436a4cb2c2b29b8871d272c332ef4135d30508a9a17b7eb": "Initializes the `PreviewService` instance with a database manager and sets up the document repository for managing ingest documents.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\preview.py:_apply_highlight:473a7fbd947e66477f9bcf3b2e0a4417ae31f7f8207ffd77a271e9f437e2af32:b65ff47c9f6d92c9e98f0f0b9856314b8e3c20b9675d894a87da334c9b84364e": "The function `_apply_highlight` takes a string `text` and an iterable of search `terms`, then returns the text with each term wrapped in `<mark>` HTML tags. It processes terms by sorting them in descending order of length to avoid partial matches, and uses a regular expression with case-insensitive matching to find and replace occurrences of each term. Empty terms are filtered out before processing.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\preview.py:_assemble_preview:8e583cd66805454afffd6862d8c2de9de7bb9c4f0566e64a8f868e78aabbc762:c0eae7baa55844233725ee044d8590e0642dd8511bebe0e3f231779eb7b00a26": "The function `_assemble_preview` constructs and returns a dictionary containing structured preview data for a document. It takes a document record, a text snippet, and optional page and offset information, then maps fields from the record along with the snippet and offset into a standardized preview structure. The returned dictionary includes document metadata such as ID, path, version, preview content, OCR status, page details, sections, and additional metadata.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\preview.py:_build_highlight:60bad3c7fb8cd8931542af318b3adfc15d94f02069712fd8101a9827eff3404c:0f349d61b7ccd920d2b9f537689331a51165bdc2facc6cf6f4b82c9c14f3329f": "The function `_build_highlight` generates a highlighted text snippet from a given string based on provided search terms. It identifies the first occurrence of any term in the text and extracts a contextual portion around it. If no terms are found, it returns the beginning of the text up to the specified character limit with highlights applied. The function returns a tuple containing the highlighted snippet and the starting index of the snippet within the original text.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\preview.py:_find_page:9840339a8fc89d84065e84168c61e663e0ee4fdbb2e80109b8a076a6f358561d:29a839c570ca7062f31737004b3e30b31b91e5dd3386101303ac5c08da444fea": "The function `_find_page` takes a list of page dictionaries and a sequence of search terms, then returns the page number of the first page containing any of the terms. It converts all terms to lowercase and checks if each term exists within the lowercase content of a page. If a match is found, it attempts to convert the page's number to an integer and returns it; otherwise, it returns `None`. If no matching page is found, it also returns `None`.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\preview.py:get_highlighted_passages:fc1a59520b054a92db1c3c24b665d3870ff925de89bf4052b5870caffbfa148b:bbf3d3531978b5c8bf33b3cd4440bf6041b843aa45f04d8a1ac6d53218541deb": "The function `get_highlighted_passages` retrieves a text snippet from a document identified by `document_id`, optionally highlighting occurrences of specified search terms. If no terms are provided, it returns a preview of the document based on stored data. The function constructs the snippet using normalized text or fallbacks to the document's raw text or preview. When terms are provided, it builds a highlighted snippet centered around the terms and identifies the relevant page number. It then assembles and returns a structured preview including metadata, the snippet content, page information, and offset details.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\preview.py:get_page:c47611338d55623072805801e32b11855e82509abb86d1e21097e7ba6164701d:bab56143691dbb2b79f2a776ad9c449cf122396ce9750eabe070c8ddf4283e6b": "The function `get_page` retrieves the full text of a specified page from a document identified by `document_id`. It accepts two parameters: `document_id` (an integer) and `page_number` (an integer). The function first retrieves the document record using `self.documents.get(document_id)`. If the document is not found, it raises a `LookupError` with an appropriate message. It then iterates through the pages of the document to find the one matching the given `page_number`. If found, it returns a dictionary containing the `document_id`, `page_number`, and the text of the page. If the page is not found, it raises a `LookupError` indicating that the page does not exist for the specified document.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:IngestJob:a61198cda6a0c8cfa57ee31bcc77b0515fc9c609adc1d137daa8078d37d44dde:532fcbf59261e0ad6debe33a60d7f8144cfab3de02f9319f5a18bb06865b296b": "The `IngestJob` class represents a single ingest job with attributes for tracking job metadata, status, progress, errors, summary, and state. It includes fields for managing job execution such as cancel and pause events, and provides a method to initialize default values for progress tracking and file handling. The `ensure_defaults` method populates default bookkeeping keys and ensures proper handling of known files during job restoration.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:IngestService:7b83574ed8ece98e9b7a9f9b8a337af890940afe7aea9bcc6f2f8719e0a7712b:merge0:033485c51ca822ff50dfc9fe22c0a02f44a1512f6ef4d1d711a0116b56a8c51f": "This code defines a comprehensive ingest service that coordinates background jobs for file ingestion and processing through a worker thread. The system handles multiple job types including folder crawling and single file ingestion, managing file discovery, parsing, storage, and synchronization with a project's document database. It supports batch and streaming data processing modes with configurable parameters, and includes functionality for handling missing values, applying custom transformations, and generating summary statistics. Key components encompass job queuing, execution, pausing, resuming, cancellation, and completion tracking, along with rollback capabilities, progress tracking, and metadata management including file checksums, versioning, and document synchronization. The implementation uses thread-safe methods for job updates and notifications, serializes job data, converts database records into ingest jobs, loads known files from previous jobs, normalizes file paths, hashes files, and generates UTC timestamps, while managing job lifecycle states including pause and resume operations based on job status.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:IngestService:7b83574ed8ece98e9b7a9f9b8a337af890940afe7aea9bcc6f2f8719e0a7712b:part0:b1a1170e33669a6724baf9ceadd9677d94fa190e227842e951d3df8d4f1a3bf7": "The code defines a class that implements a data processing pipeline with methods for filtering, transforming, and aggregating datasets. It includes functionality for handling missing values, applying custom transformations, and generating summary statistics. The implementation supports both batch and streaming data processing modes with configurable parameters.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:IngestService:7b83574ed8ece98e9b7a9f9b8a337af890940afe7aea9bcc6f2f8719e0a7712b:part1:30b3d57568b8612291dc35fa77ba171212be51800b147594a95dad1b64457b8c": "This file defines an `IngestService` class that coordinates background ingest jobs using a worker thread. The service manages job queuing, execution, pausing, resuming, cancellation, and completion tracking.\n\nKey components include:\n\n\nThe service supports multiple job types including folder crawling, single file ingestion",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:IngestService:7b83574ed8ece98e9b7a9f9b8a337af890940afe7aea9bcc6f2f8719e0a7712b:part2:963f66385eb46539087c16a62fde01920567018d29161c98babc010a2a586978": "This code defines a file ingestion and processing system that handles jobs for adding, removing, or rescanning files. It manages file discovery, parsing, storage, and synchronization with a project's document database.\n\nKey components include:\n\n\nThe system supports rollback functionality for jobs, tracks progress and summary statistics, and handles cancellation or pausing during execution. It also manages file checksums, metadata, and versioning for stored documents.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:IngestService:7b83574ed8ece98e9b7a9f9b8a337af890940afe7aea9bcc6f2f8719e0a7712b:part3:b4a33ce374ef0d939a88d152b8261ef15fc93a9b40bea5b7256510ec91303b4f": "This code defines a class for coordinating ingest jobs using a background worker thread. It includes methods for serializing job data, converting database records into `IngestJob` objects, emitting job updates to subscribers, loading known files from previous jobs, normalizing file paths, hashing files, and generating UTC timestamps.\n\nKey components:\n\nThe class manages job lifecycle, including pausing and resuming jobs based on their status. It uses a thread-safe approach to handle job updates and notifications.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:TaskStatus:dbd264781a038faa54cfab5f31f217437fea63475163895f55ad491a7470e444:04ab087b925e049fd51d67d9fec2a10d0a6637a126f84e535353a18f30954af8": "The `TaskStatus` class defines a set of canonical status values used for tracking task execution state in a task log. It enumerates standard task states including QUEUED, RUNNING, PAUSED, CANCELLED, FAILED, and COMPLETED. The class also defines a FINAL set containing the terminal states CANCELLED, FAILED, and COMPLETED that signify the end of a task's lifecycle.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_JobCancelled:2f1bb572a33e646460267c87686c799e81cb999da5df17b3109b93eb1270969e:4e36b5e1637bf856047245f5029121db334c8b31a78e65fc47ddd24db22f049e": "This code defines a custom exception class `_JobCancelled` that inherits from `RuntimeError`. The exception is intended to be raised internally when a job cancellation request is detected. It serves as a specific error type for handling cancellation scenarios within the system.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_JobPaused:1313882bec385064f01987b61df817ca1f38f8937bea73e1e184d596b668412e:619d3b823cdc4f9ee4fec65424cf3cbee5783e3173f773e24d27152782213d1b": "The code defines a custom exception class `_JobPaused` that inherits from `RuntimeError`. This exception is intended to be raised internally to terminate or unwind a worker loop when a pause request is received. The exception serves as a control flow mechanism to break out of worker loop iterations in response to pause commands.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:__init__:ec355782dd2ab25a803f56e8d6e28f9b6d2e28c71738c6655f515db4f99d262d:8630699ada68a3bb45206970274430dbaf97cfa155e82b303a1f4171d918184a": "Initializes the `IngestService` instance, setting up database managers and repositories for background task logging, document ingestion, and project document handling. It initializes internal data structures including a job queue, job dictionary with thread-safe locking, subscribers list, and a stop event. A daemon thread is created to run the worker loop, and incomplete jobs are restored from the database upon initialization.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_check_pause_cancel:619afc4da5a602cab0f2429886a85060dac021173cd96bdc578be50acccb2e0a:540e745b9bfbf190cb6ccc08e5b037e511e2e406ff660918ec2b54acc5d5f25d": "The function `_check_pause_cancel` checks whether a given `IngestJob` has been cancelled or paused. If the job's cancel event is set, it persists the job state and raises a `_JobCancelled` exception. If the job's pause event is set, it updates the job's status to `PAUSED`, persists the updated status, and raises a `_JobPaused` exception. This function is used to handle job lifecycle events during ingestion tasks.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_complete_job:c2389fc4be3a7d968661ef5e7168ba0b5d4ed5ba9abd6cbb9b94fba93c25346d:4f424e97adba636d5eba24c61ae7cf625ba59bb216fce710d20c6bb6f819ff85": "The `_complete_job` function finalizes an ingest job by updating its status to `COMPLETED`, aggregating progress and summary information, synchronizing project documents, and persisting the updated job state. It sets default values for success, failure, skipped, and removed counts in the job's summary, stores known files and total file count, retains error information, cleans up temporary state data, and ensures the project's document hierarchy is synchronized before saving the job's final state.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_create_job:bb8512af068098aa73d91bf36bdfae3dd17b1cb0cd758e47864c589f2efefba6:82f162b7edead7a9485692657bbe4cef8ec595fed6a1b2a5e34b2796a6678c99": "The function `_create_job` creates and initializes a new ingestion job of a specified type with provided parameters and a message. It constructs a job payload containing job details, progress tracking, error logs, summary data, and state information including known files. The job is persisted to the repository with a \"QUEUED\" status, converted into a job object, and added to an internal jobs dictionary and processing queue. Finally, it emits an event to signal the job's creation and returns the job's unique identifier.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_discover_files:0449ae742f78a2af995af9e6d2c2a221cfcc236558af35ce9b20ae000646cd3a:832745947d872f6fe21b82565f0f3e1725ecc7bcc9c49251bea7f0d891609c75": "The function `_discover_files` identifies and returns a list of file paths based on the type of ingestion job specified in the `job` parameter. For a \"single_file\" job, it processes individual file paths from the job's parameters, applying include and exclude filters relative to a base directory. For a \"remove\" job, it normalizes and deduplicates file paths provided in the job's parameters. For other job types, it recursively discovers all files under the specified root directory, applying include and exclude filters to determine which files to include. The resulting list of file paths is sorted and contains no duplicates.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_emit:2cb86558f5571fed0bade00745d53feac199f14c9d6c3afcfd366b07e408e56e:7e10cbc7879da43a53cb7022a03b8cee3cb1dbcb50f54c0fdf2f70444d4d6630": "The `_emit` method in the `IngestService` class is responsible for notifying subscribers about changes to a specific job identified by `job_id`. It retrieves the job from the internal `_jobs` dictionary, serializes the job's data using the `_serialize` method, and adds the job's current status to the serialized payload. The method then iterates through all registered callbacks in `_subscribers`, invoking each with the `job_id` and the updated payload. If a callback raises an exception, it is caught and ignored to ensure that one failing subscriber does not prevent others from being notified. This mechanism supports asynchronous updates to the job's state across different parts of the application.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_fail_job:614f8295548195687afdf5012e01f5370d559eaabc55c98e9b983e1835279081:8fb4e583f0eb92aa2e34a8dfca063a995967a23cc5e73691e3d1c3cf3537dcf3": "The function `_fail_job` updates the status of an `IngestJob` to `FAILED`, appends the string representation of an exception to the job's errors list, and persists the job's state with the failure status, error message, and completion flag.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_handle_cancel:e0ecbaaa880c4d7dfbf4aa3dbb2c784a4c6bdf55f4ad135acaae9c326c6da039:ee1171af9617bc39d6d4145e5464992d9770c9ac491c7a8982536ff5d110012f": "The function `_handle_cancel` processes the cancellation of an `IngestJob` by rolling back the job's operations, updating its status to `CANCELLED`, and persisting the updated job state with the cancelled status and completion flag set to `True`.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_handle_path:5e04e4d324ae1682eaa7e49f3e833599b9c90a0896456eff4e2fd5b8a24d077b:34a6e0238f2541bb6849e2e5caa94eff8e2771d7e3cbb859907180978ef655df": "The `_handle_path` method processes a file path based on the job type defined in the `IngestJob`. For a \"remove\" job, it deletes documents associated with the path and returns metadata about the removed versions. If the path does not exist, it skips the file and returns an error. For other job types, it checks if the file exists and retrieves its metadata including size, modification time, and checksum. In case of a \"rescan\" job, it compares the current file metadata with previously stored data to determine if the file has changed; if not, it skips processing.\n\nIf the file is valid, it attempts to parse the file using `parse_file`. If parsing fails due to a `ParserError`, it records the error and returns a failure status. Any other exceptions during parsing are also caught and reported as failures. On successful parsing, it stores or updates the document version in the database with metadata such as file stats, parsed content, preview, OCR status, and parser-specific metadata. It then returns a success status along with detailed metadata about the processed file and its stored record.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_hash_file:749749e5dcc184639efbf038b4499661924e9e0a2b692c69ec831b22cf9ea796:5cd483d3041c0451599ab71b64c81f91f3377bb526834212a2794e7740cd0a89": "The function `_hash_file` computes and returns the SHA-256 hash of a file located at the specified path. It reads the file in chunks of 65,536 bytes to efficiently handle large files and updates the hash digest with each chunk. The resulting hash is returned as a hexadecimal string.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_load_known_files:0f199fe6957d5d3cf57455da9677fd0109c5e81fa2dba974dfb9817a1a42a2b6:c746aff26861893d544a0ecf022652599a4577a904bd76f8035ab02d919a03a7": "The function `_load_known_files` retrieves a dictionary of known files associated with a specified root directory by querying completed tasks of type \"ingest.rescan\" or \"ingest.folder_crawl\". It iterates through these tasks, checks if the task's root path matches the provided root, and extracts file information from the task's summary data. If matching files are found, it returns the known files dictionary; otherwise, it returns an empty dictionary.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_matches_filters:24db6606ee928fef66a57d0c1a4a680724e92c3ca29b1d4e57ac865aeadc0f6a:040b934c1d112e237b98411ce09410e3697d412e540bccc957f6e4d5fc069bbc": "The function `_matches_filters` determines whether a given file path matches specified inclusion and exclusion patterns. It accepts a file path, lists of include and exclude patterns, and an optional base path for relative normalization. The function normalizes the path for pattern matching, considering both the file's name and its relative path from the base. It evaluates each pattern against multiple variations of the path (including lowercase and normalized forward slashes) using `fnmatch` to check for matches. The function returns `True` if the path matches any include pattern and does not match any exclude pattern; otherwise, it returns `False`.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_normalize_path:f1ac5d4c956165a1dfa2d85d8367b16d68dcb216aee5b45cb24026b49e4ad893:efc8e2f76622ef86e47db6b0e3e3832f5bc0d5410859bc77076258a7d1ce23fa": "The function `_normalize_path` takes a `Path` object as input and returns its normalized string representation by resolving it to an absolute path.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_persist:376564555cdfcd614743fc76c8fed54c52a0df4afb7e0f763b6b32b6955863ae:e8201c4d60d8f683de5010e1bc6d4e7699b3349f353b74bb2c87d41ce01b6df3": "The function `_persist` updates the persistent state of an `IngestJob` in the repository. It serializes the job, optionally sets its status and message, and marks it as completed if specified. The updated job data is saved to the repository, and a notification is emitted to reflect the change.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_process_job:622411abf5707c2eea77c8de360ae455e46fa4ed22cfd8a3439c8c32da19411c:cb538f5200a9a88d8f67570fb5f130b19a0d73f88e4ff724f48bf600bb641cca": "The `_process_job` method processes an ingestion job by iterating through a list of pending files, handling each file according to its status (success, skipped, removed, or error), and updating the job's state and progress. It manages file discovery, tracks processed and known files, updates job summaries with OCR needs and removals, and ensures persistence of job state. The method also handles rescan logic by identifying and processing removed files. The function maintains thread safety through job state management and integrates with document handling and persistence mechanisms.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_record_to_job:d5d172bbed289a87cf4557d53c43226fa6e165c7ccce0644dc900c790ea7de81:a10336690e88e60158727b75f937d8370d683b20f41ec25c8d094af5220147ee": "The function `_record_to_job` converts a dictionary representation of a job record into an `IngestJob` object. It extracts job-related data such as type, parameters, status, progress, errors, summary, and state from the input record and its nested `extra_data` field. The resulting `IngestJob` is initialized with these values, ensures default values are set via `ensure_defaults`, and sets a pause event if the job's status is `PAUSED`. The function returns the constructed `IngestJob` instance.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_restore_incomplete_jobs:4d6dfa1c5fb64b96bd5e84da6614122f2ed1a5dff08d84e1ace633dc725a12f6:4b3954317ebbbd9d39975e31362ea36a1d949f5f4029524c43b064fe8fb81efc": "The function `_restore_incomplete_jobs` restores background jobs that were not completed prior to the application's shutdown. It retrieves all incomplete job records from the repository, converts each record into a job object, and adds it to the in-memory job dictionary with thread-safe access. If a job was paused, it sets the pause event and persists the paused status. For other incomplete jobs, it resets their status to queued if necessary, persists the change, and adds the job ID to the processing queue.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_rollback_job:78e8511596d12127623ebd4b392219e3cce581bf6e80f6944108e15bf38f74ad:3bbc3368f52605bda80bf94edfdeb2541fed37cda0d8960883c8749bf2cc430f": "The `_rollback_job` function resets the state of an `IngestJob` to reflect a rollback operation. It restores the `known_files` in the job's state from a saved snapshot, updates the job's summary to account for rolled-back successful operations, and resets progress counters to ensure the user interface accurately reflects the reverted work. The function also clears the list of processed files in the job's state.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_serialize:c9169ed0a58606d69e843a58c0354940981cb457c877d6035b47c3b0b8076912:12122da72c4aa600405cbe690b2486406075a4b9b6571f88efd7f30b55d8c219": "The function `_serialize` converts an `IngestJob` object into a dictionary representation. It extracts and includes the job's type, parameters, progress, errors, summary, and serialized state into the returned dictionary. The job's state is processed using a helper method `_serialize_state` before being included in the output.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_serialize_state:0f2682568c4fe3df5d3787db6221faf4c0dd1aec4271f31fefd5d4e9244dd7d0:188bdfa46e0db1234b151a0dd4d11a23fb5061fc99c1747768483ecbed32a1b9": "The function `_serialize_state` takes a dictionary `state` as input and returns a new dictionary where all values of type `Path` are converted to their string representation. For all other value types, the original values are preserved in the returned dictionary. This ensures that path objects are serializable while maintaining the integrity of other data types within the state dictionary.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_start_job:648f66a73c6cdb3d45992301fb010b09bbe8d480d7b0ff7eaad1c2c835cc1a42:f41460243390a82670953693d56a65b9f6a788442a8b62ec061adbce601d5e96": "The function `_start_job` initializes and starts an ingestion job by ensuring default values are set, marking the job as running, and persisting its state. It also creates a snapshot of known files if one does not already exist in the job's state.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_sync_project_documents:cddffbd7269b5b81d9e974cffa768cad6adfa32d87aef0b233490ce63919148d:497452f79132afade4a6435716cfa64e381c28f60670ce30f078e065bed6a3b2": "The function `_sync_project_documents` synchronizes the documents within a specified project based on the provided ingest job. It ensures that the project exists, retrieves existing documents, and compares them with known files from the job summary. New files are created in the project, and existing documents are updated if their metadata or paths have changed. Additionally, it removes documents from the project that are listed in the job's removed files. The function handles path normalization and uses a thread-safe database connection for these operations. It includes defensive error handling to prevent failures during synchronization.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_utcnow:63f857d84eef600ef542c262ce5e0b41d659ba07a74ff2faf426915564b9f4ba:5dbb7c5f317d73ab7c8033d4d7e8bf640ace2c561884b7cc4aacf6b6ac7bd350": "The function `_utcnow()` returns the current UTC date and time in ISO 8601 format as a string. It uses Python's `datetime` module to obtain the current timestamp with UTC timezone information.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:_worker_loop:2152beb385cc87d36bad2042dd3ab23124d68e02c61fde6e1f086a460cd21e64:360657b117fff6c1f862ffdd9761e9d99d2603db1dd1099e8c4c7bd05acb47ba": "The `_worker_loop` method implements the main execution loop for a background worker in the `IngestService` class. It continuously processes jobs from a queue, handling job lifecycle events such as starting, processing, completing, pausing, and canceling. The loop checks for a stop event to terminate, retrieves jobs with a timeout, and skips invalid or paused jobs. It executes job-specific logic within a try-except block to manage exceptions like cancellation or pausing, ensuring proper cleanup and state handling. Upon completion or failure, it marks the job as done and drains any remaining items in the queue during shutdown.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:cancel_job:d9f42efd83a06d047478e2fda489202be73a513195aa07dc9c52add6e6c19e3a:bae1ee9b6597c7034b5e9b1abc58f8e5242f9b66da4ca81a44f80835a3f21215": "The `cancel_job` function cancels a background job identified by `job_id`. It retrieves the job from the service's job registry and sets its cancellation event, signaling the job to stop processing. If the job does not exist, the function performs no action.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:ensure_defaults:4a3978bc92d2d55212550e289627b0ca8fdec2d447da5dcc4eea6666e55dc8a4:26aead2dccddf4a45fc3fb7b45ac4dba5699029e70164346251cd1cac441acc4": "The `ensure_defaults` function initializes default values for progress tracking and state management within an `IngestJob` instance. It ensures that specific keys exist in the `progress` dictionary with default integer values (`total`, `processed`, `succeeded`, `failed`, `skipped`) and in the `state` dictionary with default values for `pending_files`, `position`, and `processed_files`. It also handles the initialization and copying of `known_files` from either the state or parameters, ensuring that modifications to the copied dictionary do not affect the original. Additionally, it creates a snapshot of the `known_files` if one does not already exist in the state.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:pause_job:7da8dc8fdb38b9e13954c34428fbd17497627343c83526b880a5e6d259af31f4:b14a029c63e4cfd1d19c86db278a753fdd06bcd5c2866557531b2f9142f1f4fc": "The `pause_job` function pauses a background job identified by `job_id` by setting its pause event. If the job does not exist, the function performs no action. The function is part of the `IngestService` class and supports job lifecycle management.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:queue_file_add:f87417908db6f25acf908b08d1538c8781051fa8f5741eec1420fb6f266b8f71:f19f8cb177f2c2f583f1b02f7dab61e552a706241a0b0476349de9f70b75d5ae": "The `queue_file_add` function queues a background job to ingest one or more specified files into a project. It accepts a project ID, a single file path or an iterable of file paths, and optional inclusion/exclusion patterns for filtering files. The function normalizes the file paths, determines the base directory from the first file, and creates a job parameter dictionary containing the project ID, normalized file list, include/exclude filters, and root directory. It then calls `_create_job` to register the job with the type \"single_file\", using the parameters and a descriptive label \"Single file ingest\". The function returns the identifier of the created job.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:queue_folder_crawl:4f98084ff68e91ade886142c982253d46dfdfbfd9664731867de52a7744173ea:f8715f8cc563c2387dee6a8b67c5ffe073f449ed0f36f53e3d3372744f23d929": "The function `queue_folder_crawl` initiates a background job to discover and ingest all files located under a specified root directory. It accepts a project identifier, a root path, and optional inclusion/exclusion patterns for file filtering. The function resolves the root path, prepares job parameters including the project ID, root path, and filter lists, then creates and returns a job identifier for the folder crawl operation through the `_create_job` method. The job is labeled with a descriptive name indicating the root path being crawled.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:queue_remove:96dfe5fb5c70001d51d5f42fc065a25d18584fd5a6c4412da54706b49147c12a:296714ff07224582bb70beb1d4348161f3126ded643364d744f1665a9cb9318e": "The `queue_remove` function queues a background job to remove specified files from the ingest index of a project. It takes a project ID, a root directory path, and an iterable of file paths to be removed. The function resolves the root and file paths, loads the known files associated with the root, and creates a job with the parameters for removal. The job is labeled \"Remove files from ingest index\" and its unique identifier is returned.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:queue_rescan:87759eb51f5d562fada980a62e9cbfb7cbe7ecc5ae09d37376cfd638154dfe7e:c4e45b0a4741a9354e9d7e949b2c00048e17cf584bd91978ffc6e60d122f8b73": "The `queue_rescan` function schedules a background task to re-ingest files in a specified directory that have changed since the last crawl. It accepts parameters for the project ID, root directory path, include/exclude file filters, and a dictionary of known files. The function resolves the root path, loads known files if not provided, and creates a job with the \"rescan\" type using the provided parameters and a descriptive label. The function returns the identifier of the created job.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:resume_job:a20bb529541e89203a1de846ba7a8bb10f87d0201c87a4bd1c496a7fd666874c:bdfcb9937e2630077e597932d4236978ef489634a639adfc3658e7bc5f4bf9cf": "The `resume_job` function resumes a paused job by clearing its pause event, updating its status from `PAUSED` to `QUEUED`, persisting the status change, and adding the job to the processing queue. It retrieves the job using the provided `job_id`, ensures the job exists, and performs thread-safe operations on the job queue and status tracking. If the job is not found or not paused, the function returns without performing any actions.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:shutdown:0c148a0c3e4716549fdb1493de42122f80e71cbffb44c5a02787449169a2bd59:eeb213ba6fc61e3b344da6cf92d34a3ab4834a0b960382e3b98ca70e8fb7d176": "The `shutdown` method requests the worker thread to stop by setting a stop event and adding a termination signal to the queue. If the `wait` parameter is True, it blocks until the worker thread completes execution.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:subscribe:b9cc8d8376a5092d592611aa7dd78b81a9c1a78bc3dd904ebd4e70ade635d9c0:2c2e22820b43c90852bfb19cfb7e2088573773dc394db1e8f3d33db5c70cce85": "The `subscribe` method registers a callback function to receive task updates and returns an unsubscribe handle. The callback is added to an internal list of subscribers in a thread-safe manner using a lock. The returned unsubscribe function allows removing the callback from the list of subscribers, also in a thread-safe way.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ingest\\service.py:wait_for_completion:84c1bf10c46c714f61be001edbd386c8afa86371d3d40f8b322ae59b9587fd24:8682d31cb95fe27468454812f36968843a68d8f42efdafa5414c2528515d9902": "The function `wait_for_completion` blocks execution until the specified job reaches a terminal state or the specified timeout expires. It checks the status of the job in both the in-memory `_jobs` collection and the persistent repository (`repo`). If the job is found and its status is final, it returns `True`. If the job is not found in the repository, it returns `False`. If a timeout is specified and exceeded, it also returns `False`. The function uses a polling interval of 50 milliseconds to check the job status.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\logging.py:setup_logging:3e8d9cd9fef6f9fb47381170d3ce179aea5eb73d1f12315bd686eca4b03510ff:a19e1b4d5b77b2da0daa8e4284c72dba9093922a38bcf1c9018da416b47db537": "The function `setup_logging` configures logging for an application, returning the root logger. It sets up both file and console handlers with a rotating file log located in the user's configuration directory. The logging level and output format are customizable, and the function ensures that logging is initialized only once. The log files are stored locally without external telemetry.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:Citation:8bd5911d1065348b218b493ee91bc51f8d34f0d986f86d9096e1e53c1062346b:9d29eb618c74053a66a6875fb1b893d333a88e83d7e63064321e53b04a4a5ba7": "The `Citation` class represents a reference to a specific location within a document, storing the document ID along with optional page number and section information. It provides a `to_dict()` method that serializes the citation data into a dictionary format containing the document identifier, page, and section. The class is designed to map passages back to their original document locations using typed attributes for document ID, page, and section.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:Passage:9582960670733fced05c2ff8806d6b4c5a7a582f596ddee0e2a40c1df9766312:2f3c0cb479fb8233fd249973052d41cf74cebb7920008982bc04cfea72d53060": "The `Passage` class defines a container for storing textual passages along with associated metadata such as document ID, embedding, tags, and location information. It includes normalized versions of embedding, text, folder path, language, and tags, which are computed during object initialization. The class provides properties to access these normalized values and a deduplication key based on document ID, section, page, and lowercase normalized text.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:RetrievalIndex:2289ef273d849253db7cb5edc7e942faa30ef615e40ada65907f673b676047eb:71ef0b37501ef0989ffbe2bd967110a3e5084d5f932064e4b08f3ecd5dc8ab97": "The `RetrievalIndex` class manages and retrieves passages based on semantic similarity using vector embeddings. It supports adding, removing, and clearing passages, and performs search operations that return top-k results while applying diversity filtering and conflict detection. The search method uses cosine similarity for scoring, deduplicates results, and constructs previews of passage content.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:RetrievalScope:344438a325627c67e9b2152518f583a4683313e5973cc9bf36c14dab0b2203ff:2d73fe394e3af1e7be76a4c0bdd335a1800ab146101b09e391d45aa4a6a868ba": "The `RetrievalScope` class defines a set of constraints for filtering retrieval results based on tags, folder paths, time ranges, and language settings. It normalizes and stores these constraints during initialization and provides a `matches` method to determine if a given passage satisfies all specified conditions. The class supports recursive folder matching, inclusive time range checks, and case-insensitive language filtering.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:RetrievedPassage:23013187e82edafbf391a62a6e78a833c21d75085579063a680eb89fa9c5bce9:935617b67ab9d31003de1d1f8f55e6f66c41f772196e7bf36f03400e9da3a64d": "The `RetrievedPassage` class represents a structured result payload containing retrieved passage data, including the passage itself, its score, preview text, citation information, and conflict details. It provides a `to_dict()` method that serializes the object's attributes into a dictionary format, incorporating passage metadata, language, tags, folder, and creation timestamp when available. The serialized output includes fields such as passage ID, document ID, text content, score, preview, citation, metadata, and conflicts.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:__init__:50385a90ebde182101a3c4dcd088e45900f948a0cb7b073848ffefa5ee1084e5:87367d81c04db23bb41e5fb828bc22d9f6c16400daa5d3c29cf9e9f5af6c7a6e": "Initializes the `RetrievalIndex` instance with an empty dictionary to store passages, where each passage is indexed by a string identifier.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:__post_init__:0ded100f2e51ef54937c41d2848447a5f502de2fa1e6b114d03a174435dfd553:c463c17ec8c9dd0dc3a9c4a013b35eedd507e4bc555451a771fb3ad73383f9c9": "The `__post_init__` method initializes and processes various attributes of the `Passage` instance after its construction. It normalizes the embedding vector, text, and folder path, converts the language to lowercase, creates a frozen set of integer tags, and ensures metadata is stored as a dictionary.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:__post_init__:5f467581c05a578a231012ee4faf15c0842fd0426350e92efb9ae2f39c4b30ae:6581aae4d32fff7f62f74e1b53c0d181e2d624ab8d77758c13bd6203b99e1021": "The `__post_init__` method initializes and normalizes the filtering criteria defined in the `RetrievalScope` class. It processes the `tags` and `languages` attributes by converting them into tuples, then creates frozen sets for efficient lookup. The `folder` attribute is normalized using a helper function `_normalise_folder`. The method ensures that all filtering components are structured consistently for use in the `matches` method.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:_apply_diversity_filter:7e0fdee78432dfc2635a1a088a21e369bcc6c32874d1d3a0bc480074999e2221:02e26f5e4893278af4d6cf598ffd1c5fcf6e44c422e2f8313c59c4917aad95c9": "The function `_apply_diversity_filter` filters a list of scored passages to ensure diversity among the top-k results based on cosine similarity of their embeddings. It accepts a list of candidates, a number of top results to return (`top_k`), and a diversity factor between 0 and 1. If the diversity factor is zero or less, it returns the top-k candidates without modification. Otherwise, it iteratively selects passages that balance high score with low similarity to already selected passages, adjusting the selection score by a weighted combination of the passage's original score and its maximum similarity to selected items. The result is a list of up to `top_k` passages that are both highly scored and diverse.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:_build_preview:b9019e3d53f9e93084dfe72bee9bbaa42296c98e920cb10ea3987795981c4f70:59f0c6a3297cb891c7d0cdc5f93ee54728158b71ea90ebe9e2548af3369d06b6": "The function `_build_preview` generates a truncated preview of a given text string, ensuring that the output does not exceed a specified character limit. It first removes extra whitespace by joining the text into a single line. If the cleaned text is within the limit, it returns the text as-is. Otherwise, it finds the last space before the limit to avoid splitting words, truncates the text at that point, and appends an ellipsis (\"\u2026\") to indicate truncation. The default limit is 280 characters.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:_cosine_similarity:e4653985894026677155f35147f5a374ca8febf436886a003e087a6a77b83ad5:4c9f9fc898b11310129ac1a2a3276a870e265055e51b40f2c058c2e29d23d252": "The function `_cosine_similarity` computes the cosine similarity between two pre-normalized vectors represented as sequences of floats. It calculates the dot product of the two input sequences and returns the result as a float value. This implementation assumes that both input vectors are already normalized, thus skipping the normalization step typically required in cosine similarity calculations.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:_detect_conflicts:a94da3b3e3e3d6498197229bf24348482053bac8aa6d50865897ee62cad34923:bbc7979220d76a6c416b80d04765a8de057ed9d301910875a31680e480b1359a": "The function `_detect_conflicts` identifies conflicting passages within a collection based on matching \"statement\" and differing \"stance\" metadata values. It groups passages by statement and stance, then for each statement with multiple stances, it records opposing stances as conflicts. Each conflict entry includes the passage ID, stance, and document ID of opposing passages. The result is a dictionary mapping passage IDs to lists of conflicting entries.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:_normalize_vector:a40f46c6ad5b036e4304413329f3deb4c193bcd2076b59229c95f997f9981033:a813710ac4962609d48a0c5cd2b243957a5729c6a42b3ba0944971ebb789c42f": "The function `_normalize_vector` computes a unit-length vector from a sequence of numerical values. It accepts a sequence of floats, converts each element to a float, calculates the Euclidean norm (magnitude) of the vector, and then normalizes the vector by dividing each component by its magnitude. The function raises a `ValueError` if the input is empty or if the calculated magnitude is zero, ensuring that only valid, non-zero vectors are processed. The result is returned as a tuple of normalized float values.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:_score_passages:0135c03c0db496e3336eba93f3c7cbf77896a955eb7f38f7e526db1074500e32:d9277dfb7813fe7227108e748f549abb96346072c5a8920f089de51c38302867": "The function `_score_passages` computes similarity scores for a sequence of passages based on a normalized query embedding. It uses cosine similarity to calculate relevance scores and generates previews for each passage. The function ensures deduplication of passages by using a unique key derived from each passage's properties, retaining only the highest-scoring version of any duplicate. The result is a list of `_ScoredPassage` objects, each containing the passage, its score, and its preview.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:add_passage:37b12fd818c08de4be39f9061f5f1416de1a40d6b1c92e6fddfb75030fe3c500:c0e29e656997c053548ae656a9ab3aeb1a7045a9616163eb7a92f5ed8e51c38f": "The `add_passage` function stores or replaces a passage in the vector index. It takes a `Passage` object as input and updates the internal `_passages` dictionary with the passage, using the passage's `passage_id` as the key. If a passage with the same ID already exists, it is replaced; otherwise, the new passage is added to the collection.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:clear:b97f02216cdf39488c82017ebbe5b1902b2f974b6885c2bff8f7372cf3797f67:ad0326fa467e26b1fdc1eaa239762ab4360b777431d34e1848e416d37aad6544": "The `clear` method removes all passages from the retrieval index by clearing the internal `_passages` collection.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:deduplication_key:0937f7b290f5b712ede999e8d2a9a48b5a0dc4759565c30751d383c7fcaa658d:53aa1a42c229d0e7edd2ddce14358f7b228d8ef2b8727a1b73b049b3c1f19508": "The function `deduplication_key` computes and returns a tuple used to identify unique passages within a document. The tuple consists of four elements: the document ID, the section identifier, the page number, and the lowercase version of the normalized text. This key is designed to facilitate deduplication by ensuring that passages with identical content across the same document, section, and page are recognized as duplicates.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:matches:01a50e09b733c8cbd0aaeed7d72cfdf8e094fd558a7e837e16bc1729af298a67:5c2b9db74415bb74a352ae68d61dc6319fcf4f7a713113d91bd7a4a64e51e7b7": "The `matches` method evaluates whether a given `Passage` object satisfies all the filtering criteria defined in the `RetrievalScope` instance. It checks the following conditions in sequence:\n\n1. **Tags**: If tags are specified in the scope, the passage must have all of them (i.e., the scope's tags must be a subset of the passage's tags).\n2. **Folder Path**: If a folder path is set, the passage's normalized folder must match or start with the specified folder, depending on whether the search is recursive.\n3. **Time Range**: The passage's creation time must fall within the defined `start_time` and `end_time` range, if specified.\n4. **Languages**: If specific languages are required, the passage's normalized language must be included in the list of supported languages.\n\nThe method returns `True` only if all applicable filters are satisfied; otherwise, it returns `False`.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:normalized_embedding:47109e7c13d6218e8f53f8a0ce2809855e3c09c517d15a4d58e64cb4cefa14a0:04dcbf5638af61db055e481a9d8d4182f95a42035126960c8d245f852a46b38b": "The function `normalized_embedding` is a property method within the `Passage` class that returns the normalized embedding vector associated with the passage. The normalized embedding is stored as a tuple of floating-point numbers and is accessed read-only through this property.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:normalized_folder:2b25c72bb1c32b9f15368a91718c6e16da81c8fe2b1c79792fbe9ea64507b2ca:70abf47a0ac6a4770aefc004fade259607faf488666f3e2d5276c5aa801be897": "The function `normalized_folder` is a property method within the `Passage` class that returns the normalized folder path associated with the passage. It provides read-only access to the private attribute `_normalized_folder`, which stores the folder path in a standardized format. The method may return either a string representing the normalized folder path or `None` if no folder path is defined.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:normalized_language:cbbe2f1c25e8ca88d4479d81fc38993f89e6659fc0022f3cbd987f9431f96192:6ee7cf66b548080c8f3846f3b4223914936b7f3cbf4e031ec5143ffe5225963e": "The function `normalized_language` is a property method within the `Passage` class that returns the normalized language attribute of the passage. It provides read-only access to the internal `_language` field, which stores the language information associated with the passage. The method signature indicates that it can return either a string or None, allowing for cases where language data may not be available. This property ensures consistent access to the language value while maintaining encapsulation of the internal attribute.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:remove_passage:aee6db4fd6ee9ee002d397e0d53c09f70d3e14bc43667515d51c38589c92e6c7:c611c7b82129f4f89bd330fb500bcae1a2f3cad210cd0a0d655ad9f1ee687b06": "The `remove_passage` function removes a passage from the `RetrievalIndex` instance by its unique identifier. It takes a string argument `passage_id` and deletes the corresponding entry from the internal `_passages` dictionary, if it exists. If the `passage_id` is not found in the dictionary, the operation has no effect due to the use of `pop` with a default value of `None`.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:search:428afa21b252d42702eef1c0b8a80f9f8c0d760b93d519c8d7d29d28e0c3e503:38bbda754b0a7f3dc56d716da8ef5649b8adda601d1c5562cad7c8d5a2fd67b1": "The `search` method retrieves the top-k most relevant passages from the index based on a query embedding, applying scope filtering, scoring, diversity adjustment, and conflict detection. It returns a list of dictionaries representing the retrieved passages, each containing the passage content, score, preview, citation information, and any conflicting passages. The method supports optional parameters for controlling the number of results, diversity of results, and filtering by scope. If no passages match the scope or scoring yields no candidates, it returns an empty list.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:tag_set:f46a7408793260acb584be8c19e69791197aba75bfd1524bb7273992ee150399:8dfaf0b0670d62d52c66c16f1efe2ae97de9eced2c508c8287a3ea248b1ff709": "The `tag_set` property returns a frozen set of integers representing the tags associated with the passage. This provides read-only access to the passage's tags, ensuring they cannot be modified after the object is initialized.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:to_dict:5ec7302c0f6172c833b8e8ae9af58fc31d5fbf478f15e9ff06dd1470902c339f:9369c79f85925c8831d8ac5f62ed07cf2eace8be6fa8c551af23ca40ecd1e7d0": "The `to_dict` method of the `Citation` class serializes the citation's attributes into a dictionary format. It returns a dictionary containing the keys `\"document_id\"`, `\"page\"`, and `\"section\"`, with their corresponding values from the instance variables `self.document_id`, `self.page`, and `self.section`.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\index.py:to_dict:b6793ff720bc67f3f2c16f60fea19486062fbd5b3e6fd48df41189e410f19eb8:b078c6dfa6b9d6098e9bd49a08de86b0565296a39bb6f6f8b7c7bc3bac7dd2b9": "The `to_dict` method of the `RetrievedPassage` class converts the passage and its associated retrieval details into a dictionary. The dictionary includes core fields such as `passage_id`, `document_id`, `text`, `score`, `preview`, `citation`, `metadata`, and `conflicts`. Additional optional fields like `language`, `tags`, `folder`, and `created_at` are included in the output only if they are present. The method structures the output to encapsulate both the passage's content and retrieval-specific attributes in a standardized format.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\search.py:SearchService:b50439c64918e3b6f5ddf8d01d40bdcab336072bff622752c2cb3cb769b498e4:bcfeaaa75de2b7bae37767dbf0e876243a4232670795349edd7e30fcacf069fd": "The `SearchService` class provides methods to search and retrieve document snippets based on keyword queries, supporting scoping by tags, folders, and chat context. It integrates with ingest, document, and chat repositories to fetch and structure search results, including highlights and contextual chunks. The service includes logic for resolving query scopes, normalizing paths, tokenizing queries, and handling fallback search strategies when initial attempts fail.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\search.py:__init__:895dd861514acc00dd1afd8ee20a17aa3e5e68ba64c22a84f38f551f8360de3a:5afd45b154b1f2354bb61914744adc95a386856db6c9732c06f1187916d70c1e": "Initializes the `SearchService` class with instances of `IngestDocumentRepository`, `DocumentRepository`, and `ChatRepository`. These repositories are stored as instance attributes for use in document ingestion, management, and chat history operations.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\search.py:_build_path_index:3a7c06ee336a164e94a4e78154641eef8e69ca2d9cd5248b7386a7de218c487c:485943695bf258d334c418675d25836f113ffd00b7ae737468c921cc9e5c6a16": "The function `_build_path_index` constructs a dictionary index keyed by normalized file paths, mapping each path to its corresponding document metadata. It iterates over an iterable of document dictionaries, extracts the `source_path` field from each document, normalizes the path using the class's `_normalize_path` method, and stores the document under the normalized path in the index. Documents without a `source_path` are skipped. The resulting index enables efficient lookup of documents by their file paths after normalization.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\search.py:_document_identifiers:4ce25d0b5a065ddccb0f88bf50b2a93a731cb1f45f1cac789b74743342cf6152:d1f867d97ed5d4d1487e0a01f63580ded0a11a41a5b3b19644e0f84a73e480f4": "The function `_document_identifiers` extracts a set of unique string identifiers from a document dictionary. It collects the document's ID, source path, and title, normalizing the source path for consistency. The function ensures that each identifier is added to the set only if it is present and non-empty, returning a set of strings that can be used for deduplication or lookup operations.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\search.py:_normalize_folder:4e647008c4ec388985e43ca3025c4e65886d6ba2261492a62c52584becbc6675:2dd9c750e5633077f64104b9a2c12b485804c9620073ed5b151a5a7a8061b879": "The function `_normalize_folder` takes a folder path as input, which can be a string, `Path` object, or `None`, and returns a normalized string representation of the path. If the input is `None` or an empty string, it returns `None`. Otherwise, it converts the input to a `Path` object and then to a string, ensuring consistent path formatting.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\search.py:_normalize_path:83615b25d9388cd74f9871f2feda18a5fb936fb6faf609fecc98369af7968e12:28a88aab32f016d118ac4a298f3e0e37db80c1ae2d0417d13b5b63861df22c90": "The function `_normalize_path` takes a path as input, which can be either a string or a `Path` object, and returns a normalized string representation of the path. It achieves this by converting the input to a `Path` object and then to a string, ensuring consistent path formatting.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\search.py:_resolve_scope:a0406e562ff55ab91552e5b54ed6724fd6fb18442504e89c3d9477125fb84cdf:371d5c23e034b1f59063c2f18d4417439b3e3dfaca24424bc050fd216f013821": "The function `_resolve_scope` resolves and returns the effective tags and folder scope for a search operation based on provided parameters and stored chat context. It accepts optional `chat_id`, `tags`, `folder`, and a `save_scope` flag. If `chat_id` is provided, it retrieves the previously stored query scope for that chat. It then determines the effective tags and folder by prioritizing explicitly provided values over stored ones. If `save_scope` is True and `chat_id` is provided, it updates the stored query scope with the current explicit values. The function returns a tuple of the resolved tags and folder, which may be `None` if not specified or retrieved.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\search.py:_search_with_fallback:6f68040dff7857700cca4e556347e7b1a3ea4476a37c46bd39cdc187d1b3b78b:502d45fa1eac1342f38b0d27b13e7525f003aec5c3fe6cf089ac146c09a4c054": "The function `_search_with_fallback` performs a search query against an ingest index, attempting multiple variations of the input query to accommodate strict MATCH syntax limitations. It normalizes the input query, generates alternative search strings using tokenization and wildcards, and iterates through these candidates to find matching results. If a query fails due to an operational error, it skips that attempt and continues with others. The function ensures no duplicate attempts are made and returns the first set of valid results found, or an empty list if none are found.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\search.py:_tokenize_query:fec9ae9a69388175514111553bb023951e390fd013be99df99eecaad3b343f97:9db4e0960b432b2421faf850b46d2fb31ff85043e2f59426a0a7bd60211ad315": "The function `_tokenize_query` extracts significant terms from a query string for use in relaxed fallback search scenarios. It identifies tokens using a predefined pattern, filters out short or stop words, and ensures uniqueness of the resulting tokens. The output is a list of lowercase, filtered, and deduplicated tokens.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\search.py:collect_context_records:da2b45ec73def8c5b93c7a8199d8e05ceb915ccfee27e8f7a5017808eb2babd7:0be82c2adb3ca3f6d87c41f6117c2f233901cb222a13b34c91279557c50984c8": "The `collect_context_records` method retrieves structured retrieval records for a given query within a specified scope. It filters documents based on project ID, optional tags, folder path, and recursion settings. The method builds an index of candidate documents, applies inclusion and exclusion rules based on document identifiers, and searches for relevant chunks with fallback logic. It ensures no duplicate chunks are included in the results, limits the output to a specified number of records, and returns a list of context records containing document metadata, chunk data, text content, highlights, and relevance scores.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\search.py:retrieve_context_snippets:fe24c6eb5c5899abd60736824cdfcf61a9f0b14aeb65075c99a6ce57250cde86:4c7590473682de2a56487ca98e09412cfc98047cc7bf5d52086f779c261ab5a9": "The `retrieve_context_snippets` method retrieves a list of formatted context snippets based on a search query and specified filters. It collects relevant records using the `collect_context_records` method, then iterates over these records to extract document and chunk information. For each record, it constructs a snippet by combining the document title (or file name) with the chunk's text content. The resulting snippets are returned as a list of strings, each prefixed with the document label followed by the context text. The method supports filtering by project ID, tags, folder path, and identifier inclusion/exclusion criteria.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\retrieval\\search.py:search_documents:ede35bfe5e5dd9b92ff93ff54f8199e4660fd32a785f985ba837a3be15289d64:6680b994d6ef3817f2d28d03bdf0ee975e5e93a01e1a135785c206dc9c6a91a0": "The `search_documents` function performs a search within an indexed document corpus, returning a list of relevant document records based on a query. It resolves the search scope using provided tags and folder filters, retrieves candidate documents, and builds a path-based index for efficient lookup. The function iterates through search results, normalizes paths, and avoids duplicate document entries. For each valid result, it constructs a record containing document metadata, highlighted text, chunk information, and relevance score, up to the specified limit. The function supports optional chat context, recursive folder traversal, and scope saving.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\backup_service.py:BackupService:f23f5464d9298d0dcc9cd8c232789f143a226848a827244ffb86914e91bd2fb3:d5a234004a5b28a83bbd2d38dd7181a3bf9b706d4d63d7dd1da5a514806900bd": "The `BackupService` class provides functionality to create and restore compressed archive snapshots of application data, including database exports and project storage files. The `create_backup` method generates a ZIP archive containing a database dump, a manifest file, and derived project data, organizing the backup with a timestamped filename if the destination is a directory. The `restore_backup` method extracts a provided backup archive, validates its manifest, imports the database, and restores project storage locations while updating the active project configuration.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\backup_service.py:__init__:b70b5b1bcc66f3b37e43458627f293dd8f2b7f288b9572061b4b27a4e51cc0fc:6497d732c654e3c80ccd29df4cfc304f8558f439e931c4d006d2c0d037207d72": "Initializes the `BackupService` instance with a reference to a `ProjectService` object, which is stored in the private attribute `_projects`. This service is used to coordinate backup operations and maintain project consistency during backup and restore processes.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\backup_service.py:create_backup:faad5eb56689728ae91a4477f632092353ba28f27aa8e9062db2ce2b986a2fcf:9502eb3cc86ecdb4199efa0c4c4b3163d864c6ccb38d8f16b7a722fe6d5937f9": "The `create_backup` function generates a ZIP archive containing the application's database, project data, and a manifest file. It accepts a destination path, which can be a directory or a file name, and ensures the destination directory exists. If the destination is a directory, it creates a timestamped ZIP file within that directory. The function collects storage locations for all projects, exports the database to a temporary location, and writes a manifest with metadata including the schema version, active project, and project storage paths. It then packages the database, project files, and manifest into the ZIP archive using compression. The function returns the path to the created backup file.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\backup_service.py:restore_backup:abf6777bc56652e035979928138e98aac8d40880f962a49720e7e721177e3e74:b62ce86f48704b98b8a3392812a86428898a60ba3ee9266dac2495da256f239e": "The `restore_backup` function restores an application backup from a specified ZIP archive file. It extracts the archive contents into a temporary directory, validates the presence of a manifest file and checks the schema version for compatibility. The function imports a database snapshot into the application's database manager and then processes project storage locations based on the manifest. If specific storage locations are defined in the manifest, it copies project data from the archive to their respective paths, updating the project service with new storage locations. If no specific locations are provided, it restores all projects to the default storage root. Finally, it reloads the project service to reflect the restored data and configurations.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:AssumptionDecision:3c886dea8943e02842c75b6c3abe7eb3580b03116dde51c1849777d1e5099b55:19d00082cee212148f92a44669346fa1011793c70622fd7d1b5625a6966a2710": "The `AssumptionDecision` class records how ambiguity in a turn was resolved, with a mode indicating whether clarification occurred, an assumption was made, or the handling was unspecified. It includes optional fields for documenting the rationale behind the decision and any clarifying question that was asked. The class is designed to capture the decision-making process around ambiguous input during conversation turns.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:ConnectionState:f90820ee00922ffba0d1176e5d7737067e2fd374f34a4ba36ebc6de99daa9a82:aa5a79cc775df88e18a2c5a5a29ec96bb6097893473cebc8846a819d0ac2fc6f": "The `ConnectionState` class defines a data structure for representing connection status events, containing a boolean field `connected` and an optional string field `message`. The class is implemented as a simple data container with type hints indicating that `message` can be either a string or None. This structure serves to encapsulate the payload for connection status notifications.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:ConversationManager:1ac78a8c6110549f4a5a6b4cdae6681cf291dc0db2e6854b1569e69fb371a13f:merge0:111a5529dd98eb8e295caa2a3388f9fecbdaf2b71050c19d314cac12d549a334": "The code defines a `ConversationManager` class that manages conversation history and orchestrates requests to an LMStudio client, maintaining internal state for conversation turns, connection status, and system prompts. It handles the construction of messages, tracks conversation history through `ConversationTurn` objects, and supports both simple and complex query processing with context snippets, reasoning verbosity, and custom request options. The class provides methods for checking connectivity, asking questions, managing connection listeners, and processing structured reasoning data from model outputs, including extracting bullet points, plan items, assumption decisions, and self-check results. Additionally, it implements a categorical data management system that supports missing values, custom formatting, and proper serialization/deserialization of categorical information with methods for adding, retrieving, and manipulating categorical entries while maintaining internal consistency across different data types.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:ConversationManager:1ac78a8c6110549f4a5a6b4cdae6681cf291dc0db2e6854b1569e69fb371a13f:part0:b1a1170e33669a6724baf9ceadd9677d94fa190e227842e951d3df8d4f1a3bf7": "The code defines a class that implements a data structure for managing and processing categorical data with support for missing values and custom formatting. It provides methods for adding, retrieving, and manipulating categorical entries while maintaining internal consistency. The implementation includes functionality for handling different data types and ensuring proper serialization and deserialization of categorical information.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:ConversationManager:1ac78a8c6110549f4a5a6b4cdae6681cf291dc0db2e6854b1569e69fb371a13f:part1:071a34e4f7c70d0c17470dd6c4ab824364df9db34de305e54a164d6fde64ba03": "The `ConversationManager` class manages conversation history and orchestrates requests to an LMStudio client. It maintains a list of conversation turns, tracks connection state, and supports both single-shot and dynamic planning-based question answering.\n\nKey features include:\n\nThe class handles both simple and complex query processing, supporting context snippets, reasoning verbosity, and custom request options. It tracks conversation history through `ConversationTurn` objects and provides methods to check connectivity, ask questions, and manage connection listeners.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:ConversationManager:1ac78a8c6110549f4a5a6b4cdae6681cf291dc0db2e6854b1569e69fb371a13f:part2:39f3ec59c217788964aca69275b6c7e04f683ee128c574a2674f0d909d2ffb10": "This code defines a `ConversationManager` class responsible for managing conversation history and orchestrating requests to an LMStudio backend. It handles the construction of messages, tracking of conversation turns, connection state management, and processing of reasoning artifacts from model responses.\n\nKey functionalities include:\n\nThe class maintains internal state for conversation turns, connection status, and system prompts, while providing methods to update connection status, emit connection events, and manage conversation history. It also includes utility methods for processing structured reasoning data from model outputs, such as extracting bullet points, plan items, assumption decisions, and self-check results.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:ConversationTurn:80b3497936b9c3a9ae012c2fad0239331425324cf75789a86b322256ee592db2:b6fe4a2355c9f2aca9ce779bbf5daa10d9fb75569d335c09864d38d8795e829e": "The `ConversationTurn` class represents a single exchange between a user and an assistant, capturing the question, answer, and associated metadata such as citations, reasoning artifacts, response mode, and timing information. It includes properties to access structured reasoning components like bullets, plan items, assumptions, assumption decisions, and self-check results from the reasoning artifacts. The class is designed to store and expose detailed information about each turn in a conversation, including token usage, latency, and raw response data.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:DynamicPlanningError:f01b01420b7ac253b36238db227b50b3f088f279b5f74ce6929d076e4749b939:a4ebbb59fee798f3a7e93c8982ddaf42e67096bb10684347a0bcfca435045867": "This code defines a custom exception class called `DynamicPlanningError` that inherits from Python's built-in `RuntimeError`. The exception is specifically designed to be raised when dynamic planning processes fail to complete successfully. The class serves as a specialized error type to handle planning-related runtime failures in a structured way.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:PlanItem:2b838ab3ca673525d76ae595b48ed32f627b2f10b8d30e71e44719b1f7835be9:5c1864cfe93d9c51c2a6c379dadd6c6dae4e09f9dc0b4535ecdc8e285adf26dd": "The `PlanItem` class represents a single entry in a plan, containing a description and status field with a default value of \"pending\". The class includes a property `is_complete` that returns a boolean indicating whether the item's status indicates completion. The status check considers multiple possible completion states: \"complete\", \"completed\", and \"done\".",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:ReasoningArtifacts:6955c8c429b7d456267b09a84aca07b39ea26df7b6eeac32046b99dcec4fc6fb:7a75ef53ad57623c33dd18a47708f1e4fc5f582347e8e1286fd3c50940b213e8": "The `ReasoningArtifacts` class defines a structured data model for organizing reasoning components extracted from LMStudio metadata. It includes fields for summary bullet points, plan items, assumptions, and optional self-check and assumption decision results. The class uses field definitions with default factory functions to initialize empty lists and None values for optional fields.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:ReasoningVerbosity:5c05228e18b28a0fb33cbe98b27c3d41973d50ac75882bcf356ea2977287f69c:d88012756849bdae379b582f02becc0cefb7d9a5935887673dda07d4a7fd7cd8": "The `ReasoningVerbosity` class defines an enumeration of verbosity levels for structured reasoning output, with values `MINIMAL`, `BRIEF`, and `EXTENDED`. It includes a method `to_request_options` that converts each verbosity level into a dictionary of LMStudio request options, configuring settings such as verbosity, summary inclusion, assumption inclusion, self-check inclusion, plan inclusion, and limits on bullets and plan items. The configuration varies based on the verbosity level, adjusting the amount of reasoning detail and structure included in the output.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:ResponseMode:8901e7b3a44c4fc64a5df44b5bcf30a1ccf64488cc317812330110c2c80f3aac:50f1da032876aeb13380154f590758d58e4af19af13337d0963b718380f32b84": "The code defines an enumeration class `ResponseMode` with two possible values: `GENERATIVE` and `SOURCES_ONLY`. This enum is used to specify the desired format or structure of assistant responses. The documentation indicates that these modes control how the assistant should shape its output, with `GENERATIVE` likely producing synthesized content and `SOURCES_ONLY` restricting responses to referenced sources.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:SelfCheckResult:38408b30b7821b8e8f619a224c440a26db7c07c71c2f1d9a237ad3979661515b:10b9f68d025b9a98e4680f8bbcab11a144c2bb781d4e2ca1742906e04790d4ce": "The `SelfCheckResult` class represents the outcome of a model's self-check routine, containing a boolean indicating whether the check passed, a list of flags, and optional notes. The class defines a `passed` attribute to store the result status, a `flags` attribute initialized as an empty list to track issues, and a `notes` attribute for additional information. The implementation uses a dataclass field with a default factory for the flags list to ensure proper initialization.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:StepContextBatch:49afab0290d36a7211a4a47aa92f6f3f84e1516961f13465e02ba00a76733f81:e00b862f716a391e3f20e499e797ef74fd547a9aeee69cc46476bb0b980f2e7f": "The `StepContextBatch` class defines a context payload used for a single execution pass of a plan item, containing a list of string snippets and an optional list of document dictionaries. The documents field is initialized as an empty list by default. The class serves as a data structure to hold execution context information during plan item processing.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:StepResult:dc4cc2f8d253260ac9cdc85e529e583a2f897c33122ee3ed7c9b52a36bbf72d4:a38e005892730ee39d240fd719beb1f1216d46d739dd6ad21fd6cb89399e87f9": "The `StepResult` class defines a data structure that aggregates the output of a single step in a planning process. It includes fields for tracking the step's index, description, and answer, along with optional supporting elements like citations, contextual information, and citation indexes. The class uses default factory functions for initializing mutable fields such as lists.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:__init__:e32af463ae8d8859d2f31057fccb9e6ea2668a3e95ba281eb82ba259eb4934a4:7f97e62de86acb1ec25c9f6cf11beaf22870ec0dfa5ffb4a6dc9e789292d0207": "Initializes a `ConversationManager` instance with an LMStudio client, optional system prompt, and context window size. Sets up conversation tracking with an empty turn history, initializes connection state as connected, and prepares listeners for connection status updates.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:_aggregate_citations:910e87bebfc098ae162c97ed2413922ec920d4d5d7f39495bf0807d545db2ab5:a4333246ffc2ed8c1a1c6d7453c91f619484304767202ee2eacacb8f58a1a06e": "The function `_aggregate_citations` processes a sequence of `StepResult` objects to collect and deduplicate citations. It returns a tuple containing a list of aggregated citations and a dictionary mapping citation keys to their indices in the list. For each citation in the input results, it checks for duplicates using a key generated by `_citation_key`, and if a citation is new, it adds a deep copy of it to the aggregated list and records its index. It then updates each citation with a sorted list of step indices from which it originated, ensuring that duplicate citations are merged and their source steps are tracked.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:_ask_single_shot:0a8f6b171a4d32c63f90d17b5d11f13c04bf4e6cf8480ce83319a63c25d7f32c:e3c4d7894af915b4c47e3a2525b27a1a2d87f0f38f7650cc849cca20d53da5f9": "The function `_ask_single_shot` performs a single AI conversation turn by sending a question and optional context snippets to an LMStudio client for processing. It constructs the necessary messages and request options, handles potential connection errors, updates the connection status, and registers the conversation turn with the response and associated metadata. The function returns a `ConversationTurn` object containing the processed response and related information.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:_ask_with_plan:223461a26b60750e9d4140ca2bd453e54bb22a868fc4097e58b75a49150d5fdc:7267f3b4e537ae27afb7aa3cb8370b802a7b6b1cb3524823ce971575db366a97": "The function `_ask_with_plan` executes a multi-step conversational AI response using a dynamically generated plan. It takes a question and processes it through a series of plan items, each potentially involving multiple context batches. For each plan item, it builds prompts, retrieves context via a provided `context_provider`, and sends messages to an LMStudio client for generating responses. The function aggregates citations and reasoning artifacts from each step, handles errors during context retrieval or model interaction, and constructs a final answer by combining results from all steps. It updates the conversation history with a `ConversationTurn` object that includes the full reasoning trace, plan execution details, and aggregated citations. The function supports dynamic planning, deduplication of citations, and maintains connection status with the LMStudio client.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:_build_messages:6e8da4fe7fc51cdb08e7425f34a4dfcc9e967a322f7a7f3f234572fb3a751333:692e0e440b878a9504ab6e1de3e6c4c36045216890ea4fb1ee8fc842306313be": "The function `_build_messages` constructs a list of message dictionaries used for AI conversation input, based on the current conversation context and an incoming question. It begins by adding a system prompt if one is defined. It then appends recent conversation turns from the history, alternating between user questions and assistant answers, up to the specified context window size. Finally, it adds the new user question, optionally including provided context snippets. The resulting list of messages is returned for use in an LMStudio client request.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:_build_request_options:c8b2da721e881063621aaa75f2195d11471fa2e92322e656da0b3a4ae8b555ce:a4279575e77845d87af0e85b90c5ae104331867bec3fb4e61e28294fcdee476e": "The function `_build_request_options` constructs a dictionary of request options for an AI conversation based on input parameters. It incorporates reasoning verbosity settings, response mode, and additional options, while handling nested dictionaries such as `reasoning` and `retrieval`. The function ensures that the question is normalized and assigned to the retrieval query if needed, and returns the assembled options dictionary.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:_build_step_prompt:e88af0735da16fb146b49f4b2ae99341c3f4289a894cf0c4c76042587536384b:06b9de674dfa2ae5c9c7c9cc0e12b38df00aae33e1b2310aee5c6ea9ac081d69": "The function `_build_step_prompt` constructs a prompt string for a specific step in a multi-step reasoning process. It takes a question, step description, step index, total number of steps, and pass index as inputs. The resulting prompt includes a prefix indicating the step and pass number, the original question, and instructions to provide a concise factual finding without citation markers. This formatted string is returned for use in generating step-specific responses during dynamic planning conversations.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:_citation_key:28c19a4b46ae15b85b0eea06cd0bf7dec6d2e41953e6ef37f70ead6cff8533cb:e9b832829b27b86fa945a3b12fcf05ccef957a5ab3638790362fa9faf708a957": "The function `_citation_key` generates a consistent string key for a given citation object. It attempts to serialize the citation using `json.dumps` with sorted keys and a default string conversion for non-serializable objects. If serialization fails due to a `TypeError`, it falls back to converting the citation directly to a string. This ensures that citations can be uniquely identified and compared, regardless of their original data type or structure.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:_coerce_str_list:f44f02f40b82a0bf2cabd80493728ef6e8f045c53b39cd2e81cf42276136c2a7:86ad0bf28d9bef8abc86d00406b868cbfe5e424da50d6faacb9fdc34dd40ef23": "The function `_coerce_str_list` takes a value of any type and converts it into a list of strings. If the input is a string, it is stripped and returned as a single-element list, or an empty list if the string is empty after stripping. If the input is a sequence (such as a list or tuple) but not a string, bytes, or dictionary, it iterates through the elements, strips each string element, and includes only non-empty strings in the resulting list. Any other input type results in an empty list.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:_collect_citation_indexes:ae8b5119c587bef278c33bffd33b3374e64bfce8daf8596c3d2f2d2360ffcf0e:3a979ec536d8e9620244675c5268bb4bef25ddb21f68dd5f7f38f611fe1d2c37": "The function `_collect_citation_indexes` takes a sequence of citations and a dictionary mapping citation keys to indexes. It processes each citation by generating a key using `ConversationManager._citation_key`, checks if the key exists in the provided `index_map`, and collects the corresponding indexes. The resulting set of indexes is then sorted and returned as a list. This function is used to map citation references to their respective index positions within a document or corpus.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:_compose_final_answer:f0a15becdba01db7a185b741e9ae659bf763a8eddf8c827eada6499975c8e928:f235232a9c434134e357b3a20aff57d965487ef0905350a97a01b5155cd39ff3": "The function `_compose_final_answer` takes a sequence of `StepResult` objects and constructs a final answer string by processing each result. For each result, it uses the `answer` field if non-empty, otherwise falls back to the `description` field. It then appends citation markers, formatted as `[index]`, based on the `citation_indexes` in the result. Each processed text block is joined with double newlines to form the final concatenated string.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:_deduplicate_citations:01bdc0a8ae102334c341f4c460e13ec248e3fa091da0e670c7341a901f3f5f8b:63ca5f18ed3fdf48cf7b056485be8c9e82e4bb138ef10972a635bc9252a09a84": "The function `_deduplicate_citations` takes a sequence of citations and returns a list of unique citations based on a deduplication key. It iterates through the input citations, computes a key for each using `ConversationManager._citation_key`, and skips duplicates by maintaining a set of seen keys. Each unique citation is added to the result list after being deeply copied to avoid reference issues. The function ensures that the returned list contains no duplicate entries according to the defined key.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:_deduplicate_preserve_order:6bb8efb0c55555e93fe5b24041b6c28eb44420bc36b1665e178a625d31804815:fdece94614a4e2b4c3d3c741f4282c902b3f1e178ef45bee25a2852093f85c22": "The function `_deduplicate_preserve_order` takes a sequence of strings and returns a list of strings with duplicates removed while preserving the original order of elements. It uses a set to track seen values and appends unique values to a result list in their first encountered order.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:_emit_connection_state:c93aba92b392035384276ef89323b887558fbb5ebc9aedf48dd0966110a2c439:fbb0267e4d382d8ac4778446691a9fdf430b9ea28b02e2a7d69db7eff6983c24": "The function `_emit_connection_state` notifies all registered listeners of the current connection state. It retrieves the current connection state from `self.connection_state` and iterates through a copy of the listeners stored in `self._listeners`, invoking each listener with the current state. If an exception occurs during listener invocation, it is caught and ignored to prevent disruption to other listeners.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:_generate_plan:c9eec76d540160745b620841bf67b574b835e35cac6e81412a76bf8461690b1d:a48b0b95bbae67f27234af43eb64c7a071fbcf68eb20710371e4363d553c87d5": "The function `_generate_plan` takes a question as input, normalizes it by stripping whitespace, and splits it into segments using punctuation marks such as newlines, periods, exclamation points, and question marks. It then iterates through these segments, filtering out those with fewer than four characters, and creates a list of `PlanItem` objects with each valid segment as the description and an initial status of \"not_started\". If no valid segments are found, it defaults to creating a single `PlanItem` from the full normalized question. The resulting plan is limited to a maximum of six items.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:_merge_step_options:418b6774ef6319ddb7b45116432abfa5271a6a5a3b6bef0036b26c56d206f8fa:ddfd25db0dedf33b5e3ed520a1f7e5247946fa20c91d43ac114942085e5e2809": "The function `_merge_step_options` merges base request options with document-specific retrieval data and builds a complete set of request options for an AI conversation. It takes a dictionary of base options, a sequence of documents, a question, reasoning verbosity, and a response mode. It creates a deep copy of the base options, extends the retrieval documents if present, and then calls `_build_request_options` to generate the final merged options. The function returns the combined request options.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:_parse_reasoning_artifacts:cd4acb0502b21bc8e10fa6c2e3c39ab8d512c2260399822028a2c9f98cbc984b:6165395b0ee494ff1f6cceca24e1fdaffa9a419d47da24a7ce2070a1e34bcdce": "The function `_parse_reasoning_artifacts` processes a dictionary containing reasoning data from an AI response and extracts structured information into a `ReasoningArtifacts` object. It handles multiple components of the reasoning data, including summary bullets, plan items, assumptions, and self-check results.\n\n\nIf no meaningful reasoning data is present, the function returns `None`. Otherwise, it returns a `ReasoningArtifacts` object populated with the parsed components.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:_register_turn:7ab778aa9887526b30a206c45783092b611872d4a6551d02d15751dc3f6175dd:d0f3d1a9987b3bd2ed2ea3f9e1c2337a5c816e5ff36e370f281e6d46c5c03fbd": "The function `_register_turn` creates and stores a new conversation turn based on the provided question, AI response, response mode, and answer length preset. It extracts reasoning artifacts from the response, constructs a `ConversationTurn` object with all relevant details including citations, reasoning, and model information, appends the turn to the conversation history, and returns the created turn.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:_update_connection:efc45b0895d12408d33adbb2317524e981c3eafe47ae4cb5bb3cc608dfb5c1b8:a6f370925391d805b7930c5a42a1ebfdc8256a669d8328fca6b65bf4d9d7782d": "The function `_update_connection` updates the connection state of the `ConversationManager` instance. It takes a boolean `connected` flag and an optional `message` string as parameters. The function determines whether the connection state has changed by comparing the new values with the current stored values (`self._connected` and `self._connection_error`). If the state has changed, it updates the internal connection status and emits a connection state change event by calling `self._emit_connection_state()`.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:add_connection_listener:3ffb7a639d5040bad1e43cad0202f3996b7250c7720ee4b3c88387038d03fe23:98748637b154bccbb47028398603b165fc4ffabcd1354dec1e446cc4033aec22": "The function `add_connection_listener` subscribes a caller-provided callback function to receive notifications about changes in the connection state. It appends the listener to an internal list of listeners and returns an unsubscribe function that removes the listener from the list when invoked. The listener function accepts a `ConnectionState` parameter and is called whenever the connection state changes.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:ask:d193258e27294911b39dd76e11ac1fa27f671569a73cfebd84dcc978ca857522:973ab508ccccfa19f9e22f46db3b16aaf1240fcbb5e2a29dee0e3347d43fac6b": "The `ask` method in the `ConversationManager` class sends a user question to an LMStudio client and returns the resulting conversation turn. It first checks if the client is connected, raising an error if not. Depending on whether a `context_provider` is supplied, it either attempts dynamic planning or uses a single-shot approach to process the question. If dynamic planning fails, it falls back to single-shot processing. The method supports various parameters for controlling response behavior, including context snippets, answer length, reasoning verbosity, and response mode. It aggregates citations and reasoning artifacts from the response and manages conversation history.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:assumption_decision:a9e1524956a83a8519360cfd68e2ff8ce827095353fbbb8e009684dbf5ffd950:777c96e79de3db86801b85e2470ebf6a5e5dfa5db153dd4b44a1a4b548690818": "The function `assumption_decision` retrieves the `AssumptionDecision` object from the `reasoning_artifacts` attribute of the `ConversationTurn` instance. If `reasoning_artifacts` is `None`, it returns `None`. Otherwise, it returns the value of `assumption_decision` stored within `reasoning_artifacts`.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:assumptions:2699a1c036e04aee8606cf9acdf981870ea5488f1d06f1b13435bd0d3a426f1a:c35dfcb50d0019db57e2e1bc72984b1739312257c831e0af57c5c27fdbb52f0f": "Returns a list of assumption strings from the `reasoning_artifacts` attribute of the `ConversationTurn` instance. If `reasoning_artifacts` is `None`, it returns an empty list.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:can_ask:ad7ef6a913e5c7d461788715eadcd53b849e2ea444ea1dacb1907ec1c262dbf2:17fe5b96d8b982816888f787581c1f43531f0d1d7b665a4f2feb30c9892cba58": "The `can_ask` method returns a boolean value indicating whether it is safe to issue a new query to the AI model. It checks the `_connected` attribute of the `ConversationManager` instance, returning `True` if the client is connected and ready to process queries, and `False` otherwise.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:check_connection:b6e434a650d21838c2ca3319852e6dcfb49767191b61b53f0fdc2c296d5fc5ba:cd72a0edaa86afc4212751555172f297992d09b2465584c618931a5b25cfe042": "The function `check_connection` probes the LMStudio client to determine its connectivity status. It performs a health check using the client's `health_check()` method. If the check succeeds, it updates the connection state to healthy and clears any error message. If the check fails, it updates the connection state to unhealthy and sets an error message indicating that LMStudio is unreachable. The function returns the current connection state after the update.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:connection_state:5df29fec570197b578ba0cca0018b3b1dacd69a0854f35dcf656b1b25b652f65:67f108125a03e2cf109474824cd68cfe08420aad5e106dbc7abadf74c345834f": "The function `connection_state` is a property method within the `ConversationManager` class that returns a `ConnectionState` object. This object encapsulates the current connection status of the LMStudio client, represented by two attributes: `_connected`, which indicates whether the client is connected, and `_connection_error`, which holds any error message associated with the connection state. The method provides read-only access to the connection state of the conversation manager's LMStudio client.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:is_complete:4e8072278c9e77166eda3be804cc1bf4968affab0dad3f5c3e62738e153040e3:05354171255700774dbb66bfadca3673dba78c08e95a85b8c0a42e8751b85aad": "The `is_complete` method evaluates whether the `PlanItem` instance is marked as complete by checking if its `status` attribute, converted to lowercase, matches any of the strings \"complete\", \"completed\", or \"done\". It returns a boolean value indicating the completion state.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:plan:27cf6ad02fa800b27bb4532fcae1ce703d15b018a22762f50b435d9e14688cba:e91bb26fb6386709c631110bea846270ad32363601c6a16b317cf8c46c320813": "The `plan` function retrieves a list of `PlanItem` objects from the `reasoning_artifacts` attribute of the `ConversationTurn` instance. If `reasoning_artifacts` is not available (i.e., is `None`), it returns an empty list. Otherwise, it converts and returns the `plan_items` contained within `reasoning_artifacts` as a list.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:reasoning_bullets:508b2f8593f41137b77968d6db9d8817d9b64211aa97c619faf074b61937dc93:665c9a2b6061cf53c085de8b9bcf12516d004c5efbd66083cf16d6c964922524": "The function `reasoning_bullets` retrieves a list of summary bullets from the `reasoning_artifacts` attribute of the `ConversationTurn` instance. If `reasoning_artifacts` is not initialized (i.e., it is `None`), the function returns an empty list. Otherwise, it returns a list representation of the `summary_bullets` contained within `reasoning_artifacts`.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:self_check:3b4fcfa15d5933397e5dfdfbb2956a51f34e7d3a7d0770dc0f6b9794b9e725ed:5a5f66b4d13e1c0b7c755335e9a1250bd8719d8e292134da1cc87bb0b6c5448f": "The `self_check` function retrieves the `SelfCheckResult` artifact from the `reasoning_artifacts` attribute of the `ConversationTurn` instance. If `reasoning_artifacts` is not initialized, it returns `None`. Otherwise, it returns the value of the `self_check` property contained within `reasoning_artifacts`.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_manager.py:to_request_options:4cc158d2f774b9995dd265d7f5148966d4e4a83b87a5164e0fb72879b7296dc9:88f4cd5372730238f9421ee8ef20728492bed839078c83e5d372b0e341bc5a13": "The `to_request_options` method translates a `ReasoningVerbosity` preset into a dictionary of LMStudio request options. It sets the verbosity level and enables inclusion of a summary, assumptions, and self-check in the reasoning output. Depending on the verbosity level\u2014MINIMAL, BRIEF, or EXTENDED\u2014it configures additional parameters such as whether to include a plan, and sets limits on the number of bullets and plan items. The method returns a structured payload suitable for use in LMStudio requests.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_settings.py:ConversationSettings:e9f9abc557ccf2a13b7599ae69a348b03d703e3d40ae355d24d1959545dcd746:b21309eae6043a62d5a39491e9d9ef17ad7d0cb9ec665cbcdb79a7afd287e8d9": "The `ConversationSettings` class manages conversation-level configuration options using Qt's signal-slot mechanism to notify listeners of changes. It provides properties and setter methods for controlling reasoning verbosity, plan visibility, assumption visibility, sources-only mode, answer length, and model selection. The class emits specific signals whenever any of these settings are modified, enabling synchronization between the user interface and underlying request logic.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_settings.py:__init__:d54b5b54d5e68b5dccff88fd563cf35318674c52d6abc4c403eaef116faeb979:4a28ebb1147273200b8b1cff6bf2e464d932bb7ea3423c16fa64c058cbb05c4d": "Initializes a `ConversationSettings` instance with default values for conversation behavior configuration. Sets the reasoning verbosity to brief, enables plan and assumption visibility, disables sources-only mode, configures the answer length to normal, and selects \"lmstudio\" as the default AI model.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_settings.py:answer_length:1ec739fa299fba28fe2f49daec06a8758410365af8d942c88bfff522b30e256c:6a1588d33e6096de6a1da03b589c507a21e8991f0e5a0da078eade9981b394bf": "The function `answer_length` is a getter method within the `ConversationSettings` class that returns the current value of the `_answer_length` attribute. This attribute represents a configured preset for controlling the length of AI-generated answers, and the method provides read access to this setting. The return type is specified as `AnswerLength`, indicating it retrieves a predefined answer length configuration.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_settings.py:model_name:afd3aa712d3c8eb177539809b56ea3a78b5f703a8edfe4d87f593055bf35bbfa:536c2c63ab476dffc29f26ce615069c8c24e92991f57c92ac536417224b74225": "The function `model_name` is a getter method that returns the value of the private attribute `_model_name`. This attribute stores the name of the selected AI model configured within the `ConversationSettings` class. The method provides read access to the currently set AI model name.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_settings.py:reasoning_verbosity:a6d827fba1ff324e846895e2e67da58d1890437ecb0ad6d3e5a92f634cc21565:14477a89215afe1789a2b46b9451c66b5079869fe3485b7b156261d6ae2746e3": "The function `reasoning_verbosity` is a getter method that returns the current value of the `_reasoning_verbosity` attribute within the `ConversationSettings` class. This attribute likely holds a configuration related to the verbosity level of reasoning processes used in conversation behavior. The return type is annotated as `ReasoningVerbosity`, indicating it provides access to a specific enumeration or class defining different verbosity levels.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_settings.py:response_mode:5bc633d424f52a0b3c3990db8874338ea3fecaa9f3dc850e854b661606de61cc:aa5ac489bf776e3efe8056affaad13e5512b68afac1f9c27dd78b59fe93860f3": "The function `response_mode` returns a `ResponseMode` enum value indicating whether the conversation is in `SOURCES_ONLY` mode or `GENERATIVE` mode. It checks the boolean `_sources_only_mode` attribute of the `ConversationSettings` instance, returning `ResponseMode.SOURCES_ONLY` if true, and `ResponseMode.GENERATIVE` otherwise.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_settings.py:set_answer_length:c56fbfc09f43237584cf7e5261fe27ad98aa2ccb5177a06419db661e22c0583f:98b29f7fb368cccd8b99e4fc1994f562d799329953843378de723be216ee3d40": "The `set_answer_length` function in the `ConversationSettings` class updates the answer length preset to a specified value of type `AnswerLength`. It validates the input type, checks if the new value differs from the current setting, and emits an `answer_length_changed` signal if the value is updated.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_settings.py:set_model_name:d75f58d48695a15902c8c8c9db6b0a562f5f3e9809c8a0369725e9315e8648f9:f1d318af8a67564fc34540f3fbe4023ebd396986cd424046d4ea92bd10aefef7": "The `set_model_name` function updates the AI model name in the `ConversationSettings` class. It accepts a string input, strips whitespace, and validates that the input is not empty or identical to the current model name. If the validation passes, it updates the internal `_model_name` attribute and emits a `model_changed` signal with the new model name.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_settings.py:set_reasoning_verbosity:c2dad6f13fb25005dbe7d19e2212c078cada450df60cac30d77ba8ab1de33d34:63407a18b4fc8ae8a3b7fd665ccdd279272eded0a044f714a920c1d47dcf1489": "The `set_reasoning_verbosity` function updates the reasoning verbosity setting for conversation behavior. It accepts a parameter of type `ReasoningVerbosity`, validates its type, and emits a signal upon change. The function ensures that the value is only updated if it differs from the current setting, preventing unnecessary emissions.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_settings.py:set_show_assumptions:55847d77ed65a7fcc18ad417d53a5100266b829cd4c46aca5a9e3d1646bb7f7f:11853225f776e0915f7a0e415a04d8d40c7d855fc8f43350a5d196585d023a3c": "The `set_show_assumptions` function is a setter method within the `ConversationSettings` class that updates the `_show_assumptions` attribute with a boolean value derived from the input parameter `enabled`. If the new value matches the current value of `_show_assumptions`, the function returns without making changes. Otherwise, it updates the attribute and emits the `show_assumptions_changed` signal with the new boolean value.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_settings.py:set_show_plan:e9288a92ffbab5658f28baec377e1a25c2d1ff5505dce04242fedf4fc967b27c:73f1f3e915ccc59023fcb54e04f3875bc4e110e7281b919135716ff525a4556c": "The `set_show_plan` function in the `ConversationSettings` class updates the `_show_plan` attribute with a boolean value derived from the input parameter `enabled`. If the new value differs from the current value of `_show_plan`, the function updates the attribute and emits the `show_plan_changed` signal with the new value. This function ensures that changes to the plan visibility setting are properly tracked and notified to subscribers.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_settings.py:set_sources_only_mode:160a4c920dacd8a3ca6f54dc0e43047fe6177340464ace92b38228be2b533e14:561e2aefa9d0bb2e250dbdf6adc7d6119b3f54156c0929fc16253c7987068364": "The `set_sources_only_mode` function configures the `ConversationSettings` class to enable or disable sources-only mode. It accepts a boolean parameter `enabled`, converts it to a boolean type, and updates the internal `_sources_only_mode` attribute if the value differs from the current setting. The function emits the `sources_only_mode_changed` signal with the new boolean value to notify other components of the change.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_settings.py:show_assumptions:9039998275664ca85228a5b5d48344afe132445e4b07e6485d2b26180100bec8:97620c2726e332ae9e8c651f004769af43ed721a6121cec17b1e60f575cee57a": "The function `show_assumptions` is a getter method that returns the boolean value of the private attribute `_show_assumptions`. This attribute controls whether assumptions made during conversation reasoning are displayed. The method provides read access to the setting that determines the visibility of assumptions in the conversation interface.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_settings.py:show_plan:44ead89ce8ef54ad8edf0e3bf7b6a40a8590cad03baa6d1f3a73dd44fa96057a:a5279879f7e78fecfa86ae1f70110894f8acd044ed2a0be2da159c814cdbcb34": "The `show_plan` function is a getter method that returns the value of the private attribute `_show_plan`. This attribute controls whether the plan associated with a conversation is displayed. The method provides read access to the plan visibility setting within the `ConversationSettings` class.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\conversation_settings.py:sources_only_mode:37947ddc385ecf749c210e5f3fbf1305a3d5ba88bb21440f96d7edeca3b475b3:30e748f11472411a95dc63b3a2cdb456bb8a64ea0fc5ec604e86ab483aae3294": "The function `sources_only_mode` is a getter method that returns the current value of the private attribute `_sources_only_mode`. This attribute controls whether the conversation is configured to operate in sources-only mode, which affects how AI responses are generated and presented. The method provides read access to this configuration setting within the `ConversationSettings` class.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\document_hierarchy.py:DocumentHierarchyService:d33a8e328673f9dbfde74e9646d4c91a7b1279b1a4495205b092e722a097a7b7:683831faddc53d20d2954ceb57987aeea7d6a51b5c9e0228c559381027ef3bf4": "The `DocumentHierarchyService` class provides methods to construct nested folder trees from document collections and retrieve documents with associated tag metadata. It includes functionality to normalize folder paths, determine base paths for hierarchies, and sort nodes and documents within the tree structure. The service interacts with a `DocumentRepository` to fetch and update document data, including tag counts and metadata.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\document_hierarchy.py:__init__:f96a63d4dfff903a34dd828f93d9d5c22978e272dd6e9cdc4846bf1d04cd6d63:4f9274b67ae996b30662c0207512dd5c31f228c3b5c3a360bb5cb86db5ac7964": "Initializes the `DocumentHierarchyService` instance with a `DocumentRepository` for managing document data. The repository is stored as an instance attribute for use in subsequent operations related to document hierarchy management.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\document_hierarchy.py:_absolute_path:2405438d53d0e164bea23792ae2b6ec346e734251bb220d8ee97a08636d488a3:0d92748341f7b9c7edbba04430b9f3d3067e011c5c97d5cf6e0818231d7f0dad": "The function `_absolute_path` computes and returns the absolute path derived from a base path and a relative path component. If the relative path is `None` or an empty string, it returns the string representation of the base path, or `None` if the base path is also `None`. If only the base path is provided, it returns the string representation of the relative path treated as absolute. Otherwise, it combines the base path and the relative path using path concatenation to produce the absolute path as a string.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\document_hierarchy.py:_create_node:846b07f0e46a730e2b104c36bfa886f0023965a8330fa1668040d792c40808f9:1fc443cdb6da0993b5b06a3ffd35240fa6af14d15d929b6ed4340c0b34dbfe21": "The function `_create_node` creates and returns a dictionary representing a node in a document hierarchy. The node contains a name, an optional path, and empty lists for documents and children. This structure supports the hierarchical organization of documents by providing a consistent format for nodes within the tree-like structure managed by the `DocumentHierarchyService`.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\document_hierarchy.py:_determine_base_path:2029e924f09262acd60cf4e3c22530063db966a78ce3952cd42bf4dbea00c2ca:969ac853b9725fbed851ec29fa20559ffaeb4c8aae517ab4cbc5507ee16f8fc7": "The function `_determine_base_path` calculates the common base path among a collection of documents by examining their `folder_path` attributes. It takes an iterable of document dictionaries, extracts the folder paths, and determines the deepest shared parent directory among them. If no valid folder paths are present, it returns `None`. The function iteratively adjusts the base path upward through the directory hierarchy until it finds a common ancestor that contains all specified folders.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\document_hierarchy.py:_iter_folder_paths:ee968a8591c378060f95eb7a7b99059e7c99e8e5fe7c4e926bbf2953d5ed1aa3:af563e40a558764a2826542afb7bef0d52eca6a0a126e0c7c9400bd6a75bca2c": "The function `_iter_folder_paths` generates an iterable sequence of folder paths starting with `None`, followed by a sequence of ancestor paths leading up to the root, inclusive of the input folder path. If the input folder is `None`, empty string, or current directory (`.`), the function returns immediately without yielding any ancestor paths. Otherwise, it traverses up the directory tree from the given folder to the root, collecting each ancestor path and yielding them in reverse order, starting from the root down to the input folder.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\document_hierarchy.py:_node_name:284964204bc24186ee3d211dc37776ae09e72fffc9b81989264ba51d0c894d9c:4adf347e1ae2dba790ef1209ae6dbee0d876cf7eb5902c6da0f01ef642348de3": "The function `_node_name` takes a file path as input and returns the name of the file or directory at that path. If the input path is `None`, it returns an empty string. It uses `Path(path).name` to extract the name component of the path, and if that results in an empty string (which can happen with certain edge cases like paths ending in a slash), it falls back to converting the entire path to a string.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\document_hierarchy.py:_normalize_folder:2e268580f9d497f1c5fcead56c4670def801f4b8f83adaa77566b367938bfa0f:c074a82716a13a380ec96757195de38b37d6e40da04611791e74e891dfddcdd0": "The function `_normalize_folder` takes a folder path as input and returns a normalized string representation of the path. If the input is `None` or an empty string, it returns `None`. Otherwise, it converts the input to a string after processing it through `Path` from the `pathlib` module, ensuring consistent path formatting.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\document_hierarchy.py:_parent_folder_key:452461f55163b92febd6507e471eeb493d5172863dc7795611059b69703711c4:fc24028dc69f20c757cd80eaa9e17bd40ba6fcbb86f23c995aa78e3ff3eef440": "The function `_parent_folder_key` computes the parent folder path of a given path. It returns `None` if the input path is `None`, empty, or represents the current directory (`.`). For valid paths, it determines the parent directory using `Path.parent` and returns the parent path as a string. If the parent is the same as the input path or represents an empty/relative root, it also returns `None`.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\document_hierarchy.py:_relative_folder:c35e5480611150378ce2ab20c7f083dc3859072eef7e17366f67b8d2f5dc6ba9:11affcf4b7770673afce559d1f40917be858cf6070e0ff8df0620815a1bc675e": "The function `_relative_folder` computes the relative path of a given folder with respect to a base path. If the folder is `None`, it returns `None`. If the base path is `None`, it returns the absolute path of the folder. It attempts to calculate the relative path using `Path.relative_to()`. If the folder is not a subdirectory of the base path (causing a `ValueError`), it returns the original folder path. If the resulting relative path is empty or equals \".\", it returns `None`, otherwise it returns the relative path as a string.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\document_hierarchy.py:_sort_tree:789315f409f428fe6c77d330c8a3656086977d5f6521f35a2b19a6e7edee65da:873417d932dc4663a18d5c8d27d86fada629828df2ac6239c3be0dd2375de79c": "The function `_sort_tree` recursively sorts the contents of a document hierarchy tree structure. It first sorts the documents within the current node alphabetically by their title, then sorts the child nodes alphabetically by their name. The sorting is performed in-place, modifying the original tree structure. The function processes all descendants of the given node by recursively calling itself on each child node.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\document_hierarchy.py:_with_tags:438436a63913cab64ec61c10b669152999a32982bb02b94781557835bd253be8:67eee03dc89da9e94af62186c954ec4540a6fdbb4aaf2865ecfddc92741b7c05": "The function `_with_tags` takes a document dictionary as input, creates a copy of it, and adds a \"tags\" key to the copy. The value of the \"tags\" key is obtained by calling `self.documents.list_tags_for_document()` with the document's ID. The updated dictionary, now including the associated tags, is returned. This method enriches the document data with its corresponding tag information.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\document_hierarchy.py:build_folder_tree:1ba195eba47c606b8384b6abf6f903f5fa0f5f54965639d963ae9142a9a8b78d:94817e0acae2e1cf9544d24c1c6c158e88d034ecc3609e77445f7424a5ee3ff3": "The `build_folder_tree` function constructs a nested folder structure for a given project, attaching document metadata to the appropriate nodes in the tree. It begins by retrieving all documents associated with the specified project ID and determines the base path shared by these documents. A root node is created, followed by iteration over each document to determine its folder path relative to the base path. For each folder in the path hierarchy, a corresponding node is created and added to the tree if it does not already exist. Each document is then appended to the appropriate folder node's \"documents\" list. Finally, the tree is sorted recursively before being returned as a nested dictionary structure.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\document_hierarchy.py:get_document_view:bde54577e4571986042825e65ab50b85a8e9de9d2a17d292120f7aa31e973e39:87fe5ab368dd1888dbf317944c6bab9ee5942f413efaedb0c434f18bfd6006b1": "Returns a metadata view for a specified document ID, including its associated tags. If the document ID is not found, returns None.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\document_hierarchy.py:list_documents_for_scope:5d52f9538dc7cacd12cced5b50ae5ba92138ec14b4fef47c2716e56311272cfe:e5da3500ff97a716fe120e5916aaea10285eb09c975288e4e96e9861f73b4b54": "Returns a list of documents matching specified tags or folder scope, enriched with associated tag metadata. The function retrieves documents using the `list_for_scope` method of the `documents` repository and augments each document with tag information by applying the `_with_tags` helper method. Parameters include project ID, optional tag IDs, optional folder path (with recursive search enabled by default), and returns a list of dictionaries containing document data and metadata.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\document_hierarchy.py:refresh_tag_counts:746a0c75c59d4136b2aaa1e4b5fc3be0ff9b080de6fdd061cc92df067bca2e00:91fc10004ead5116a24cae9f4c0b50b60b6998a2910a91c5e89544d158ae5657": "The `refresh_tag_counts` method recalculates tag counts for documents within a specified project by invoking the `refresh_tag_counts` helper function from the `documents` repository. It accepts an optional `project_id` parameter to scope the recalculation to a specific project, or applies it globally if no ID is provided. The method updates metadata associated with document tags, ensuring accurate counts for tagging-based filtering and organization.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\export_service.py:ExportService:787e8f29293e0ccc6c136643168ca50d59bf471a74980fe12aae23dfe2304581:27034af7516b0f59b75d55e87c8a19b9e5994ff4d607017a0126dda3e2acc6d9": "The `ExportService` class provides methods to convert conversation turns and snippets into markdown, HTML, and plain text formats. It includes functionality for rendering individual conversation turns with metadata, citations, reasoning steps, and token usage in both markdown and HTML. The class also supports exporting these formatted outputs to files.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\export_service.py:_format_citation_text:5a6bfbc3635c490e118bba888e0824df2bdff8ff24ad19b71e4e2c037d44ac46:c708202dcc4e5a52a321af4c9ce39ccffee0b2e083f3beddabf2969bf6ce43cc": "The function `_format_citation_text` takes a citation object and converts it into a formatted string. If the citation is a string, it returns the string as-is. If it is a dictionary, it extracts fields such as `source`, `title`, `path`, `page`, `section`, and `snippet` to construct a readable citation text. The citation includes the source label, location information (page and section), and an optional snippet. If the citation is neither a string nor a dictionary, it converts the object to a string. The function uses `_strip_html` to remove HTML tags from the snippet before including it in the output.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\export_service.py:_format_reasoning_html:799c501d3a73138d20a678e65e89b1a602d194e7e92a4c3ce04c5588622024ab:64838c5b2e86013685055d7dcb648a3d2aa17a97b999a230feef1512ba7e065e": "The function `_format_reasoning_html` formats the reasoning components of a conversation turn into an HTML string. It processes and structures the following elements from the input `turn` object: reasoning bullets, plan items, assumptions (including assumption decisions), and self-check results. Each component is wrapped in HTML sections with appropriate headings and formatting, such as unordered or ordered lists, and handles special cases like status indicators and nested details. The output is a concatenated HTML string containing all non-empty reasoning sections, with proper escaping of content to prevent XSS vulnerabilities.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\export_service.py:_format_reasoning_markdown:3e9b05ab887de8bc1e1f73e6a98bd725c68f4a39b76c8544b63bb95c78242f78:dd9bf3577a1486e565a1d8e2d23f9953bd59a5986993f9415856436700751e8c": "The function `_format_reasoning_markdown` formats the reasoning components of a conversation turn into a list of markdown-formatted strings. It processes and appends the following elements to the output list if they are present:\n\n\nThe function ensures proper section headers (`### Reasoning`, `### Plan`, etc.) are added before their respective content blocks. The output is a list of strings suitable for rendering in markdown format.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\export_service.py:_strip_html:e1303c70dd31f1a6636f39221a2ed1b6c7b7fc847cfe97eb1182f05e8e3125f1:8dfa2a028c134512696fec2938f3a5137f2acca3cfb60b1f86aa4b810c2d981c": "The function `_strip_html` removes HTML tags from a given string, replacing `<br>` and `<br/>` tags with newline characters. It processes the input character by character, building content outside of HTML tags into a result list. After processing, it applies `html.unescape` to decode HTML entities and returns the cleaned text with normalized whitespace. If the input is None or empty, it returns an empty string.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\export_service.py:_turn_to_html:6ff1ff0e674337b0a4daef40602f35d4c0efbb7a5f94307f810535a823642cc1:64ba1b90516123b506939df03804933dce2e6d7e294bba20c9f82fb55e7d91b2": "The function `_turn_to_html` converts a `ConversationTurn` object into an HTML-formatted string. It includes details such as the question, answer, timestamps (asked and answered), latency, citations, reasoning, and token usage. The question and answer text are escaped for HTML safety, and newlines in the answer are replaced with `<br/>` tags. Citations are formatted as a list, defaulting to \"No citations available.\" if none exist. Reasoning content is included if present, and token usage is displayed as a formatted JSON block. Each section is wrapped with appropriate HTML tags for structure and styling.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\export_service.py:_turn_to_markdown:acc64d5ced0b90e7eaf60c1b492ac8354e30731c0a04b5fb51769ae6f0825591:f360c5902ebe86e8bbc2ccab5f96ffed789ac87bfa6bd1d9140c1c0705a3aa53": "The function `_turn_to_markdown` converts a `ConversationTurn` object into a list of markdown-formatted strings. It includes details such as the turn index, question, answer (indented), timestamps for when the question was asked and answered, latency, citations (if any), reasoning content (if available), and token usage information. The output is structured to be suitable for export in Markdown format, with proper formatting for headers, lists, indents, and inline formatting. If certain fields like `question`, `answer`, or `citations` are missing, default values such as \"\u2014\" or \"No citations available.\" are used. The token usage is serialized as JSON and indented for readability.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\export_service.py:conversation_to_html:fddba90fb3acde46bd6e1af81918b3e78c2176d12024a89789e87cb5ff4f6ebd:d6a0107f0359bd53b453ca904d16a6b6ce16ce08d2d1d6a4cfa410897dd3121f": "The `conversation_to_html` method converts a sequence of conversation turns into an HTML-formatted string. It includes a title, timestamp, and optional metadata in the output. Each turn is processed using the `_turn_to_html` method and added to the HTML structure. The resulting HTML includes basic styling for formatting headers, metadata, and conversation sections, with support for escaped HTML content to prevent injection. The method returns a complete HTML document as a string.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\export_service.py:conversation_to_markdown:05ad61dd387e6672f99bf8a0ee2b82dd0fb2e19789c9280844c16fcd3ca6b190:47350384d27b7828b9f2a79513162177ca1353d7d061d00e45bf11af0f433bd7": "The function `conversation_to_markdown` converts a sequence of conversation turns into a Markdown-formatted string. It accepts conversation turns, an optional title (defaulting to \"Conversation Export\"), and optional metadata. The output includes a header with the title, a timestamp indicating when the export was generated, and formatted metadata if provided. Each conversation turn is processed using the private method `_turn_to_markdown`, which generates Markdown lines for each turn. The final result is a properly structured Markdown document as a string, with appropriate line breaks and formatting.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\export_service.py:export_conversation_html:7705cf83314bd3dbe71bf2406ebcdca55e623f0f5f148378f98cff5a648dd268:2a64006564d473863229c4e79cbad8d4aa8a38879eb94788374dd6cb5fe29ede": "The function `export_conversation_html` exports a sequence of conversation turns into an HTML-formatted file. It takes a destination path, a sequence of conversation turns, and optional title and metadata parameters. The function converts the conversation turns into an HTML string using the `conversation_to_html` method, then writes this content to the specified destination path using the `write_text` method, returning the resulting file path.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\export_service.py:export_conversation_markdown:fa00e80126f3df90ec04bb9d06ce3d0f2d8e620649fd41eacb9b584010751fae:31ceba726c05c5439602777feee57fedc0d905e98bf12c0ef5693579f89d71bc": "The function `export_conversation_markdown` exports a sequence of conversation turns into a Markdown-formatted file. It takes a destination path, a collection of conversation turns, and optional title and metadata parameters. The function first converts the conversation turns into a Markdown string using the `conversation_to_markdown` method, then writes this content to the specified destination path using the `write_text` method, returning the path of the created file.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\export_service.py:export_snippets_text:1f0f4cfbaeab3a43f79ee09b2c63e562a17723b0531bac61726a1b03e90fdf72:d4db8d0ba8d83a73aaf47403ac0b147b81b2a7a3bf1793b0ac8819575b0ec5b1": "The function `export_snippets_text` converts an iterable of snippet data\u2014either dictionaries or strings\u2014into a text format using the `snippets_to_text` method. It then writes this formatted content to a specified destination file path using the `write_text` method and returns the resulting file path.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\export_service.py:snippets_to_text:ea38ca78065f615951b8ec50e1111734837fd3c220fc3f65681c079d263a99db:27a32b4e199957daa6b41a873709c05d604a92b4e1c61d59efb62309186edc5f": "The function `snippets_to_text` converts an iterable of snippet data\u2014either strings or dictionaries\u2014into a formatted text string. For each snippet, it extracts content based on key fields such as `label`, `source`, `snippet_html`, `snippet`, and `metadata_text`. If the snippet is a dictionary, it constructs a labeled block of text with stripped HTML content and optional metadata. Strings are used directly. Non-string, non-dictionary items are converted to strings. Each processed snippet is joined with double newlines, omitting empty lines.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\export_service.py:write_text:7bdca551d944cb8a92cd29dc0052726df4049ca4b66b4c5c4563d719d8a25f4e:005d09c370e5d61f99f922cf5726ed385d3422b627211aea1fe332714002d10b": "The `write_text` function writes the provided string content to a specified file path, creating the directory structure if it does not already exist. It takes a destination path (either as a string or `Path` object) and the content to be written, ensures the parent directory exists by creating it if necessary, writes the content to the file using UTF-8 encoding, and returns the resolved `Path` object of the written file.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\lmstudio_client.py:AnswerLength:42e3ab10580537d52b52514b2d0dfb2cde3abc12d2cb6509deb15f3945506bc0:684caee8818706d2c41c3ffe773df49a390c885af6dfd830c1531e0d08772cc3": "The `AnswerLength` class defines an enumeration with three verbosity presets: BRIEF, NORMAL, and DETAILED, each associated with a string value. Each preset maps to specific request parameters including `max_tokens` and `temperature` values. The `to_request_params` method returns a dictionary of these parameter overrides based on the selected preset.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\lmstudio_client.py:ChatMessage:bbe1ccbc2545e65b03bee6344e04f63543076033fa2dce8177cb7a43ab18d502:bc0d4b81c3df44bfcb47b74aa7ac96b86d53e7f88cebbac3b2e7d6ff4eb32d9a": "The `ChatMessage` class defines a structured data model for representing chat completion responses. It includes fields for message content, citations, reasoning metadata, and the raw API response. The class serves as a container for organizing and storing information from chat interactions.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\lmstudio_client.py:LMStudioClient:e1b95df024f7dc44352ca7f00964a872bca0a93582056af6a5e33eb6ac63340f:ca67a9d2882a47a50c67272236221a65cc4fca365dd9774f1d1aac4b6f23ddef": "The `LMStudioClient` class provides a simple HTTP client for interacting with LMStudio's OpenAI-compatible API, supporting chat completions and health checks. It includes methods for configuring connection settings, sending chat messages with optional parameters, and handling HTTP requests with retry logic and error management. The client parses JSON responses into structured `ChatMessage` objects and supports customizable base URLs, models, and retry behavior.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\lmstudio_client.py:LMStudioConnectionError:1a2bcb4732a421ca47c0b75e2c2cb141e087bb1d74d8d5bbf8029bd6820d75be:ac7151d146953965dc9c2b00321f1767c1764ab113f77b9f87399a5a6b2bacb9": "This code defines a custom exception class `LMStudioConnectionError` that inherits from `LMStudioError`. The exception is specifically designed to be raised when there is a failure to connect to the LMStudio server. The class includes a docstring that describes its purpose in handling connection-related errors.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\lmstudio_client.py:LMStudioError:5789fa822253beab935deb790b84b0bbecd0c0b61caa6271d07cc4f6cb8ee876:12300e03883b2ea91520126b5313902bbe3e0b1bff4ba042fc9f0d112ba07551": "The code defines a custom exception class named `LMStudioError` that inherits from Python's built-in `RuntimeError`. This exception is intended to serve as the base class for handling various error conditions specific to an LMStudio client implementation. The class is documented with a docstring explaining its purpose as a base exception for LMStudio client failures.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\lmstudio_client.py:LMStudioResponseError:2074f71f05c6c7a310f90e054d1dd8336670fdcbfe5390b6bfbcd632eb1734b3:2b474c536f72a1ddd227752dd111e577650e3d6b4ece74dea42efcbd6b76084e": "This code defines a custom exception class named `LMStudioResponseError` that inherits from a base exception class `LMStudioError`. The exception is specifically designed to be raised when the LMStudio server provides an invalid response. The class serves as an error handling mechanism for detecting and managing server response anomalies within the LMStudio framework.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\lmstudio_client.py:__init__:272e89fbaa93d360c9d208d5d1cfe129161fc512f06aa7573e63f75ab54bf586:d75555cf62fda09e04f3e85bacbeb6ea8a1c4d7586fa57fff7c8bf7246fb3217": "Initializes an instance of the `LMStudioClient` class with specified configuration parameters. Sets the base URL for the LMStudio server, the model identifier, maximum number of retries for failed requests, and the backoff interval between retries. Ensures the base URL does not end with a forward slash and defaults to `DEFAULT_BASE_URL` if empty or None. The `max_retries` is clamped to zero or greater, and `retry_backoff` specifies the delay in seconds between retry attempts.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\lmstudio_client.py:_normalize_message_content:bca0d8afb6e2e0fedbdcf365a858b649f1b5b86a4b7c4f22c8448beea887bf46:2a0ecbaf801b3531dde098b4a711d307775406b8bfbc0b0fa3e7593dab2cb89d": "The function `_normalize_message_content` takes a value of any type and attempts to extract or convert it into a string. If the input is already a string, it is returned directly. If the input is an iterable, it processes each item, collecting string values or extracting strings from dictionaries with a \"text\" key. If no valid string content is found, it raises an `LMStudioResponseError` indicating that the message is missing content.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\lmstudio_client.py:_parse_chat_response:1ab5085f99656b29f5d2327caa8235e6374b95c4697c68fa3cfc7e52d61424bc:afabe978e28d7988ba45ecb6aab035875e3ed2a71cabfca992f57b2ec1679860": "The function `_parse_chat_response` processes a dictionary response from the LMStudio API and constructs a `ChatMessage` object. It extracts the message content, citations, and reasoning from the response, normalizing the content and ensuring proper data types for citations and reasoning. If required fields are missing or malformed, it raises an `LMStudioResponseError`. The parsed message includes the normalized content, a list of citations, optional reasoning metadata, and the raw API response for reference.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\lmstudio_client.py:_request:5f368dc90133dbe17f5843baa3dcdde7f82b28497234c7df92ff4e9c6662c53b:4d4ea7ea58f563e2dafd3b220519f134435403b9db33dc1b922529b3f84aed61": "The `_request` method in the `LMStudioClient` class performs HTTP requests to an LMStudio server, handling payload serialization, header setting, and response validation. It supports GET and POST operations, retries failed requests based on configurable retry settings, and raises custom exceptions for various error conditions including HTTP errors, connection timeouts, and URL errors. The method implements exponential backoff for retries and ensures that responses with status codes of 400 or higher result in `LMStudioResponseError` exceptions. It returns the response body as bytes upon successful completion.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\lmstudio_client.py:_request_json:ab0a13222488e70938c5bff7c54e36d1974aa9ff9d3bb2a2df42a30fe32ccfdc:445de5d00ffce8ae8f3cab7bcd0b47567d3b5a1b65a397827bc86a622d6a1d8a": "The function `_request_json` sends an HTTP request to the LMStudio server using the specified method and path, with an optional payload. It decodes the response body as UTF-8 and attempts to parse it as JSON. If the response is empty, it raises an `LMStudioResponseError`. If the JSON parsing fails, it also raises an `LMStudioResponseError` with the original exception as the cause. The function returns the parsed JSON data as a dictionary.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\lmstudio_client.py:_should_retry:e001c7761c977182c8ba166eb0a1bfa9518659f02293930c29f8768e8fa0aabf:238b31d5800128b62d0126734c75491ef8cf3068a5869fbd3422c486bc1ee2f2": "The function `_should_retry` determines whether a request should be retried based on the HTTP status code provided. It returns `True` if the status is `None` or if the status code indicates a retryable error (specifically 408, 409, 429, 500, 502, 503, or 504). Otherwise, it returns `False`.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\lmstudio_client.py:base_url:defded3e5a138b6e53542458b37a87818f1bcbe1eac40d02392db739521525e9:b1bb210137bae9cb724c11186e107322d7e069b4accd3d89b261a8514b78a984": "The function `base_url` is a property method that returns the value of the private instance variable `_base_url`. This variable stores the base URL used for connecting to an LMStudio server. The method provides read-only access to this URL, ensuring that the base URL can be retrieved but not modified directly from outside the class.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\lmstudio_client.py:chat:3463aaf3ca296935edf639f6f3d20ed33a70862fa9cb4bfc69dae802611eb8bb:5d2830fa941c71cc80a2161a92b12c5ca2cd92f4953115ebdce4f295ad754fd6": "The `chat` function sends a sequence of messages to the LMStudio server and returns the first completion as a `ChatMessage`. It constructs a request payload including the model, messages, preset parameters, and optional extra options. The function ensures streaming is disabled, makes a POST request to the chat completions endpoint, and parses the response into a structured chat message.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\lmstudio_client.py:configure:09a11266e45892521c9e04c3fb9026ea94789ebc2a3ba792c4ecf00128a77e17:abcff00ccda8c0b6855f3db9326068f7f25c54c1b921c9eae341bc0e69634927": "The `configure` method updates the connection settings of the `LMStudioClient` instance, allowing modification of the base URL and model without requiring the client to be recreated. It accepts optional arguments for `base_url` and `model`, normalizes the base URL by removing trailing slashes, and assigns the provided values to the corresponding instance attributes. If `base_url` is not provided, the default value is used. If `model` is not provided, the existing value remains unchanged.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\lmstudio_client.py:health_check:202feec7ce30cd69d951953cf481923dfcf3b123feca78a9e0b0e365ff7126dc:2aa370ca7d72563c489d893b7bf7d0b361943bdd70d9b9d7c310163a48d52714": "The `health_check` method in the `LMStudioClient` class performs a health probe against the LMStudio server by sending a GET request to a predefined health endpoint (`HEALTH_PATH`). It returns `True` if the server responds successfully, and `False` if an `LMStudioError` is raised during the request, indicating the server is unreachable or unresponsive.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\lmstudio_client.py:model:b540e0f56c58cfa074f0d94437ed5219a4d52b090207a6839d45da48daa4b746:9a8ec41884b4cfc9de27641bb6b3892db7852bf2b18701aa0f87cdd3ac92299c": "The function `model` is a property getter that returns the value of the private attribute `_model`. This attribute likely stores the identifier or name of the language model being used by the `LMStudioClient` instance.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\lmstudio_client.py:to_request_params:7c5e7fa7f61048274015af55e9858c82a6aba306738d14f0e3a7caa3b99ba965:7ec708a5e25d5efc6a7abc7ab45dcfe6991d741ff1f37be68214dd2cae7dee8a": "The function `to_request_params` returns a dictionary of AI request parameter overrides based on the `AnswerLength` enumeration value. For `BRIEF`, it sets `max_tokens` to 256 and `temperature` to 0.2. For `DETAILED`, it sets `max_tokens` to 1024 and `temperature` to 0.4. For the default case, it sets `max_tokens` to 512 and `temperature` to 0.3.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\progress_service.py:ProgressService:feb1126c5dad896eda1ca0606f9ca0eff75e95768396587d5750d644cea7ba63:645f47fd3e25b16c7987a74b841c24f723b27301f15a5f538b4282845dfe4759": "The `ProgressService` class manages and broadcasts progress updates from background tasks to subscribed listeners using Qt signals. It provides methods to start, update, and finish progress events, as well as request toast notifications. The class supports integrating with background task emitters by connecting their signals to its own progress handling mechanisms.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\progress_service.py:ProgressUpdate:785dcd35d2d3936a9d968f09d2d03971435217c98015311dc3f03004e07ffe2d:a4a64696a906fe2182b8b9d8440c8bd393801b868276a1b10d301239b5c63ba0": "The `ProgressUpdate` class defines a data object that encapsulates information about a progress update, including a task identifier, status message, completion percentage, and a flag indicating whether the progress is indeterminate. The class uses type hints to specify that `task_id` and `message` are strings, `percent` is a float or None, and `indeterminate` is a boolean with a default value of False. This structure provides a standardized way to represent progress state information within a system.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\progress_service.py:__init__:97cb62271f6a4f8fc9f46d15350b72254b2cc63ac145f480dacbc3d43e6f34d2:84eb2066085919fc78c1c12193afe134df4954dd9fb6d76c067109d28f519f1b": "Initializes the `ProgressService` instance, setting up an empty list to store subscriptions for progress updates. Inherits from a base class using `super()`.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\progress_service.py:_dispatch:3de1dab14f14ac3e389c72ba14d3e780f7dc014d2e120dc8251bae3b650c786b:ec5ec2164f9840d44288379baf23b37bda295e7bca35e41534361f4b1591334a": "The `_dispatch` method in the `ProgressService` class sends a `ProgressUpdate` notification to all subscribed listeners. It iterates over a copy of the `_subscriptions` collection and invokes each registered callback with the provided update object, ensuring that all subscribers receive the progress event.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\progress_service.py:finish:8a38692aba003c46de0ced6d4aca3f786d3d16cd28e1a33b8a244d93c04dc130:966739df1cd7aacecceef958fe096bf9460a2329d0d34a7b9008a9b038ddd1bf": "The `finish` method in the `ProgressService` class marks a progress task as completed. It creates a `ProgressUpdate` object with the specified task ID, optional message, and sets the completion percentage to 100.0. The method then emits a `progress_finished` signal with the update and dispatches the update internally.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\progress_service.py:notify:5b8a51ac3439ce15989f2d1e6de8d55aae931a03a131511c09177fcc15db9823:cae9a3b61fc0b0ba32d8a1b277d598fcacd91db3435a54138c91b48ca641f5dd": "The `notify` method in the `ProgressService` class emits a signal to request a toast notification with a specified message, notification level, and duration. It takes a required message string, an optional level parameter defaulting to \"info\", and an optional duration in milliseconds defaulting to 4000. The method triggers the `toast_requested` signal with these parameters to initiate the display of the toast notification.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\progress_service.py:start:3fd760b99f7eb7aa7e6e5053f3bf2b6b5fa14fab6e2a9aa1f989e80c2af848ff:ecd1ab1129c1e172e0251d63a78017e8d76c98b9cac0f3fb164aef84b8a0f785": "The `start` method initializes a progress tracking event for a specified task. It creates a `ProgressUpdate` object with the given task ID, optional message, and sets the progress percentage to 0.0. The method then emits a `progress_started` signal with the update information and dispatches the update internally.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\progress_service.py:subscribe:4daf7bb69c9b30b8ff0c313568cedd177b8974b6dfde41241f7299f27c666d55:8f1320fa0930663af819518c387b0e06826cb8b71e64e5ed060f35c7b626d5d4": "The `subscribe` method adds a callback function to the list of subscribers for raw progress events. It ensures that the callback is not already registered before appending it to the internal `_subscriptions` list. The method takes a single argument, `callback`, which must be a callable that accepts a `ProgressUpdate` object and returns `None`. This allows external components to receive notifications about progress updates by registering their callback functions with the `ProgressService`.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\progress_service.py:subscribe_to:1cb1a74f9ede3c904a1b381ccf9921356b128fc4d90a89d69c68d4e388bc72a3:890aa0b02ba68d5cbf3f7bf4de09310923bde55a84d24e8dcae2133422464b8b": "The `subscribe_to` method connects a background task emitter's signals (`started`, `progress`, `finished`) to corresponding methods in the `ProgressService` class. It links the `started` signal to the `start` method, the `progress` signal to the `update` method, and the `finished` signal to the `finish` method, enabling progress tracking and updates for background tasks.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\progress_service.py:unsubscribe:dfaad02b3e18cd9ee8b16ff899cc65b36cbc60eafb196c8060c664f177f4fe7d:18e22872fbc0260fa9dc694dcc7fb8a39a1c23c297b52e6fc1e38a201cbad63e": "The `unsubscribe` method removes a specified callback function from the list of subscriptions managed by the `ProgressService` instance. The callback function is expected to accept a `ProgressUpdate` argument and is used to handle progress updates. If the provided callback is present in the internal `_subscriptions` list, it is removed; otherwise, the method performs no action.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\progress_service.py:update:8b19956cdc1a230021974558a31c9cdfd5e43360d0a39e5500778c871f03d279:e80b046de07a36cd5822634b71cea3502cb90d96360e47d4f3aeb96d51db5918": "The `update` method in the `ProgressService` class emits a progress update for a specified task. It accepts parameters for a task ID, message, completion percentage, and an indeterminate state. The method constructs a `ProgressUpdate` object with these values, ensuring default values are set for missing fields, and then emits the update via the `progress_updated` signal. Finally, it dispatches the update internally using the `_dispatch` method.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:ProjectRecord:3b6db357654949cc39e62848bb21b7d41ebe35696b994796c891c47a33bbf427:bb6a07ebb2a803cb64015e1e5505e9023723f64e93bacf727e3ce39575909e59": "The code defines a `ProjectRecord` class that serves as a lightweight data structure for representing stored projects. It includes attributes for `id`, `name`, and an optional `description`. The class is implemented as a simple data container without methods, using type hints to specify the types of its attributes.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:ProjectService:373d30a779969a5e3f75a959f31c2408770e48e61a56d12131d999d0edee681d:merge0:a21143737e0e59fe8a676097089c1ed815dce4737efc7f33e06292c987261a68": "The code defines a priority queue implementation using a heap-based structure that supports custom key functions and comparison operators, providing methods for element insertion, removal of highest-priority elements, and size/emptiness checks while maintaining heap invariants. Additionally, it defines a ProjectService class that manages project state, storage paths, and per-project settings within an application, utilizing a DatabaseManager for data persistence and integrating with a ConfigManager for settings storage. This service handles active project ID management, storage and removal of project-specific settings including conversation history, corpus roots, and storage locations, database snapshot exports, ensures proper storage directory creation for projects, and emits signals upon project or active project changes. The implementation employs configuration files for data persistence, validates data types, and manages potential errors during file operations to ensure consistency.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:ProjectService:373d30a779969a5e3f75a959f31c2408770e48e61a56d12131d999d0edee681d:part0:b1a1170e33669a6724baf9ceadd9677d94fa190e227842e951d3df8d4f1a3bf7": "The code defines a class that implements a priority queue using a heap-based structure with support for custom key functions and comparison operators. It provides methods for inserting elements, removing the highest-priority element, and checking the queue's size and emptiness. The implementation maintains heap invariants during operations and allows for efficient priority-based element retrieval.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:ProjectService:373d30a779969a5e3f75a959f31c2408770e48e61a56d12131d999d0edee681d:part1:6e007b55603b10004d496419fc695e82da11322b0af444e6d46ffa4262c0bf2a": "The `ProjectService` class is a Qt-based service for managing project state, storage paths, and per-project settings within an application. It uses a database (`DatabaseManager`) to persist project data and integrates with a configuration manager (`ConfigManager`) for storing settings.\n\nKey components include:",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:ProjectService:373d30a779969a5e3f75a959f31c2408770e48e61a56d12131d999d0edee681d:part2:7ef504425386a3711e8c6af2be885b7cf828afdbe906e5ed20ca45f258b215bd": "This code defines a class that manages project-related state, storage paths, and settings within a data mining application. It provides methods to retrieve and set the active project ID, store and remove project-specific settings such as conversation history, corpus roots, and storage locations, and export database snapshots for projects. The class also handles ensuring proper storage directories exist for projects and emits signals when project or active project changes occur.\n\nKey functionalities include:\n\n\nThe implementation uses configuration files to persist project-related data and ensures consistency by validating data types and handling potential errors during file operations.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:__init__:98f6aca35f1e4ce378d018f487e53f17a96ae24c57bc7e0c125b99a6d30b1bc6:0db1fbeb8e920bc2ed1848f53fc891acec1cb0f03b8490c82a5c2011629a89d5": "Initializes the `ProjectService` instance with a specified storage root and configuration manager. Creates necessary directories, initializes a database, and sets up repositories for managing projects, documents, chats, document ingestion, and background tasks. Ensures a default project exists and loads the active project.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:_clear_project_storage_path:9cc186db838fdee5b0d96e2ad09b060720f41c8094b73db763992d4449c4e200:ef1bfaa847a76824be2cabbcfa7540a956a4a905189003f693bb5a4a89330118": "The function `_clear_project_storage_path` removes the storage location entry for a specified project ID from the configuration data. It retrieves the current configuration, navigates to the `storage_locations` dictionary within the projects section, and deletes the entry corresponding to the given `project_id`. If the `storage_locations` dictionary becomes empty after the removal, it also removes the entire `storage_locations` key from the projects section. Finally, it saves the updated configuration back to storage. The function performs type checks to ensure the configuration data is structured as expected before attempting modifications.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:_emit_active_project_changed:f2a64e9c94315e7419ab21d0536143da28c24bf19f1386289cd42b8e12c40f37:f734e93ccd903196235c387659989259d27d5162412637ceecae544997d17ddb": "Emits a signal indicating that the active project has been changed, passing the new active project record as an argument.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:_emit_projects_changed:a7ca35da9b956170dc49c2a6cb3dc8a0f686bb64f2840d5b3b674fff425c93a1:1711a0cc99723929f70319dc6e42bc84a4d3beda0831a0383e51ae8b127717e1": "The function `_emit_projects_changed` emits a signal named `projects_changed` with the current list of projects as an argument. This signal notifies listeners of changes to the project list by providing them with an updated enumeration of available projects. The function retrieves the list of projects using the `list_projects()` method and passes it to the signal.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:_ensure_default_project:53490a2b632a73ca5f98f0eb6722babd4e840388f5c769e722b75b0c60b1c753:b5235278b75d1ad6b61e2816272edf68dec10d4740a16d21a3e8609330049c76": "The function `_ensure_default_project` checks if any projects exist within the `ProjectService`. If no projects are found, it creates a new project with the name `DEFAULT_PROJECT_NAME`, ensures the associated storage is set up for the newly created project, and designates it as the active project.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:_ensure_project_storage:937b229be5e9db1738b8073f3df26cc44d42c1e07341276a8a1e3715d54eaae8:f26828055eea92baf7bfb1c71c0686ba11257254def17d1b0a54da81877f705f": "The function `_ensure_project_storage` ensures that the storage directory for a given project ID exists. It retrieves the storage path using `_project_storage_dir`, creates the directory and its parent directories if they do not exist, and returns the path. If the storage path cannot be determined, it returns `None`.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:_load_active_project:bd00569f8ddad8b561dfcffce7598a7878cef829a2316dd1add5ed405dd5a957:f689ceabfe6bc8fb497ca1669f65082dbd41335ddd3fdcb17a6284dc82aa4f11": "The function `_load_active_project` retrieves the ID of the currently active project from storage and validates it against the list of available projects. If the stored project ID is valid and exists in the list of available projects, it sets the active project ID to that value. If the stored ID is not found but other projects exist, it selects the lexicographically smallest project ID as the new active project. If no projects are available, it raises a `RuntimeError`. After determining the active project ID, the function ensures that the corresponding project's storage directory exists by calling `_ensure_project_storage`.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:_load_active_project_id:fd0acedf8ba2ec0a91f934233fdaabd6b7d6288ac5e3779211ee3561d62a338e:d8731fc47bb096864434bb0828d1258cb6064ccfaae08f692ab2966750286440": "The function `_load_active_project_id` retrieves the ID of the currently active project from the application's configuration data. It loads the configuration, verifies that the data is a dictionary and contains a valid \"projects\" dictionary with an \"active_id\" key, and attempts to convert the value to an integer. If any step fails, it returns `None`.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:_load_project_storage_path:2d06c0e2276b6485a1c89b3cace40f78216eda0cf0de6902442c52499df4372b:0e6a40f80835111c423c10e641b353abbcfc91a3f1dcfe59df348991c7a410db": "The function `_load_project_storage_path` retrieves the storage path for a specified project ID from the application's configuration. It accesses the configuration data, navigates through the nested structure to find the `storage_locations` dictionary associated with projects, and returns the path stored for the given `project_id`. If any part of the configuration structure is missing or invalid, or if no path is stored for the project, it returns `None`. The returned path is represented as a `Path` object from the `pathlib` module.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:_path_within:f933e79ab9edbbe7de429e9aec4884a5294e5d231a23f16b501e83a5af5ca66e:c9d13acce5b5c09ef306f28fee618464bd1f2115d1a3042144061df9d7abf51c": "The function `_path_within` determines whether a given path is located within a specified parent directory. It attempts to use the `is_relative_to` method available in Python 3.9+ to check if the resolved `path` is relative to the resolved `parent`. If that method is not available (older Python versions), it falls back to using `relative_to` within a try-except block to achieve the same result. In cases where file resolution fails due to `FileNotFoundError`, it performs a fallback check using `strict=False` to resolve paths without requiring them to exist, ensuring compatibility across different Python versions and edge cases. The function returns a boolean value indicating whether the path is within the parent directory.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:_primary_corpus_root:124a7d4f048b5002b22e25446359f41b26192d42051f6e98988f91644b5c9220:aa6338d0cbf45017bc1adc24d79622b0bf6bc6634f2fda5a05e9b785377718f1": "The function `_primary_corpus_root` retrieves the primary corpus root directory for a specified project. It takes a `project_id` as input and returns the first corpus root path from the list of corpus roots associated with that project, or `None` if no corpus roots are found. The function uses the `list_corpus_roots` method to obtain the list of corpus roots for the given project ID.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:_project_storage_dir:7d6a1d811a10921c28c1140bbe1405b035faea6f4a7d2fb075d1e2b77fbf3dc0:79287a58603210d09318974ae2ebeaa3dc1f81240d372acec3665162a0c1a885": "The function `_project_storage_dir` retrieves or establishes the storage directory path for a specified project identified by `project_id`. It first attempts to load a previously stored path for the project. If no stored path exists, it determines the primary corpus root for the project and constructs a default storage path under that root. If a legacy storage path exists but the new path does not, it migrates the legacy directory to the new location. Finally, it stores the resolved storage path and returns it. The function ensures that the project's storage directory is properly initialized and accessible, handling migration of older project data if necessary.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:_remove_project_settings:1ac688dd97b4f0f154db372b904ec8886abeddc8add5712592f6fe20de872800:88582ba9aa6c8cfb110812d67a6ed029d2b1f44f854abf1f623a840167e2e8bb": "The function `_remove_project_settings` removes project-specific settings from the configuration data associated with a given `project_id`. It loads the configuration, checks if the data and relevant sections (conversation, corpus_roots, storage_locations) are dictionaries, and removes entries corresponding to the specified `project_id` if they exist. If any modifications are made, it saves the updated configuration back to storage.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:_store_active_project:4e71df8f4b7f8535d226026af32327d8ade48e932b01c35ca3e570fcf4dd8e76:0a5030a0026b2e149ec744ce5e5a1334dabcadd088ed66dcf43dfe8e0ad203b0": "The function `_store_active_project` updates the configuration to store the ID of the currently active project. It loads the existing configuration data, ensures it is a dictionary, and sets the `active_id` field under the `projects` key to the provided `project_id`. The updated configuration is then saved back to storage.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:_store_project_storage_path:1fba435b4c080a7e35dd1eec45ac8883c14208cab770344de3c2d322219bb9b3:2dc3615c2b94eb4b46fd78d14c5df5b941cbbf3514a8a974a3c5b99f824d995e": "The function `_store_project_storage_path` updates or sets the storage path for a specified project ID in the configuration data. It retrieves the existing configuration, ensures the data structure is valid, and stores the provided path under the project's ID within the `storage_locations` dictionary. If the path for the project ID already matches the provided path, the function returns without making changes. Otherwise, it updates the configuration and saves it to disk.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:active_project:1ef120286f713baad77eab61aa8f51f4bc92636f1c8ef05f1abe362dc4ceebbd:84f8c0c2b4c03b7f2ab090c06d40e9b3299efa14111528e2d7a063eb93fb71b8": "Returns the active project record based on the `active_project_id`. Raises a `RuntimeError` if the project record cannot be retrieved.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:active_project_id:4e2c8085f33ce8d5975022a911bee0f03561b4ccdf2bda39884b691dd0d3f60b:8c99412c2d8c7a4d39255d43497e7e9165864651d22e8603df384d337a46b2ce": "The function `active_project_id` is a property method within the `ProjectService` class that returns the ID of the currently active project. It first checks whether the internal attribute `_active_project_id` is set to `None`. If it is, the method raises a `RuntimeError` with the message \"Active project not initialised\". Otherwise, it returns the value of `_active_project_id`. This ensures that attempts to access the active project ID are only valid after the active project has been properly initialized.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:add_corpus_root:961af02003be200784c0d260c04dd24db52769e81f0a4091b0acff796a3565dc:6c23b98fce55faf997583d50441d67263a9763254aca2fed46dda5bbdb6a95fa": "The `add_corpus_root` function adds a specified directory path as an indexed corpus root for a given project ID. It ensures the path is normalized and resolves any symbolic links. The function updates the configuration data structure in a thread-safe manner using a lock, appending the normalized path to the list of corpus roots associated with the project if it is not already present. After saving the updated configuration, it ensures the project's storage directory exists and attempts to export a database snapshot for the project, logging any failures.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:clear_corpus_roots:2b207aaf83d40918f3c62a823099fa9c9448977c01f94391497a67131f954f1a:a8d25f46f70e75674fe4321b8d3fb39ac78a2a1008a7160ab52606027f599cb9": "The function `clear_corpus_roots` removes all stored corpus roots associated with a specified project ID. It acquires a lock to ensure thread-safe access to the configuration, loads the configuration data, and verifies that the data structure is valid. If the project ID exists in the corpus roots, it removes the entry and saves the updated configuration. Additionally, it removes the project's storage directory if it exists and clears the project's storage path.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:create_project:75aab7b5a4ed4d2b02c934d11d2a92a38cebf514869348bd804cd9f2520f6389:d20c28a023d0ba45ec93affd2178cfed2c2648201641c2eab338e728550cee56": "Creates a new project with the specified name and optional description, ensuring the project's storage directory is initialized. Emits a signal indicating that the list of projects has changed. If the `activate` parameter is True, sets the newly created project as the active project. Returns a `ProjectRecord` object representing the created project.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:database_manager:31360c5ff01a95f21d549e7a95e7be0898875038174b2f21d19ddd49b70d1936:57231736b093972d74769cac282036ff7c182cf17c637b8cf3b30f0fe43fb781": "Returns the `DatabaseManager` instance associated with the project. This provides access to the SQLite database used for storing project data, including document indices, conversation history, and configuration settings. The returned manager handles all database operations for the project, ensuring thread-safe access and data integrity.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:database_path:e88215d5bddf04111670492f5070da2fa377a0ce571b843a0d66efd9a3f57d15:20b3b71bb5a6f3a0520f0af98adcc430e44a9af814cb99d2d56b93e51a42a51e": "The function `database_path` is a property method within the `ProjectService` class that returns the path to the project's database file. It provides access to the internal `_db_path` attribute, which stores the location of the SQLite database used for project data persistence. The return type is specified as `Path`, indicating it returns a pathlib.Path object representing the database file's location. This method enables external code to retrieve the database path without directly accessing the private attribute, maintaining encapsulation while providing read-only access to the database location.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:delete_project:e4952c27c5afe1bce9a675d9dc144a4d6bd52b82f02458dd3eab53fe00e328eb:a0982c52e02779e1fe2b6209e1b91ef2be3fb44c2aa79221082635dd33dda824": "The `delete_project` function removes a project identified by `project_id` from the system. It first checks that the project is not the active project, raising a `RuntimeError` if it is. It then deletes the project from the internal projects collection, removes the associated storage directory recursively if it exists, and cleans up any project-specific settings. Finally, it emits a signal to notify listeners of the change in projects. The operation is protected by a lock to ensure thread safety.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:export_project_database_snapshot:86dc7efed8ba392de63a41324a0b6ef42f6a1d0a4833140a12d9a64e2bd0c1ff:9e6c0804163ec4843342c5e9f4b9f91247124121f53daa6de0d5e334611b931d": "The function `export_project_database_snapshot` creates a SQLite database snapshot for a specified project and saves it to the project's storage directory. It takes a project ID and an optional filename, ensures the project's storage directory exists, and exports the project's database to the specified location. The operation is thread-safe, using a lock to prevent concurrent access. If the project storage cannot be ensured, the function returns `None`. Otherwise, it returns the path to the exported database file.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:get_project:b76ac1b9f9d4779ba9bcaea727104be3e98d0c62b700c25479fc7825ec5b57b4:0d2ab6236b9c2ba5300979413b2874c9ac98a6a39ee0029ba01f591aebacbd57": "The function `get_project` retrieves a project record from the internal projects dictionary using the provided `project_id`. If no project exists with the given ID, it returns `None`. Otherwise, it constructs and returns a `ProjectRecord` object containing the project's ID, name, and description. The name is defaulted to an empty string if not present in the stored data.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:get_project_storage:89a5482cfa190f08730d0d251d51bedb0250844b641b236a81e5672553be185d:aaf91b897e12929aeec89ada3b832f520b573ef1d5eba4d22f0d85506856f42d": "The function `get_project_storage` retrieves the storage path for a specified project by calling `_project_storage_dir` with the project ID. If the storage path is not configured (i.e., returns `None`), it raises a `RuntimeError` indicating that the project lacks a configured corpus root. Otherwise, it ensures the directory exists by creating it if necessary and returns the path.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:get_project_storage_location:9e1f89e3aacfc26a585a94cff0f581a589d4eaebdb795aa4488b0ee4c731dae4:9fa7ec873c2ea361d532d02d038c052b8b51a7420c80f3cac421241e9a845b4e": "Returns the configured storage path for the specified project ID without creating the directory.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:list_corpus_roots:23686a961968c6f8447c0b0dbba21fc6b1a00aec39cdaeb783ef8357d3f00d1f:67b67b7645791a77ada0146c0af6a74db04582f3600b90c574feb6ec5c17885d": "The function `list_corpus_roots` retrieves a list of indexed corpus root folders associated with a specified project ID. It loads configuration data, validates its structure, and extracts the corpus roots for the given project ID. Each root path is normalized by resolving it to an absolute path. The function returns a list of these normalized paths or an empty list if the configuration is invalid or no roots are found.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:list_projects:983b8ecf696cac186bd2f1c030afea218e89ca6c1c20fca53928f48bfe678e02:9bf5c63ef6aad42fbc5aae6e004e2114eac8e1991a05b1e3c8bdfb9d4d8a079b": "The `list_projects` function retrieves a list of project records from the `projects` storage. It iterates through each entry in the storage, skipping any empty entries, and constructs `ProjectRecord` objects with `id`, `name`, and `description` fields. The function returns a list of these project records.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:load_conversation_settings:bf3cc63df6208a7d3d1cd26336b3097c4952ab0a63b737425fb972de5050a62d:c7344d1a281a446fbccd3ecc5be1541c90f493d05433895d6cedfb6a35aff9dd": "The function `load_conversation_settings` retrieves conversation-related settings for a specified project from the application's configuration data. It accesses the configuration file, navigates to the section containing project settings, and extracts the conversation settings associated with the given `project_id`. If the configuration data is malformed or the project ID does not exist, it returns an empty dictionary. The function ensures type safety by validating the structure of the loaded data at each level of access.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:project_storage_directories:1549d893d660de28b786ac2f825cddb505382bd7b7b75c7770729d787e1199d1:52d41df3ba4cdaa3cbc0b0db83dff122d5b90334b25ad61522dbfb2b1568fa29": "The function `project_storage_directories` returns a dictionary mapping project IDs to their corresponding existing storage directory paths. It iterates through all projects retrieved by `list_projects()`, checks if each project has a valid storage directory via `_project_storage_dir()`, and includes only those projects where the storage directory exists.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:purge_project_data:e1ea3ffeb793c6461b6ea563f09139a92a25e845f1bb71a48203ef359b04e555:a962c55ac6b701613e04d4d986fe1fe00cd37af945ff410eae515dc8afd68a5d": "The function `purge_project_data` removes derived data associated with a specified project ID, including documents, chats, and tags, from the database. It also deletes the project's storage directory and ensures a new storage directory is created for the project. The operation is performed within a thread-safe context using a lock and database transaction to maintain consistency.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:reload:3a851c872f1c814cc4c6b06cef2b0aabcf707b5468056b6e922ff95881d2ea9a:ad447c18c6fb0cd096e5614fa5af2b7cd260bf33bda3e0a563fd6c80a2b2b4e1": "The `reload` function in the `ProjectService` class is responsible for reloading the persisted state of the application after an external change, such as a restore operation. It acquires a lock to ensure thread safety, closes the existing database connection, and initializes a new one. It then reinitializes all repositories associated with the project service (projects, documents, chats, ingestion, and background tasks) using the newly created database. The function ensures that a default project exists, loads the active project, and emits signals to notify listeners of changes to the projects list and the active project.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:remove_corpus_root:a8bec85cfe3ba94d662fa111358ed44a4e202d6c1d6bdc41ee77bf7bf352a972:532fb74aeb5ba397f716d1178097f7201482886cfa72a2dc375a5ee1e20072a8": "The `remove_corpus_root` function removes a specified path from the list of corpus roots associated with a given project ID. It first normalizes the provided path and then loads the configuration data within a thread-safe lock. If the configuration structure is valid, it retrieves the list of corpus roots for the specified project and filters out any entries matching the normalized path. If no roots remain after filtering, the project's entry in the corpus roots dictionary is removed, and the project's storage directory is deleted if it exists. If the removed path is within the project's storage path, the storage directory is also cleared and re-initialized. The updated configuration is saved afterward.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:rename_project:5618353c6c4fc079f34849dac3c4a44de8e70ea7cf5d70cf94085175528aa403:01b7217a699420d4be51420a5d9c8f0138bfa883ce47495c309ff905e421f4de": "The `rename_project` function updates the name and/or description of a project identified by `project_id`. It accepts optional `name` and `description` parameters, and returns an updated `ProjectRecord` object. If neither parameter is provided, it retrieves and returns the existing project record without modification. The function ensures thread safety using `self._lock`, updates the project in the database, and emits signals to notify listeners of changes to the projects list and active project, if applicable. It raises a `LookupError` if the specified `project_id` does not exist.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:save_conversation_settings:1a6d27522c63a60faa7288171283fcea29c0447ace0006519f06d67cc9d50927:cefcd7cd626edf7fa7484bfb3dc7bf59038a4e1c62259c7d745a82c3b2e1e421": "The function `save_conversation_settings` saves conversation settings for a specified project ID into the application's configuration. It loads the existing configuration data, ensures the structure supports nested dictionaries for projects and conversation settings, updates the settings for the given project ID, and persists the modified configuration back to storage. The function handles cases where configuration data or nested structures may be missing or of incorrect type by initializing them as empty dictionaries.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:set_active_project:438b893c32402eb4eb27fc3288422b1f3518bfaff92b94fd802573b4d123f462:a4cc9db327529bc6fe5cfb7283140a3e8522aeacd4ab1c025e685925300c15a9": "The `set_active_project` function sets the specified project as the active project within the `ProjectService`. It retrieves the project by its ID, raises a `LookupError` if the project does not exist, and otherwise updates the active project ID in a thread-safe manner. The function ensures the project's storage is initialized, persists the active project state, and emits a signal notifying listeners of the change.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:set_project_storage_location:b5477061298e7584d5eea017d1ac427cce6d5d8f4e7d9b24c043af8bd0852281:e2d2018a0a59640a5eb735e01339917a10a7b3a0ef6b48d8d6df76a05a7788ec": "The function `set_project_storage_location` persists the specified storage path for a given project ID. It resolves the provided path to an absolute path and, using a lock for thread safety, stores this path in the project's configuration. The function does not return any value.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:shutdown:89fe247c8ef0f292f7d3786bc4ce156d139e2589dd30e1d51c55f3e63df52331:4205ed3b7e6d4c198034af6aebf6acb8f6415cd9a6db2d28027f7bca82baac56": "The `shutdown` method closes the database connection held by the `ProjectService` instance. It acquires a lock to ensure thread-safe operation before closing the database. This method is part of the service's resource management, ensuring that database resources are properly released when the service is terminated.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\project_service.py:storage_root:49095a1543af9acb5115e916a60061259a8cf3e5e239a045927bd887c7e5d03b:9f7eb0a580a8bba48dedb06cc88fd3cb06d3e928188455818d153482caf56dd0": "The `storage_root` function is a property method that returns the `_storage_root` attribute of the `ProjectService` class. This attribute represents the root directory path used for storing project-related data and configurations. The method provides read-only access to the storage root path, ensuring that the location of project files and associated metadata can be retrieved consistently throughout the application's lifecycle. The return type is annotated as `Path`, indicating that it returns a pathlib.Path object representing the file system path.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:SettingsService:e7ab972a9fb4e1b2e411b7d5bfacd9cd525b0379dd5af0d7317404a20da140ea:ef73d8f93e454bb579874915a0efa9455f1c917688d7b014420a9a54057b9ef0": "The `SettingsService` class manages UI-level configuration settings, including theme, font scale, and panel visibility, with persistence and broadcasting capabilities. It loads and saves settings to disk using a `ConfigManager`, and provides methods to update and apply these settings to the application's UI components. The class emits signals when settings change and supports applying themes and font scaling to a `QApplication` instance.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:UISettings:6e1fc267efc5446dec7e7258eac05b9ad25c24bc1bfa0bcfa1c82996c9264eca:3f02ddaac2776c3a294cee372573139bb46887ba3e9d2c724382aa44472cee65": "The `UISettings` class defines a container for storing and managing user interface configuration values. It includes attributes for theme, font scaling, density, splitter sizes, and panel visibility options. The class uses default values for all settings and is intended to persist UI state across application sessions.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:__init__:8de3037fb9f498029df443cce750eae80038a8bb172efa9d96f52f6290f7c274:d50be29396671efd5157496a081b169f7580f5159fa984c714bfde70c41fd400": "Initializes the `SettingsService` instance with an optional `ConfigManager` and sets up internal components for managing UI settings. It initializes a `UISettings` object, prepares a variable to store base font point size, and triggers a reload of settings.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:apply_font_scale:4f0c8468e1239c30c0284f7ae2f1a14c2f9c8e1437a2c3bc524621e76fe7025c:04b349a2837a3ca953a6bc64fcf1ab7ded740a997d1cb700591eff2719bf4dbc": "The `apply_font_scale` method adjusts the application's default font size based on a configured scale factor. It retrieves the current application instance and its default font, determines the base font point size if not already set, and applies the scaled font to the application. If no application instance is available, the method returns without making changes. The scaling is calculated by multiplying the base font size by the font scale setting from the configuration.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:apply_theme:b379c3ef788e43e5f5b66738937d0300d6edb835a93c3aaddf64a4035385bebc:bd863b67b0a82e5fa17724e0824ac3387063995393f9a9a6358695027706096f": "The `apply_theme` method configures the visual theme of a PyQt6 application by setting a color palette and stylesheet based on the current theme setting (`dark` or light). It defines colors for various UI elements such as window, text, buttons, and highlights, then applies these to the application's palette and style sheet. The method supports both dark and light themes with distinct color schemes and updates the appearance of widgets like buttons, labels, text browsers, and lists according to the selected theme. If no QApplication instance is provided or available, the method returns without applying changes.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:density:3884c1bbfc033f0b89477e56ad96a6206fbdadfe17d10f4263250e1eb33f570e:ffff4ac4815154e16a2f28b8e354b83dbd44dc6d722a69a0321b7845bb1bf8fa": "The `density` property retrieves the current density setting from the internal `_settings` object. This setting likely controls the spacing or layout density of the application's user interface elements. The method returns a string representation of the density value.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:font_scale:9486c76b33ad5e075fc818040f9e99696cbc0562ffd8e4121b9401d7a67364ad:e4f6af275d531e6305eedb0026fcb6a05836b233a69d9c63aa52eb79f4caa745": "The `font_scale` property returns the current font scale value stored in the `_settings` object. This value controls the scaling factor applied to fonts within the application's user interface.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:reload:5d645ae9994b1a6ad06c8906e4a425620051b28006fd3509240414d05227c1a3:088f104cafe8c546dfb81897491f0663ab6dfcf618ced93aca9f5102b4ff275f": "The `reload` method loads and applies user interface settings from persistent storage. It retrieves configuration data, validates and sanitizes values for theme, font scale, density, splitter sizes, and panel visibility, then constructs a new `UISettings` object with these values. Invalid or missing values are replaced with default settings. The method ensures that font scale is clamped to a valid range and that splitter sizes are properly formatted tuples of integers. Panel visibility flags are converted to boolean values. Finally, it updates the internal `_settings` attribute and resets the base font point size.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:save:e08a2c92dfa086b6f7949c70f6e058588143ea8baeb02eb5a572ff56e90885cc:d702c9a9e61740731b5ffd74ef98df29f09daec7c86805eef676aad4ed8b90c7": "The `save` method persists the current application settings to disk by loading existing configuration data, updating it with the latest UI-related settings from `_settings`, and then saving the updated data back to the configuration storage. The settings included in the save operation are theme, font scale, density, splitter sizes, and panel visibility flags for corpus and evidence panels. If the existing configuration data or its UI section is not in the expected dictionary format, they are initialized as empty dictionaries before updating.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:set_density:1d4182dc4a1100e4491f996589612b83a41e565e06437153af3865c4a64dc128:f5706de06029f58f74823da54f1ca91239b60a364a70e72e75de35994ef89106": "The `set_density` function updates the density setting of the application interface. It accepts a string input, normalizes it to lowercase, and validates that it is either \"compact\" or \"comfortable\". If the new density value differs from the current setting, it updates the internal settings, saves the change, and emits a signal indicating the density has been updated.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:set_font_scale:fe1dacda5e6e80d007bc912625be3da22b094e08b938a3793a4da2bfc3d5f6c8:e60f0dd6b94411e685258a059414f9e08be38449de572b3f242109f089fbd80c": "The `set_font_scale` function updates the font scale setting within the `SettingsService` class. It accepts a float value representing the desired font scale, validates it, clamps it to acceptable bounds defined by `MIN_FONT_SCALE` and `MAX_FONT_SCALE`, and only proceeds to update the setting if the new value differs from the current one. After updating, it saves the change and emits a signal indicating the font scale has changed. If the input cannot be converted to a float, the function returns without making changes.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:set_show_corpus_panel:7bd9868541e1c0e9322d7765bb08e40edf3a5de90c0d19726cf531daec669a3b:6a862884085af259e73320a53ff01f1115fa8e61372a2163bb46deebb05f40a8": "The `set_show_corpus_panel` function updates the visibility setting for the corpus panel in the application's UI. It accepts a boolean value indicating whether the panel should be shown or hidden, validates that the new value differs from the current setting, and if so, updates the internal settings and persists the change to storage.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:set_show_evidence_panel:2418edc42d232726790a367a2ce125961c33a209ef89377d42d373ccf2c6b535:729b3e58e7f3d8cc187a835e357681010605dfb0fa558594d50d0bc3f52a2012": "The function `set_show_evidence_panel` updates the visibility setting for the evidence panel in the application's settings. It accepts a boolean value indicating whether the panel should be shown or hidden, validates that the new value differs from the current setting, and if so, updates the setting and saves the configuration.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:set_splitter_sizes:1915029c4fbaccd743990dc7d183fd337dc4b8110a5b2c0966a7d1c835fd1d1c:bdd9ae0eeb2ed767620dd2b89e3553dd28dbe90b31452d42e0d260de9b0d8f76": "The `set_splitter_sizes` method updates the splitter sizes in the application's settings. It takes an iterable of integer values, ensures each value is at least 80, and validates that exactly three values are provided. If the new sizes differ from the current settings, it updates the stored splitter sizes and persists the change by calling the `save()` method.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:set_theme:0d38adc472db2a180f2a6c0f1693591247a4f00a53bb5c4dedf8cbc10bcecc16:63401e52e8418cf35b57de33f1bb8a3d9e248a919dc844caf229b41454b3d629": "The `set_theme` function updates the application's theme to either \"dark\" or \"light\" based on the provided input. It normalizes the input string to ensure consistency, checks if the theme has changed, and if so, updates the internal settings, saves the change, and emits a signal indicating the theme has been updated.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:show_corpus_panel:ea9663ad1e300928c7d73af66b7aef57ca6f42104ed2d55571e6ff7c569668c8:e489def0cd5e8fe34ce8f4c7bf04f316f05a47edb4367ee5a290aea407ff4c1d": "The function `show_corpus_panel` is a property method within the `SettingsService` class that returns the current value of the `_settings.show_corpus_panel` attribute. This attribute controls whether the corpus panel is displayed in the application's user interface. The method provides read access to this setting, allowing other components to determine the visibility state of the corpus panel.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:show_evidence_panel:09859ef905f055cf806405c94237ca4f2bea00afac48519aefdfaf378bda3022:21ecae28ebb740e1f60795aab86d09ae5e662f2fb4e31310c5eff6699df5b376": "The function `show_evidence_panel` is a property getter method within the `SettingsService` class. It returns the current value of the `_settings.show_evidence_panel` attribute, which determines whether the evidence panel is displayed in the user interface. The return type is a boolean value (`bool`).",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:splitter_sizes:eb34387fc9872e291e7cd68c911e8d6d4b4a39fa1f6fc668b3078fc3df6c92cb:4072c525b82a795b5ead5b1c3e91434081224a4911dfb6aea8dfb1a2a5380efd": "Returns a tuple of three integers representing the splitter sizes stored in the settings.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:theme:3f92f696bea47afbadd43e00633a8dc353259114ee65c7b5d43ca4cc966b9f8b:ed891ebc75fff401441a6d1b51d9de61474546365141634c52d46c918e864462": "The `theme` property returns the current theme setting from the internal `_settings` object.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\services\\settings_service.py:toggle_theme:093a931f22da465816c5f6b37d0afbb689cd3111b4184054d978e9202e564492:9e80aa1145c1509854d3e0b1e145a3b8ead0b8ab1fb259e506aafd6e4883238a": "The `toggle_theme` function switches the application's visual theme between \"light\" and \"dark\" modes. It checks the current theme stored in `self._settings.theme`, and calls `self.set_theme()` to apply the opposite theme. If the current theme is \"light\", it sets the theme to \"dark\", and vice versa. The function does not return any value.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:BackgroundTaskLogRepository:6a46b2d8849bee9b90cf3793f9f2dbf8f5c5189fc1179b9be0e428ed10a52d14:0a657a5b02d17d0d0ef8249d3d18f54348edde6b55cef11970ea092c90696e04": "The `BackgroundTaskLogRepository` class provides methods to store and retrieve metadata for background task executions, including creating new task logs, updating their status, and querying incomplete or completed tasks. It supports storing additional structured data as JSON and handles database transactions for data integrity. The class offers functionality to list tasks based on their status and retrieve the latest or all completed tasks for a given name.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:BaseRepository:e0d062e787b02818c25fbb69aa2cb24570a049fa95741038b8e16e136ad637f0:abd2e14929144af88cdc9e570bb54c6ade5132f9221f05f6fb399353ed631ed1": "The `BaseRepository` class provides shared functionality for repository implementations, including database connection management and utility methods for handling database rows. It defines a context manager `transaction` that yields a database connection within a transaction scope. The `_row_to_dict` static method converts a SQLite row object into a dictionary representation.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:ChatRepository:7dbb331db5c4cdab69fe32d604a786c3b8fb27f4f339806f50aca4fd748617f7:06ed8be24deca0e926159cd9905f26328fe151bda038e5f9369cae34281ca3ac": "The `ChatRepository` class provides methods to manage chat sessions, including creating, retrieving, listing, and deleting chats, as well as handling query scopes associated with chats. It also supports operations on citations and reasoning summaries linked to chat sessions, such as adding, retrieving, and listing them. The class uses a database connection and handles JSON serialization for query scope data.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:DatabaseError:c273831b62d8243c5f09da8cc359189deef30c23cb387968e31e34fb347c07fd:6128a6b1acc4d8c798a4b60586f4528447acd68dfa01137941c8fcc74608d0d6": "This code defines a custom exception class named `DatabaseError` that inherits from Python's built-in `RuntimeError`. The exception is specifically intended to be raised when database initialization or migration processes encounter failures. The class serves as a specialized error type to handle database-related runtime issues in a structured manner.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:DatabaseManager:f646a609cc42d7f89e58229280083b79b09489bd963b894661182296aca505eb:1c73fb2893bed488f59701e7f77897c1f01117832259db517d3197c0f3d7535b": "The `DatabaseManager` class handles SQLite database connections with thread-safe singleton access, manages schema initialization and migrations, and provides methods for exporting and importing database snapshots. It ensures atomic operations through transaction handling and maintains a consistent database version using PRAGMA user_version. The class supports concurrent access by thread ID and includes functionality for backup and restoration of the database state.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:DocumentRepository:4e94cb20b49946521eca51459f219fed2987c958105e0fdb8d0571ee1dabc90d:c94ef06e8e8bebeb357ecbfbcbbb855b239c5ec0bdb9eed14182c0ff316f44dc": "The `DocumentRepository` class provides methods to manage documents, including creating, retrieving, updating, and deleting documents with associated metadata, file paths, and folder structures. It supports tagging documents and listing them based on project, folder, or tag criteria, with functionality for recursive folder searches and tag count updates. The class also handles file versioning for documents, allowing storage and retrieval of multiple versions with checksums and file sizes.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:IngestDocumentRepository:e76c064a8f3632b3527ee41cf3a8e484d5b86e0a948fadde1ea219c42dc7bc6c:729589540ff6a9cca1bc22d94a605f8a1121d59a47e00d943abbe1f8daa51ba8": "The `IngestDocumentRepository` class provides methods to store, retrieve, and search parsed document data, including text, metadata, sections, pages, and search indexes. It handles versioning of documents by path, manages document chunks for full-text search, and supports deletion of documents and their associated search indices. The class includes functionality for normalizing text, building previews, and performing search queries against indexed document content.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:ProjectRepository:4bbb23d6604747709f42e8040c26bcce75aad89c1b1afdb965f837ebbc121a48:1fe7fd34d18163a4bc260f9f1636e9fb39a38a8f2a07e353752ebd3018608864": "The `ProjectRepository` class provides methods to perform create, read, update, and delete operations on project records in a database. The `create` method inserts a new project and returns the created record. The `get`, `list`, `update`, and `delete` methods retrieve, list, modify, and remove projects respectively, using SQL queries executed within database transactions.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:__init__:3fc0a27d273c8aeb11fbcb393e0860060a12f87ab74e5d27ab405195ad1e6c26:c0c35815feb3187309087b976257e59439e36c608c4a0c320f85b5e8c532b456": "Initializes the `BaseRepository` instance with a `DatabaseManager` object, establishing the database connection and management interface for the repository.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:__init__:9580ec03eb9b2909470186731dbe0a8803c8beb3ec665bfd31c292bb377538aa:5463020a32c92b302f89602fcbd089d8bb54005d0a100d235e10f730ba61fed9": "Initializes a `DatabaseManager` instance with the specified database file path. Creates the parent directory if it does not exist. Sets up a reentrant lock for thread-safe database connection handling and initializes a dictionary to store database connections per thread.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:_apply_migrations:79851e5abebbc5d985ab61c2f30d2d8350cb0f8ec5d5f817a7a3908113a090b1:cde59a08da5deb1648f409c6b8cd1a2c126cd3fd1905c70c4d5f1fec38638b6d": "The function `_apply_migrations` is a placeholder method intended for applying database schema migrations. It takes a SQLite connection and the current schema version as inputs, and it checks whether the current version is less than the target `SCHEMA_VERSION`. If the current version is greater than or equal to the target version, the function returns without performing any action. Otherwise, it calls `_install_base_schema` to reinstall the base schema, effectively resetting or updating the database structure to match the expected version. This approach avoids implementing incremental migration logic and instead applies the full schema each time a migration is needed.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:_build_folder_like_pattern:1eb3e6a9cc15121784cae613c61fb2924b0a96a784598aafeb984704bb325964:2227bc6a73e9c75e42fd3a9c5400eb373bdf48b0a0577273956f56ea01579f45": "The function `_build_folder_like_pattern` constructs a SQL LIKE pattern for folder-based queries. It sanitizes the input folder path by escaping special characters `%` and `_`, then appends a wildcard `%` to match subfolders. The function determines the appropriate path separator (`\\` or `/`) based on the input, ensuring compatibility with the file system. The resulting pattern is used to query documents within a specified folder or its subfolders.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:_build_preview:fa138e8a5013b6e6c6d545c487c25c5b31c97639b37cc0b53cbb865390a19ea6:9bf11a188ed1bc88b86efb9d64926a70b3c9d2e021d14ba43a1b1eae770fd904": "The function `_build_preview` generates a truncated preview of a given text string, ensuring that the preview does not exceed a specified character limit. If the input text is shorter than or equal to the limit, it is returned unchanged. Otherwise, the function finds the last space within the limit to avoid cutting words in half, and truncates the text at that point. If no space is found, it truncates at the limit. A trailing ellipsis (\"\u2026\") is appended to indicate truncation.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:_chunk_document:7e554baeb1e93bad3068d1cfce60e8ff6b27d4919f18fbe73e1de46b079be0d5:de3c10f75fa072412e4ddafcc03d8a4cb32a0a7d0bbc2d8e26ac30edff1f17bd": "The function `_chunk_document` splits the input text into overlapping segments (chunks) based on token counts, with options for specifying maximum tokens per chunk and overlap between chunks. It processes the text using regex to identify non-whitespace sequences, then iteratively builds chunks while respecting the specified token limits and overlap. Each chunk includes metadata such as index, text content, token count, and offset positions. If no valid chunks are generated, it falls back to using the normalized text as a single chunk. The function ensures that chunking respects the maximum token limit and handles edge cases like empty or whitespace-only text.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:_decode_chat_row:7a1e53db515ecf953e13d6ee05428f83f5acb8c5a72073f53023220f25e4db9f:1baaa1dfea5a687f40923239d0e43a26bd9576875c0493a2003de18939c0fa6c": "The function `_decode_chat_row` takes a single row from a SQLite database query result and converts it into a Python dictionary. If the input row is `None`, it returns `None`. Otherwise, it creates a dictionary using the row's column names as keys and their corresponding values. If the row contains a column named `query_scope`, the function parses its JSON-encoded value into a Python object. The resulting dictionary represents the decoded chat record, with proper handling of structured data within the `query_scope` field.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:_decode_document_row:73f07a84ffd09a6d0d68ca32200b69777dfe13e49d2747d2192cd9df56c5e4f4:792de48ed2d3eb6eb9bd0cea5df4520a5a75f411a4da22ab1fbf247806d592be": "The function `_decode_document_row` converts a SQLite database row into a dictionary representation. It extracts all column-value pairs from the row and, if a \"metadata\" field exists, deserializes it from a JSON string into a Python object. If the input row is `None`, the function returns `None`.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:_decode_document_row:af8d49c40bbc5d29ee493e961fc6f017b721b0600028e4dcd4b1a4a9c2b9c351:2a3eed2cdc51bf77c215fb8c2c55c6a3d4e16bd3a15b42345fd378c0c01553d8": "The function `_decode_document_row` converts a database row into a dictionary, decoding JSON-encoded fields and casting boolean values. It takes a row from an SQLite query result and returns a dictionary with the same keys, where the values are extracted directly or parsed from JSON for specific fields (\"metadata\", \"sections\", \"pages\"). The \"needs_ocr\" field is explicitly cast to a boolean. If the input row is `None`, the function returns `None`.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:_delete_chunks_for_documents:96a9d2e22b6af1f938025f3b44acc1735b5b92b00296547e4e320ec0cb9242fe:9da981526f23fdc4cba7e326198ecaee9c0953b729a403a7859098a90e6ddf5e": "The function `_delete_chunks_for_documents` removes all text chunks associated with a set of documents from the database. It accepts a database connection and an iterable of document IDs, fetches the IDs of chunks linked to those documents, and deletes both the index entries and the chunk records in two separate SQL DELETE operations. If no document or chunk IDs are provided, the function returns early without performing any actions.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:_get_user_version:e857a5062588bd7a7c6c2b692e8926411f2dd6cabe644e30663c04e527ef24f1:04cd2bd457fc55fefa24fae0a7c71ba285060a3ec1222d169bdce4ed0c971bca": "The function `_get_user_version` retrieves the schema version of a SQLite database connection by executing the `PRAGMA user_version` command. It fetches the first row from the result and converts the first column to an integer, returning 0 if no row is found. This value represents the current version of the database schema.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:_install_base_schema:74529c5e9ed2da195f0dbd9cdc3f97dd88a5b3e8521d83664c6dd02a010e776d:cf7a7ceb46176f8d0f0de79e7ccee9a553534e81fda6a43e8d247f2454e8662b": "The function `_install_base_schema` initializes the database schema by reading SQL statements from a file specified by `SCHEMA_FILENAME`, executing them against the provided SQLite connection, and setting the database's user version to the current schema version. This ensures the database structure is correctly set up according to the defined schema.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:_normalize_folder:35e923519889b6b5a03c8b01a1fc7c2631a5bb2308f4c757854303cf2e02dcf6:b6ac64dba47a057c8e68ce0ba8fbe399bc970a8e47fb4553599b3e14fc7d1b55": "The function `_normalize_folder` takes a file path as input and returns its normalized absolute path as a string. If the input is `None` or an empty string, it returns `None`. The normalization process resolves the path to its absolute form using `Path.resolve()`.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:_normalize_path:d4280ca98481b3d1d39a715242955bbee75b1f5dcf884f5935b4af7fa9b5c117:aa20f7e72e86cf5e87b65f24c3193dae715cd94995a40c4ea754cdf4e08fe5e9": "The function `_normalize_path` takes a path input, which can be a string, `Path` object, or `None`, and returns a normalized string representation of the resolved path. If the input is `None`, it returns `None`. The normalization process resolves the path to its absolute form and converts it to a string.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:_normalize_text:cd62194c0cc148742d29b7df488e2ed2b44687b0fd4b4eb8faa0855e104e4505:232c2510dec0eb5131476af62f6887a0b8978d226c97b563c6e48c9cab92a968": "The function `_normalize_text` takes a string input and normalizes it by replacing all sequences of whitespace characters with a single space, then strips leading and trailing whitespace from the result.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:_replace_chunks:3dc3a6e1e184fc1eb11364aaaba473e8a6b813ddc06638a922e7bc61eae89066:72981242ce3ea7726512288b64890e4146754a77a36cdafbd1d844567edeb4c0": "The function `_replace_chunks` replaces the text chunks associated with a given document in the database. It first deletes existing chunks for the specified `document_id`, then inserts new chunks generated from the provided `text` and `normalized_text`. Each chunk includes metadata such as index, token count, and offset information. Additionally, it populates an index table with search-ready content derived from each chunk, linking it to the document and chunk identifiers. The function operates within a provided database connection and is used to update document content while maintaining indexed search capabilities.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:_row_to_dict:06332d8e6d41f656a6ddcd8db30055ed5a77fb74a40d7acf6a828fa2049f8a02:97b7eb291111df30584157503fe2f50b9dfbf97e20a9107a65327af71decaa8b": "The function `_row_to_dict` converts a SQLite database row into a dictionary. It takes a single parameter, `row`, which can be either a `sqlite3.Row` object or `None`. If the input is `None`, the function returns `None`. Otherwise, it constructs and returns a dictionary where the keys are the column names from the row and the values are the corresponding data from the row. The column names are obtained using the `keys()` method of the `sqlite3.Row` object.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:_set_user_version:580b24d1a6ab17f2356c3978b50cffa5cddbf5f1c565bfd7f78e8c880e7b62dc:4eb0bba8b304db58393337933051b6351afb62acae26591659a3f27c997ecfcd": "The function `_set_user_version` sets the user version pragma of a given SQLite database connection to a specified integer version number. This is used to track the schema version of the database.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:add_citation:af6cfbc1d7977014bc2e2b059fade8bbd48468d489a8a1b77feabc9c360013f8:f38983069a37155bf5d2ed0a691b88e7db72e554b7a339b6db5c2b3ca5e6d90c": "The `add_citation` function inserts a new citation record into the database associated with a specified chat ID. It accepts optional parameters for `document_id`, `file_version_id`, and `snippet`, which are used to populate the corresponding fields in the `citations` table. The function executes the insertion within a database transaction, retrieves the ID of the newly inserted row, and returns the full citation record by calling `get_citation` with the new ID.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:add_file_version:e511a7940aa8ac598e93704293c1da4d321470ca8272123daae266a3b388f7f1:cc19ab1df9aee7762354e281574b34469ffdf5f7399e1cecf5e7bfde17dca7f2": "The `add_file_version` function adds a new file version entry to the `file_versions` table in the database for a specified document. It calculates the next version number by incrementing the highest existing version number for the document, or starts at 1 if no versions exist. The function inserts the new version record with the provided file path, checksum, and file size, ensuring the file path is normalized to an absolute path. It returns the inserted file version record by calling `get_file_version` with the ID of the newly inserted row. The operation is wrapped in a database transaction to ensure atomicity.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:add_reasoning_summary:3335d52fe7102234dbed2eb0f15aefbf1e9f24a8dcdf5910911ccc81e96e5719:c0bb810f0fa42b5e1a5fba2ff432bef4ecd583f97e860c6c3de6568c5ea600e3": "The function `add_reasoning_summary` inserts a new reasoning summary into the `reasoning_summaries` table associated with a specified chat ID. It uses a database transaction to ensure data consistency, executes an INSERT statement to add the summary content, retrieves the ID of the newly inserted row, and then returns the inserted reasoning summary by calling `get_reasoning_summary` with the new ID. The function takes a chat ID and content string as inputs and outputs a dictionary representation of the inserted reasoning summary.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:close:ca70613704218631a6eb81483086dbf8d90a7a4de2929dc1e6ef96f3503fa269:617e0a4f5afd5220a665d4340ca3a0effe83ad5160efd4df1dd6e0f482538563": "The `close` method closes all active database connections managed by the `DatabaseManager` instance. It acquires a lock to ensure thread-safe access, retrieves all existing connections, clears the internal connections dictionary, and then closes each connection individually. This ensures that all database resources are properly released.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:connect:724be2717cf062d20701132d48d354624c30c3545c86cf1beaef32c30cd2f734:5c5c8de19b8fe086abada3cdf72df98c50c2e4fd9f2ba860a4123a34f9a31f3b": "The `connect` method returns a thread-local SQLite database connection, ensuring that each thread has its own connection instance. It uses a reentrant lock to manage access to the connections dictionary, which maps thread identifiers to their respective database connections. If a connection does not exist for the current thread, it creates a new one with specific settings: `check_same_thread=False` to allow cross-thread usage, a `sqlite3.Row` row factory for dict-like row access, and enables foreign key constraints. The method ensures thread-safe access and maintains a singleton-like behavior per thread.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:create:5f99e45f7da19d933d0e687bd26127280846be7aa64e630fd341b4c5926ca343:93da0b3b425a1816074d6ab3e39456abd388cc2dc3573bc8594c46f0e4ef83bf": "The `create` method inserts a new background task log entry into the SQLite database. It accepts parameters for the task name, status, optional message, and optional extra data (which is serialized to JSON). The method executes an SQL INSERT statement within a database transaction, retrieves the ID of the newly inserted row, and returns the created task record by calling the `get` method with the new task ID.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:create:7dff6349d9277195860232bf63c6e2febadf7dbdd92ed3a51ca28d83697ae28f:e00d4c4146090faf5ac0ff9c73cadef043283132a417e5f72160d97fadbdfd9b": "The `create` method in the `DocumentRepository` class inserts a new document record into the database with specified attributes. It accepts parameters for project ID, title, source type, source path, metadata, and folder path. The source path and folder path are normalized using helper methods, and if no folder is provided but a source path exists, the parent directory of the source path is used as the folder. Metadata is serialized to JSON format. A database transaction is initiated to insert the document into the `documents` table, and the newly created document's ID is retrieved. Finally, the method returns the complete document record by calling the `get` method with the new document ID.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:create:897e4a6df0f8df607ea4cc7e9eedd9859033bc609c87c658619ea0a019d6a895:e456eead64fe26882abf6c46ce7542b16a9e27a3faa0638fb3b378da729a7ece": "The `create` method in the `ChatRepository` class inserts a new chat record into the database. It accepts a project ID, an optional title, and an optional query scope dictionary. The query scope is serialized to JSON before being stored. The method uses a database transaction to ensure data consistency, executes an INSERT statement to add the chat, retrieves the newly created chat's ID, and returns the full chat record by calling the `get` method with the new ID.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:create:cc9aacc2b086938034938ba4aa7cf60ffe33dadadabbd5f9fc286271ba13f377:6e21a91b47cc12aca2cf95d0391828bca27b0976f27b5753864b6ecb7898f18d": "The `create` method inserts a new project entry into the SQLite database with the specified name and optional description. It uses a transactional context to ensure data integrity, retrieves the ID of the newly inserted row, and returns the full project record by fetching it using the retrieved ID. The method supports creating projects with or without a description.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:create_tag:f597bd8c81778668f1baeb16f7c8a0e2db518fbfb9922f246171e40e25116620:3f91b6ea889ace0481e37e290033bdc2879e91b80ccf8c4c61f64eff23fef3b5": "The `create_tag` function inserts a new tag into the `tags` table with the specified project ID, name, description, and color. It uses a database transaction to ensure data consistency, retrieves the ID of the newly inserted tag, and returns the created tag's details by calling `get_tag` with the new tag ID. The function accepts parameters for `project_id`, `name`, `description`, and `color`, where `description` and `color` are optional.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:delete:01319efbb8ac34f699efef472a1ad8c2bcd75277ba040f468f2dc90bde243078:93586b9006fb92041c303a45ee7d30c0a0ca05bcdef69f6de3ca9e17afd7e3dd": "The `delete` function removes a document record from the repository based on its ID. It first retrieves all tag IDs associated with the document, then performs a database transaction to delete the document and update the document count for each associated tag. The tag document counts are decremented, ensuring they do not go below zero. The operation is atomic, maintaining data consistency through the use of a transaction block.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:delete:b9e796058cac5e8e208edd438de5ade51b8882c6c3dbb79521e8b8d709099213:ae0542b58dbdc28282a9d32bdb63d2d77aab40ec050072c6f77245e22e311c51": "The `delete` method in the `ChatRepository` class removes a specific chat record from the database by its ID. It performs the deletion operation within a database transaction to ensure data consistency. The method takes a single parameter, `chat_id`, which specifies the unique identifier of the chat to be deleted. The SQL query executes a DELETE statement on the `chats` table where the `id` matches the provided `chat_id`.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:delete:c43e486ea644c6ee74d8738d1eea6bda800c85d8766c404df603443d99254676:5d06b364a39d76b70c5a472743a71788f611ae32700d749236126587415736af": "The `delete` method removes a project entry from the SQLite database by its ID. It executes a DELETE SQL statement within a transactional context to ensure data consistency. The method takes a single parameter, `project_id`, which specifies the identifier of the project to be deleted. No return value is provided.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:delete_by_paths:a3e38f15143b64bb9857383e04677c470fccdeb679f07b35930dc51b158fa1d2:f3d2285ee2e6b39424478ad07023970744097fe1328f56983c4bea2777f4ea68": "The `delete_by_paths` function removes all ingest records associated with the provided file paths from the database. It normalizes the input paths to absolute forms, deduplicates them, and deletes corresponding entries in both the `ingest_documents` table and its associated FTS index. The function returns the total number of deleted rows across both tables.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:delete_tag:30bb23144792c8c49dba14ef1864e5cc137480bff715a03e30d9980f7c52f34f:1931f1f8106f8fa5afbe0f3cbe21f59cb3e0481fb3b4bde1ab5f6405eea3c5f7": "The `delete_tag` function removes a tag from the database based on its unique identifier. It executes a DELETE SQL statement on the `tags` table, targeting the specific tag by its `id`. The operation is performed within a database transaction to ensure consistency.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:export_database:fff700315b14dd7680bfc35f743d1017717fb34f68164942b640fce485fc60d6:b6ecf914ac5f547c98b85c817aeccccdb65f55f3194e8afaeabdd99a403f5bc2": "The `export_database` function creates a consistent snapshot of the database at the specified destination. If the destination is a directory, it generates a filename with a timestamp prefix. It ensures the destination directory exists, establishes a database connection, and uses SQLite's backup functionality to copy the database to the target path. The function returns the full path to the created backup file.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:find_latest_completed:7da3f59dc10882c9d535bd43000516655417a344c7c6dc171130671645f3f51d:4aff2ebaf62cc32158ee286ef47948c5e4b9fb74967a04e70e0973a615b3b5eb": "The function `find_latest_completed` retrieves the most recently completed task record from the database for a specified task name. It queries the table associated with the class, filtering for records where the task name matches and the status is 'completed'. The results are ordered by `completed_at` and `created_at` in descending order, ensuring the latest entry is returned. If a matching record is found, it converts the database row into a dictionary and parses the `extra_data` field from JSON format if present. The function returns the processed record or `None` if no matching task is found.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:get:0de77bfec0765825ed222b6588eb6e0619171f1665a84b4a9b32a68f0b511299:ac7e587212c17e52f67520587cd7777aef10b4ac48e52d23c285730c35be29f9": "Retrieves a document record from the database by its unique identifier and returns it as a dictionary. If no document is found with the specified ID, the function returns `None`. The retrieved data includes all fields stored in the `documents` table, and is processed using the `_decode_document_row` method to format the result.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:get:1a27bacffff1fac85cc285cdba39b89baa38f650e4e000ef79ab756c57f2233b:cc3329ca504c1ae7204b3b3287b983115c1a4566bf7a1bded41e1f7eff68e0a2": "Retrieves a document from the database by its ID and returns it as a dictionary, or None if not found. The document data is decoded from the database row using the `_decode_document_row` method.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:get:4e5173e5cb17d9077100916676f29e5210af14546e13c16220cb3aba30993af6:872138da13fc35d576e803661081ea2376b1ad11b9614832eb73afa41fc876ef": "The `get` method retrieves a specific chat record from the database by its ID. It executes a SQL query to select all columns from the `chats` table where the `id` matches the provided `chat_id`. If a matching row is found, it decodes the row into a dictionary using the `_decode_chat_row` helper method and returns the result. If no matching row is found, it returns `None`.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:get:72918f86ac03bd82de9e3fabba2fd6fd0174c916f92b8d23fb9763250f91da82:271de0dcf3959ef0ae845c39f4d00c9d173c3724f861cdc65e8661223282d401": "Retrieves a project entry from the database by its ID and returns it as a dictionary, or None if not found. Uses a SQL query to select all columns from the `projects` table where the `id` matches the provided `project_id`. Converts the resulting row data into a dictionary using the `_row_to_dict` method.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:get:fbcbdd0b3ff51260343b4f69afa56beb88dd3f927cf0ac4d81f60fcc7de0a1de:a7c4db99c482562198790521b7fc0a9e4f716e5cd28c6d7c444de098e7941b1f": "The `get` method retrieves a specific background task log record from the SQLite database by its unique identifier (`task_id`). It executes a SQL query to select all columns from the table associated with the repository, using the provided `task_id` as a filter. The resulting database row is converted into a dictionary format via the `_row_to_dict` helper method. If the retrieved record contains serialized JSON data in the `extra_data` field, it is parsed back into a Python object. The method returns the formatted record as a dictionary if found, or `None` if no matching record exists.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:get_citation:f13e3ba41f80966cdfc3f9c7ff05d7b19990432aee6c443a9301b01d9a781121:ac98a9369387d9217562f2817450caa4f0f4cede9d5fe027f5032ad07cbd6648": "The function `get_citation` retrieves a single citation record from the database by its unique identifier (`citation_id`). It executes a SQL query to select all columns from the `citations` table where the `id` matches the provided value. If a matching row is found, it converts the row into a dictionary using the helper method `_row_to_dict` and returns the result. If no matching row is found, it returns `None`.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:get_file_version:1adb3d263feba39e04e6f6a6b8ca8ff8a74675249146fd07159d9187f5061540:66df20c92cc97e8f580106a63a3b19e13daeb2116008e14554ced17706d58b29": "The function `get_file_version` retrieves a specific file version from the database based on the provided `version_id`. It executes a SQL query to select all columns from the `file_versions` table where the `id` matches the given `version_id`. If a matching row is found, it converts the row into a dictionary using the helper method `_row_to_dict` and returns the result. If no matching row is found, it returns `None`.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:get_latest_by_path:dd69b7806136c5642929f5222ca64e7a1807c9732f4746c880c98637c70b079a:ece2317f8b0c182e82a9aa0cffeafc62493f9e64026769635dcc09a50aa182a2": "Retrieves the latest version of a document entry from the database based on the specified file path. The path is normalized to its absolute form, and the query fetches the most recent entry for that path ordered by version in descending order. If a matching document is found, it decodes the database row into a dictionary representation; otherwise, it returns `None`.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:get_query_scope:642538efd1d36cb3f33f643772fcc24ce24a54c5614fa0dcbaafcfaedea93f77:5ced8c834fa18646d3866afeba77cb1eebf4dbd4b153d38888d91faa0b43faf8": "The function `get_query_scope` retrieves the query scope associated with a specific chat identified by `chat_id`. It first fetches the chat record using the `get` method of the `ChatRepository`. If the chat does not exist, it returns `None`. If the chat exists, it extracts the `query_scope` field from the chat data. The function validates that the `query_scope` is a dictionary; if not, it returns `None`. The purpose of this function is to provide access to the query scope configuration for a given chat, ensuring type safety by confirming the returned value is a dictionary.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:get_reasoning_summary:8bff7ff5517567fbcd982ad62e1604583c723eed5b2b69020dfbd8d79cbadbb3:88a8b116d86e4c74f9de179849a7d05da42bb6ca4332fb66c1d7494a5cf0faa7": "The function `get_reasoning_summary` retrieves a single reasoning summary record from the database based on the provided `summary_id`. It executes a SQL query to select all columns from the `reasoning_summaries` table where the `id` matches the input parameter. If a matching row is found, it converts the row into a dictionary using the helper method `_row_to_dict` and returns the result. If no matching row is found, it returns `None`.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:get_tag:2a958fc15f57062e42ab40bb079960f648a605269ea929570a1b5a0532b20195:7e2f6ed80b95a371d6281750d8607f4b31270d57db3a710e6141865184ebe24a": "Retrieves a single tag record from the database by its unique identifier and returns it as a dictionary. If no matching tag is found, returns `None`. The function executes a SQL query to select all columns from the `tags` table where the `id` matches the provided `tag_id`, then converts the resulting row into a dictionary using a helper method `_row_to_dict`.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:import_database:4ce8bd6e77625ac6290f8b98d41429e0bff63058aa01f519e4babd54c2ff66ee:fe8ca08ddd78532627e863c541de1137bb64b43d6d48494c46c15bf138b99001": "The `import_database` method replaces the current database file with a specified source database file, ensuring schema compatibility. It validates the existence of the source file, closes the current database connection, and creates a staging copy of the source database. The method checks the schema version of the staging database against the supported schema version, raising an error if the imported database uses a newer schema. If the schema is compatible, the staging file replaces the current database file, and the database is re-initialized. The method returns the path to the newly imported database file.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:initialize:5be685d45978456526dd8202c9e6102110df234d6e416f0b3507212e2ec292f4:471acf6f8a0dc4e6eaed5bb0b7d4f7c85c61a6b740a0550ee20bd52339c59aae": "The `initialize` method bootstraps the database schema by ensuring it is up-to-date with the required migrations. It retrieves the current schema version, validates that it is compatible with the application's supported version, and applies necessary migrations if the schema is outdated. If the schema is new, it installs the base schema. The initialization process is wrapped in a transaction to ensure atomicity. If the database schema version exceeds the application's supported version, it raises a `DatabaseError`.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:list:e25e4ed758c18528bb9c9409325268782aada983651fd55188cbaad32e4a6157:8d70973d054e4ac245e1a805bf3aee12cc3e4d97d3cf1ca133987eb6099fc47e": "The `list` method retrieves all project entries from the SQLite database, ordered by their creation date in ascending order. It executes a SELECT query on the `projects` table, fetches all rows, and converts each row into a dictionary format using the `_row_to_dict` helper method. The result is a list of dictionaries, where each dictionary represents a project entry with its fields as key-value pairs.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:list_all:d49c9c8cf86fcf5463c8c768aa36247dcacec8e9e1a0c21aa59dd4f3ff296cf3:3a2730338b86af54a7e4de8243ee87546a147f4849569e9c176b639d6dfdf2fe": "The function `list_all` retrieves all records from the `ingest_documents` table in the database, ordered by creation date in ascending order. Each retrieved row is decoded into a dictionary format using the `_decode_document_row` method. The function returns a list of these decoded dictionaries, filtering out any None or invalid entries.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:list_citations:06af3a94c2af36f15277aa1a50cdea885fef304865f7c27fc649fc5affeab778:ec508c47acddf8249019661184fc7bc061323c511a9528e993cb185128b0a24b": "The function `list_citations` retrieves all citation records associated with a specified chat ID from the database. It executes a SQL query to select rows from the `citations` table where the `chat_id` matches the provided value, ordering the results by `created_at` in ascending order. Each retrieved row is converted into a dictionary using the helper method `_row_to_dict`, and the resulting list of dictionaries is returned. The function ensures that only non-null rows are included in the output.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:list_completed:1a660a144d35062d3de530418cb21e609393a8536a85b221398d08d62cbc1026:6152983073176d606e32c1ff4d1d617de2d92b9a1f7784dda6158b6313416fad": "The `list_completed` method retrieves all completed background task records from the database for a specified task name, ordered by completion time and creation time. It fetches rows from the table associated with the repository, converts each row into a dictionary using `_row_to_dict`, and deserializes the `extra_data` field from JSON format if present. The resulting list of dictionaries is returned, with each dictionary representing a completed task record.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:list_file_versions:ff8c3fae0421fb9b66f0efecfbc6a65e752c0e5beb379b485df166480eb5b475:d328b58f2f073017ad7cd32a697c9caea5c0396b1cfd1a2b5cd29a6cdee06eb0": "The function `list_file_versions` retrieves all file versions associated with a given document ID from the database. It executes a SQL query to select all columns from the `file_versions` table where the `document_id` matches the provided value, ordering the results by version in ascending order. Each retrieved row is converted to a dictionary using the `_row_to_dict` method, and the resulting list of dictionaries is returned. The function ensures that only non-null rows are included in the output.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:list_for_folder:956ecf0c8182b522dc6cb70cce19b7889dbf501cd3ae63418b92e4aa0022daaa:86189114299612b4bbe1b8418aa3ba778367119d73195373f6427546617ec2b9": "The function `list_for_folder` retrieves a list of document records from a specified folder within a project. It accepts a project identifier, a folder path (either as a string or `Path` object), and an optional recursive flag to determine whether to include documents in subfolders. The function delegates the actual retrieval logic to the `list_for_scope` method, passing the project ID, folder path, and recursion setting as arguments. It returns a list of dictionaries, where each dictionary represents a document record and contains its associated metadata.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:list_for_project:94d9490f6d7163e785e6ed99aea74d65023baaf574e21be79a27a362b5091c44:8e21b3c97940de9f7a4b0530080d4abbb1358e29295d4c3cdd91d338bcb43894": "The function `list_for_project` retrieves all document records associated with a specified project ID from the database. It executes a SQL query to select all columns from the `documents` table where the `project_id` matches the provided value, ordering the results by the `created_at` timestamp in ascending order. Each retrieved row is processed through the `_decode_document_row` method to convert it into a dictionary format. The function filters out any invalid or empty records and returns a list of these decoded document dictionaries.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:list_for_project:a9383b799a9bb1d8a69216ac0c61461ddc4ac18820875686a357d094cc2388df:ba6b67a290e18ea8dad4ae8e26e81eb3b06599c4d6d0af9eed22eebf3b0e734d": "The function `list_for_project` retrieves all chat records associated with a specified project ID from the database. It executes a SQL query to select chats where the `project_id` matches the provided value, ordering the results by `created_at` in ascending order. Each retrieved row is decoded into a dictionary format using the internal `_decode_chat_row` method. The function returns a list of these decoded chat records, filtering out any None or invalid entries.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:list_for_scope:8b87a23eae30be8583ce1c25d31bf664ae489f655d5bf4286e566ece84f34030:170f5a3d9e35f397dce92c2f27c9cafb6deb8a633d76342b8b911706b958f5ab": "The `list_for_scope` function retrieves a list of document records from the database based on specified filtering criteria. It supports filtering by project ID, tags, and folder path, with an option to perform recursive folder matching. The function constructs a SQL query dynamically based on the provided parameters, including joins with the `tag_links` table when tags are specified. It ensures that documents match all specified tags using a `HAVING` clause and applies appropriate `WHERE` conditions for folder paths. The resulting rows are decoded into document dictionaries and returned as a list. The function uses database transactions and handles normalization of folder paths to ensure accurate querying.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:list_for_tag:84c254b2bb8a0bfc28d17c17904e8c1725f7137207f0e7897cc352d4dda56ce1:7eeb03e1dec37b1434b1f21396ba7c9f7681f17022791af0192ed5ed119eea68": "The function `list_for_tag` retrieves a list of document records associated with a specific tag within a given project. It takes a project identifier and a tag identifier as input parameters and returns a list of dictionaries, where each dictionary represents a document record. The implementation delegates the actual retrieval logic to the `list_for_scope` method, passing the project ID and the tag ID in the format expected for scope-based filtering. This allows for consistent handling of document queries based on tag associations while maintaining integration with broader scoping mechanisms.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:list_incomplete:cbe3825a2bc72953d9b78f68253e1fd76cfcddf2bc5c67be046d4c88a4458034:f6533c4806e335d9b7f4f317370d8ac011f6cfd443aac641cbf59b585c5da1c5": "The `list_incomplete` method retrieves all background task logs from the database where the status is either 'queued', 'running', or 'paused'. It executes a SQL query to select these records ordered by their creation time in ascending order. Each retrieved row is converted into a dictionary using the `_row_to_dict` helper method. If the `extra_data` field exists and is not empty, it is parsed from a JSON string into a Python object. The method returns a list of such processed dictionaries representing the incomplete tasks.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:list_reasoning_summaries:d4b60efa59eb3e0a9e61aba02c2544fe05ba44fbc2aa164e40cc542aa9fb9c79:507a7aeae234ad8ea81c15cf73151083d226400c9a70471edb16532577624330": "The function `list_reasoning_summaries` retrieves all reasoning summaries associated with a specified chat ID from the database. It executes a SQL query to select rows from the `reasoning_summaries` table where the `chat_id` matches the provided value, ordering the results by `created_at` in ascending order. Each retrieved row is converted to a dictionary using the helper method `_row_to_dict`, and the resulting list of dictionaries is returned. If no rows are found, an empty list is returned.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:list_tags_for_document:4463c895107f1ae61fe59cb5e4ac71009e1141b24ff1eae6c8069351e9ff73fa:2549353ee21b29be53dc1418e92b2e0e5c746429603eea13e92af6f90e9908c7": "The function `list_tags_for_document` retrieves all tags associated with a specified document ID from the database. It performs an SQL query that joins the `tags` table with the `tag_links` table to find all tags linked to the given document, ordering the results by tag name in ascending order. Each retrieved row is converted into a dictionary using the `_row_to_dict` method, and the resulting list of dictionaries is returned. The function ensures that only non-null rows are included in the output.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:list_tags_for_project:d7a09599d00a0d65a45d6625f2f082972a53b11c4debbe82a202c9d07a9ea9cd:ae26c8a7b00e1f55d8121c4eba47b319707e0687b0940dfd2417c28fa0c94df6": "The function `list_tags_for_project` retrieves all tags associated with a specified project ID from the database. It executes a SQL query to select all columns from the `tags` table where the `project_id` matches the provided value, ordering the results by the tag name in ascending order. Each retrieved row is converted into a dictionary using the `_row_to_dict` method, and the resulting list of dictionaries is returned. The function filters out any null rows before processing.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:list_versions:ca81b2e23eb4b7e8c1f3c6f633df6f511f72d6c06631bcb1ff15bdbfff295561:af5d8f18511c2dfd29144dfd00c1aa0e60711dbeac3847768bfc4631a423bf3c": "The function `list_versions` retrieves all stored versions of a document located at a specified path, ordered by version number in descending order. It takes a file path as input, normalizes it to an absolute string representation, and queries the database table `ingest_documents` for all rows matching the normalized path. Each retrieved row is decoded into a dictionary format using the internal method `_decode_document_row`, and only non-null records are included in the returned list. The result is a list of dictionaries, each representing a version of the document with its metadata.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:refresh_tag_counts:a6e24495b49208c09e8bbd57fa44374a3ba6369ecc643bf90cf172008cc15f82:7618fbe29272eead1e4a5085c6df994b6449bde5bd590c413ef23879eecd4a51": "The `refresh_tag_counts` function updates the `document_count` field in the `tags` table to reflect the number of documents associated with each tag. If no `project_id` is provided, it updates counts for all tags in the database. If a `project_id` is specified, it updates counts only for tags within that project, considering only documents belonging to the specified project. The function uses SQL queries to calculate and assign the counts, ensuring consistency between tags and their linked documents.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:search:6192a5114f74b15a3e585b8eb5a017f23f4dc67eea7983a5c4f4ff6e2c080cf9:e04c65a646ebf8d2f9a59ca07affc93df6c941015a1588dc4f5eb9b3e8a2c305": "The `search` method in the `IngestDocumentRepository` class performs a full-text search across indexed document content using the provided query string. It retrieves and returns a list of dictionaries containing search results, with a default limit of 5 results. The method delegates the actual search operation to the `search_chunks` method, which handles the underlying logic for querying indexed text chunks. The returned results are structured as dictionaries, likely containing document metadata and relevance information.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:search_chunks:552e7d4b77a0c40f38cb9e641624ea07f7ca3dfa415c98183e6f877a88b8b572:7c1c180de491f14a7b9beff20f11b62dae3cd1bcb4de09b73020a9d50f430d35": "The `search_chunks` method performs a full-text search on indexed document chunks using SQLite's FTS (Full-Text Search) capabilities. It retrieves matching chunks based on a query string, limited by a specified number of results. The method returns a list of dictionaries containing chunk details, associated document metadata, highlighted snippets, and relevance scores. It joins the indexed chunks table with the chunks table to fetch text and offset information, and correlates results with document data retrieved via the `get` method. If no matches are found, it returns an empty list.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:set_query_scope:cfd87550c08956db6737e538a5f8b7a8d4d8fc54bfdd73b3cc9ab60c3089a275:46a5b17b5002f99866cf10c2ed05a2d7ffe22036cec1d235bc2e9b16a96fc70a": "The `set_query_scope` function updates the query scope associated with a specific chat identified by `chat_id`. It serializes the provided `scope` dictionary into a JSON string, or sets the payload to `None` if the scope is `None`. The function then executes an SQL `UPDATE` statement within a database transaction to store the serialized scope in the `query_scope` column of the `chats` table. After updating, the function retrieves and returns the updated chat record by calling `self.get(chat_id)`.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:store_version:654030c4baa52e94b206931541309cc490713eacdd26662b5f1382667e576bbc:6031368db9f05f865efc15160f0279661cc2883da44dc2af757593c296b984c9": "The `store_version` method in the `IngestDocumentRepository` class stores a new version of a parsed document in the local database. It takes document metadata, content, and parsed sections/pages, and inserts them into the `ingest_documents` table with an incremented version number. The method handles document normalization, preview generation, and OCR hint storage. If previous versions of the document exist, it deletes their associated text chunks and replaces them with new chunks derived from the current document's text. Finally, it returns the stored document's data by calling `get` with the newly inserted document ID.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:tag_document:75dd24961fea3e609beedf9c04279b3489522d778cb9f33eb9fbd6e9c5a1b0db:046e2e195deedc1d83f809782bac0471dacfb6f922caeb87fc0f894eead5eced": "The `tag_document` function associates a document with a tag by inserting a record into the `tag_links` table. If the insertion is successful (i.e., the link did not already exist), it updates the `document_count` field in the `tags` table to reflect the addition of the document to the tag. The operation is performed within a database transaction to ensure data consistency.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:transaction:295fbd8a6479ac65149df3633db56c2c83b6138390e12b4b2ef8f639bb059671:373d80ef938e6ca8dada4a9a0a4dcf1ad697c5a2c0985d3affbf626a2a45f13d": "The `transaction` method provides a context manager for handling database transactions within the `BaseRepository` class. It yields a SQLite database connection obtained from the `DatabaseManager` instance, ensuring that operations performed within the yielded context are executed within a transactional scope. The method leverages the `with` statement to manage the lifecycle of the database connection, automatically handling transaction commit or rollback based on the `DatabaseManager`'s implementation. This allows for structured and safe database interactions within the repository's scope.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:transaction:71e04f9141f2608629e877f6af9da6efca580f88ed15518e4d80711d3e06bf7e:c87a28b51a35e20e61a1d06f112c164bf653ccae1160d447247111a83279eb2f": "The function `transaction` is a context manager that provides a thread-safe way to execute database operations within a transaction. It acquires a database connection, yields the connection to the caller, and ensures that all operations performed within the context are executed as a single transaction. If a database error occurs during the transaction, it raises a `DatabaseError` exception with the original error as its cause. The function uses a reentrant lock to manage access to database connections, ensuring thread safety.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:untag_document:a3cd21642602b008169d5aa42c6555b93832bc58918e00a91a25b9bff28d2915:66a758705feb5972aa8c16bc8ac5b52bb232fa377c3a5a710e7c10cc0985321b": "The `untag_document` function removes the association between a specified document and tag by deleting the corresponding entry from the `tag_links` table. If the deletion is successful (i.e., a row is affected), it updates the `document_count` field in the `tags` table to reflect the reduced count of documents associated with the tag. The operation is performed within a database transaction to ensure data consistency.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:update:1dd8b2c50364af41fdc3585c40e918d712e82c1e1d39867c0b43c380fe44212c:ef5f5b69349afb65fbaa930d88e6e13994634d81b5758f8e75a393a4b6042c11": "The `update` method in the `BackgroundTaskLogRepository` class modifies an existing task record in the SQLite database based on the provided parameters. It constructs a dynamic SQL `UPDATE` statement to set fields such as `status`, `message`, `extra_data`, and `completed_at` only if their corresponding arguments are not `None`. The method uses a transaction to ensure data integrity, and after updating the record, it retrieves and returns the updated task data as a dictionary. If no updates are specified, it returns the current state of the task by calling the `get` method. The `extra_data` field is serialized into a JSON string before being stored in the database.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:update:2319725b376840d415471e925c4ce45829d4e821ff77da11a752f4be0590bd90:e882b80d4a755f7f21d59e98aba641c2d92855deea15d9bce39b9c69bc5d9dc8": "The `update` method in the `ProjectRepository` class updates specific fields of a project entry identified by `project_id` in the SQLite database. It constructs an SQL `UPDATE` statement using the provided field names and values, and executes the update within a transactional context. If no fields are provided, it retrieves and returns the current project data without modification. The method returns the updated project data as a dictionary, or `None` if the project is not found.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\storage\\database.py:update:4f5e5f52b21b25342e0ee3c3c6ce1f5f804bb388f012da66168a9e68bc502014:906dd20af3293757139defdbc02fb5c18b84546bd60595469be46fcca680bbaf": "The `update` method in the `DocumentRepository` class updates specified fields of a document identified by `document_id`. It constructs an SQL `UPDATE` statement using the provided fields and their values, applying necessary transformations such as JSON serialization for metadata and path normalization for `source_path` and `folder_path`. If no fields are provided, it retrieves and returns the current document record. The method ensures data consistency by executing the update within a database transaction and returns the updated document record.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:AnswerView:8a2c63e326a9d1a8fbb1d858c5a0fc8a10e63143fc71f497e0361fcecf0d2415:4a6c5dae142674acd0310e50979b0fcc34fea8f43eed558d55e8d80a19bf5486": "The `AnswerView` class implements a scrollable container for displaying a list of `ConversationTurn` cards using a vertical layout. It manages the addition, removal, and rendering of turn cards, and supports dynamic updates based on conversation settings such as showing plans or assumptions. The class also handles citation highlighting and adjusts spacing between cards based on density settings.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:TurnCardWidget:6b4e24f9d14a0887c4dfbb2a87fd223d8480596163509d2213448f51e800da76:93cc24c3f1603cf163d3ce5845be4ee0700166ed521a6ad5b9e63cd1f0aa82d9": "The `TurnCardWidget` class defines a Qt-based UI component that displays the details of a single conversation turn, including the question, answer, metadata, and structured elements like reasoning, plan, step results, assumptions, and self-check information. It supports interactive citation highlighting, copying answer or citation text to the clipboard, and adjustable layout density. The widget updates its content based on a `ConversationTurn` object and applies settings to control visibility of various sections.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:__init__:e4eccd785116aad5f512adfce840ac401cf20e89525a02c8d714f297713aa652:18ede65b04903849b6242e60253b56e0396263dd9f794510fbeff655d7d62d14": "Initializes a `TurnCardWidget` instance to display conversation turn data, including question, answer, metadata, and citations. Sets up the UI layout with labels, text browsers for answer and citations, and collapsible sections for reasoning, plan, step results, assumptions, and self-check. Configures actions for copying answer and citations, and applies initial data and settings.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:__init__:f88ed94016949dc6aa64d1223f49d1a7ab8e38cb6e8ba89cb28f07a55be1f6ad:6ec024306ad7532cd4c02ce4940ba419879a5fb6f5f3e7518c16f747fe5d1c8c": "Initializes an `AnswerView` widget with provided settings and progress service. Sets up a scrollable layout using a vertical `QVBoxLayout` to manage `TurnCardWidget` objects, configures the view's resizing and frame properties, and initializes internal state for managing conversation turns. Connects setting change signals to update card display properties.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:_apply_settings_to_cards:76a93b1af5672e1281d93f87e050136af4d4974928c6d13a6016750ff91aaf50:e2c6a7b672f6441497e76abb057c34d2dab13b70a0eeb7be2e4e139ad87f78bf": "The function `_apply_settings_to_cards` iterates through all `TurnCardWidget` objects stored in the internal list `self._cards` and applies the current settings from `self._settings` to each card by calling their `apply_settings` method. This ensures that all displayed conversation turns reflect the latest configuration.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:_apply_turn_data:f54d180afcb4f667c2865203757d8c8cacf8051c35a866c8219dce2c1784a5b7:bbfd377fa7e5c256aa1d8bf4e7e47217edda13591345f5da88e5f1749186ce00": "The `_apply_turn_data` method updates the UI of the `TurnCardWidget` with data from a conversation turn. It formats and displays metadata such as timestamps, latency, and token usage. The method renders the answer and citations, and populates sections for reasoning steps, plan items, step results, assumptions, and self-check information. Reasoning steps and plan items are displayed as bulleted lists, while step results include descriptions and associated evidence markers. Assumptions are shown with optional decision rationale and clarifying questions. Self-check results are presented with status, flags, and notes if available. The method uses helper functions to format timestamps and token usage, and manages the visibility and content of various UI sections based on the turn data.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:_copy_answer:f989398664d73f7c971aaa9eb80552592ea406733a0731c029958b0f16d5c7fb:31d555ecd07cd7ac037275d8c9eeb0c8aa9723d43c6cd892a4723fe632530910": "The function `_copy_answer` copies the plain text content of the `answer_browser` widget to the system clipboard using `QApplication.clipboard()`. After copying, it displays a notification message \"Answer copied to clipboard\" with an info level and a duration of 1500 milliseconds using the `_progress.notify` method.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:_copy_citations:124dfc23b08e23cab74b391c1f442cb550fecc2fb0bbc0d44f543f9368f4abdb:0b809308a0d2b130c85872cd9f271baae50edebb93d0e02851ab5aaa141ebdb9": "The function `_copy_citations` copies the plain text content of the `citations_browser` widget to the system clipboard and displays a notification indicating that the citations have been copied.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:_create_section:6f17604f2c4eed16bad4af6825cdb146fb4e248dafb3b3ae091d2d3b5820996d:dd039270cb9681942bf3e3a90597853c88aaacedfdf4f13252300addd4da5588": "The function `_create_section` creates a styled section widget with a title and content area. It takes a section title and an iterable of lines as input, and returns a `QFrame` containing a vertical layout with a title label and a content label. The title label is formatted with bold text, and the content label supports word wrapping. The actual content is set by calling `_set_section_content` with the provided lines. The frame's object name is dynamically generated based on the title, and the layout has no margins or spacing.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:_emit_citation:1e2353c1503fc2b363b48760fd04b759f1740494307f9fd42e0a1a529119de17:44b86c2c2e91e6bdb29f8eae3891c064c183539d8c0e1b348f54c444b9182ae2": "The function `_emit_citation` emits the `citation_activated` signal, passing a `TurnCardWidget` instance and an integer index as arguments. This signal is used to notify other components when a citation within a turn card is activated.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:_on_anchor_clicked:b97ca67692e150a79b3d174371b9ce36c8e1f88b955e15b0f4dd72e85c4fb974:2ceb9005e7954bec35d81c04d6f705a9cb2c48923e4d76c5e6dd82b4f0f7f297": "The function `_on_anchor_clicked` handles clicks on hyperlinks (anchors) within the widget. It processes URLs that start with \"cite-\", extracts a citation index from the URL, and triggers selection and emission of a citation activation signal. If the URL does not match the expected format or contains an invalid index, the function returns without further action.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:_render_answer:52a8ce545bfef7f331d0275658a033d0cd16894b9c331059497a5a81da646743:a1364917c9dcbb5bb123ef920aadcd15f72c835e892783a214f6de52dbcee726": "The `_render_answer` method in the `TurnCardWidget` class processes and displays the answer text of a conversation turn within a PyQt6-based UI. It escapes HTML characters in the answer, replaces line breaks with `<br/>` tags, and iterates through citations to replace placeholders like `[1]`, `[2]`, etc., with clickable HTML anchors. Selected citations are highlighted with a specific CSS class. A conditional style block is added to the HTML to apply background coloring to selected citations, and the resulting formatted HTML is set into an `answer_browser` widget for display.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:_render_citations:6f936d53a9d6ab1a5a646bf54c1087e57dfdc1629b73838f9c6345f134afa243:333357caf6fbdd4bcf5a902d88c9f0e5798b90a7cfac36c8ef3918eccaf4d5de": "The `_render_citations` function in the `TurnCardWidget` class is responsible for rendering a list of citations associated with a conversation turn into an HTML-formatted string displayed in a browser widget. If no citations are present, it displays a placeholder message. For each citation, it extracts a label based on the citation's type (string or dictionary), processes nested steps if applicable, and escapes special characters for safe HTML rendering. Selected citations are highlighted with a background color. The function constructs an ordered list of citations with links, updates the `citations_browser` widget with the resulting HTML content, and applies styling to indicate the selected citation.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:_scroll_to_bottom:bdb74f5ab7868da47293ec430abab2dc0b5b01642c38a25e8e955a2cac9527be:e827942378eb730b0d44339ffd0cc6e52fd0a8ec3c28a42661395fc86495af69": "The function `_scroll_to_bottom` adjusts the vertical scroll bar of the `AnswerView` widget to position the view at the bottommost visible content. It retrieves the vertical scroll bar instance and sets its value to the maximum possible position, ensuring that the latest conversation turn or content is displayed.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:_set_section_content:73360d92e66d5b2710a765f8da02997caff85351e173ab18d6fcb7968986d110:deca47298ef67976e3a7c682f17f5abdd7e53dff2e7b8bc41dbb34ef1e3b1d97": "The function `_set_section_content` updates the content of a specified section within the `TurnCardWidget`. It accepts a `QFrame` section and an iterable of strings (`lines`) as input. The function locates a `QLabel` child element named \"contentLabel\" within the section. If the label is found, it filters out any empty lines from the input `lines`. If filtered lines exist, the function sets the label's text to the joined filtered lines and makes the section visible. If no filtered lines are present, it clears the label and hides the section.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:add_turn:0777a6135ba77dcb2736627943eb4cb8b4b90e70a0eec0ed9d60b6fc90061289:c9f57f9bbef46cd53ca889c7ea662275bf70b252879edb888515357840b9dc35": "The `add_turn` function creates a new `TurnCardWidget` instance using a provided `ConversationTurn`, settings, and progress tracker. It appends the newly created card to the internal list of cards, inserts it into the layout just before the last element, and connects the card's `citation_activated` signal to a handler that emits citation events. The function initializes the card's selected citation to `None`, applies the current layout density setting, and ensures the view scrolls to the bottom to display the new turn. Finally, it returns the created `TurnCardWidget`.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:apply_settings:f9f2fd9b0fc37acfa12e111fb9e57434f50126a1b36bff264994ab7df17ada2c:1a08151f73e6494465d643579e06dea0ee798f1a6905371cda15727f79ddcfc8": "The `apply_settings` method updates the visibility of sections within the `TurnCardWidget` based on the provided `ConversationSettings`. It configures the display of the plan, step results, and assumptions sections according to the settings and the presence of associated data in the current turn. Specifically, it sets the visibility of the plan section if the plan is enabled in settings and the turn contains a plan; the step results section if the turn has step results; and the assumptions section if assumptions are enabled in settings and the turn contains assumptions or an assumption decision.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:cards:3a50097c7bcde59a8a02c948f990a1a83b43ccb2106e42a5ae409453626aa19e:e53a3b04b95f1da138891933d258116829d71ee9e36f33cfdd0964c8ee7ecc56": "Returns a list of `TurnCardWidget` objects currently contained in the `AnswerView`.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:clear:4faa747c91bca7bc9f70f36a66d3376dff1815a5b4b45e06f0d8d094afffcf51:f213fbd7c911dee0dfe586f4ac91253c5869feb21fd02986625c4afd2e17d131": "The `clear` method removes all `TurnCardWidget` instances managed by the `AnswerView` class. It iterates through the internal list of cards, detaches each card from its parent, and then clears the list of cards. This effectively resets the view's content while ensuring proper cleanup of the widget hierarchy.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:highlight_citation:cc1cfc5ab7a36a7cb448af91a07ac84542446872c76b24db7723a8456dda4f98:6c244457ac9216c8776e50b607d38a4e30bb653530404f6acc8c723c0f1c8625": "The `highlight_citation` function manages the highlighting of citations within conversation turns displayed by the `AnswerView`. It accepts a `TurnCardWidget` object and an index, and iterates through all cards in `self._cards`. If a card matches the provided `card`, it sets the citation at the specified `index` as selected. For all other cards, it clears the selected citation state. This ensures that only one citation across all displayed turns can be highlighted at a time.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:render_turns:11d481fa2c94b1ed4f59e8c91b482896029d48d4b280c62ff5dac0d08c924d64:6a26a226b379336656983762f3c73a8e49d537949889da922061828b4f3fd881": "The `render_turns` function clears the current content of the `AnswerView` and iterates through a provided collection of `ConversationTurn` objects, adding each turn to the view using the `add_turn` method. This function is responsible for updating the display with a new set of conversation turns.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:selected_citation:b43c3ff908d6bfa5c10983160de7d613deeefa2ec8f0deb61586d387e3c78c0a:d1f46fb4e04fb765518782194a8f253e9609c55227db2e09c7f2115dbaef5e60": "The function `selected_citation` is a property method within the `TurnCardWidget` class that returns the currently selected citation index. It provides access to the private attribute `_selected_citation`, which stores the integer identifier of the selected citation or None if no citation is selected. The method serves as a getter for the citation selection state of the widget.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:set_density:3f5860d61c44886328e56d2dbdb5145c0bed7b65d767dd27b19320594615735c:ef1ebcb3c9dd5aa6e0ddb48b089d794ee29c563beba934b3823ce05d21d2901c": "The `set_density` function configures the layout density of the `AnswerView` widget, switching between \"compact\" and \"comfortable\" spacing. It updates the internal `_density` attribute and adjusts the vertical layout spacing accordingly. Additionally, it propagates the density setting to all `TurnCardWidget` instances managed by the view.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:set_density:e3eec29966587da7dfd0ef576572f1453fbe2d7e3061961198d79e1744aa7387:f2bf80498062021127a07768c1474e70e12ab91ce92a81467c85b965d3a77e37": "The `set_density` function adjusts the visual density of the `TurnCardWidget` by modifying margins, spacing, and layout parameters based on the provided density setting. It normalizes the input density to either \"compact\" or \"comfortable\", updates the widget's internal `_density` state if the value changes, and applies corresponding margin and spacing values to the main layout and action row. Additionally, it adjusts the spacing within various content sections (reasoning, plan, step results, assumptions, and self-check) to reflect the selected density.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:set_selected_citation:e9579e1429c10027234b46e1141d419d38a7dd91f77d444e517199f6c1ae97c7:4361c4867795e7b204d95dc740ca518dd57b2c55689a626b6622a63e04b8038d": "The `set_selected_citation` method updates the selected citation index for the turn card. If the new index differs from the currently selected citation, it updates the internal `_selected_citation` attribute and triggers re-rendering of both the answer and citations to reflect the selection change.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:to_plain_text:0e1fbb307c29ba2a82c511c68e985b94075ed7ac65d0bcaf27495fe598410853:349c3abaf32c45946ae767d243d1ceea0f1569c5a83f7ef8d6c7f3797764932c": "The function `to_plain_text` returns a string that concatenates the plain text content of all `TurnCardWidget` objects stored in the internal list `self._cards`, with each card's content separated by double newlines.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\answer_view.py:to_plain_text:d8f51f3afeca1d9e8c8bf5a3b6f6c36ce8d3951df91b300aa613d1e06904c467:a1624d028fe5842807a29f7185d4385b6ac9327dfc6debaa62e4ec796d159f36": "The `to_plain_text` method of the `TurnCardWidget` class collects and concatenates the textual content from various UI components within the widget. It retrieves text from the question label, answer browser, metadata label, and citations browser. Additionally, it iterates through several optional sections (reasoning, plan, step results, assumptions, and self-check) to include their content if they are visible and contain text. The collected text parts are joined with newline characters, filtering out any empty parts, and returned as a single plain text string.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:EvidencePanel:a14b3aba074353417f1f4338a5db53f4e1f0143ff8dd30a18c5b8f5e2d20c046:3e5cb6d2611e237c9a88156046a2c8f1597804f31d7a49f57137eeb2fcf8451e": "The `EvidencePanel` class defines a composite Qt widget for displaying a list of evidence items, each represented by an `EvidenceRecord`. It includes functionality for selecting, previewing, and managing the inclusion or exclusion scope of evidence items. The widget supports dynamic updates to the evidence list, state changes, conflict detection, and interaction signals for copying, locating, and opening evidence sources. It also provides methods to reset the scope of evidence items and adjust the visual density of the list.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:EvidenceRecord:0ffebc56ae3bd182c70ede430f9523bd30a765bd7a473aa92f519e75f8594ace:149f9ed00b0ff0848ed0e21319be14f0412ef1bcc8c4a27b0782e13a05cef870": "The `EvidenceRecord` class defines a structured representation of a citation entry with fields for identifier, label, snippet, metadata, path, raw data, state, score, badges, tags, conflict information, and document/passage identifiers. It includes a method `copy_with_state` that creates a new instance with an updated state while preserving all other field values. The class uses default factory functions for mutable fields like `step_badges`, `tags`, and `conflict_sources` to ensure proper initialization.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_EvidenceRow:98dd3e85000cf81ba9de2ca43068d65ce8f337ad46e5c99dc2d26498fc6cd76f:7c39aa05c7015c0b0808accf23f10968f3d9718b56569e41a1d0b8e69c03196b": "The `_EvidenceRow` class presents a single evidence entry within a Qt application, displaying its label, snippet, metadata, and associated badges. It provides interactive elements such as include/exclude toggles, copy, open, and locate buttons, along with signals for state changes and user actions. The class supports dynamic updates and layout adjustments based on density settings and record modifications.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_SignalBlocker:9682a78fb1754d2b2514f6d88fba9e411dd5d4a37a3a70eb211d600d08f30c2a:9a0650bf2f37b75584e88b32828afe2d12efb2a46cae8aff07c26a5669b2fee0": "The `_SignalBlocker` class implements a context manager that temporarily blocks signals on a Qt widget. It stores the widget's previous signal blocking state during entry and restores it during exit. The class provides a clean way to prevent signal emission while executing code within its context.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:__enter__:aff8eb78c7b907cd5d91a680f1c2b8821641558bc2fb1cd5e491a25fd631ffce:155b990c3ddbd8f11e29c1995030f0c21f6c31c38b2ed8ed7f6192c076d75d4c": "The `__enter__` method of the `_SignalBlocker` class temporarily blocks signals from the associated `QWidget`. It calls `blockSignals(True)` on the widget, which prevents signal emission, and stores the previous signal-blocking state in `self._previous`. This allows the signal state to be restored later when exiting the context.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:__exit__:4eff03a183ff708a84b76cadd388659c35fdbe434839af68d4145c6c86a40a03:9808ad0c1af01bed5464209b2338a886c175e2cbc68b7e4f5cf0dfe8341e3746": "The `__exit__` method of the `_SignalBlocker` class restores the original signal-blocking state of the widget after exiting the context manager. It takes the exception information as parameters (though it is unused) and sets the widget's signal blocking to the value stored in `self._previous`, which was saved during the `__enter__` method. This ensures that signals are properly re-enabled for the widget after the block has been executed.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:__init__:45f48c541067c6bae6177ac9d7718490bb38b512e41afa699eabeabae43f6f75:e1494130a8b2806b80984e45f8101a99f5e6c80be796191c1c0ab26a0fd0c27f": "Initializes the `EvidencePanel` widget, setting up its internal state and UI components. The panel consists of a list for displaying evidence records, a preview area for showing selected records, a metadata label, and a reset scope button. It also includes a hidden conflict banner and manages the visual density and scope suppression settings. The layout is configured with margins, spacing, and object names for styling and interaction handling. An empty state is initialized for the panel.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:__init__:b20428f0e88efb93b3e357afdf8bb3c2bdc5848df9127d713fb60907961fe495:4911c428c17811d06d0eba10039b2369adaa3dd0563f12cc0076ba7eee9a5a5e": "The `__init__` method initializes an `_EvidenceRow` widget, setting up its layout and UI components to display evidence data from an `EvidenceRecord`. It configures a vertical main layout with spacing and margins, and adds a header containing a title label and toggle buttons for including or excluding the evidence. Badges are populated below the header, followed by a snippet label showing formatted HTML content and a metadata label. Action buttons for copying, opening, and locating the evidence are added to a horizontal layout at the bottom. The widget is configured to emit signals when these actions are triggered, and the initial state of the include/exclude toggles reflects the record's state.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:__init__:bda26213b26d170410e1e0c7cb72b227ea588eb82c41c205f12365d9426c6cf0:fb32d07facb104c1f08d7f80130523837000e8f12c18d08238a8207f6596fae2": "The `__init__` method initializes a `_SignalBlocker` instance with a specified `QWidget`. It stores the widget reference and initializes a `_previous` attribute to `False`, which will later store the widget's original signal-blocking state.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_build_identifier:247c975e5973d7ea416f15667c3449ca8313e1179cd9c81ab3611c136d6d0575:efa7d387ad3dc5985499d9cd3d8f51f0d38ece957d6550a70a322233f3cd3d87": "The function `_build_identifier` generates a string identifier from a `citation` object, which can be either a dictionary or a string. It extracts the identifier from specific keys (`id`, `document_id`, `source`, `path`, `file_path`) in the dictionary if present. If the citation is a non-empty string, it returns the stripped string. Otherwise, it returns a provided fallback string.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_empty_state:0e77cc56d689a3887abe237ad3345798d54f4111e6494bd8508296696f546011:7e681e69d4080629f4c4cf347d53e1d3e9ece293dbadde550dba8bfcd3df9551": "The `_empty_state` method in the `EvidencePanel` class configures the panel to display an empty state. It sets the preview area to show a message indicating no evidence is available, updates the metadata label to reflect no selection, hides the conflict banner, and updates the visibility of the reset button based on the current state.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_handle_copy:14f128326112acb497999a595f1ffea4f4b871aa66a8593a6ce4d5d75b9707ba:68aa55ccf52f75c5215d8572801fd84480e0b41314a3981603e004bfe50ff35a": "The function `_handle_copy` processes a copy request for an evidence record. It identifies the row of the selected item in a list widget, updates the current selection to that row, and constructs a payload string from the record's label, snippet (processed as plain text), and metadata. The resulting payload is emitted through a signal named `copy_requested`.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_handle_locate:169c497074deefffd98893449d4a659a05735be6dcdc91e1a39968b00805e330:d7a4aaf3504915901013a87247ea6f6cc3674b23745ba2d3328588688cfaa2bd": "The function `_handle_locate` processes a user request to locate an evidence record within the application. It retrieves the row index of the provided `QListWidgetItem` from the internal list, and if valid, sets the current row in the list to that index. It then constructs a payload dictionary containing the document ID, file path, and passage ID from the `EvidenceRecord`. Finally, it emits a `locate_requested` signal with this payload to notify other components of the request to locate the specified evidence.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_handle_open:db82b3ccebfb2f51198752ce97a99a07ad23c632c0073c1d3c5c402d237852f4:b4b600d1212473c5d391d07e198eb4176cb953c9cb95c4bfd3c6ec8f1664c52a": "The function `_handle_open` processes an evidence record by setting the corresponding list item as current in the evidence list and then opening the record. It retrieves the row index of the provided `QListWidgetItem`, sets that row as current in the list, and calls `_open_record` with the given `EvidenceRecord`.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_make_badge:edc3298ecb485932e4285282e512c5086a3454438a55b4dc74d2fe582636c720:b4824054bcd17c2117a6ae47b8ec59d4ace3bae40a3b4ed60360bbc5d74f248d": "The function `_make_badge` creates and configures a `QLabel` widget to serve as a badge element. It takes a text string and a kind identifier as inputs, sets the label's object name to \"evidenceBadge\", assigns the provided kind as a property, and returns the configured label. This method is used to generate visual badges within the `_EvidenceRow` UI component.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_normalize_citation:085376d4dcea147715e1ec873908e6add26c4e6437582ad3c3a0ac3b673888bd:f3a7f686ae738c34c093de243ab506c15420e4d29316f7edbff18ae48489ebf0": "The `_normalize_citation` function processes a citation input, which can be either a string or a dictionary, and converts it into an `EvidenceRecord` object. It extracts and formats various fields such as label, snippet, metadata (including location details like page and section), path, score, steps, tags, conflict information, and document/passage identifiers. The function handles different data structures and ensures proper escaping of HTML content in snippets. It also constructs a unique identifier for each citation and returns a fully formed `EvidenceRecord` with default values for fields not explicitly provided in the input.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_on_exclude_toggled:a3c3c5179d6639c3b0a2e4addc7c86e108fbba67ea3361ce96b2800d2dbbdbea:99ab2948b61b5cfa3789a9901e0cd2598c336a287436761366f6495af6a6f57c": "The function `_on_exclude_toggled` handles the toggle event for an exclude button within an evidence row. When the exclude button is toggled on, it ensures the include button is turned off, then updates the record's state to \"exclude\" and emits a `state_changed` signal with the new state. If the exclude button is toggled off, it checks the state of the include button to determine whether to set the record's state to \"include\" or \"neutral\", and emits the corresponding state change signal.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_on_include_toggled:9615f99ca8934898f62ac291a6801468f4087845bda9343b65d98b4f797d19c3:6f6b47a3c96cb1bd5af7ba498627f0f8ac5605a75ed372d7c23db17c0d6c747c": "The `_on_include_toggled` function handles the state change when the include toggle button is activated or deactivated. It ensures mutual exclusivity with the exclude button, updates the evidence record's state based on the current toggle status, and emits a signal indicating the new state.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_on_row_selected:9f77f14f950a856d54ec1fe05670e85da1bb7315d91d4fbe8084b1aabc73e145:1bed65e300f230f95ea5ba2613eb0e70fad1730cde66823d5ecddd7f7cdf60c2": "The function `_on_row_selected` is triggered when a row in the evidence panel is selected. It validates the row index against the list of records, updates the preview to display the selected record's content, and emits a signal indicating that an evidence item has been selected, passing the row index and the record's identifier. If the row index is invalid, it clears the preview by calling `_empty_state()`.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_on_state_changed:f76e4b0099c2494d80343a87271214d9087b1d2d955c3456b1ca555695b79359:1519ad003d8ea74355af5380b9e293f6d9d2874cda504dd567dd6da75104e2f9": "The function `_on_state_changed` updates the state of an evidence record within the panel. It accepts an `EvidenceRecord` and a new state string, then locates the record by its identifier in the internal list of records and replaces it with a copy of itself updated with the new state. If scope suppression is not active, it emits a signal indicating that the include/exclude scope has changed based on the current scope. Finally, it updates the state of the reset button.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_open_record:a51be551b7f408215918dc64f0f53ae0ac64f9ee044dc1a9186b9a4aa0250076:4a8f15534343c2f1992371717623b3273498b485023b3858527e72deb89340bb": "The function `_open_record` in the `EvidencePanel` class handles opening a file associated with an evidence record. It takes an `EvidenceRecord` object as input and, if the record is not None and has a valid file path, it constructs a local file URL using `QUrl.fromLocalFile` and opens the file using `QDesktopServices.openUrl`. If the record is None or lacks a file path, the function returns without performing any action.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_plain_text:cc0d832e259a5ac37db5089c39d114e2938076f92721581084373b0dd2ccd75d:da74291fca1c60bfc09e4fe3fab7e16775197cb458b5770d880b5b20e2e4b363": "The function `_plain_text` takes an HTML-formatted string `snippet` as input and converts it into plain text. It uses `QTextDocument` to parse the HTML content and then extracts the plain text representation, returning the result with leading and trailing whitespace removed.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_populate_badges:3d42dc13b4c3f98108042b45bd2bb4729f949c5b2c680e7d6a9d618db51237d7:7fb8a6ac49cc286a45ae7763e8b8fab4454e0ee70df986d92ce9ea553166e465": "The `_populate_badges` method in the `_EvidenceRow` class clears existing widgets from a badge layout and repopulates it with badge widgets based on the evidence record's associated data. It iterates through the record's step badges and tags, creating and adding corresponding badge widgets. If a score is present, it adds a score badge. If a conflict summary exists, it creates a conflict badge with a tooltip. Finally, it adds a stretch spacer to the layout.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_populate_list:5a58b891d9e938ecba4ca7c4f301bccb448ec562b357fead8623560fbf917c53:1b6ecd5d2006682c3cec08bbdcc20b55a6ade27df15e3194bae088b30d94448a": "The `_populate_list` method in the `EvidencePanel` class is responsible for populating the evidence list widget with items representing records. It clears the existing list, iterates through the records, and creates a `_EvidenceRow` widget for each record. Each widget is connected to signals for state changes, copying, locating, and opening actions. The method sets the visual density of the widgets, configures their size hints, and adds them to the list. If a record has a conflict summary, it collects these messages and updates a conflict banner. Finally, it updates the state of the reset button based on the current list content.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_reset_scope_filters:f71ac15b922262a2059bcab9f5e1e54239e3561218b353263a3a063d9b14c142:1eba79f5441b2e7d9f040a8ab591bfd3357b0f93f52fa05557ab219a0a964f10": "The function `_reset_scope_filters` checks whether any evidence records in `self._records` are not in the \"include\" state. If all records are in the \"include\" state, the function returns without taking action. Otherwise, it calls `self.reset_scope()` to reset the scope filters for the evidence panel.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_set_conflict_banner:a134f4be4751c1ec61bbaa5abae8f72d97243946b5c7daefbfe78994bf810409:6c34fd51226332c08f1e9bc58dacc09d3f755a932b50fc07ad5d6e463c274d92": "The function `_set_conflict_banner` updates the visibility and content of a conflict banner widget based on a list of conflict messages. If the list contains messages, it removes duplicates, escapes HTML characters in each message, joins them with \" \u2022 \", and displays the resulting string in the banner with a warning icon. If the list is empty, it hides the banner.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_update_preview:bd4c10965315fb8f150d4741c08c12a72b14d583b6aae81c74bd145b9641a818:ed7ce3dd95f46712e55b7ce6485d5c40971c7353f0628697ff34d4a8c12d16cb": "The `_update_preview` method updates the preview display in the `EvidencePanel` based on the selected evidence record. It retrieves the record at the specified index, constructs an HTML snippet containing the record's content, metadata, conflict summary, and tags, and sets this HTML in the preview widget. If the record is invalid or out of range, it displays an empty state. The method also updates the metadata label with the record's label and metadata, and adjusts the reset button state.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:_update_reset_button_state:144a4df2ad87eb330437947f6437ded1ba9b7d8ea1771f3e8dfc3f40781168b7:a2740614918cf3ecfd2a5256406e44886c286c25cf52e1ab0398f3bfdd82f2e7": "The function `_update_reset_button_state` updates the enabled state of a reset scope button based on the current state of evidence records. It checks whether any record in `self._records` has a state different from \"include\". If such records exist and the list of records is not empty, the reset button is enabled; otherwise, it is disabled. The function ensures that the button is only active when there are changes to reset and when records are present.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:clear:c9ecca3986654f2fe39e7edb6c34d52b87b401b0b8e1b032aacae6c20df7585f:19322e596ca88c28ba629f53f04fa3f33c471ba68dcf9684df18cf70213499a8": "The `clear` method in the `EvidencePanel` class removes all evidence records from the panel. It clears the internal list of records, clears the displayed list in the UI, updates the empty state representation, and adjusts the reset button's enabled state based on whether any records remain.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:copy_with_state:bb7c331d3dc64e36d7c5672f493d34ab2d82dc7253b4fe5f39f492f0dc4a3aa8:515c781c05862768d057e1d58a663400c389d7f8182c4ab0c419c8171e47a4af": "Creates a copy of the `EvidenceRecord` instance with an updated state while preserving all other attributes. The method initializes a new `EvidenceRecord` object with the same values as the original, except for the `state`, which is replaced with the provided value. Other attributes including identifiers, content, metadata, scores, tags, conflict details, and document references are copied as well. The returned instance maintains consistency in all fields except for the state field, which reflects the new value passed to the method.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:current_scope:3184cd0d4c170d3dd3417a345a06a65c78040d14f10ca4f63c633879c3e215d8:db9d83c044202d4bf4f0cf4aee2ae12bc647068a8322f5a606911742e7056367": "The function `current_scope` returns a dictionary containing the identifiers of evidence records grouped by their inclusion or exclusion state. It iterates through `self._records`, collecting identifiers of records with the state \"include\" into an `include` list and those with the state \"exclude\" into an `exclude` list. The result is a dictionary with keys `\"include\"` and `\"exclude\"`, mapping to lists of record identifiers in each respective state.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:evidence_count:6a794545981971ce72c5e0ebd9bbeb2275672612365beeaa317b712a3a808171:f4e0d69c69b387d33f3529dabefa8f2bf1f567c73edc79f6a5ff132046e9e474": "The `evidence_count` function returns the number of evidence records currently stored in the `_records` attribute of the `EvidencePanel` class.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:evidence_items:2222afc800c19870144391581ae5b94b0eccfb2ecdcb1bfb4135c3db485b5ba2:182b44856d68e0333db9c63edab7427c171695697256dd318dc4c1c160e9b255": "Returns a list of `EvidenceRecord` objects contained within the `_records` attribute of the `EvidencePanel` instance.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:refresh:6e92bbd5122c2a9826ea47d865f04dfc5007b8d17366029f133709dc589f0f81:396180fc8b086a1063b5d586cbcf720172cae0fe752df4f296373d63c6d21f61": "The `refresh` method updates the UI elements of the `_EvidenceRow` widget to reflect the current state of the associated evidence record. It sets the title, snippet, and metadata labels using data from the record, enables or disables the open button based on whether a file path is available, and repopulates the badges displayed for the evidence item.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:reset_scope:fddabf21298f065bb292174f5a9d0f5c472cb62e807982e6d7a734ba6097a716:2c43c5323d080c899ae2b901fb175a28681fa584035333176c02f5a85a8e401d": "The `reset_scope` function resets the inclusion state of all evidence records in the panel to \"include\". It temporarily suppresses scope updates, iterates through the records, and updates each record's state and corresponding UI widget. After updating all records, it emits a signal indicating the scope change and updates the state of the reset button.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:select_index:c9d35b1352164253c2992b02dfb8c431525368161bb4b146549c61801213959a:ecb4acbafec13f272b14c8ae570bbb90dbbfbf1bc45e22605b4ee2ae44082258": "Selects the evidence item at the specified index in the list widget. If the index is valid (within the range of the list count), it sets the current row of the list widget to the given index, thereby visually selecting that item.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:selected_index:9a099ea0a56be9487aedcd7e4366aa4de9e9faf92e5831d44e2055bb0a5d1fa8:0bac3fb1fcdefc327f3d36f3ddb47c6b9cfc1c13e9101945b6cad5dc7b0fe38f": "Returns the index of the currently selected item in the evidence list, or `None` if no item is selected.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:selected_record:c775d55e8bd94ee1059353625d7ea176a54e4e690d3aa0f011d290196626ef35:4ff35d968297cd627047a728f3ee601b74bb00b9bc89a3b9a71bf8a24e840966": "Returns the `EvidenceRecord` object corresponding to the currently selected index in the panel. If no index is selected or if the index is out of range, it returns `None`.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:set_density:8d2f7f6628ec0655be2af78d069cf4c4af3cb1d40c004c80adf2f43974b0b1f4:147ce9a4b8a5bde2062a3fe34ff1bb8069f8f1c57ca543f285406d5f5f7e0034": "The `set_density` function configures the visual density of the evidence panel by adjusting spacing and updating the density setting for individual evidence rows. It sets the spacing between items in the panel's layout to 6 pixels for \"compact\" density or 8 pixels for other densities. It then iterates through all items in the evidence list, retrieving each widget and calling its `set_density` method to apply the same density setting. The function updates the internal `_density` attribute of the panel to reflect the new density value.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:set_density:d90d6f2c1502b3d4770c97626d66c52d6ab18c90968925ad320b2e1f5ba01105:462cafe16418ff4a9f9fd2a49f312c622c0606a0abfbf62132a2da62203f5b31": "The `set_density` method configures the layout density of the `_EvidenceRow` widget. It adjusts margins and spacing within the widget's layout based on the specified density setting (\"compact\" or otherwise). In compact mode, smaller margins and spacing values are applied to reduce the visual footprint of the widget, while standard values are used in non-compact mode. The method updates the main layout, badge row, and actions row with appropriate spacing settings.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:set_evidence:4ab917e01cccd3c9db487aa48f0c5c65f4d94d532f98449bfe208ddcf383f11b:1888a8d0d046d3a8e457673bb1d9e3643815a8c979f6e78dea34b01a478585d3": "The `set_evidence` function updates the evidence panel with a new set of citations. It processes the input citations by normalizing them and populates the internal list of records. The function ensures that scope-related signals are not emitted during the update process by temporarily suppressing scope changes. After updating the list, it selects the first record for preview if available, otherwise shows an empty state. Finally, it updates the visibility of a reset button and emits scope change signals if requested.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\evidence_panel.py:set_state:a4aff82e0e6b75ee9546712c5b8e294cbb0ee429fc2faa73581ab34308beb249:73c71c7a8c3b0caf4c575645fdd2fea47e460f037f8f733a68a15f741341b146": "The `set_state` function updates the inclusion or exclusion state of an evidence item displayed in the UI. It modifies the checked state of corresponding UI buttons (`include_button` and `exclude_button`) based on the provided state string (\"include\" or \"exclude\"), while preventing signal handling during the update to avoid triggering unintended events. The function also updates the underlying evidence record with the new state using a copy method.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:16778c07a63dedb937d7126c482e8582a82b353a623d6bcbf3f406d51d94de57:merge0:c0ae7622a395b86cc51b9d5154e4308d7bb4442102137c39004e08c3490fa6aa": "This code defines a PyQt-based application window that serves as the primary interface for a data mining tool, inheriting from `QMainWindow` and integrating multiple core services including settings management, progress tracking, LMStudio client connectivity, project handling, document ingestion, search capabilities, and export functions. The window manages conversation turns, project sessions, and ingest jobs while providing functionality for corpus management such as adding folders or files, rescanning indexed directories, and tracking ingestion job states. It supports UI panel management, state preservation across sessions, splitter widget layouts, and synchronization of action states with service settings. Additional features include project operations like deletion, backup creation, data purging, and path revelation, along with conversation export capabilities to Markdown and HTML formats. The application also implements a chat interface for interacting with an LMStudio model, handling context retrieval and UI updates, and includes mechanisms for connection health checks, proper resource cleanup during shutdown, and asynchronous operation handling through Qt's event loop integration.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:16778c07a63dedb937d7126c482e8582a82b353a623d6bcbf3f406d51d94de57:part0:b1a1170e33669a6724baf9ceadd9677d94fa190e227842e951d3df8d4f1a3bf7": "The code implements a class that manages configuration settings for a web application, providing methods to load, save, and access configuration values. It supports multiple configuration sources including environment variables, JSON files, and command-line arguments. The class includes validation and type conversion capabilities for configuration values.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:16778c07a63dedb937d7126c482e8582a82b353a623d6bcbf3f406d51d94de57:part1:3ef355abcee113380561867e2d91b5d4fe64345c2ebb4059c66a72797c215dd3": "This file defines the `MainWindow` class, which is the primary application window for a data mining tool. The class inherits from `QMainWindow` and initializes various services including settings, progress tracking, LMStudio client integration, project management, document ingestion, search capabilities, and export functions.\n\nKey components include:\n\nThe window manages conversation turns, project sessions, ingest jobs, and provides functionality for adding folders/files to the corpus, rescanning indexed folders, exporting conversations, and managing backups. It also handles theme toggling, density settings (comfortable/compact), and",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:16778c07a63dedb937d7126c482e8582a82b353a623d6bcbf3f406d51d94de57:part2:3340b04802c0586cf2131dfb58e685f36c66a65f208fe7ead6b49aabbbadd778": "This code defines methods for managing user interface panels, project state, and conversation settings within a PyQt-based application. Key functionalities include:\n\n\nThe implementation handles UI state preservation across sessions, manages splitter widget layouts, synchronizes action states with service settings, and coordinates between multiple components including corpus trees, evidence panels, and conversation history.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:16778c07a63dedb937d7126c482e8582a82b353a623d6bcbf3f406d51d94de57:part3:71bd34448ce4bf2bb29d1cdb40524945ff828c4e85e2ae5c20ad85ae4864fb4b": "This code defines a corpus management system for indexing and managing document collections within a project. It provides functionality to add folders or individual files to a corpus, rescan existing indexed folders, and track ingestion jobs through progress updates.\n\nKey components include:\n\n\nThe system integrates with services for project management (`project_service`) and ingestion (`ingest_service`), and uses Qt widgets for UI interactions. It handles various states of ingestion jobs including running, paused, completed, cancelled, and failed, updating the UI accordingly.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:16778c07a63dedb937d7126c482e8582a82b353a623d6bcbf3f406d51d94de57:part4:c83e9cb276cb9fa4583859a5219ea8f663214f76f1bdb63085c16c641b72e6cb": "This code defines methods for managing project operations, conversation controls, and user interactions within a Qt-based application. It includes functionality for deleting projects (with confirmation and replacement handling), revealing project storage paths, purging project data, creating and restoring backups, exporting conversations to Markdown or HTML formats, exporting selected snippets, and updating UI elements like checkboxes and combo boxes based on settings. The class also manages connection states, handles user input for questions, copies chat text, extracts token usage from responses, and updates session information.\n\nKey methods:",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:16778c07a63dedb937d7126c482e8582a82b353a623d6bcbf3f406d51d94de57:part5:c1cba415b2692841ff85e10f290dc2567d3cf0b5d00ad45925c1d11b260ead4c": "This code defines a chat interface for interacting with an LMStudio model, managing conversation turns, context retrieval, and UI updates. Key components include:\n\n\nThe class integrates with services for project management, search, progress tracking, and settings, providing a complete chat interface with context-aware responses.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:MainWindow:16778c07a63dedb937d7126c482e8582a82b353a623d6bcbf3f406d51d94de57:part6:d6e6c72892c1cb0a8dbaacef463da54e0edf031d9ada345d19a25dd0a9f4b45b": "This code defines the primary application window for a Qt-based GUI application. The window manages connections to an LMStudio service through a health check mechanism, updates UI connection status, and handles proper cleanup during shutdown.\n\nKey components include:\n\n\nThe window implements proper resource management and cleanup during application termination while maintaining a responsive UI through asynchronous operations and Qt's event loop integration.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:ToastWidget:178d5da5b162a7dae0629834cfd8a551a02d161b59e2cdb97101f0e7a8ac3f85:99191fcc0add996fbe34948c17297cb14fb6255569b20f4749069beacc9a5959": "The `ToastWidget` class implements a transient notification overlay that displays messages with optional styling based on message level (info, warning, error). It uses animations to fade messages in and out and positions itself in the top-right corner of its parent widget. The class handles timing for message display and automatically hides the toast after a specified duration.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:__init__:09653657447349c31deb8d2cb969aa25165dca5efe0b94a8692f65a7f48c3af7:445dc7cc8136831a9629a33d474184758c12d22a97a54b06f3d16c4deca391b5": "Initializes a `ToastWidget` instance as a frameless, translucent tooltip window. Sets up the window with a label for displaying messages and configures a property animation for fading in and out. The widget is positioned in the top-right corner of its parent and supports visual styling based on message level.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:__init__:5efb4ee3241087c621d5924a111dfd3149553f4680af35f70a1df8f1fe0c10fe:0c03f6415b53237af4af67d975fb701130e0d019cb9031ee69e170de30cb2843": "Initializes the `MainWindow` class with dependencies and sets up the user interface, services, and connections. It configures the window layout, status bar, menus, and toolbars; initializes conversation management, search, and ingest services; connects signals for project and ingest updates; and starts timers for handling ingest updates and LMStudio health monitoring. The function also applies theme, font scale, and initial project state settings.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_add_files_to_corpus:57b030a03e1df111d3df52e62f12ec45a6d843231ff44779b8335e2a798bd827:9a0535a8742f6914ce2c14fd091d562a9e630339c8dbc1308f29b63fa0017970": "The function `_add_files_to_corpus` enables the user to select and index files into the active project's corpus. It retrieves the active project, displays a file dialog for selecting files based on a filter specification, and queues the selected files for ingestion using the ingest service. If no files are selected, the function returns early. In case of an exception during queuing, it shows a critical message box with the error details. Upon successful queuing, it registers the ingestion job with a description and root directory, and displays a toast notification indicating that the files have been queued for indexing.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_add_folder_to_corpus:485b821440aae34d6b45600d4d2db9b10406a49f02f97957910d6b68c31d26ab:c30735fca33694ad692582faaae382c5100c5c5747a7e44bbb27edc56a50c46d": "The function `_add_folder_to_corpus` allows the user to select a folder for indexing into the active project's corpus. It retrieves the project and its existing corpus roots, opens a file dialog to select a directory, and queues the folder crawl using the ingest service. If successful, it registers the indexing job, updates the corpus root list, and shows a notification. If an error occurs during queuing, it displays a critical message to the user.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_apply_conversation_settings_snapshot:72537fbaa25cb6279ca3a8d806518d18d62c65c87e120e99457c081d000f0a15:d1c47d38e12734d040804a78cabd21c362cdc66f4ed9aafc121efa8ae634a94d": "The function `_apply_conversation_settings_snapshot` updates conversation settings based on a provided snapshot dictionary. It processes values for reasoning verbosity, plan visibility, assumption visibility, sources-only mode, answer length, and model name. For each setting, it resolves the value to its appropriate enumerated type if necessary, and applies the setting only if it differs from the current configuration. The function also configures the LMStudio client with the specified model name.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_apply_density:b6a77d621560309cc8b437a57971e5b6bf7d8267316e096ab646a234b55f61d1:a61d136f2982a5d74f8d77797bacc3c62f7b13f5bc73c2de63925495b3bd923f": "The function `_apply_density` adjusts the spacing and layout density of UI elements in the `MainWindow` based on a specified density mode. It retrieves the density setting from the provided argument or falls back to a default value from the settings service, normalizing it to lowercase. Depending on whether the mode is \"compact\" or not, it sets the spacing for layouts within widgets managed by a splitter. It also updates the density settings for the answer view, evidence panel, and question input components.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_apply_font_scale:ebff75b67551da87fa79a599817c83cde97fc0baa3df67e6f33b731c222c6a39:4d31cdc9dda623ad6187f00ed5fbf8b8611e1641d1ee7c74bbd9ec41ea3c65ac": "The function `_apply_font_scale` applies a font scale adjustment using the `settings_service` instance, invoking its `apply_font_scale` method to update the interface's font scaling based on the provided scale factor.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_apply_ingest_results:8de92bfc1465bb29874c289ddcd3072717124a57bf9010fcce646018b994549e:68de4d2d312c028f561695e2576cf4a4bdca7cf7c80ca761d12db3fcb74b0a77": "The function `_apply_ingest_results` processes the results of a document ingestion job. It retrieves the project ID from the job information and, if valid, extracts summary data including known files and removed items. It synchronizes the document list with the known files and updates the corpus view and actions. The function then attempts to export a database snapshot for the project and stores the snapshot path in the project sessions. If the snapshot export fails, an error is logged.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_apply_splitter_preferences:ca9fd9133c7136ea5c003a6bdfbc048f66d8daf10dfeca0de4e526b44e249ee3:919267b111d36f3257889cf7bfc12a59899f04c048830da38197e917d6331cb3": "The function `_apply_splitter_preferences` configures the layout and visibility of panels within the main window based on saved settings. It adjusts the splitter sizes if valid size data is available, ensures minimum size constraints are met, and updates the visibility of the corpus and evidence panels accordingly. Additionally, it synchronizes the checked state of corresponding menu actions with the current panel visibility settings, temporarily blocking signal handling to prevent recursive updates.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_apply_theme:e7787a6b04c8eabfdaf34225b6990ae85589393b396c8b10f465ac85608892f5:99702bbd0993f99ca06e5b981ffb798fce21367183a1425baf6f00ab629c7201": "The function `_apply_theme` applies a specified theme by calling the `apply_theme()` method from the `settings_service` and displays a toast message indicating the theme change.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_ask_question:856264c079cd1abd2802c84216b7212ce52e8ee8f7bdbf7d38092efc9b9a3298:dfd1e3598128db08d1da09e3f6996378d0f86a9f828975c7c7f26df912790a00": "The function `_ask_question` handles the process of submitting a user question to an AI language model via the `ConversationManager`. It first checks if the input is valid and if the LMStudio client is connected. If not connected, it notifies the user and exits. If connected, it updates the session state, sets the UI to busy, and initiates a progress indicator. It then builds the necessary context and options for the AI request, sends the question using the conversation manager, and handles potential errors such as connection issues. Upon successful response, it records timing and token usage data, appends the turn to the conversation history, updates the UI with the new answer and evidence, and finalizes the progress indicator. The function supports both scope-triggered evidence refresh and regular question submission modes.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_build_default_export_path:46053fcbae9f74c358bdd51e1a75de33681254c31e8285de644e2e3720a393dd:49a7fcac9b24ff08f034e75e62d276478d85a1f22a8878023d47d8c4986ecc00": "The function `_build_default_export_path` constructs a file path for exporting data related to the active project. It retrieves the active project, sanitizes its name to create a URL-safe slug, and uses the project's storage location or the default storage root to determine the base directory. The resulting path combines the base directory, the sanitized project name (with a specified suffix), and returns it as a string.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_build_extra_request_options:eb98b924f164df7cf98800bff4a4a5dc0e1697c168a78949bc3e544a428c4620:cb39b4bcfc6132fc7a5bc310a4e1247fd7a6db3df59c17122be212f386b1183d": "The function `_build_extra_request_options` constructs and returns a dictionary of options for use in a request, based on the current retrieval scope and provided parameters. It incorporates a query string from the input `question`, along with lists of included and excluded items derived from the current retrieval scope. If `retrieval_documents` is provided, it is also added to the options. The resulting dictionary contains a nested `retrieval` object with these components, only included in the final output if any retrieval data is present.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_build_step_context_provider:3b782fa9c0b7c18debbeda764d066dcc95199bddab8c5cc8df82e2c51e7bae01:68054c5da3608d380f8b61bb8b9c99bf871f52b51390ac8473575d1ff299ee21": "The function `_build_step_context_provider` constructs and returns a callable that generates context batches for a given plan item during a step in a process. It takes a question string as input and prepares a context provider function tailored to the current project and retrieval scope. The provider function retrieves relevant records based on a combined query of the original question and the step's description, then organizes these records into chunks and converts them into `StepContextBatch` objects containing snippets and document references. If no active project is found, it returns an empty iterable. The context provider is designed to support retrieval-augmented generation (RAG) by limiting the number of retrieved records and chunking them for processing.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_chunk_records:1674b58a4c1d28252c54f90cc33cf01d830781b6d67c5496dfb7f0deec16d72e:3451e5e50756429cde7adbeeddec01683e1b7b1c44928decb28ed7bb40c7c4db": "The function `_chunk_records` takes an iterable of dictionaries and a chunk size, then yields lists of dictionaries up to the specified chunk size. If the total number of records is not evenly divisible by the chunk size, the final yielded list contains the remaining records.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_configure_question_settings_menu:c3f7c98cbf0aeeed067276e4ae0a62e990aef89fc40850ea8aecb56fcc0b3ad3:36ea9b127a3ca203401938c5db4522f2d1f7891ebcde3c0d8b4164cef0ef5b20": "The function `_configure_question_settings_menu` creates and configures a context menu for adjusting response settings within the application's question input widget. It generates a menu titled \"Response settings\" with a sub-menu for selecting answer length presets, each represented as a checkable action tied to an `AnswerLength` enum. The currently selected answer length is checked in the menu. A signal connection is established to handle changes in answer length selection. The menu also includes an option to set the language model, which triggers a prompt for model selection. Finally, the constructed menu is assigned to the question input widget, and the state of the answer length actions is synchronized with the current conversation settings.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_connect_services:a195d58d89757b209d47d88f33dc3638aa3a0e7e755b111cf2bd112de9f5533f:294871887118a356ddadd258529c58b48302ed49597e72bb313cd35cc579cb56": "The `_connect_services` method establishes signal-slot connections between various service objects and corresponding handler methods within the `MainWindow` class. It links theme, font scale, and density changes from the `settings_service` to UI update functions. Additionally, it connects progress tracking signals from `progress_service` to handlers for starting, updating, and finishing progress events, as well as displaying toast notifications. The method also connects change signals from `conversation_settings` related to reasoning verbosity, plan visibility, assumption visibility, sources-only mode, answer length, and model selection to appropriate handler methods for persisting settings and managing UI updates.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_context_payload_from_records:9528c50fc782c5d2fa33b3b729a1479677e561803005efc174db39bd5be37beb:a50ec92a7b4acbbeac7a4001f8c8a715c19a09ffcb8f71c896780e93f0071009": "The function `_context_payload_from_records` processes an iterable of record dictionaries to generate two outputs: a list of formatted text snippets and a list of document payloads. Each record is expected to contain information about a document, chunk, context text, and related metadata. The function extracts and formats the context text with a title and identifier, constructs a snippet header, and appends the formatted text to the `snippets` list. For each record, it also builds a structured payload dictionary (`retrieval_documents`) containing identifiers, text, project ID, and various optional fields such as score, path, document ID, chunk details, and highlight information. The function supports optional step indexing for organizing context within a sequence and handles cases where required fields may be missing or invalid by providing fallbacks. It returns the constructed `snippets` and `retrieval_documents` as a tuple.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_copy_chat_text:696af289532def52b3d328d46db5287ab02c7e978be855b684553c63baf8d494:ef143e1bb8d02f0db305104137d20ec961a4d837aa3510a46ebbe0fd3a0a7472": "The function `_copy_chat_text` copies the plain text content of the `answer_view` widget to the system clipboard and displays a notification indicating that the conversation has been copied.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_create_actions:89f8fadcfa470ff4d4011d9b0ae2cfec3bc494909bb0456454db6a72070f862a:bf3116c49275bb941309b36ed7156d81b59412f58245d0508023525b08efa9e0": "The `_create_actions` method initializes and configures a set of QAction objects for the MainWindow class, defining menu items for various application functions. These actions include settings, help, theme toggling, project management (new, rename, delete, reveal storage, remove data), backup and restore operations, conversation export (Markdown, HTML), snippet export, and corpus management (add folders/files, rescan). Each action is connected to a corresponding handler method within the class, with some actions initially disabled until specific conditions are met. The method sets up the foundational UI actions for project lifecycle management, data handling, user interface customization, and corpus maintenance.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_create_backup:13eef66d078f9c727361dde5b52f6a0c71ae665f7ca9ddd745cb4b381f28ad69:009b40c1c292f1594f9cc0f2ccc5760d2e9597fce4156379c55dc6a5764e0b0a": "The `_create_backup` function in the `MainWindow` class provides functionality to create a backup of the application's data by saving it as a ZIP archive. It prompts the user to select a file path using a dialog, and if a path is provided, it attempts to create the backup using the `backup_service`. If the operation fails, an error message is displayed. On success, a toast notification confirms the backup location.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_create_conversation_controls:ea1cb9f132813a710f70de37face9c5a3d60e08687b595576ceb2a9ac92a35d1:6a42066109f1796a6edb0d7244c69a6c84dc8edef61514e23edf460e06415301": "The function `_create_conversation_controls` creates a UI frame containing controls for managing conversation settings within the `MainWindow` class. It includes a combo box for selecting reasoning verbosity, checkboxes for toggling the display of plan and assumptions, and a checkbox for enabling sources-only mode. The layout is horizontal with specific spacing and margins, and connections are established between UI elements and corresponding setter methods in `conversation_settings`. Signal-slot connections are also set up to synchronize the state of these controls with the settings object.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_create_layout:6258780e288d8e98e9c7de897d2328faeb345b9acc8161f2cb70780700363803:6712408b66662ba102834a8259e34cee96237cf03a606f8d54ccfd105efd6982": "The `_create_layout` method defines the primary user interface layout for the `MainWindow` class using Qt widgets. It establishes a horizontal splitter with three main panels: a left corpus panel for managing document ingestion and indexing, a center chat panel for conversation handling and question input, and a right evidence panel for displaying search results and citations. The method configures widget properties including object names, spacing, margins, and signal-slot connections for UI interactions such as collapsing the corpus panel, adding folders or files, rescanning indexed folders, and managing conversation controls. It also sets up keyboard shortcuts and applies splitter preferences for panel resizing.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_create_menus_and_toolbar:9ee07894dcdbd796e55e35d8ce890a490e3f176f96d090d6c6c77368ac53cafb:fa8f78546d0a7a1cf3afa2376f7f7a890cba9324b6973e5ea3b22f5cdfd6e836": "The function `_create_menus_and_toolbar` initializes and configures the main menu bar and toolbar for the `MainWindow` class. It creates a file menu with actions for project management (new, rename, delete, remove), corpus operations (add folder, add files, rescan), export options (Markdown, HTML, snippet), and backup/restore functionality. A help menu is added with a help action. A view menu is created to toggle corpus and evidence panels, as well as adjust layout density (comfortable or compact). A toolbar is constructed with actions for settings, help, theme toggling, project switching via a combo box, and quick access to new project, add folder, and backup actions. The toolbar is added to the main window.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_create_status_bar:1bdb63c89a12bd65a5bf5787fe15725899554f80846be5136b131d9c83b8a329:e3aa5c04f179c52793cbdc8cb391b8aae8ff050064c4b03c766e1de2b70940b9": "The function `_create_status_bar` creates and configures a status bar for the main window. It initializes a `QStatusBar` instance, sets it as the window's status bar, adds a label displaying project information, and includes a progress bar that is initially hidden and constrained to a maximum width of 200 pixels. The progress bar is added as a permanent widget to the status bar.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_delete_current_project:72a3d31247f6023390596925bba3bec3a23521d0913a5bcaab0a9162407e30c1:20e606e4c63536b7bf137a6fa328f4f98085ec9e5b8f89a280b07bf1b85473dc": "The function `_delete_current_project` handles the deletion of the currently active project within the `MainWindow` class. It first retrieves the active project and identifies alternative projects available for selection. If no alternatives exist, it informs the user to create another project before deleting the current one. Otherwise, it prompts the user with a confirmation dialog to proceed with the deletion. If confirmed, the function stores the current session, switches the active project to an alternative, deletes the original project, removes its session data, and displays a toast notification indicating the project has been deleted.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_drain_ingest_updates:035b7d073f28dae2206af2a6112e49805df729cde050e046e2fa9e3dfc82dfd2:aa0bca63a5345a596ced29c4a1fde23b74a8999140bdaef7a642bea159e7732a": "The function `_drain_ingest_updates` processes all available ingest updates from a queue by repeatedly retrieving items without blocking. It iterates through the queue, extracting job IDs and payloads, and delegates handling of each update to the `_handle_ingest_update` method until the queue is empty.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_enqueue_ingest_update:5fe2277daaea8ba0ce78431b94d2b3565edf54c4e927b1f922640ff35c11e65c:5839ffc9715b40e5832907cbe5336dace9e1955d0ad973f3e679781f9456c229": "The function `_enqueue_ingest_update` adds an ingest update task to a queue. It takes a `job_id` and a `payload` dictionary as input, and places them as a tuple into the `_ingest_updates` queue for later processing. This method is used to manage asynchronous ingest operations within the application.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_export_conversation_html:4d3e1f874588c0dd334ae35eec8500a44052ca36a67d032e2aff8366adc6bc11:648c35a52b867a4a53c13dbf400806bde1d922385cd00415b8bbd6d47343210c": "The function `_export_conversation_html` provides functionality to export the current conversation history to an HTML file. It first checks if there is a conversation available for export; if not, it shows an information message. It then retrieves the active project and constructs a default export path. A file dialog is opened to allow the user to select the destination and filename for the export. If a path is selected, it calls the `export_conversation_html` method from the export service to generate the HTML file with the conversation data and metadata. In case of an error during the export process, it displays a critical message to the user. On successful export, it shows a toast notification indicating that the conversation has been exported.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_export_conversation_markdown:4e2ede4dfa43180bad4c7b3f635c25f81a57a83764b1d6b9f158f6870910fd4a:c13ec5aceb2505fa0dd0aa585c448ee8bfcb0d521e01055e354e4c98f16c2fff": "The function `_export_conversation_markdown` exports the current conversation turns to a Markdown file. It first checks if there are any conversation turns available; if not, it shows an information message. It then prompts the user to select a save location using a file dialog, defaulting to a path based on the active project name. If a path is selected, it calls the export service to write the conversation data into a Markdown file with a specified title and metadata. In case of an exception during the export process, it displays a critical error message. On successful export, it shows a toast notification indicating the completion of the export operation.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_export_selected_snippet:110a27acefda8ffaa70ce58bcf4a991d919f46cb8b1e9335228da8e68141c1cf:b6952551920268edd978245025022d4ec1b9cc8dd00a3537f2834e388b8de90e": "The function `_export_selected_snippet` exports the currently selected evidence snippet from the application's UI. It retrieves the selected record from the evidence panel, prompts the user to choose a file path for saving the export, and then uses an export service to write the snippet's label, HTML content, and metadata into a text file. If no record is selected, it shows an information message. If the export fails, it displays a critical error message. On successful export, it shows a toast notification confirming the action.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_extract_token_usage:14db215a15d433e9e4a70b5ffdd3a5a9427d12dc5867c9a13aec797a5638cf0b:c1e259a93ceaaaded64000cd84d3745726c696dde1a1e226db009455b34bebc6": "The function `_extract_token_usage` extracts token usage information from a `ConversationTurn` object's raw response. It retrieves the `usage` dictionary from the response, validates its type, and attempts to parse each key-value pair into integers. If successful, it returns a dictionary mapping usage keys to their integer values; otherwise, it returns `None`.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_fade_out:d4d56512976333a8b9e4fa835d5ea706c6ad08a127194791ee48dc1f97b57d47:a93ace731a66e9ad71698694c404ad6840a96a2ff55d16b3820079c377393c3b": "The `_fade_out` method initiates a fade-out animation for the toast widget by stopping any ongoing animation, setting up a property animation to transition the widget's opacity from fully opaque (1.0) to fully transparent (0.0), and connecting the animation's finished signal to the widget's `hide` method. It includes error handling to disconnect the finished signal if already connected, ensuring the widget is hidden upon completion of the fade-out effect.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_focus_corpus:644d8e9c5f2279ddee1165d62b3e5c1af90b0f33aebed509596cf2bc24d51e65:35be5b6dea10e1b09447c0976c54f98211cf7643d4f48103ae5ff45b5bd5bcf3": "The function `_focus_corpus` sets the focus to the corpus tree widget within the main window interface.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_focus_tree_by_path:f3904f4690925164cbc2c8636acafadb4dff7e1e8f6d43a011c2e19ffc9c0644:2e3b78abc0f965b9cde3176c008438c47536e4ab580c9349b64651fc052b18e3": "The function `_focus_tree_by_path` navigates and focuses a specific item in a corpus tree widget (`_corpus_tree`) based on a provided file path. It recursively searches the tree for an item whose tooltip matches the given path. When found, it expands all parent items to ensure visibility, sets the item as current, and scrolls to its position within the tree view. The function uses a helper nested function `visit` to perform the recursive traversal of the tree structure. If the target path is not found, the function returns without making changes.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_handle_ask:f74ccb740987f96059b76bb47bac4ded46ae16056151ed667e25cb0bf0b4612b:f1409bd35505d3ee4611f35da02d002334c0be63578d89ff97aea41562e93cf2": "The function `_handle_ask` processes a user's question input by first checking if the input text is empty and returning early if so. It then checks the connection state of the conversation manager. If the LMStudio client is not connected, it updates the UI to reflect the prerequisite requirements, notifies the user of the connection issue, and returns without proceeding. If the client is connected, it marks the question input as busy and triggers the actual question-answering process while indicating that the action was not triggered by a scope-specific context.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_handle_ingest_update:fb92516c22745a80b14690385c6be9b99f0bef2d331a95336e766227c0fa64c9:76d55e9cc8e497f48dd1f2203186e993e850a7ed8b09ceb6e07923842c823167": "The function `_handle_ingest_update` processes updates for document ingestion tasks. It retrieves job information based on a job ID, and depending on the task status (running, paused, completed, cancelled, or failed), it updates the progress service with relevant messages and progress indicators. For running tasks, it displays processing progress; for paused tasks, it shows a paused message. Upon completion, cancellation, or failure, it finalizes the task in the progress service, applies results, and shows toast notifications with details or errors. The job is removed from the tracked ingest jobs upon completion or failure.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_ingest_file_filter_spec:57288fab2460ab9428d5d9a34b2403bfe537fbc2fbb82987b4af1aa691bcc879:944cc5c6946ddba1905566a1767e78d2e128dd792cf07057485043ed06700e92": "The function `_ingest_file_filter_spec` constructs a file filter string for use in file dialogs, specifying the document types that can be ingested. It retrieves include patterns from `_ingest_include_patterns`, formats them into a space-separated string, and combines them with a generic \"All Files\" option to create a filter specification suitable for Qt file dialog interfaces.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_ingest_include_patterns:58fbf493ca3099483f2336cf0ae4ddb75e8b01a5ab5f1b7fbb47268aca18066c:4dd938412ce310717f75d46c158999f038c4138d55bd00d6c64c0a3aea7f7a05": "The function `_ingest_include_patterns` returns a list of supported file patterns for document ingestion. It retrieves these patterns from the `SUPPORTED_PATTERNS` constant and converts them into a list. This list is used to determine which file types can be included during the corpus management process, such as when crawling folders or rescanning files for ingestion. The function does not accept any parameters and directly returns the static set of supported file patterns.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_initialise_project_state:c85ca2777e514062a8fea4ef972aad38f740adbcc60c79245a34c80c76afe503:1eefebc167fdbe0fc0661e4e4e28be691719d73ad131ce8c3ad2a48dbbf260e5": "The function `_initialise_project_state` initializes the project state by refreshing the project selector and loading the session for the currently active project. It retrieves the active project using `self.project_service.active_project()`, extracts its ID, and calls `self._load_project_session()` with that ID to restore the project's session data.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_load_project_session:b692eac70dec3aa179a8b999cf741571cdc18daca87fb3dce36ced0698270ef0:100166b06e35083fcaefc79d0e0622f1dfade66f29c4d5928f9e5105effdab29": "The function `_load_project_session` loads and initializes the conversation session for a specified project. It retrieves the session data associated with the given `project_id`, creates a new session if one does not exist, and populates the UI with conversation history, settings, and retrieval scope. The function updates the answer view with previous turns, sets up the current retrieval scope based on include/exclude filters, and restores the last question asked. It also handles citation display in the evidence panel, enables or disables export actions based on selected evidence, and refreshes the corpus view and actions. The conversation settings snapshot is applied to configure the session state, ensuring that the UI reflects the saved state of the project's interaction history.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_on_active_project_changed:768d404ab8018139fff2ff1df64598052c61668ac67bc570e207e195500febc8:d4b82f3cd8774ae060f35a22547cb9d7117a63891aba4ea25cbf1264c2217038": "The function `_on_active_project_changed` is triggered when the active project in the application is changed. It updates the project selector UI element, initializes a new `SearchService` instance using components from the `project_service`, and loads the session data associated with the newly selected project based on its ID.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_on_answer_length_action_triggered:881dbebc81cc59472b7eb5ff36c32d442ced76ad2fcdfcd572d254631035b45e:924e418d6bb2a6f4582cbddb8c36daf07d3910d205e792cfe1e59e366fd214a0": "The function `_on_answer_length_action_triggered` is triggered when a user selects an answer length preset from a menu action. It retrieves the preset data from the action, checks if it is of type `AnswerLength`, and if so, updates the conversation settings with the selected answer length. This allows users to configure the length of AI-generated responses through the graphical interface.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_on_answer_length_changed:a435ee58d9c8e9c5798f8d5f0f9b61788203be9cb7a88f6daab73a749e724686:7594a725e73412385dd185c12afe5e0fba6efb0e800196dbd17a4a96927101df": "The function `_on_answer_length_changed` updates the answer length setting in the question input field and synchronizes the corresponding UI actions when an `AnswerLength` preset is provided. It also persists the updated conversation settings.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_on_card_citation:821987356071e2eda512000be90b1147ac94862ea9040c4a6248b9527b77cce6:a9b0c4d7ac04c02fc23ce0e13d95cb886f06d16ee1712980dddb322f52480ae1": "The function `_on_card_citation` handles the event when a citation within a `TurnCardWidget` is interacted with. It updates the active card reference, sets the evidence panel to display citations from the clicked card's turn, updates the current retrieval scope, highlights the specific citation in the answer view, and selects the corresponding index in the evidence panel.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_on_connection_state_changed:6ed94ba6ca6ff34f17d6e5c107057105926e369cc8d1c3387885a4b0bac6f763:0163747245f1e29c9d53d1286d4a64e0fc230e4f4b8bf7c79e2d5b009b0ab5af": "The function `_on_connection_state_changed` updates the user interface based on the connection state with LMStudio. It sets the connection state in the question input widget, displays a message in the status bar indicating the connection status or an unavailable message if not connected, and updates the prerequisites for submitting questions.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_on_copy_evidence_snippet:fff89fab58a7cfbc10a9b6832bd7a97fa12e43b560b2387141542e53a5d3de2f:e22053bb2242e08bf7e2770686d428ed121f5d7ac6aa1e85336d0e26a3bf45f8": "The function `_on_copy_evidence_snippet` copies a provided text snippet to the system clipboard and displays a notification indicating that the snippet has been copied. It first checks if the snippet is empty, and if so, returns without performing any action. Otherwise, it sets the clipboard content to the snippet and triggers a progress notification with the message \"Evidence snippet copied\", an info level, and a duration of 1800 milliseconds.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_on_density_action_triggered:a360a46f3da340682c12e2406ba283f31dac56f40ead6ede6d7c9baff1fba040:381146f3837b8fbbaa4a87cab82c16af7aaf259f774d6f3ff1753d12e8baeb28": "The function `_on_density_action_triggered` is called when a density-related action is triggered in the user interface. It retrieves a data value from the provided `QAction`, checks if the value is a string, and if so, sets the density setting using the `settings_service` and applies the density change by calling `_apply_density`.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_on_evidence_locate_requested:9996b7566666e486d3d44cb3161cd740193c8d0f72e2e8701020b60514c61f58:c4150da330a30dcb5176e32c86cc66af4922f4b028d83c7ab02ed411caf2a763": "The function `_on_evidence_locate_requested` handles a request to locate and focus on a specific document within the application's UI. It accepts a dictionary payload containing either a `document_id` or a `path`. If a valid `document_id` is present, it attempts to select the corresponding document in the tree view. If successful, the function returns early. Otherwise, if a `path` is provided, it focuses the tree view on the specified path. The function ensures that the UI updates to reflect the location of the requested document or file.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_on_evidence_scope_changed:a814a7d87b55622a384ddaf3165a4afdf71c578a71ba98c7b57b2fe32aae2848:ad6b6f790bb4d5adb4213184535f355633f2270a1bfcd293d0e22dfaed782c9a": "The function `_on_evidence_scope_changed` updates the current retrieval scope based on included and excluded tags, then updates the session with this new scope, refreshes the scope chip display, and re-executes the last question if one exists, ensuring the question is asked within the updated scope.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_on_evidence_selected:e51466f01ef0cf38ea2eb787c3eb50c68d6e426f794d5645aff3a2bbc57b992a:13b4be6b148bea44d89bc1dfa83c51cf74b90c2af69f52967aac985b335430d1": "The function `_on_evidence_selected` handles the selection of an evidence item in the user interface. When an evidence item is selected, it highlights the corresponding citation in the answer view and enables or disables the export snippet action based on whether a valid index is provided. If there is no active card, the function returns without performing any actions.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_on_model_changed:ed87de377199032b29a01c33f4952991ea1d2aef129787867e43dbcfe108e9de:a1e4a370ba2ba080b589473ea6aba3b44b15785c605ddcb742d9f389acb6d703": "The function `_on_model_changed` is triggered when the selected language model is updated. It takes a model name as input, cleans the string by stripping whitespace, and if the name is not empty, it configures the `lmstudio_client` with the new model, updates the question input field to reflect the new model name, and persists the updated conversation settings.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_on_progress_finished:6e1942545331b315b4ab53f2d0cc255f6ed93b3b8dcd7769bb66db3aa382671c:86af31539b72644fb20b21962edffba842565b393ffa55a77e880f6dc2b1821c": "The function `_on_progress_finished` handles the completion of a progress update by displaying an optional message in the status bar for 3 seconds and hiding the progress bar.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_on_progress_started:ff9f89d6c948dced83520c33ff59870dbb0463d7e506a2d5aff17882cf052c2d:1159a6b1ba91d70587594c47f333fdc9d4ffe3e9844777252960342e47a63ca9": "The function `_on_progress_started` updates the UI progress bar based on a `ProgressUpdate` object. It sets the progress bar's format, range, and value according to the update's properties, and makes the progress bar visible. The range is set to indeterminate (0-0) if the update indicates an indeterminate progress, otherwise it is set to 0-100. The value is updated to the percentage specified in the update, or to 0 if no percentage is provided. The message from the update is used as the format string, defaulting to \"Working...\" if no message is present.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_on_progress_updated:72a9fb809ffc7dbdc109dcbdd442dc6be3e6b053e87d937bcc89b30f13e904e7:2efc1309edafdd50917b5bcbf7c7926e40416c8bbff4480e480ba68b5736549f": "The function `_on_progress_updated` updates the progress bar in the main window based on a `ProgressUpdate` object. It sets the progress bar's format to the message provided in the update, adjusts the range to indeterminate mode if specified, or sets a determinate range with a percentage value clamped between 0 and 100.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_on_project_combo_changed:43bf94351522cd57d35181c9e46ea844e66d7cbd34876c36632360bd2eabf07c:ebc927a31efd6155d64b3acf119198b5fbf2f040ade2055ed2f4cfccd97b1b9d": "The function `_on_project_combo_changed` handles the event when the selected item in a project combo box is changed. It retrieves the project ID from the combo box, checks if it is valid and different from the currently active project, and updates the active project if necessary. It also stores the current session before switching to the new project.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_on_projects_changed:0faeb9821142f3898f1161ab4f7ab4fae219e8c62e3ba6af6a4834e6864794dc:296b58be61c8aed248a7aa3a27a31b6938e7a0e854d5891aa26c4175c51710a2": "The function `_on_projects_changed` is triggered when the list of projects is modified. It calls `_refresh_project_selector()` to update the project selection interface element.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_on_reasoning_verbosity_changed:601c0d2a1979c8630d5fd013b45b9da451727527219d80916d923cfb7482e7f1:dfe0ed9798ddc5ae4d1347101392b8bf4ef245a441499101088008a004cbcf2a": "The function `_on_reasoning_verbosity_changed` is triggered when the user selects a new verbosity level from a combo box widget. It retrieves the selected data associated with the combo box item, checks if the data is of type `ReasoningVerbosity`, and updates the conversation settings with the newly selected verbosity level. This allows dynamic adjustment of the reasoning verbosity in the application's conversation settings.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_on_scope_chip_cleared:42975a84111ef2797deff9d8400a2a2092af6ad521f375c6773216c276a8a440:d02647d7642e739830da3b75c7be216f95a41c70715095c489a6a5717f6611e0": "The function `_on_scope_chip_cleared` clears the current retrieval scope when all scope values are empty. It resets the scope to default empty lists, updates the session with the new scope, resets the evidence panel's scope, updates the scope chips display, and re-asks the last question if one exists, ensuring the interface reflects the cleared scope.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_on_sources_only_toggled:8c9549dff030edaa095c4c8669aedeafe0b35f92126627a6b92b056ca07bd87e:fb667dcabfc79ad09302999bb837e12ef7f1893e20f194cc0f750db5111e98ea": "The function `_on_sources_only_toggled` is a slot method that updates the conversation settings to enable or disable sources-only mode based on the boolean value provided by the `enabled` parameter. It interacts with the `conversation_settings` object to set the specified mode.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_open_help:dafeb3bb65d7a4ccff75cabb8f97e43804f3ffacc1649b8189683130a328f548:4fc8922bd00abf198c1cac0aad2bb22ccc9bc4cc05bf2492fa0b31d0ea092f75": "The function `_open_help` displays an information dialog box with the title \"Help\" and the message \"Visit the documentation for assistance.\" It is triggered by a menu action and provides the user with guidance to refer to the documentation for support. The dialog uses `QMessageBox.information` to show the message within the main window's context.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_open_settings:53e3f4afb9443a2af4ea8504bba476609ce26056c4b3a7cdc850736079c58cfc:27d0ba549bc9ce284bcbacc864cb5399d42ac0020e748dec5939e97a707e94e1": "The function `_open_settings` displays an information message box with the title \"Settings\" and the message \"Settings dialog coming soon.\" It is intended to handle the opening of a settings dialog, though the actual dialog implementation is not yet completed. The function does not return any value and is likely connected to a menu or button action within the `MainWindow` class to initiate access to application settings.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_persist_conversation_settings:542bb84003a3dec356156eb4120a718838d1a5dbd974308c668f5d858c6d1273:ad9de7a9f5e5d2b669c00d2980c0fb3e323c7eac23490b4b26f9ddd3e8d57096": "The function `_persist_conversation_settings` saves the current conversation settings for the active project. It first creates a snapshot of the conversation settings using `_snapshot_conversation_settings`, retrieves the active project ID from `self.project_service`, and then updates both the session and the project's saved conversation settings with the snapshot. This ensures that the current conversation configuration is stored persistently within the project.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_populate_corpus_tree:98aa06c1d2ce7fb782ec8e7bb0ff508f3e49d2dad24bd9bd00ba63899747c38e:ee02cf5dc9a7ba3f2733c2c19b2e22d5b8ced4fb04416ba7ff9f4967cdab2b5a": "The function `_populate_corpus_tree` recursively populates a Qt tree widget with nodes representing corpus structure and documents. It takes a parent `QTreeWidgetItem` and a dictionary node containing children and document information. For each child node, it creates a new tree item with the node's name, sets its tooltip to the path if available, and recursively calls itself to process the child's children. For each document in the node, it creates a tree item using the document's title or filename, sets the tooltip to the source path if available, and stores the document ID in the item's user role data. The function builds a hierarchical view of the corpus structure within the provided parent item.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_prepare_retrieval_context:5efc76a9e54c1541a40a8404d7ee433b288ab0ca329fec890351ea1c9e725bd9:99087844d35bd7b193b016ceb4fa6d265720ba2c81a71efd0f5c447bd31b958e": "The function `_prepare_retrieval_context` prepares the context for a retrieval operation based on a given question. It first checks if the question is empty and returns empty lists if so. It then retrieves the active project ID from the project service, catching any `RuntimeError` if no project is active. Using the current retrieval scope (or a default empty scope), it extracts include and exclude identifiers. It collects context records using the search service based on the question and the project ID, along with the include and exclude identifiers. Finally, it processes these records into a payload using `_context_payload_from_records` and returns the result as a tuple of lists.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_project_label_text:47bedbdb88041e25a404ee71e5ac54a7328395f2fc142fa52073effedd667396:c877ff5d271eeaaa1c50b5383641a43b133c2411dd9729a2775d78182743970e": "The function `_project_label_text` retrieves the version of the `DataMiner` package using `importlib.metadata.version`. If the package is not found, it defaults to version \"0.0.0\". It then returns a formatted string \"DataMiner v{version}\" representing the application's label text.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_prompt_model_name:c2b6227641a7da42ef40c71110127abb412225d02be717eb07ddd47663fc37ba:288f1a79d0e02418ca2553f9908ab18843f36cce1bff9c0357cf241c84cbd488": "The function `_prompt_model_name` displays a dialog box to allow the user to set or change the LMStudio model identifier. It retrieves the current model name from `self.conversation_settings`, shows it in an input dialog, and updates the setting with the user's input if the dialog is confirmed and the input is not empty. If the dialog is canceled or the input is empty, the function exits without making changes.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_prompt_new_project:07657f11a43b5ace7dfa3c72ea5adabdef899dc15444a0185928a24dfed20be6:2cd678ada558f579551959aaded2ea168bc54fa5a55180cace9bf514f505bb18": "The function `_prompt_new_project` prompts the user to enter a name for a new project via a dialog box. If the user provides a valid, non-empty name, it creates a new project using the `project_service`, and displays a confirmation message toast. If the dialog is canceled or the input is empty, the function exits without creating a project.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_prompt_rename_project:dc52aaf5e1c19f641801af2e1a5dc4390a93ab894638870f0ad34de79a52ae94:bd1994eb289d33d8bc9c1de781edcea79e381bd3db66496fb69ac021f7db618e": "The function `_prompt_rename_project` prompts the user to rename the currently active project. It retrieves the current project name using `self.project_service.active_project()`, displays a dialog box for input, and updates the project name in the service if the user provides a valid, non-empty name that differs from the current one. A success message is shown via `_show_toast` upon completion.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_purge_project_data:20baf4496e6f1d0defa08d5b3ec740bcf9a471330946b69c62dde3c253ed9941:0fad098f75c90eb1eee009a44dbac5844f9ca6031e0f269a1d35a1cc113ea9e4": "The function `_purge_project_data` removes all indexed data, chat history, and cached assets associated with the currently active project. It prompts the user for confirmation via a message box before proceeding. Upon confirmation, it clears the project's data using the project service, resets internal state variables related to conversation turns and UI elements, disables export actions, updates the session state, displays a notification toast, and refreshes the corpus view and actions.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_refresh_corpus_view:c922ba1c08f8eb4038b61da07b5b9f86a8a64d78ea82c9617a2bc67c17112b2d:609fa7f6d9ac3757d109088eab23b7d486e8f4a732e04cbc286870c56ffab546": "The `_refresh_corpus_view` method updates the corpus tree view in the main window. It clears the existing tree, retrieves documents for the active project, and populates the tree with a hierarchical folder structure if documents exist. If no documents are found, it displays a placeholder item and disables the tree. The method also sets the root label of the tree based on the project's corpus path or name, configures tooltips for the root item, and ensures the tree is expanded and properly sized. Finally, it updates prerequisites for question submission based on the conversation manager's connection state.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_refresh_project_selector:22f9720909e749c3917f20179cc5c6ea9374ec320d7064c9dd998edf47b134df:8820a7df78141d47f8945e2e16b28c51743722164d1aca9cf6c1a7f6d942e9bd": "The `_refresh_project_selector` method updates the project selection combo box in the main window interface. It retrieves the list of available projects from the project service, clears the existing items in the combo box, and repopulates it with project names and IDs. The method identifies the currently active project and sets it as the selected item in the combo box. After updating the combo box, it enables or disables the delete project action based on whether more than one project exists. The signals of the combo box are temporarily blocked during updates to prevent unintended triggering of events.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_register_ingest_job:f08fd1c1531489e58e9da7ea768bf1ec9e0e5b70dea3451dc9a6948482039632:d134254c72da992911edc50601d9c04dcd87c4ad1b5d415278634540d731ee35": "Registers an ingest job with the specified parameters and initiates its progress tracking. The job is stored in `_ingest_jobs` using `job_id` as the key, and its associated progress is started via `progress_service`.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_rescan_corpus:183eba0d215d61e8d5310811d3b50bc4cf9eb3149520cd4f7f9f4e76d8ff649a:75566c2ea06a516ef520e7160a74efa78a0d0ed5455260ecbc257834fabc3e03": "The `_rescan_corpus` method initiates a rescan of all indexed corpus folders within the active project. It retrieves the list of corpus roots associated with the project and checks if any are available for rescanning. If no roots exist, it displays an information message. For each root, it attempts to queue a rescan job using the ingest service, handling potential exceptions by showing a warning message. For successfully queued jobs, it registers the job with a descriptive label and updates the UI with a toast notification indicating the number of queued rescans. The method uses include patterns for filtering files during the rescan process.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_restore_backup:06c9b172109362ae669bd8d3da01518db335a145e5e72e8f580b236a9986effe:7faa326d60261b0086053e12f4034443a25cacaebd71f30776cac9141c041118": "The `_restore_backup` function in the `MainWindow` class provides functionality to restore a project backup from a ZIP archive. It opens a file dialog to allow the user to select a `.zip` file, and if a file is selected, it clears existing project sessions and attempts to restore the backup using the `backup_service`. If the restoration fails, an error message is displayed. On successful restoration, a toast notification confirms the action.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_restore_splitter_sizes:41f55842981c9ee3d069ad8c8a454482d9f0adbee470598fffc5a473ac99c7ac:518b3465582ece1b6c78c890724613ceb26b6d7c5ab58d44a4f0c0e7816efbe7": "The function `_restore_splitter_sizes` restores the splitter sizes for the main window's layout. It retrieves the last saved splitter sizes from the instance's attributes or falls back to default sizes stored in the settings service. If the splitter widget exists and valid size data is available, it applies the sizes to the splitter, ensuring each size is at least 80 pixels.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_reveal_project_storage:088eb8c58589964efde5e6c66a2e44d0488c15988349d9fb66db307e37a0a96e:5ef3ba3d24a2e3338c49bfa72c990fc9693e0760a1a6a7ad4293b26f48b18836": "The function `_reveal_project_storage` retrieves the storage path for the currently active project, ensures the directory exists by creating it if necessary, and then opens the directory in the system's default file explorer.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_select_document_in_tree:69c42933ce811c57349b7791a9ea1fa655750c918b94ac34da34383b0f55c48d:5aadbecbb5004a600808dabdc61398940dfffc599d3f8580ee51914ec75124e7": "The function `_select_document_in_tree` locates and selects a document in a corpus tree view based on its unique identifier (`document_id`). It recursively traverses the tree structure starting from the root item, checking each node's user role data to find a match. When the document is found, it expands all parent nodes to ensure visibility, sets the item as current, and scrolls to its position in the tree view. The function returns `True` if the document is successfully located and selected, otherwise `False`.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_set_lmstudio_status:874ecdc7fa82d67bf1f79d1f7331aaa6336f18c8034cb01396a263c9bb267a1a:4187eec8129271abb0b39dc82381d2a4c1b8249e84a64a74df58f44be7a223fc": "The function `_set_lmstudio_status` updates the connection state of the LMStudio client within the application's user interface. It takes a boolean parameter `healthy` to indicate the health status of the LMStudio client. If the client is not healthy, it sets an error message indicating that the health probe failed. The function then updates the UI element `question_input` with the new connection state using the `ConnectionState` class, which encapsulates both the health status and an optional message. This allows the user interface to visually reflect the connectivity status of the LMStudio client, providing feedback on whether the application can communicate with the language model service.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_set_panel_visibility:0e2db3ae778c2cd60d739149572548188f7393b32edb7fab5f5ee4a607e8a8b1:7b0d75be00ab067b45a3238f0a8e618531112bff71a03b2e169497f971d0635b": "The function `_set_panel_visibility` controls the visibility of a specific widget within a splitter layout. It takes an index corresponding to a widget in `self._splitter` and a boolean value indicating whether the widget should be visible. If the widget exists, it sets the widget's visibility based on the boolean value, calling `show()` if visible is True or `hide()` if False. If the widget does not exist, the function returns without taking action.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_setup_window:b0898533fdd56688f451ac029656ce9ef002e64ac410e7196be20ec6cd0f1981:c1391abd417304332e4d0725ab48c06d34894580d06833bcad0c0285181612f3": "The `_setup_window` function configures the main window title to \"DataMiner\" and sets its initial size to 1280 pixels in width and 800 pixels in height.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_show_toast:291804a8e5d5accc881021cd989c3773730ad6f95432c7e06bf365afb8fa121c:25cb88e72922c971bc4beae8bece9ecd0f266fc79e481b2dcd37c320082aea9f": "Displays a toast message with the specified content, level, and duration using the application's toast notification system.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_snapshot_conversation_settings:81d383eb3595918d30d83527973e93e60378f81c4eb288bcaee8d7fff2463540:6df0d1b6d81015c4fb9ea9a4efbe94a5423592a4abf66bde4e710de78283a648": "The function `_snapshot_conversation_settings` captures and returns the current configuration of conversation settings as a dictionary. It includes values for reasoning verbosity, plan visibility, assumption visibility, sources-only mode, answer length, and the selected model name, derived from the `conversation_settings` attribute of the `MainWindow` class.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_store_active_project_session:883565c427245a5d5f04bd4ae5ee6d43e22960cbfb739a27c9137f3a3ed90172:e6fa8a90b762360e6c581b0e628efac4f7cafefc4e928998fd7f1407727803bb": "The function `_store_active_project_session` saves the current state of the active project's conversation session. It retrieves the active project ID, captures a snapshot of the current conversation settings, and updates the session data with the list of conversation turns, retrieval scope, last question, and settings. It then persists the conversation settings to the project service.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_store_splitter_sizes:477450f4a155c61d66b2952713fcdcec71d016cb9020adbca34765695e3f6d00:1422be99245abbf7df01ad678f295885c7f666037a60278f5d45bd02a79097cd": "The function `_store_splitter_sizes` stores the current sizes of a splitter widget into the application's settings, but only if the splitter has three sections and at least one section has a non-zero size. It retrieves the sizes from `self._splitter`, checks that there are exactly three sizes, and ensures that not all sizes are zero. If these conditions are met, it saves the sizes to `self._last_splitter_sizes` and persists them via `self.settings_service.set_splitter_sizes(sizes)`. The function returns early if the splitter does not exist or is not properly initialized.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_sync_answer_length_actions:9000ae04172970ec9ec34f5ecb1582be2e1a8c7313062097b88920003b2e7e3d:c30bfbbe640f848efea08406314ab0a64ac1d64e5024b1be7eb0594660d30883": "The function `_sync_answer_length_actions` synchronizes the checked state of actions within a QActionGroup based on the provided `AnswerLength` preset. It retrieves the action group by its name, iterates through its actions, and sets the check state of each action whose data matches the specified preset. This ensures that the UI reflects the currently selected answer length setting.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_sync_assumptions_checkbox:deac93d8ff5f4bfdbb110b96daaf56e921a7686040e7c72d9f71bdcd6a8c2306:9b227372bb074deba9683d02bee943d7a92e8756f60d52f53534e191d8a2331a": "The function `_sync_assumptions_checkbox` synchronizes the checked state of a checkbox widget (`_assumptions_checkbox`) with a provided boolean value (`enabled`). If the current checked state of the checkbox does not match the `enabled` value, it temporarily blocks signals from the checkbox, updates its checked state, and then re-enables signal handling. This ensures that the checkbox state is updated without triggering any connected signal handlers during the update process.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_sync_documents_with_known_files:a6956a84feb83922b56bfa329636f1b20a11f1ce473ec04588bae822fc72cd5d:60e0501241b0c9c931ec81a217f35645b8ef4b5dd24d3b518ab034cb59731226": "The function `_sync_documents_with_known_files` synchronizes the list of documents stored in a project with a set of known file paths. It takes a project ID, a dictionary of known files with their metadata, and a collection of removed file paths as inputs.\n\nFor each known file:\n\nFor each removed file path:\n\nThe function ensures that the project's document list accurately reflects the current state of files in the corpus, adding new documents, updating existing ones, and removing outdated entries.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_sync_plan_checkbox:eed9c9aec2136e507527b97e572c0b0758326747105f081b7e4d690edc638980:b8a16f1e6bf11c35fdc971255fe5e6af058dece49c6c7d947057fd708a0973ec": "The function `_sync_plan_checkbox` synchronizes the checked state of a checkbox widget (`_plan_checkbox`) with a provided boolean value. If the current checked state of the checkbox does not match the specified `enabled` value, it temporarily blocks signals from the checkbox, updates its checked state, and then re-enables signal handling. This ensures that the UI state is updated without triggering any associated signal handlers during the update process.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_sync_reasoning_combo:ebf9bcded63c8831f484782bbf9a02ebaa240f3507779c806592008f289509c3:0d73dc0ebe06d132b0f558afbbd2c088dd7d9eb6f28a0efd95d99a26d168d67a": "The function `_sync_reasoning_combo` synchronizes the state of a combo box (`_verbosity_combo`) with a given `ReasoningVerbosity` value. It locates the corresponding data index in the combo box, and if found and different from the current index, updates the combo box to reflect the provided verbosity level while temporarily blocking signals to prevent recursive signal handling.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_sync_sources_checkbox:79063a98f650cca314c72b6cf7880a0438454ca51c03ed276e151595df2e5496:8e7b8cc86fd91ac765305cc26e06b32f7f76dea02b1aefe9323a9f1bb59a9e07": "The function `_sync_sources_checkbox` synchronizes the checked state of the `_sources_only_checkbox` widget to a specified boolean value. If the current state of the checkbox does not match the provided `enabled` value, it temporarily blocks signals to prevent recursive updates, sets the checkbox to the desired state, and then re-enables signal handling.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_toggle_corpus_panel:47d0fbe48578eacd1cb97a66fa7f32be3b9b1626bbe6ef966245626e6533e5ed:7e7fcba76720d2d707a7187efe5acb3bab3454b84f7a83af28a9db5868ba147c": "The function `_toggle_corpus_panel` controls the visibility of the corpus panel in the main window. When `visible` is `True`, it shows the panel by updating the settings to enable the corpus panel, making the panel visible, and restoring previous splitter sizes. When `visible` is `False`, it hides the panel by storing the current splitter sizes, setting the panel visibility to hidden, and updating the settings to disable the corpus panel.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_toggle_evidence_panel:406c73b6e4c087b0cc782b7c65774ab5a26210d5dc2a961419a313f761f2df32:48e80d75eb52b218a78c2352de871cace7f7205483f5cda0c4c9853893c83abd": "The function `_toggle_evidence_panel` controls the visibility of the evidence panel in the `MainWindow` UI. When `visible` is `True`, it enables the evidence panel by updating the settings and restoring splitter sizes. When `False`, it disables the panel by storing current splitter sizes and hiding the panel, while also updating the settings to reflect the change.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_update_corpus_actions:07255843f986d1d785dd3a7c4553f69e5272a6eec307cd1b3aada568c65ab270:2afa0eb92d7c6a547ff2439c4334a6871db41b7d276d8439ac4da170e7d91d16": "The function `_update_corpus_actions` updates the enabled state of corpus-related actions in the user interface based on whether there are corpus roots associated with the active project. It retrieves the active project ID from the project service and attempts to list the corpus roots for that project. If the project ID is invalid (raising a `RuntimeError`), it disables both the \"rescan corpus\" action and a related button, if it exists. Otherwise, it enables these actions only if there are corpus roots present. This ensures that corpus operations are only available when appropriate.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_update_evidence_panel:1b3d2e40dfb731c44d3a8e33607fe9e21a4d9709cb37738116a90dd508ea8015:951588b70d9999508739b8592ee69fb14eb187a7a93fd1f2eb30ae738535142f": "The function `_update_evidence_panel` updates the evidence panel based on the citations contained in a given `ConversationTurn`. If the turn contains no citations, it clears the evidence panel, resets the retrieval scope, updates the session with the reset scope, disables the export snippet action, and updates the scope chip. If citations are present, it populates the evidence panel with the citations, updates the current retrieval scope from the panel, notifies the session of the updated scope, enables or disables the export snippet action based on the number of evidences, updates the scope chip, and highlights the citation in the answer view.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_update_export_actions:96464d39ebe6ce00ee95ba404ff4217c79d7b142390b46caf12b3f7dbab6bd8f:4beafaf2f1e5e706452ce9fad62307a0265fcf2b1a3d4b61379510419477b9d6": "The function `_update_export_actions` enables or disables the markdown and HTML export actions in the user interface based on whether there are conversation turns available. If there are turns, the export actions are enabled; otherwise, they are disabled.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_update_lmstudio_status:99d2f6fe6f088229e25c45793baaef68f3b28601dd2de98f4b3b77e1239fe251:cbd64c274263116dd830e764c66022f10dcde96e9084cf9cae45382ee23ea549": "The function `_update_lmstudio_status` checks the health status of the LMStudio client if health monitoring is enabled. If monitoring is disabled, it displays a warning message in the question input field. Otherwise, it initiates a background thread to perform a health check on the LMStudio client and updates the UI with the result using a `QTimer` to ensure thread-safe UI updates.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_update_question_prerequisites:67ea738450d83b88e29f43b390ef7992671d60d30f91a1f00a80dfb5b4e3fed9:9aa469ea8e1baf1c7e063eeca9000dfa59ee325db5c6c711c83f0fce15385f94": "The function `_update_question_prerequisites` updates the state of the question input field based on the connection status to LMStudio and the presence of indexed documents. It takes a `ConnectionState` object as input and determines whether the prerequisites for submitting questions are met. If LMStudio is not connected, it sets an appropriate error message. If LMStudio is connected but no documents have been indexed, it also sets an error message indicating that at least one document must be indexed. The function then calls `set_prerequisites_met` on `self.question_input` to reflect the updated state and associated message.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_update_scope_chip:caec0922da9940a198e1671e1123431f3a1733768b3841812bddb921bc5f4786:19f381b25af14f543a1bb4e7faeb7838fa1547093f29285f486c7c6edfdb36f6": "The function `_update_scope_chip` updates the scope chip UI element in the question input area. It retrieves the number of included and excluded items from the current retrieval scope and passes these counts to the `update_scope_chip` method of the `question_input` widget. This allows the UI to visually reflect the active inclusion and exclusion criteria for document retrieval.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:_update_session:5be87e1ca5fb214d3de7e95509ce1e55f25587096b6fc25240e6c9c01c78934a:3404698f1a385c89ac88c9070b9dafa0e26e9c5be077daf260b252790f6e6b7f": "The function `_update_session` updates or initializes a session dictionary for a specified project ID within the `MainWindow` class. If no project ID is provided, it uses the currently active project ID from the project service. It ensures that a session entry exists for the project and updates it with the provided key-value pairs from the `fields` argument. The session data is stored in `_project_sessions`, which maps project IDs to their respective session dictionaries.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:closeEvent:abc64870b3f1eaa18df8034551a603ec88dba3b5cb7103c0af33feb22f3f3447:6a98c05f8c436917b8af8495b35b7ed06bf724f19b5cc706a6c0bc9743ba4568": "The `closeEvent` function handles the cleanup and storage operations when the main window of the application is closed. It stops health and ingest timers if they exist, unsubscribes from connection and ingest-related signals if callable, and attempts to store splitter sizes and active project session data. Finally, it delegates the closing event to the parent class's `closeEvent` method.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\main_window.py:show_message:a1ae021fb1206495290f52585606470ef6cef13ea45c7f183d5965b5e31db6e0:f55d54a273c68acb0c583c3b0930a3878a4608c59ef0ad6c5fefd8704a349df6": "The `show_message` function displays a styled tooltip message within the `ToastWidget`. It configures the widget's color palette based on the message level (error, warning, or info), sets the message text, adjusts the widget size, and positions it in the top-right corner of its parent widget. The widget is made visible with a fade-in animation and automatically fades out after a specified duration.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:QuestionInputWidget:ecde7ef834826cda6a16ce1c36fd37d61bb0d9c291e81091e60fe6db99a084a8:1fedf9d7321f39d33a4f4576129bd0dd93ff6fef5b966c680b05afe1016e8ce0": "The `QuestionInputWidget` class defines a composite Qt widget for entering questions, managing input history, and controlling associated actions like asking and clearing. It includes functionality for tracking user input, maintaining a history of entered text, and updating UI elements such as buttons and status indicators based on the widget's state. The widget emits signals when a question is submitted or cleared, and supports settings configuration, scope filtering, and connection status updates.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:_HistoryTextEdit:8d536d31da6bd7a0bcd10998742f3530c5bf07fd382f2b8848ffc14eadf64f41:281036195ce061857a4827c4580d2495b32878412d77f34fb8a80175acccf41a": "The `_HistoryTextEdit` class extends `QTextEdit` to provide specialized keyboard navigation for history management. It emits signals when specific key combinations are pressed: `submit_requested` on Ctrl+Enter, `history_previous_requested` on Up arrow when at the start of text, and `history_next_requested` on Down arrow when at the end of text. The class overrides `keyPressEvent` to intercept and handle these shortcuts while allowing other key events to propagate normally.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:__init__:c2ec06c6a4f1843df761e24d9b33a768d05498dd91628eb378a51c785338adbc:eff1a2563d2078032ce28c17827b9874c92067fcaf1cc56c568fe21b531cfe8d": "Initializes the `QuestionInputWidget` with a layout, text editor, scope button, status label, and action buttons. Sets up connections for text changes, submission, history navigation, and button interactions. Configures UI elements including placeholder text, tooltips, and visibility settings. Initializes internal state variables for history tracking, prerequisites, busy status, and model settings. Creates and arranges child widgets within vertical and horizontal layouts to structure the input interface.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:_apply_history:ce664ce79ef6d0ac924de8d8ba1c41c03263ae27c6929ad3c172ea8c18b14f96:a58422c6c9cac6a038c46b0bb8688152635c154bdc1819deb93f8b8c9124a4aa": "The `_apply_history` function in the `QuestionInputWidget` class updates the text input field with a question from the history list based on the current history index. If the index is valid, it sets the input text to the corresponding history item; otherwise, it clears the input field.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:_recall_next:84b01ce7838d8c2559236a794dee3941218aac6b4d5702170cca1d90d28196c7:b7301783c1de3af4266b26670caa05429380b59d96b6bfa188926dd7fa1210f3": "The function `_recall_next` navigates forward through the input history of the `QuestionInputWidget`. If the history is empty, it returns without action. Otherwise, it increments the history index (bounded by the history length) and applies the selected history item to the input field.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:_recall_previous:cbae9b0f5e2fb29c30deb7b979c0ef9ba3fdf139fdf55f7fbce146492c09bdfb:827eeac8c845a1632f57f11ca16399faf2b198becf1fa0c0d537307346ee0d26": "The function `_recall_previous` navigates backward through the input history stored in `self._history`. It decrements the current history index (`self._history_index`) by one, ensuring it does not go below zero, and then applies the recalled history entry using the `_apply_history` method. If the history is empty, the function returns without performing any action.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:_remember_entry:7089cbb3b342c19c84ed534217231f73108dd9fd60dfa632d2ec53ad7132d998:c2536f4f5c490e9d2a5cce0b5fb041a6639c035ca9391e4b7b5a5579b6438319": "The function `_remember_entry` stores a given text input into the widget's history list, appending it only if it is non-empty and not already the last entry. It then updates the history index to point to the end of the history list.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:_set_status_pill:271ca13cd4f8ce865d4b9ce9a375ab989a2978224ae32bda00918250e12968c4:0eb03641dabb2dc8ca48c4d32134cb3879255198bc33c5540a26d9ef8e03597d": "The function `_set_status_pill` updates the visual status indicator (`status_pill`) within the `QuestionInputWidget`. It sets the text display, visibility, tooltip, and CSS state property of the status pill based on provided parameters. The text is stripped of leading/trailing whitespace, and the widget's style is refreshed to reflect the new state.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:_trigger_ask:0ec72e9a73641fb587ef720c94bbb3ec437fd7cb33b09fbbb6785342e4941ba0:79ad5e891cde14ade460ed2083f39cebdd1eefdd7f357f3baca809cf7c0fd104": "The `_trigger_ask` method in the `QuestionInputWidget` class handles the logic for submitting a question. It first checks if the widget is in a busy state, and if so, it returns without taking action. If the text input is empty or prerequisites for submission are not met, it also returns. Otherwise, it saves the current text entry to history, clears the input field, and emits the `ask_requested` signal with the entered text.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:_update_button_state:19e3f846ba9ad1e5e797e4374f0b2002fb1d4983082ec0ffacc0f80a41dd4545:3ae5893347452165c1fd967c4ead5b2720a130fabcdb47fc7349062f4eb36d99": "The function `_update_button_state` updates the enabled state and tooltip of the `ask_button` based on three conditions: whether the widget contains text, whether prerequisites are met, and whether the widget is in a busy state. If the button is disabled due to missing prerequisites, it sets the tooltip to display the status message; otherwise, the tooltip is cleared.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:_update_settings_summary:655a26dd65011fd44e2591976ad22b650d735769c14b7f66f59ca9a670923298:c7788f7a8e2efeddba933da4d29cc4698f4b1949f5e81a820d7b9327cdd89107": "Updates the text of `settings_button` to display a formatted summary combining the current model name and answer length setting. The answer length value is converted to title case, and the model name and length are joined with a \u00b7 separator.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:clear:2e59c5f30e10395215fd59a75c0d4d5d65a983a288899e5ccff8b457d8dedd54:ea96346795a24d1d4ee3d00526df75f517e30c91c348507f175adc2cbd20a1b3": "The `clear` method clears the text content of the input editor, resets the history index to the end of the history list, updates the state of related buttons, and emits a `cleared` signal.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:keyPressEvent:d7ccf5888299db75a733d79b5d5beb38c87dbdd627a1696cb5ed82fa3d178400:e492ed60d0b22fc9de940f8470a048ea6d3dfbebcf690af0aec1fb16aa4ec07f": "The `keyPressEvent` method in the `_HistoryTextEdit` class handles specific keyboard interactions for query submission and history navigation. It emits a `submit_requested` signal when Ctrl+Enter is pressed, and emits `history_previous_requested` or `history_next_requested` signals when the Up or Down arrow keys are pressed while the cursor is at the start or end of the text, respectively. For all other key events, it delegates handling to the parent class.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:set_answer_length:f927ca76d2789a3f9090eb0030c82896dbd5c135785c55e4b8ddafdb72d1280d:0b5f1c7bef2ee098131659bd9db952b34859f8f4b6dff4b7680353397ee805eb": "The function `set_answer_length` updates the answer length setting for the `QuestionInputWidget`. It accepts an argument of type `AnswerLength`, validates its type, and checks if the new value differs from the current setting. If both checks pass, it updates the internal `_answer_length` attribute and triggers an update to the settings summary by calling `_update_settings_summary()`.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:set_busy:6d9a168582145b5a545ba53436c55f7395a69166d6c8cfd93ce4382769117ef2:347209a48af9469478f285290b9a5690af645e1b7d0f7c7e38ab6f0944b2c4fe": "The `set_busy` function updates the widget's busy state, disabling user input and interaction while an operation is in progress. It sets the editor to read-only, disables the editor and clear button, and updates the state of the submit button based on the busy status.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:set_connection_state:d782cb2eea56bd898e5742c04a6f8a50021ef7250e794d4476e3d1010f3e558f:c128a9b9e8092291730b9e5e53f3adea76d7ca5524617ec466d3ebadee299106": "The `set_connection_state` method updates the connection status UI element of the `QuestionInputWidget` based on the provided `ConnectionState`. If the connection is established, it sets a \"connected\" status pill with a tooltip indicating the connection to LMStudio. If the connection is not established, it sets either an \"error\" or \"warning\" status pill with an appropriate label and tooltip depending on whether a message is provided.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:set_density:f51abf080b2a87bfdd063f701d6912b6ae03bd4596946d0b0b6992586a05b55a:f78563b9eefc494df8b2183f8e3b0b2d6ccefddb188406ebcad89480f27ed4b9": "The `set_density` method adjusts the spacing and margins of the widget's layout based on the specified density mode (\"compact\" or otherwise). In \"compact\" mode, it sets smaller spacing and no margins; in other modes, it applies larger spacing and margins. The method modifies both the main layout and specific rows within the widget to reflect the chosen density setting.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:set_model_name:fbc0132a747cf939d2518b6ee9adf6691e9212d9e2b3328320683a7a141770ad:804bd55e79a8d620e7269877ce26326bb2ae940f0c759f434533ce7de7ad563f": "The function `set_model_name` updates the AI model name stored in the instance, ensuring that any leading or trailing whitespace is removed from the input string. If the provided name is empty or matches the currently set model name, the function returns without making changes. Otherwise, it updates the internal `_model_name` attribute and triggers an update to the settings summary by calling `_update_settings_summary()`.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:set_prerequisites_met:ad6879d79e99a1d4479c0906cc996091810ad736177f630e172675ca7cd32806:fe786c97254df6a1c66bc33d13a4ae18a6844dec0f87ada6d9507b9979ff47f7": "The function `set_prerequisites_met` updates the widget's prerequisite status and associated UI elements. It sets a boolean flag indicating whether prerequisites are met and stores an optional status message. If prerequisites are met or no message is provided, the status label is hidden. Otherwise, the message is displayed, truncated if necessary, and the label is shown. Finally, it updates the state of related buttons.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:set_settings_menu:4eb25c2b55d97668201d51ad64ff22fe1dc773c9f1107a74957aaf13c060c0d7:68ec7d18162178534e3aba6a70911e40c7a14e15be44805ab2f66f24f3b488f0": "The `set_settings_menu` function assigns a provided `QMenu` object to the internal `_settings_menu` attribute of the `QuestionInputWidget` class. It also associates this menu with the widget's `settings_button`, enabling or disabling the button based on whether the menu is `None`. If the menu is `None`, the button is disabled; otherwise, it is enabled. This function manages the UI state of the settings button in relation to the presence of a settings menu.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:set_status_message:3cc8bee1506e1718514a372667ed5c5873fad37b64204862895182d4f7b7bac8:0ada7bd5ae91cde3b9200c78bb1477c3341d68e79a9d7caddcc7c04348bb7a4b": "The function `set_status_message` updates the status message displayed in the user interface with the provided text and assigns an associated visual state based on the level. It normalizes the input level to one of several predefined states: \"info\", \"warning\", \"error\", or \"connected\". The function then calls `_set_status_pill` to apply the formatted status message and its corresponding state to the UI.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:set_text:e610026fdfd820e1e630c41cc85095d4ff9534e5416915f4d10187e5195dce50:1a6df5e3ec92d213103c6a2d82e55a8c4eaabed8139935c0b183bad2dc099d8c": "The `set_text` function updates the plain text content of an editor widget with the provided string, positions the cursor at the end of the text, and triggers an update to the state of associated buttons.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:text:68d7d0e15cd3fa895dae8c12822a8d29f9d2aebcff4e70b6b284aa044f5dde59:76ef79903d713b585b366962e723f3c959f90c8d71c3b7e97555e3a168ba3d81": "The function `text` returns the current text content from `self.editor` as a plain text string, with leading and trailing whitespace removed.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\app\\ui\\question_input_widget.py:update_scope_chip:60a99646106ad51a0c661ca129974198336372bdd16d3d079dde042b23aa4818:b0a12cf746f341c468bb1a7671a8314952f0ecfd3befb2f9527d1af110267797": "The `update_scope_chip` function updates the display of a scope filter button in the user interface based on the number of included and excluded items. If both counts are zero or less, the button is hidden and its tooltip is set to indicate the entire corpus is in scope. Otherwise, it constructs a label showing the counts of included and excluded items, updates the button's text and tooltip, and makes the button visible.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_dynamic_planning.py:StubLMStudioClient:acc33adb37481b85df788932f04cba7d27019b9129a65432cfb20319981581b1:8bcbd81f0881d3b214acc7404e8f18e3dad59b926656695b073cc1437d20e1c9": "The `StubLMStudioClient` class is a deterministic test client that records chat invocations in a list of requests. It implements a `chat` method that returns a fixed `ChatMessage` response with incremental content and citations based on the invocation order. The class also includes a `health_check` method that always returns `True`.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_dynamic_planning.py:__init__:1e33e9d12a1869a7ec38e1750916d9ec831bce3eb15f17c9bd5dca7d9db0c03e:fd632b2d184f7bd63422e67d50c0e95e66680495f02a7b839b18508a244f1dff": "Initializes an instance of `StubLMStudioClient` with an empty list to store request data. The `requests` attribute is a list of dictionaries, where each dictionary represents a stored request. This allows the client to track and simulate interactions without performing actual AI model inference.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_dynamic_planning.py:chat:dabb883cdf60416b0684ef170fbcd5b0b9e26ab1f988210aab98db9dbf2efcdd:591f8f83ea24a7f1692a6e84988d8972453cce3513c4f414bd6d7f1e1ab5c154": "The `chat` method of the `EmptyCitationClient` class records the input messages and options into an internal list named `requests`. It then returns an empty `ChatMessage` object with no content, citations, or reasoning. The method is marked to ignore type overrides, indicating it replaces functionality from a parent class.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_dynamic_planning.py:chat:e3e0695ac00b2dd8abe574bdd4f7c3bfed1080038a04c15fec5e9a907b621736:122e3d272f8570aed994e43014c1cdb7e64a2a18be80b5ca3333e052454c28f2": "The `chat` method in the `StubLMStudioClient` class simulates an AI chat response by generating a mock message based on the input messages and options. It appends the request data to an internal list of requests, constructs a placeholder response content string indicating the step number, and creates a single citation entry with a document ID, source, and snippet also reflecting the step number. The method returns a `ChatMessage` object containing the generated content, citations, no reasoning, and an empty raw response structure.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_dynamic_planning.py:health_check:26b1aafcc8a22306cf0a544db0b4915ca6e9519650101aca2a3fb475ddfe50d1:8963b1f33d9ae3ffa180873b8912eb1611acec2a3e5cc6d83d27b7dda17a0043": "The `health_check` method of the `StubLMStudioClient` class returns a boolean value indicating the health status of the client. In this stub implementation, it consistently returns `True`, simulating a healthy client without performing any actual health checks or external requests.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_lmstudio_integration.py:__enter__:530b6a2e9fa55f6ef1e4d44e7df05ccc3bf2315169e317e0f9781019fe084dcb:8291eab1c978c970e4f9d8c2cb7149391b0d20a794a626fd3a23d3954f6af520": "The `__enter__` method of the `_Response` class returns the instance itself when used in a `with` statement, enabling the class to function as a context manager.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_lmstudio_integration.py:__exit__:11e9ab22f93d50292df498f2ee8d5a353aed65795256969fa4940c0b06c38579:4076ef8284751b862f058a6c37cec0782e88d70ca5a30bc24255b876edafaa1b": "The `__exit__` method of the `_Response` class is implemented to handle exit logic for the context manager. It accepts exception parameters (`exc_type`, `exc`, `tb`) and returns `False`, indicating that exceptions should not be suppressed during the context manager's exit. This method ensures proper cleanup behavior when the `with` statement block exits, without masking any raised exceptions.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_lmstudio_integration.py:__init__:eb090f4514c938d7f68526b35723394321f6fbc6c160b791ce9a9a003d32e0b9:e1e4b667b6b1416b82ca20be6fa30168fe789628d7219630ec1a3e9792656336": "Initializes the `_Response` object with a default chat response body, encoded in UTF-8. The body is constructed using `json.dumps` and `_default_chat_response`, which generates a structured response payload, ensuring the response content is properly formatted and ready for use.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_lmstudio_integration.py:do_GET:763b280762d5dbef1b6c9f1342c5f0b434af48c9cfda7f39d402c7ddfc27a172:3cff8e2d7ff2051909b6d40f1d9acfb96be2cb805d4b308295023204fc1c4964": "The `do_GET` method handles HTTP GET requests by checking if the requested path is `/v1/health`. If so, it retrieves the health status and body from the shared `state` dictionary, sends an HTTP response with the status code and JSON-formatted body, and writes the payload to the response. For any other path, it sends a 404 Not Found response.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_lmstudio_integration.py:do_POST:d2a874e1b83585e9faf045300d80989a9a19c711c117dc97dd45db0df091200b:0d12bfb848e200e8bd7ce415bf3314f44558ba588f1830ac7d851816582edbf6": "The `do_POST` method handles POST requests by reading the request body, parsing it as JSON, and updating the shared `state` dictionary with the payload. It manages a queue of requests and responses, retrieving the most recent response from the queue or generating a new one using a template if the queue is empty. The method sends back the response as a JSON-formatted HTTP response with appropriate headers and status code.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_lmstudio_integration.py:getcode:1bf10c5012f79d6448b8665e17a36458949d3fe0fe101101fc44977aa2d06aaf:10602c443cb41999321c5dc59ad43915be1c760c120d4bda8019b7e837a92e77": "The `getcode` method is a member function of the `_Response` class that returns an integer value of `200`. This method is implemented to provide a standardized HTTP status code, indicating a successful response, consistent with the class's role as a context manager for handling HTTP-like responses. The method does not accept any parameters beyond `self` and is designed to support the interface expected by code that interacts with HTTP response objects.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_lmstudio_integration.py:log_message:2411d0d26de33cf6c8004c87656ede6bb2f32747774c84d947b84033ec574d71:16e51ad91f2925e05fc19a439f138a65051a84c6f400dd8bf640db715765a447": "The `log_message` function is a placeholder method within the `Handler` class designed to suppress logging output during testing. It accepts a format string and variable arguments but does not perform any logging actions, effectively silencing default request logs.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_lmstudio_integration.py:read:e05e6abde22370411fa15818e36e8574c1f262ffdae3f10d3cfc16b2a98d1ce1:2f2ddca4b6cd090c51d933c25b136a6ad5b6626cfb9a560a850184640914daf1": "The `read` method of the `_Response` class returns the raw byte content of the response body, which is stored in the private attribute `_body`. This method provides access to the serialized content of the HTTP-like response encapsulated by the instance.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_project_service.py:InMemoryConfig:d06c96c41c7212b38d3d25a7c33d595b195353335bf47627ea202bb2747324ee:9fe88aab71dbd0c250763cd2782584199bf8fb3c487d17f1ff445e85845ba066": "The `InMemoryConfig` class provides a simple configuration manager implementation that stores configuration data in memory as a dictionary. It supports loading configuration data by returning a deep copy of the stored data, and saving configuration data by replacing the internal storage with a deep copy of the provided data. This implementation is designed for testing purposes and does not persist data beyond the lifetime of the object.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_project_service.py:__init__:a9cf83e71ce1221889b4ce01becda2e38a402b4a0f4438788748b7fe9ef5e3ac:271d96acef2e1db34f02e830d9986079fd154817139feba8681f6a7e2da5b37c": "Initializes an instance of `InMemoryConfig` with an empty dictionary to store configuration data. The internal storage is represented by the `_data` attribute, which is initialized as a dictionary mapping string keys to objects.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_project_service.py:load:ea29df830269501a11d261250a86d61b31f9485ce8ef6a519db2f03e9bc3adc4:afa1a8fba25440a33cf1123bb9a9ae4d629b0b8c6ece9412c4dec413fed58b29": "The `load` method returns a deep copy of the internal configuration data stored in `self._data`. It achieves this by serializing the data to a JSON string and then deserializing it back into a new dictionary, ensuring that modifications to the returned dictionary do not affect the original internal state.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_project_service.py:save:d2e5ae6ee66b8d94f68ca2dc62aa96a06bd3308349b6150fd8be266fd58a7737:17dee91047994932befbdbe9f93f0365cdeb011ba5933ff66b1208aa4f45f333": "The `save` method in the `InMemoryConfig` class updates the internal configuration data by replacing the existing `_data` attribute with a deep copy of the provided dictionary. It achieves this by serializing the input dictionary to a JSON string and then deserializing it back into a new dictionary, ensuring that modifications to the original dictionary do not affect the internal state of the configuration object.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_ui_main_window.py:DummyLMStudioClient:e50889cce824aa5aa0b86ccdde3b3842cd19599f0b46ab1c909ff8eb58bc9fc6:9b91fa8f2506eecbc92a454375d9c42c4cd8960133a5d0917ea27268efdecd94": "The `DummyLMStudioClient` class is a deterministic stub designed for UI interaction testing, mimicking an LMStudio client with fixed responses. It tracks the last messages, options, and call count, and returns a consistent `ChatMessage` object with predefined reasoning, citations, and metadata on each `chat` invocation. The `health_check` method always returns `True`, indicating the client is operational.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_ui_main_window.py:__init__:33070d71720342582514145746ac53836efb740f85ab8d9651ff681694afd633:aa5e0dbcd3f237c355905e7598096b21eb00dd1854b7e3a3d11f1838482396e1": "Initializes the `DummyLMStudioClient` instance with attributes to track messages, options, call count, and the last question. The `last_messages` list stores message dictionaries, `last_options` holds the most recent options provided, `calls` counts method invocations, and `last_question` caches the latest input query.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_ui_main_window.py:chat:331660acad3a3ab3d71d29a3b57ed7fea814236e3caaadc3c49df8713ff270c7:6311123ca4e4ced453d8ea8754a5cc4428d408cf8a7e8394b4eef1be16f560d9": "The `chat` method in the `DummyLMStudioClient` class simulates a language model interaction by returning a deterministic response. It records the input messages and options, increments an internal call counter, and constructs a mock response containing reasoning steps, assumptions, self-check results, and citations. The method returns a `ChatMessage` object with the simulated content, citations, reasoning, and raw response data. The implementation does not perform any actual language model inference or network requests.",
  "REWRITE:C:\\Users\\jtpch\\Documents\\Programming\\PythonProjects\\DataMiner\\tests\\test_ui_main_window.py:health_check:a0ac60ef1d10ff5b5e25ecd105b5df3dea8b04ade3e6251bc2559f3a486b741c:a67ce42b8a4c606800288ea38671d7b00f0061581d894d57e84aa994bc27f077": "The `health_check` method of the `DummyLMStudioClient` class returns a boolean value `True`, indicating that the client is healthy or operational. This method serves as a placeholder implementation for checking the health status of the LMStudio client, simulating a successful check without requiring actual network calls or external dependencies.",
  "__progress__": {}
}